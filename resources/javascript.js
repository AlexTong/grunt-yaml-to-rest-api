/**
 * @preserve IntegraXor Web SCADA - JavaScript Number Formatter
 * http://www.integraxor.com/
 * author: KPL, KHL
 * (c)2011 ecava
 * Dual licensed under the MIT or GPL Version 2 licenses.
 */

////////////////////////////////////////////////////////////////////////////////
// param: Mask & Value
////////////////////////////////////////////////////////////////////////////////

this['formatNumber'] = function(m, v){
	var prefix, suffix;
	if (m) {
		var i1, i2, i;
		i1 = m.indexOf("#"), i2 = m.indexOf("0");
		if (i1 < 0) i1 = 0;
		if (i2 < 0) i2 = 0;
		i = i1 < i2 ? i1 : i2;
		if (i > 0) {
			prefix = m.substring(0, i);
			m = m.substring(i)
		}

		i1 = m.lastIndexOf("#"), i2 = m.lastIndexOf("0");
		i = i1 > i2 ? i1 : i2;
		if (i > 0 && i < m.length - 1) {
			suffix = m.substring(i)
			m = m.substring(0, i)
		}
	}

	if (!m || isNaN(+v)) {
		return v; //return as it is.
	}
	//convert any string to number according to formation sign.
	var v = m.charAt(0) == '-'? -v: +v;
	var isNegative = v<0? v= -v: 0; //process only abs(), and turn on flag.

	//search for separator for grp & decimal, anything not digit, not +/- sign, not #.
	var result = m.match(/[^\d\-\+#]/g);
	var Decimal = (result && result[result.length-1]) || '.'; //treat the right most symbol as decimal
	var Group = (result && result[1] && result[0]) || ',';  //treat the left most symbol as group separator

	//split the decimal for the format string if any.
	var m = m.split( Decimal);
	//Fix the decimal first, toFixed will auto fill trailing zero.
	v = v.toFixed( m[1] && m[1].length);
	v = +(v) + ''; //convert number to string to trim off *all* trailing decimal zero(es)

	//fill back any trailing zero according to format
	var pos_trail_zero = m[1] && m[1].lastIndexOf('0'); //look for last zero in format
	var part = v.split('.');
	//integer will get !part[1]
	if (!part[1] || part[1] && part[1].length <= pos_trail_zero) {
		v = (+v).toFixed( pos_trail_zero+1);
	}
	var szSep = m[0].split( Group); //look for separator
	m[0] = szSep.join(''); //join back without separator for counting the pos of any leading 0.

	var pos_lead_zero = m[0] && m[0].indexOf('0');
	if (pos_lead_zero > -1 ) {
		while (part[0].length < (m[0].length - pos_lead_zero)) {
			part[0] = '0' + part[0];
		}
	}
	else if (+part[0] == 0){
		part[0] = '';
	}

	v = v.split('.');
	v[0] = part[0];

	//process the first group separator from decimal (.) only, the rest ignore.
	//get the length of the last slice of split result.
	var pos_separator = ( szSep[1] && szSep[ szSep.length-1].length);
	if (pos_separator) {
		var integer = v[0];
		var str = '';
		var offset = integer.length % pos_separator;
		for (var i=0, l=integer.length; i<l; i++) {

			str += integer.charAt(i); //ie6 only support charAt for sz.
			//-pos_separator so that won't trail separator on full length
			if (!((i-offset+1)%pos_separator) && i<l-pos_separator ) {
				str += Group;
			}
		}
		v[0] = str;
	}

	v[1] = (m[1] && v[1])? Decimal+v[1] : "";
	return (prefix || "") + ((isNegative?'-':'') + v[0] + v[1]) + (suffix || ""); //put back any negation and combine integer and fraction.
};
/**
 * @preserve XDate v0.8
 * Docs & Licensing: http://arshaw.com/xdate/
 */

/*
 * Internal Architecture
 * ---------------------
 * An XDate wraps a native Date. The native Date is stored in the '0' property of the object.
 * UTC-mode is determined by whether the internal native Date's toString method is set to
 * Date.prototype.toUTCString (see getUTCMode).
 *
 */

var XDate = (function(Date, Math, Array, undefined) {


/** @const */ var FULLYEAR     = 0;
/** @const */ var MONTH        = 1;
/** @const */ var DATE         = 2;
/** @const */ var HOURS        = 3;
/** @const */ var MINUTES      = 4;
/** @const */ var SECONDS      = 5;
/** @const */ var MILLISECONDS = 6;
/** @const */ var DAY          = 7;
/** @const */ var YEAR         = 8;
/** @const */ var WEEK         = 9;
/** @const */ var DAY_MS = 86400000;
var ISO_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss(.fff)";
var ISO_FORMAT_STRING_TZ = ISO_FORMAT_STRING + "zzz";


var methodSubjects = [
	'FullYear',     // 0
	'Month',        // 1
	'Date',         // 2
	'Hours',        // 3
	'Minutes',      // 4
	'Seconds',      // 5
	'Milliseconds', // 6
	'Day',          // 7
	'Year'          // 8
];
var subjectPlurals = [
	'Years',        // 0
	'Months',       // 1
	'Days'          // 2
];
var unitsWithin = [
	12,   // months in year
	31,   // days in month (sort of)
	24,   // hours in day
	60,   // minutes in hour
	60,   // seconds in minute
	1000, // milliseconds in second
	1     //
];
var formatStringRE = new RegExp(
	"(([a-zA-Z])\\2*)|" + // 1, 2
	"(\\(" + "(('.*?'|\\(.*?\\)|.)*?)" + "\\))|" + // 3, 4, 5 (allows for 1 level of inner quotes or parens)
	"('(.*?)')" // 6, 7
);
var UTC = Date.UTC;
var toUTCString = Date.prototype.toUTCString;
var proto = XDate.prototype;



// This makes an XDate look pretty in Firebug and Web Inspector.
// It makes an XDate seem array-like, and displays [ <internal-date>.toString() ]
proto.length = 1;
proto.splice = Array.prototype.splice;




/* Constructor
---------------------------------------------------------------------------------*/

// TODO: in future, I'd change signature for the constructor regarding the `true` utc-mode param. ~ashaw
//   I'd move the boolean to be the *first* argument. Still optional. Seems cleaner.
//   I'd remove it from the `xdate`, `nativeDate`, and `milliseconds` constructors.
//      (because you can simply call .setUTCMode(true) after)
//   And I'd only leave it for the y/m/d/h/m/s/m and `dateString` constructors
//      (because those are the only constructors that need it for DST-gap data-loss reasons)
//   Should do this for 1.0

function XDate() {
	return init(
		(this instanceof XDate) ? this : new XDate(),
		arguments
	);
}


function init(xdate, args) {
	var len = args.length;
	var utcMode;
	if (isBoolean(args[len-1])) {
		utcMode = args[--len];
		args = slice(args, 0, len);
	}
	if (!len) {
		xdate[0] = new Date();
	}
	else if (len == 1) {
		var arg = args[0];
		if (arg instanceof Date || isNumber(arg)) {
			xdate[0] = new Date(+arg);
		}
		else if (arg instanceof XDate) {
			xdate[0] = _clone(arg);
		}
		else if (isString(arg)) {
			xdate[0] = new Date(0);
			xdate = parse(arg, utcMode || false, xdate);
		}
	}
	else {
		xdate[0] = new Date(UTC.apply(Date, args));
		if (!utcMode) {
			xdate[0] = coerceToLocal(xdate[0]);
		}
	}
	if (isBoolean(utcMode)) {
		setUTCMode(xdate, utcMode);
	}
	return xdate;
}



/* UTC Mode Methods
---------------------------------------------------------------------------------*/


proto.getUTCMode = methodize(getUTCMode);
function getUTCMode(xdate) {
	return xdate[0].toString === toUTCString;
};


proto.setUTCMode = methodize(setUTCMode);
function setUTCMode(xdate, utcMode, doCoercion) {
	if (utcMode) {
		if (!getUTCMode(xdate)) {
			if (doCoercion) {
				xdate[0] = coerceToUTC(xdate[0]);
			}
			xdate[0].toString = toUTCString;
		}
	}else{
		if (getUTCMode(xdate)) {
			if (doCoercion) {
				xdate[0] = coerceToLocal(xdate[0]);
			}else{
				xdate[0] = new Date(+xdate[0]);
			}
			// toString will have been cleared
		}
	}
	return xdate; // for chaining
}


proto.getTimezoneOffset = function() {
	if (getUTCMode(this)) {
		return 0;
	}else{
		return this[0].getTimezoneOffset();
	}
};



/* get / set / add / diff Methods (except for week-related)
---------------------------------------------------------------------------------*/


each(methodSubjects, function(subject, fieldIndex) {

	proto['get' + subject] = function() {
		return _getField(this[0], getUTCMode(this), fieldIndex);
	};
	
	if (fieldIndex != YEAR) { // because there is no getUTCYear
	
		proto['getUTC' + subject] = function() {
			return _getField(this[0], true, fieldIndex);
		};
		
	}

	if (fieldIndex != DAY) { // because there is no setDay or setUTCDay
	                         // and the add* and diff* methods use DATE instead
		
		proto['set' + subject] = function(value) {
			_set(this, fieldIndex, value, arguments, getUTCMode(this));
			return this; // for chaining
		};
		
		if (fieldIndex != YEAR) { // because there is no setUTCYear
		                          // and the add* and diff* methods use FULLYEAR instead
			
			proto['setUTC' + subject] = function(value) {
				_set(this, fieldIndex, value, arguments, true);
				return this; // for chaining
			};
			
			proto['add' + (subjectPlurals[fieldIndex] || subject)] = function(delta, preventOverflow) {
				_add(this, fieldIndex, delta, preventOverflow);
				return this; // for chaining
			};
			
			proto['diff' + (subjectPlurals[fieldIndex] || subject)] = function(otherDate) {
				return _diff(this, otherDate, fieldIndex);
			};
			
		}
		
	}

});


function _set(xdate, fieldIndex, value, args, useUTC) {
	var getField = curry(_getField, xdate[0], useUTC);
	var setField = curry(_setField, xdate[0], useUTC);
	var expectedMonth;
	var preventOverflow = false;
	if (args.length == 2 && isBoolean(args[1])) {
		preventOverflow = args[1];
		args = [ value ];
	}
	if (fieldIndex == MONTH) {
		expectedMonth = (value % 12 + 12) % 12;
	}else{
		expectedMonth = getField(MONTH);
	}
	setField(fieldIndex, args);
	if (preventOverflow && getField(MONTH) != expectedMonth) {
		setField(MONTH, [ getField(MONTH) - 1 ]);
		setField(DATE, [ getDaysInMonth(getField(FULLYEAR), getField(MONTH)) ]);
	}
}


function _add(xdate, fieldIndex, delta, preventOverflow) {
	delta = Number(delta);
	var intDelta = Math.floor(delta);
	xdate['set' + methodSubjects[fieldIndex]](
		xdate['get' + methodSubjects[fieldIndex]]() + intDelta,
		preventOverflow || false
	);
	if (intDelta != delta && fieldIndex < MILLISECONDS) {
		_add(xdate, fieldIndex+1, (delta-intDelta)*unitsWithin[fieldIndex], preventOverflow);
	}
}


function _diff(xdate1, xdate2, fieldIndex) { // fieldIndex=FULLYEAR is for years, fieldIndex=DATE is for days
	xdate1 = xdate1.clone().setUTCMode(true, true);
	xdate2 = XDate(xdate2).setUTCMode(true, true);
	var v = 0;
	if (fieldIndex == FULLYEAR || fieldIndex == MONTH) {
		for (var i=MILLISECONDS, methodName; i>=fieldIndex; i--) {
			v /= unitsWithin[i];
			v += _getField(xdate2, false, i) - _getField(xdate1, false, i);
		}
		if (fieldIndex == MONTH) {
			v += (xdate2.getFullYear() - xdate1.getFullYear()) * 12;
		}
	}
	else if (fieldIndex == DATE) {
		var clear1 = xdate1.toDate().setUTCHours(0, 0, 0, 0); // returns an ms value
		var clear2 = xdate2.toDate().setUTCHours(0, 0, 0, 0); // returns an ms value
		v = Math.round((clear2 - clear1) / DAY_MS) + ((xdate2 - clear2) - (xdate1 - clear1)) / DAY_MS;
	}
	else {
		v = (xdate2 - xdate1) / [
			3600000, // milliseconds in hour
			60000,   // milliseconds in minute
			1000,    // milliseconds in second
			1        //
			][fieldIndex - 3];
	}
	return v;
}



/* Week Methods
---------------------------------------------------------------------------------*/


proto.getWeek = function() {
	return _getWeek(curry(_getField, this, false));
};


proto.getUTCWeek = function() {
	return _getWeek(curry(_getField, this, true));
};


proto.setWeek = function(n, year) {
	_setWeek(this, n, year, false);
	return this; // for chaining
};


proto.setUTCWeek = function(n, year) {
	_setWeek(this, n, year, true);
	return this; // for chaining
};


proto.addWeeks = function(delta) {
	return this.addDays(Number(delta) * 7);
};


proto.diffWeeks = function(otherDate) {
	return _diff(this, otherDate, DATE) / 7;
};


function _getWeek(getField) {
	return getWeek(getField(FULLYEAR), getField(MONTH), getField(DATE));
}


function getWeek(year, month, date) {
	var d = new Date(UTC(year, month, date));
	var week1 = getWeek1(
		getWeekYear(year, month, date)
	);
	return Math.floor(Math.round((d - week1) / DAY_MS) / 7) + 1;
}


function getWeekYear(year, month, date) { // get the year that the date's week # belongs to
	var d = new Date(UTC(year, month, date));
	if (d < getWeek1(year)) {
		return year - 1;
	}
	else if (d >= getWeek1(year + 1)) {
		return year + 1;
	}
	return year;
}


function getWeek1(year) { // returns Date of first week of year, in UTC
	var d = new Date(UTC(year, 0, 4));
	d.setUTCDate(d.getUTCDate() - (d.getUTCDay() + 6) % 7); // make it Monday of the week
	return d;
}


function _setWeek(xdate, n, year, useUTC) {
	var getField = curry(_getField, xdate, useUTC);
	var setField = curry(_setField, xdate, useUTC);

	if (year === undefined) {
		year = getWeekYear(
			getField(FULLYEAR),
			getField(MONTH),
			getField(DATE)
		);
	}

	var week1 = getWeek1(year);
	if (!useUTC) {
		week1 = coerceToLocal(week1);
	}

	xdate.setTime(+week1);
	setField(DATE, [ getField(DATE) + (n-1) * 7 ]); // would have used xdate.addUTCWeeks :(
		// n-1 because n is 1-based
}



/* Parsing
---------------------------------------------------------------------------------*/


XDate.parsers = [
	parseISO
];


XDate.parse = function(str) {
	return +XDate(''+str);
};


function parse(str, utcMode, xdate) {
	var parsers = XDate.parsers;
	var i = 0;
	var res;
	for (; i<parsers.length; i++) {
		res = parsers[i](str, utcMode, xdate);
		if (res) {
			return res;
		}
	}
	xdate[0] = new Date(str);
	return xdate;
}


function parseISO(str, utcMode, xdate) {
	var m = str.match(/^(\d{4})(-(\d{2})(-(\d{2})([T ](\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/);
	if (m) {
		var d = new Date(UTC(
			m[1],
			m[3] ? m[3] - 1 : 0,
			m[5] || 1,
			m[7] || 0,
			m[8] || 0,
			m[10] || 0,
			m[12] ? Number('0.' + m[12]) * 1000 : 0
		));
		if (m[13]) { // has gmt offset or Z
			if (m[14]) { // has gmt offset
				d.setUTCMinutes(
					d.getUTCMinutes() +
					(m[15] == '-' ? 1 : -1) * (Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0))
				);
			}
		}else{ // no specified timezone
			if (!utcMode) {
				d = coerceToLocal(d);
			}
		}
		return xdate.setTime(+d);
	}
}



/* Formatting
---------------------------------------------------------------------------------*/


proto.toString = function(formatString, settings, uniqueness) {
	if (formatString === undefined || !valid(this)) {
		return this[0].toString(); // already accounts for utc-mode (might be toUTCString)
	}else{
		return format(this, formatString, settings, uniqueness, getUTCMode(this));
	}
};


proto.toUTCString = proto.toGMTString = function(formatString, settings, uniqueness) {
	if (formatString === undefined || !valid(this)) {
		return this[0].toUTCString();
	}else{
		return format(this, formatString, settings, uniqueness, true);
	}
};


proto.toISOString = function() {
	return this.toUTCString(ISO_FORMAT_STRING_TZ);
};


XDate.defaultLocale = '';
XDate.locales = {
	'': {
		monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December'],
		monthNamesShort: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
		dayNames: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
		dayNamesShort: ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
		amDesignator: 'AM',
		pmDesignator: 'PM'
	}
};
XDate.formatters = {
	i: ISO_FORMAT_STRING,
	u: ISO_FORMAT_STRING_TZ
};


function format(xdate, formatString, settings, uniqueness, useUTC) {

	var locales = XDate.locales;
	var defaultLocaleSettings = locales[XDate.defaultLocale] || {};
	var getField = curry(_getField, xdate, useUTC);
	
	settings = (isString(settings) ? locales[settings] : settings) || {};
	
	function getSetting(name) {
		return settings[name] || defaultLocaleSettings[name];
	}
	
	function getFieldAndTrace(fieldIndex) {
		if (uniqueness) {
			var i = (fieldIndex == DAY ? DATE : fieldIndex) - 1;
			for (; i>=0; i--) {
				uniqueness.push(getField(i));
			}
		}
		return getField(fieldIndex);
	}
	
	return _format(xdate, formatString, getFieldAndTrace, getSetting, useUTC);
}


function _format(xdate, formatString, getField, getSetting, useUTC) {
	var m;
	var subout;
	var out = '';
	while (m = formatString.match(formatStringRE)) {
		out += formatString.substr(0, m.index);
		if (m[1]) { // consecutive alphabetic characters
			out += processTokenString(xdate, m[1], getField, getSetting, useUTC);
		}
		else if (m[3]) { // parenthesis
			subout = _format(xdate, m[4], getField, getSetting, useUTC);
			if (parseInt(subout.replace(/\D/g, ''), 10)) { // if any of the numbers are non-zero. or no numbers at all
				out += subout;
			}
		}
		else { // else if (m[6]) { // single quotes
			out += m[7] || "'"; // if inner is blank, meaning 2 consecutive quotes = literal single quote
		}
		formatString = formatString.substr(m.index + m[0].length);
	}
	return out + formatString;
}


function processTokenString(xdate, tokenString, getField, getSetting, useUTC) {
	var end = tokenString.length;
	var replacement;
	var out = '';
	while (end > 0) {
		replacement = getTokenReplacement(xdate, tokenString.substr(0, end), getField, getSetting, useUTC);
		if (replacement !== undefined) {
			out += replacement;
			tokenString = tokenString.substr(end);
			end = tokenString.length;
		}else{
			end--;
		}
	}
	return out + tokenString;
}


function getTokenReplacement(xdate, token, getField, getSetting, useUTC) {
	var formatter = XDate.formatters[token];
	if (isString(formatter)) {
		return _format(xdate, formatter, getField, getSetting, useUTC);
	}
	else if (isFunction(formatter)) {
		return formatter(xdate, useUTC || false, getSetting);
	}
	switch (token) {
		case 'fff'  : return zeroPad(getField(MILLISECONDS), 3);
		case 's'    : return getField(SECONDS);
		case 'ss'   : return zeroPad(getField(SECONDS));
		case 'm'    : return getField(MINUTES);
		case 'mm'   : return zeroPad(getField(MINUTES));
		case 'h'    : return getField(HOURS) % 12 || 12;
		case 'hh'   : return zeroPad(getField(HOURS) % 12 || 12);
		case 'H'    : return getField(HOURS);
		case 'HH'   : return zeroPad(getField(HOURS));
		case 'd'    : return getField(DATE);
		case 'dd'   : return zeroPad(getField(DATE));
		case 'ddd'  : return getSetting('dayNamesShort')[getField(DAY)] || '';
		case 'dddd' : return getSetting('dayNames')[getField(DAY)] || '';
		case 'M'    : return getField(MONTH) + 1;
		case 'MM'   : return zeroPad(getField(MONTH) + 1);
		case 'MMM'  : return getSetting('monthNamesShort')[getField(MONTH)] || '';
		case 'MMMM' : return getSetting('monthNames')[getField(MONTH)] || '';
		case 'yy'   : return (getField(FULLYEAR)+'').substring(2);
		case 'yyyy' : return getField(FULLYEAR);
		case 't'    : return _getDesignator(getField, getSetting).substr(0, 1).toLowerCase();
		case 'tt'   : return _getDesignator(getField, getSetting).toLowerCase();
		case 'T'    : return _getDesignator(getField, getSetting).substr(0, 1);
		case 'TT'   : return _getDesignator(getField, getSetting);
		case 'z'    :
		case 'zz'   :
		case 'zzz'  : return useUTC ? 'Z' : _getTZString(xdate, token);
		case 'w'    : return _getWeek(getField);
		case 'ww'   : return zeroPad(_getWeek(getField));
		case 'S'    :
			var d = getField(DATE);
			if (d > 10 && d < 20) return 'th';
			return ['st', 'nd', 'rd'][d % 10 - 1] || 'th';
	}
}


function _getTZString(xdate, token) {
	var tzo = xdate.getTimezoneOffset();
	var sign = tzo < 0 ? '+' : '-';
	var hours = Math.floor(Math.abs(tzo) / 60);
	var minutes = Math.abs(tzo) % 60;
	var out = hours;
	if (token == 'zz') {
		out = zeroPad(hours);
	}
	else if (token == 'zzz') {
		out = zeroPad(hours) + ':' + zeroPad(minutes);
	}
	return sign + out;
}


function _getDesignator(getField, getSetting) {
	return getField(HOURS) < 12 ? getSetting('amDesignator') : getSetting('pmDesignator');
}



/* Misc Methods
---------------------------------------------------------------------------------*/


each(
	[ // other getters
		'getTime',
		'valueOf',
		'toDateString',
		'toTimeString',
		'toLocaleString',
		'toLocaleDateString',
		'toLocaleTimeString',
		'toJSON'
	],
	function(methodName) {
		proto[methodName] = function() {
			return this[0][methodName]();
		};
	}
);


proto.setTime = function(t) {
	this[0].setTime(t);
	return this; // for chaining
};


proto.valid = methodize(valid);
function valid(xdate) {
	return !isNaN(+xdate[0]);
}


proto.clone = function() {
	return new XDate(this);
};


proto.clearTime = function() {
	return this.setHours(0, 0, 0, 0); // will return an XDate for chaining
};


proto.toDate = function() {
	return new Date(+this[0]);
};



/* Misc Class Methods
---------------------------------------------------------------------------------*/


XDate.now = function() {
	return +new Date();
};


XDate.today = function() {
	return new XDate().clearTime();
};


XDate.UTC = UTC;


XDate.getDaysInMonth = getDaysInMonth;



/* Internal Utilities
---------------------------------------------------------------------------------*/


function _clone(xdate) { // returns the internal Date object that should be used
	var d = new Date(+xdate[0]);
	if (getUTCMode(xdate)) {
		d.toString = toUTCString;
	}
	return d;
}


function _getField(d, useUTC, fieldIndex) {
	return d['get' + (useUTC ? 'UTC' : '') + methodSubjects[fieldIndex]]();
}


function _setField(d, useUTC, fieldIndex, args) {
	d['set' + (useUTC ? 'UTC' : '') + methodSubjects[fieldIndex]].apply(d, args);
}



/* Date Math Utilities
---------------------------------------------------------------------------------*/


function coerceToUTC(date) {
	return new Date(UTC(
		date.getFullYear(),
		date.getMonth(),
		date.getDate(),
		date.getHours(),
		date.getMinutes(),
		date.getSeconds(),
		date.getMilliseconds()
	));
}


function coerceToLocal(date) {
	return new Date(
		date.getUTCFullYear(),
		date.getUTCMonth(),
		date.getUTCDate(),
		date.getUTCHours(),
		date.getUTCMinutes(),
		date.getUTCSeconds(),
		date.getUTCMilliseconds()
	);
}


function getDaysInMonth(year, month) {
	return 32 - new Date(UTC(year, month, 32)).getUTCDate();
}



/* General Utilities
---------------------------------------------------------------------------------*/


function methodize(f) {
	return function() {
		return f.apply(undefined, [this].concat(slice(arguments)));
	};
}


function curry(f) {
	var firstArgs = slice(arguments, 1);
	return function() {
		return f.apply(undefined, firstArgs.concat(slice(arguments)));
	};
}


function slice(a, start, end) {
	return Array.prototype.slice.call(
		a,
		start || 0, // start and end cannot be undefined for IE
		end===undefined ? a.length : end
	);
}


function each(a, f) {
	for (var i=0; i<a.length; i++) {
		f(a[i], i);
	};
}


function isString(arg) {
	return typeof arg == 'string';
}


function isNumber(arg) {
	return typeof arg == 'number';
}


function isBoolean(arg) {
	return typeof arg == 'boolean';
}


function isFunction(arg) {
	return typeof arg == 'function';
}


function zeroPad(n, len) {
	len = len || 2;
	n += '';
	while (n.length < len) {
		n = '0' + n;
	}
	return n;
}



// Export for Node.js
if (typeof module !== 'undefined' && module.exports) {
	module.exports = XDate;
}

// AMD
if (typeof define === 'function' && define.amd) {
	define([], function() {
		return XDate;
	});
}


return XDate;

})(Date, Math, Array);

/*
 * Swipe 2.0
 *
 * Brad Birdsall
 * Copyright 2013, MIT License
 *
 */

function Swipe(container, options) {

	"use strict";

	// utilities
	var noop = function () {
	}; // simple no operation function
	var offloadFn = function (fn) {
		setTimeout(fn || noop, 0)
	}; // offload a functions execution

	// check browser capabilities
	var browser = {
		addEventListener: !!window.addEventListener,
		touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
		transitions: (function (temp) {
			var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
			for (var i in props) if (temp.style[props[i]] !== undefined) return true;
			return false;
		})(document.createElement('swipe'))
	};

	// quit if no root element
	if (!container) return;
	var element = $fly(container).find("> .items-wrap")[0];
	var slides, slidePos, width, length;
	options = options || {};
	var index = parseInt(options.startSlide, 10) || 0;
	var speed = options.speed || 300;
	options.continuous = options.continuous !== undefined ? options.continuous : true;

	function setup() {

		// cache slides
		slides = element.children;
		length = slides.length;

		// set continuous to false if only one slide
		if (slides.length < 2) options.continuous = false;

		//special case if two slides
		if (browser.transitions && options.continuous && slides.length < 3) {
			element.appendChild(slides[0].cloneNode(true));
			element.appendChild(element.children[1].cloneNode(true));
			slides = element.children;
		}

		// create an array to store current positions of each slide
		slidePos = new Array(slides.length);

		// determine width of each slide
		width = container.getBoundingClientRect().width || container.offsetWidth;

		element.style.width = (slides.length * width) + 'px';

		// stack elements
		var pos = slides.length;
		while (pos--) {

			var slide = slides[pos];

			slide.style.width = width + 'px';
			slide.setAttribute('data-index', pos);

			if (browser.transitions) {
				slide.style.left = (pos * -width) + 'px';
				move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
			}

		}

		// reposition elements before and after index
		if (options.continuous && browser.transitions) {
			move(circle(index - 1), -width, 0);
			move(circle(index + 1), width, 0);
		}

		if (!browser.transitions) element.style.left = (index * -width) + 'px';

		container.style.visibility = 'visible';

	}

	function prev() {

		if (options.continuous) slide(index - 1);
		else if (index) slide(index - 1);

	}

	function next() {

		if (options.continuous) slide(index + 1);
		else if (index < slides.length - 1) slide(index + 1);

	}

	function circle(index) {

		// a simple positive modulo using slides.length
		return (slides.length + (index % slides.length)) % slides.length;

	}

	function slide(to, slideSpeed) {

		// do nothing if already on requested slide
		if (index == to) return;

		if (browser.transitions) {

			var direction = Math.abs(index - to) / (index - to); // 1: backward, -1: forward

			// get the actual position of the slide
			if (options.continuous) {
				var natural_direction = direction;
				direction = -slidePos[circle(to)] / width;

				// if going forward but to < index, use to = slides.length + to
				// if going backward but to > index, use to = -slides.length + to
				if (direction !== natural_direction) to = -direction * slides.length + to;

			}

			var diff = Math.abs(index - to) - 1;

			// move all the slides between index and to in the right direction
			while (diff--) move(circle((to > index ? to : index) - diff - 1), width * direction, 0);

			to = circle(to);

			move(index, width * direction, slideSpeed || speed);
			move(to, 0, slideSpeed || speed);

			if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place

		} else {

			to = circle(to);
			animate(index * -width, to * -width, slideSpeed || speed);
			//no fallback for a circular continuous if the browser does not accept transitions
		}

		index = to;
		offloadFn(options.callback && options.callback(index, slides[index]));
	}

	function move(index, dist, speed) {

		translate(index, dist, speed);
		slidePos[index] = dist;

	}

	function translate(index, dist, speed) {

		var slide = slides[index];
		var style = slide && slide.style;

		if (!style) return;

		style.webkitTransitionDuration =
			style.MozTransitionDuration =
				style.msTransitionDuration =
					style.OTransitionDuration =
						style.transitionDuration = speed + 'ms';

		style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
		style.msTransform =
			style.MozTransform =
				style.OTransform = 'translateX(' + dist + 'px)';

	}

	function animate(from, to, speed) {

		// if not an animation, just reposition
		if (!speed) {

			element.style.left = to + 'px';
			return;

		}

		var start = +new Date;

		var timer = setInterval(function () {

			var timeElap = +new Date - start;

			if (timeElap > speed) {

				element.style.left = to + 'px';

				if (delay) begin();

				options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

				clearInterval(timer);
				return;

			}

			element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';

		}, 4);

	}

	// setup auto slideshow
	var delay = options.auto || 0;
	var interval;

	function begin() {

		interval = setTimeout(next, delay);

	}

	function stop() {

		delay = 0;
		clearTimeout(interval);

	}


	// setup initial vars
	var start = {};
	var delta = {};
	var isScrolling;

	// setup event capturing
	var events = {

		handleEvent: function (event) {

			switch (event.type) {
				case 'touchstart':
					this.start(event);
					break;
				case 'touchmove':
					this.move(event);
					break;
				case 'touchend':
					offloadFn(this.end(event));
					break;
				case 'webkitTransitionEnd':
				case 'msTransitionEnd':
				case 'oTransitionEnd':
				case 'otransitionend':
				case 'transitionend':
					offloadFn(this.transitionEnd(event));
					break;
				case 'resize':
					offloadFn(setup);
					break;
			}

			if (options.stopPropagation) event.stopPropagation();

		},
		start: function (event) {

			var touches = event.touches[0];

			// measure start values
			start = {

				// get initial touch coords
				x: touches.pageX,
				y: touches.pageY,

				// store time to determine touch duration
				time: +new Date

			};

			// used for testing first move event
			isScrolling = undefined;

			// reset delta and end measurements
			delta = {};

			// attach touchmove and touchend listeners
			element.addEventListener('touchmove', this, false);
			element.addEventListener('touchend', this, false);

		},
		move: function (event) {

			// ensure swiping with one touch and not pinching
			if (event.touches.length > 1 || event.scale && event.scale !== 1) return

			if (options.disableScroll) event.preventDefault();

			var touches = event.touches[0];

			// measure change in x and y
			delta = {
				x: touches.pageX - start.x,
				y: touches.pageY - start.y
			}

			// determine if scrolling test has run - one time test
			if (typeof isScrolling == 'undefined') {
				isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
			}

			// if user is not trying to scroll vertically
			if (!isScrolling) {

				// prevent native scrolling
				event.preventDefault();

				// stop slideshow
				stop();

				// increase resistance if first or last slide
				if (options.continuous) { // we don't add resistance at the end

					translate(circle(index - 1), delta.x + slidePos[circle(index - 1)], 0);
					translate(index, delta.x + slidePos[index], 0);
					translate(circle(index + 1), delta.x + slidePos[circle(index + 1)], 0);

				} else {

					delta.x =
						delta.x /
						( (!index && delta.x > 0               // if first slide and sliding left
							|| index == slides.length - 1        // or if last slide and sliding right
							&& delta.x < 0                       // and if sliding at all
						) ?
							( Math.abs(delta.x) / width + 1 )      // determine resistance level
							: 1 );                                 // no resistance if false

					// translate 1:1
					translate(index - 1, delta.x + slidePos[index - 1], 0);
					translate(index, delta.x + slidePos[index], 0);
					translate(index + 1, delta.x + slidePos[index + 1], 0);
				}

			}

		},
		end: function (event) {

			// measure duration
			var duration = +new Date - start.time;

			// determine if slide attempt triggers next/prev slide
			var isValidSlide =
				Number(duration) < 250               // if slide duration is less than 250ms
				&& Math.abs(delta.x) > 20            // and if slide amt is greater than 20px
				|| Math.abs(delta.x) > width / 2;      // or if slide amt is greater than half the width

			// determine if slide attempt is past start and end
			var isPastBounds =
				!index && delta.x > 0                            // if first slide and slide amt is greater than 0
				|| index == slides.length - 1 && delta.x < 0;    // or if last slide and slide amt is less than 0

			if (options.continuous) isPastBounds = false;

			// determine direction of swipe (true:right, false:left)
			var direction = delta.x < 0;

			// if not scrolling vertically
			if (!isScrolling) {

				if (isValidSlide && !isPastBounds) {

					if (direction) {

						if (options.continuous) { // we need to get the next in this direction in place

							move(circle(index - 1), -width, 0);
							move(circle(index + 2), width, 0);

						} else {
							move(index - 1, -width, 0);
						}

						move(index, slidePos[index] - width, speed);
						move(circle(index + 1), slidePos[circle(index + 1)] - width, speed);
						index = circle(index + 1);

					} else {
						if (options.continuous) { // we need to get the next in this direction in place

							move(circle(index + 1), width, 0);
							move(circle(index - 2), -width, 0);

						} else {
							move(index + 1, width, 0);
						}

						move(index, slidePos[index] + width, speed);
						move(circle(index - 1), slidePos[circle(index - 1)] + width, speed);
						index = circle(index - 1);

					}

					options.callback && options.callback(index, slides[index]);

				} else {

					if (options.continuous) {

						move(circle(index - 1), -width, speed);
						move(index, 0, speed);
						move(circle(index + 1), width, speed);

					} else {

						move(index - 1, -width, speed);
						move(index, 0, speed);
						move(index + 1, width, speed);
					}

				}

			}

			// kill touchmove and touchend event listeners until touchstart called again
			element.removeEventListener('touchmove', events, false)
			element.removeEventListener('touchend', events, false)

		},
		transitionEnd: function (event) {

			if (parseInt(event.target.getAttribute('data-index'), 10) == index) {

				if (delay) begin();

				options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

			}

		}

	}

	// trigger setup
	setup();

	// start auto slideshow if applicable
	if (delay) begin();


	// add event listeners
	if (browser.addEventListener) {

		// set touchstart event on element
		if (browser.touch) element.addEventListener('touchstart', events, false);

		if (browser.transitions) {
			element.addEventListener('webkitTransitionEnd', events, false);
			element.addEventListener('msTransitionEnd', events, false);
			element.addEventListener('oTransitionEnd', events, false);
			element.addEventListener('otransitionend', events, false);
			element.addEventListener('transitionend', events, false);
		}

		// set resize event on window
		window.addEventListener('resize', events, false);

	} else {

		window.onresize = function () {
			setup()
		}; // to play nice with old IE

	}

	// expose the Swipe API
	return {
		setup: function () {

			setup();

		},

		refresh: function () {
			setup();
		},
		slide: function (to, speed) {

			// cancel slideshow
			stop();

			slide(to, speed);

		},
		prev: function () {

			// cancel slideshow
			stop();

			prev();

		},
		next: function () {

			// cancel slideshow
			stop();

			next();

		},
		stop: function () {

			// cancel slideshow
			stop();

		},
		getPos: function () {

			// return current index position
			return index;

		},
		getNumSlides: function () {

			// return total number of slides
			return length;
		},
		kill: function () {

			// cancel slideshow
			stop();

			// reset element
			element.style.width = '';
			element.style.left = '';

			// reset slides
			var pos = slides.length;
			while (pos--) {

				var slide = slides[pos];
				slide.style.width = '';
				slide.style.left = '';

				if (browser.transitions) translate(pos, 0, 0);

			}

			// removed event listeners
			if (browser.addEventListener) {

				// remove current event listeners
				element.removeEventListener('touchstart', events, false);
				element.removeEventListener('webkitTransitionEnd', events, false);
				element.removeEventListener('msTransitionEnd', events, false);
				element.removeEventListener('oTransitionEnd', events, false);
				element.removeEventListener('otransitionend', events, false);
				element.removeEventListener('transitionend', events, false);
				window.removeEventListener('resize', events, false);

			}
			else {

				window.onresize = null;

			}

		}
	}

}


if (window.jQuery || window.Zepto) {
	(function ($) {
		$.fn.Swipe = function (params) {
			return this.each(function () {
				$(this).data('Swipe', new Swipe($(this)[0], params));
			});
		}
	})(window.jQuery || window.Zepto)
}

/*!
 * jQuery Transit - CSS3 transitions and transformations
 * (c) 2011-2014 Rico Sta. Cruz
 * MIT Licensed.
 *
 * http://ricostacruz.com/jquery.transit
 * http://github.com/rstacruz/jquery.transit
 */

/* jshint expr: true */

;(function (root, factory) {

	if (typeof define === 'function' && define.amd) {
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		module.exports = factory(require('jquery'));
	} else {
		factory(root.jQuery);
	}

}(this, function($) {

	$.transit = {
		version: "0.9.12",

		// Map of $.css() keys to values for 'transitionProperty'.
		// See https://developer.mozilla.org/en/CSS/CSS_transitions#Properties_that_can_be_animated
		propertyMap: {
			marginLeft    : 'margin',
			marginRight   : 'margin',
			marginBottom  : 'margin',
			marginTop     : 'margin',
			paddingLeft   : 'padding',
			paddingRight  : 'padding',
			paddingBottom : 'padding',
			paddingTop    : 'padding'
		},

		// Will simply transition "instantly" if false
		enabled: true,

		// Set this to false if you don't want to use the transition end property.
		useTransitionEnd: false
	};

	var div = document.createElement('div');
	var support = {};

	// Helper function to get the proper vendor property name.
	// (`transition` => `WebkitTransition`)
	function getVendorPropertyName(prop) {
		// Handle unprefixed versions (FF16+, for example)
		if (prop in div.style) return prop;

		var prefixes = ['Moz', 'Webkit', 'O', 'ms'];
		var prop_ = prop.charAt(0).toUpperCase() + prop.substr(1);

		for (var i=0; i<prefixes.length; ++i) {
			var vendorProp = prefixes[i] + prop_;
			if (vendorProp in div.style) { return vendorProp; }
		}
	}

	// Helper function to check if transform3D is supported.
	// Should return true for Webkits and Firefox 10+.
	function checkTransform3dSupport() {
		div.style[support.transform] = '';
		div.style[support.transform] = 'rotateY(90deg)';
		return div.style[support.transform] !== '';
	}

	var isChrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

	// Check for the browser's transitions support.
	support.transition      = getVendorPropertyName('transition');
	support.transitionDelay = getVendorPropertyName('transitionDelay');
	support.transform       = getVendorPropertyName('transform');
	support.transformOrigin = getVendorPropertyName('transformOrigin');
	support.filter          = getVendorPropertyName('Filter');
	support.transform3d     = checkTransform3dSupport();

	var eventNames = {
		'transition':       'transitionend',
		'MozTransition':    'transitionend',
		'OTransition':      'oTransitionEnd',
		'WebkitTransition': 'webkitTransitionEnd',
		'msTransition':     'MSTransitionEnd'
	};

	// Detect the 'transitionend' event needed.
	var transitionEnd = support.transitionEnd = eventNames[support.transition] || null;

	// Populate jQuery's `$.support` with the vendor prefixes we know.
	// As per [jQuery's cssHooks documentation](http://api.jquery.com/jQuery.cssHooks/),
	// we set $.support.transition to a string of the actual property name used.
	for (var key in support) {
		if (support.hasOwnProperty(key) && typeof $.support[key] === 'undefined') {
			$.support[key] = support[key];
		}
	}

	// Avoid memory leak in IE.
	div = null;

	// ## $.cssEase
	// List of easing aliases that you can use with `$.fn.transition`.
	$.cssEase = {
		'_default':       'ease',
		'in':             'ease-in',
		'out':            'ease-out',
		'in-out':         'ease-in-out',
		'snap':           'cubic-bezier(0,1,.5,1)',
		// Penner equations
		'easeInCubic':    'cubic-bezier(.550,.055,.675,.190)',
		'easeOutCubic':   'cubic-bezier(.215,.61,.355,1)',
		'easeInOutCubic': 'cubic-bezier(.645,.045,.355,1)',
		'easeInCirc':     'cubic-bezier(.6,.04,.98,.335)',
		'easeOutCirc':    'cubic-bezier(.075,.82,.165,1)',
		'easeInOutCirc':  'cubic-bezier(.785,.135,.15,.86)',
		'easeInExpo':     'cubic-bezier(.95,.05,.795,.035)',
		'easeOutExpo':    'cubic-bezier(.19,1,.22,1)',
		'easeInOutExpo':  'cubic-bezier(1,0,0,1)',
		'easeInQuad':     'cubic-bezier(.55,.085,.68,.53)',
		'easeOutQuad':    'cubic-bezier(.25,.46,.45,.94)',
		'easeInOutQuad':  'cubic-bezier(.455,.03,.515,.955)',
		'easeInQuart':    'cubic-bezier(.895,.03,.685,.22)',
		'easeOutQuart':   'cubic-bezier(.165,.84,.44,1)',
		'easeInOutQuart': 'cubic-bezier(.77,0,.175,1)',
		'easeInQuint':    'cubic-bezier(.755,.05,.855,.06)',
		'easeOutQuint':   'cubic-bezier(.23,1,.32,1)',
		'easeInOutQuint': 'cubic-bezier(.86,0,.07,1)',
		'easeInSine':     'cubic-bezier(.47,0,.745,.715)',
		'easeOutSine':    'cubic-bezier(.39,.575,.565,1)',
		'easeInOutSine':  'cubic-bezier(.445,.05,.55,.95)',
		'easeInBack':     'cubic-bezier(.6,-.28,.735,.045)',
		'easeOutBack':    'cubic-bezier(.175, .885,.32,1.275)',
		'easeInOutBack':  'cubic-bezier(.68,-.55,.265,1.55)'
	};

	// ## 'transform' CSS hook
	// Allows you to use the `transform` property in CSS.
	//
	//     $("#hello").css({ transform: "rotate(90deg)" });
	//
	//     $("#hello").css('transform');
	//     //=> { rotate: '90deg' }
	//
	$.cssHooks['transit:transform'] = {
		// The getter returns a `Transform` object.
		get: function(elem) {
			return $(elem).data('transform') || new Transform();
		},

		// The setter accepts a `Transform` object or a string.
		set: function(elem, v) {
			var value = v;

			if (!(value instanceof Transform)) {
				value = new Transform(value);
			}

			// We've seen the 3D version of Scale() not work in Chrome when the
			// element being scaled extends outside of the viewport.  Thus, we're
			// forcing Chrome to not use the 3d transforms as well.  Not sure if
			// translate is affectede, but not risking it.  Detection code from
			// http://davidwalsh.name/detecting-google-chrome-javascript
			if (support.transform === 'WebkitTransform' && !isChrome) {
				elem.style[support.transform] = value.toString(true);
			} else {
				elem.style[support.transform] = value.toString();
			}

			$(elem).data('transform', value);
		}
	};

	// Add a CSS hook for `.css({ transform: '...' })`.
	// In jQuery 1.8+, this will intentionally override the default `transform`
	// CSS hook so it'll play well with Transit. (see issue #62)
	$.cssHooks.transform = {
		set: $.cssHooks['transit:transform'].set
	};

	// ## 'filter' CSS hook
	// Allows you to use the `filter` property in CSS.
	//
	//     $("#hello").css({ filter: 'blur(10px)' });
	//
	$.cssHooks.filter = {
		get: function(elem) {
			return elem.style[support.filter];
		},
		set: function(elem, value) {
			elem.style[support.filter] = value;
		}
	};

	// jQuery 1.8+ supports prefix-free transitions, so these polyfills will not
	// be necessary.
	if ($.fn.jquery < "1.8") {
		// ## 'transformOrigin' CSS hook
		// Allows the use for `transformOrigin` to define where scaling and rotation
		// is pivoted.
		//
		//     $("#hello").css({ transformOrigin: '0 0' });
		//
		$.cssHooks.transformOrigin = {
			get: function(elem) {
				return elem.style[support.transformOrigin];
			},
			set: function(elem, value) {
				elem.style[support.transformOrigin] = value;
			}
		};

		// ## 'transition' CSS hook
		// Allows you to use the `transition` property in CSS.
		//
		//     $("#hello").css({ transition: 'all 0 ease 0' });
		//
		$.cssHooks.transition = {
			get: function(elem) {
				return elem.style[support.transition];
			},
			set: function(elem, value) {
				elem.style[support.transition] = value;
			}
		};
	}

	// ## Other CSS hooks
	// Allows you to rotate, scale and translate.
	registerCssHook('scale');
	registerCssHook('scaleX');
	registerCssHook('scaleY');
	registerCssHook('translate');
	registerCssHook('rotate');
	registerCssHook('rotateX');
	registerCssHook('rotateY');
	registerCssHook('rotate3d');
	registerCssHook('perspective');
	registerCssHook('skewX');
	registerCssHook('skewY');
	registerCssHook('x', true);
	registerCssHook('y', true);

	// ## Transform class
	// This is the main class of a transformation property that powers
	// `$.fn.css({ transform: '...' })`.
	//
	// This is, in essence, a dictionary object with key/values as `-transform`
	// properties.
	//
	//     var t = new Transform("rotate(90) scale(4)");
	//
	//     t.rotate             //=> "90deg"
	//     t.scale              //=> "4,4"
	//
	// Setters are accounted for.
	//
	//     t.set('rotate', 4)
	//     t.rotate             //=> "4deg"
	//
	// Convert it to a CSS string using the `toString()` and `toString(true)` (for WebKit)
	// functions.
	//
	//     t.toString()         //=> "rotate(90deg) scale(4,4)"
	//     t.toString(true)     //=> "rotate(90deg) scale3d(4,4,0)" (WebKit version)
	//
	function Transform(str) {
		if (typeof str === 'string') { this.parse(str); }
		return this;
	}

	Transform.prototype = {
		// ### setFromString()
		// Sets a property from a string.
		//
		//     t.setFromString('scale', '2,4');
		//     // Same as set('scale', '2', '4');
		//
		setFromString: function(prop, val) {
			var args =
				(typeof val === 'string')  ? val.split(',') :
					(val.constructor === Array) ? val :
						[ val ];

			args.unshift(prop);

			Transform.prototype.set.apply(this, args);
		},

		// ### set()
		// Sets a property.
		//
		//     t.set('scale', 2, 4);
		//
		set: function(prop) {
			var args = Array.prototype.slice.apply(arguments, [1]);
			if (this.setter[prop]) {
				this.setter[prop].apply(this, args);
			} else {
				this[prop] = args.join(',');
			}
		},

		get: function(prop) {
			if (this.getter[prop]) {
				return this.getter[prop].apply(this);
			} else {
				return this[prop] || 0;
			}
		},

		setter: {
			// ### rotate
			//
			//     .css({ rotate: 30 })
			//     .css({ rotate: "30" })
			//     .css({ rotate: "30deg" })
			//     .css({ rotate: "30deg" })
			//
			rotate: function(theta) {
				this.rotate = unit(theta, 'deg');
			},

			rotateX: function(theta) {
				this.rotateX = unit(theta, 'deg');
			},

			rotateY: function(theta) {
				this.rotateY = unit(theta, 'deg');
			},

			// ### scale
			//
			//     .css({ scale: 9 })      //=> "scale(9,9)"
			//     .css({ scale: '3,2' })  //=> "scale(3,2)"
			//
			scale: function(x, y) {
				if (y === undefined) { y = x; }
				this.scale = x + "," + y;
			},

			// ### skewX + skewY
			skewX: function(x) {
				this.skewX = unit(x, 'deg');
			},

			skewY: function(y) {
				this.skewY = unit(y, 'deg');
			},

			// ### perspectvie
			perspective: function(dist) {
				this.perspective = unit(dist, 'px');
			},

			// ### x / y
			// Translations. Notice how this keeps the other value.
			//
			//     .css({ x: 4 })       //=> "translate(4px, 0)"
			//     .css({ y: 10 })      //=> "translate(4px, 10px)"
			//
			x: function(x) {
				this.set('translate', x, null);
			},

			y: function(y) {
				this.set('translate', null, y);
			},

			// ### translate
			// Notice how this keeps the other value.
			//
			//     .css({ translate: '2, 5' })    //=> "translate(2px, 5px)"
			//
			translate: function(x, y) {
				if (this._translateX === undefined) { this._translateX = 0; }
				if (this._translateY === undefined) { this._translateY = 0; }

				if (x !== null && x !== undefined) { this._translateX = unit(x, 'px'); }
				if (y !== null && y !== undefined) { this._translateY = unit(y, 'px'); }

				this.translate = this._translateX + "," + this._translateY;
			}
		},

		getter: {
			x: function() {
				return this._translateX || 0;
			},

			y: function() {
				return this._translateY || 0;
			},

			scale: function() {
				var s = (this.scale || "1,1").split(',');
				if (s[0]) { s[0] = parseFloat(s[0]); }
				if (s[1]) { s[1] = parseFloat(s[1]); }

				// "2.5,2.5" => 2.5
				// "2.5,1" => [2.5,1]
				return (s[0] === s[1]) ? s[0] : s;
			},

			rotate3d: function() {
				var s = (this.rotate3d || "0,0,0,0deg").split(',');
				for (var i=0; i<=3; ++i) {
					if (s[i]) { s[i] = parseFloat(s[i]); }
				}
				if (s[3]) { s[3] = unit(s[3], 'deg'); }

				return s;
			}
		},

		// ### parse()
		// Parses from a string. Called on constructor.
		parse: function(str) {
			var self = this;
			str.replace(/([a-zA-Z0-9]+)\((.*?)\)/g, function(x, prop, val) {
				self.setFromString(prop, val);
			});
		},

		// ### toString()
		// Converts to a `transition` CSS property string. If `use3d` is given,
		// it converts to a `-webkit-transition` CSS property string instead.
		toString: function(use3d) {
			var re = [];

			for (var i in this) {
				if (this.hasOwnProperty(i)) {
					// Don't use 3D transformations if the browser can't support it.
					if ((!support.transform3d) && (
						(i === 'rotateX') ||
						(i === 'rotateY') ||
						(i === 'perspective') ||
						(i === 'transformOrigin'))) { continue; }

					if (i[0] !== '_') {
						if (use3d && (i === 'scale')) {
							re.push(i + "3d(" + this[i] + ",1)");
						} else if (use3d && (i === 'translate')) {
							re.push(i + "3d(" + this[i] + ",0)");
						} else {
							re.push(i + "(" + this[i] + ")");
						}
					}
				}
			}

			return re.join(" ");
		}
	};

	function callOrQueue(self, queue, fn) {
		if (queue === true) {
			self.queue(fn);
		} else if (queue) {
			self.queue(queue, fn);
		} else {
			self.each(function () {
				fn.call(this);
			});
		}
	}

	// ### getProperties(dict)
	// Returns properties (for `transition-property`) for dictionary `props`. The
	// value of `props` is what you would expect in `$.css(...)`.
	function getProperties(props) {
		var re = [];

		$.each(props, function(key) {
			key = $.camelCase(key); // Convert "text-align" => "textAlign"
			key = $.transit.propertyMap[key] || $.cssProps[key] || key;
			key = uncamel(key); // Convert back to dasherized

			// Get vendor specify propertie
			if (support[key])
				key = uncamel(support[key]);

			if ($.inArray(key, re) === -1) { re.push(key); }
		});

		return re;
	}

	// ### getTransition()
	// Returns the transition string to be used for the `transition` CSS property.
	//
	// Example:
	//
	//     getTransition({ opacity: 1, rotate: 30 }, 500, 'ease');
	//     //=> 'opacity 500ms ease, -webkit-transform 500ms ease'
	//
	function getTransition(properties, duration, easing, delay) {
		// Get the CSS properties needed.
		var props = getProperties(properties);

		// Account for aliases (`in` => `ease-in`).
		if ($.cssEase[easing]) { easing = $.cssEase[easing]; }

		// Build the duration/easing/delay attributes for it.
		var attribs = '' + toMS(duration) + ' ' + easing;
		if (parseInt(delay, 10) > 0) { attribs += ' ' + toMS(delay); }

		// For more properties, add them this way:
		// "margin 200ms ease, padding 200ms ease, ..."
		var transitions = [];
		$.each(props, function(i, name) {
			transitions.push(name + ' ' + attribs);
		});

		return transitions.join(', ');
	}

	// ## $.fn.transition
	// Works like $.fn.animate(), but uses CSS transitions.
	//
	//     $("...").transition({ opacity: 0.1, scale: 0.3 });
	//
	//     // Specific duration
	//     $("...").transition({ opacity: 0.1, scale: 0.3 }, 500);
	//
	//     // With duration and easing
	//     $("...").transition({ opacity: 0.1, scale: 0.3 }, 500, 'in');
	//
	//     // With callback
	//     $("...").transition({ opacity: 0.1, scale: 0.3 }, function() { ... });
	//
	//     // With everything
	//     $("...").transition({ opacity: 0.1, scale: 0.3 }, 500, 'in', function() { ... });
	//
	//     // Alternate syntax
	//     $("...").transition({
	//       opacity: 0.1,
	//       duration: 200,
	//       delay: 40,
	//       easing: 'in',
	//       complete: function() { /* ... */ }
	//      });
	//
	$.fn.transition = $.fn.transit = function(properties, duration, easing, callback) {
		var self  = this;
		var delay = 0;
		var queue = true;

		var theseProperties = $.extend(true, {}, properties);

		// Account for `.transition(properties, callback)`.
		if (typeof duration === 'function') {
			callback = duration;
			duration = undefined;
		}

		// Account for `.transition(properties, options)`.
		if (typeof duration === 'object') {
			easing = duration.easing;
			delay = duration.delay || 0;
			queue = typeof duration.queue === "undefined" ? true : duration.queue;
			callback = duration.complete;
			duration = duration.duration;
		}

		// Account for `.transition(properties, duration, callback)`.
		if (typeof easing === 'function') {
			callback = easing;
			easing = undefined;
		}

		// Alternate syntax.
		if (typeof theseProperties.easing !== 'undefined') {
			easing = theseProperties.easing;
			delete theseProperties.easing;
		}

		if (typeof theseProperties.duration !== 'undefined') {
			duration = theseProperties.duration;
			delete theseProperties.duration;
		}

		if (typeof theseProperties.complete !== 'undefined') {
			callback = theseProperties.complete;
			delete theseProperties.complete;
		}

		if (typeof theseProperties.queue !== 'undefined') {
			queue = theseProperties.queue;
			delete theseProperties.queue;
		}

		if (typeof theseProperties.delay !== 'undefined') {
			delay = theseProperties.delay;
			delete theseProperties.delay;
		}

		// Set defaults. (`400` duration, `ease` easing)
		if (typeof duration === 'undefined') { duration = $.fx.speeds._default; }
		if (typeof easing === 'undefined')   { easing = $.cssEase._default; }

		duration = toMS(duration);

		// Build the `transition` property.
		var transitionValue = getTransition(theseProperties, duration, easing, delay);

		// Compute delay until callback.
		// If this becomes 0, don't bother setting the transition property.
		var work = $.transit.enabled && support.transition;
		var i = work ? (parseInt(duration, 10) + parseInt(delay, 10)) : 0;

		// If there's nothing to do...
		if (i === 0) {
			var fn = function(next) {
				self.css(theseProperties);
				if (callback) { callback.apply(self); }
				if (next) { next(); }
			};

			callOrQueue(self, queue, fn);
			return self;
		}

		// Save the old transitions of each element so we can restore it later.
		var oldTransitions = {};

		var run = function(nextCall) {
			var bound = false;

			// Prepare the callback.
			var cb = function() {
				if (bound) { self.unbind(transitionEnd, cb); }

				if (i > 0) {
					self.each(function() {
						this.style[support.transition] = (oldTransitions[this] || null);
					});
				}

				if (typeof callback === 'function') { callback.apply(self); }
				if (typeof nextCall === 'function') { nextCall(); }
			};

			if ((i > 0) && (transitionEnd) && ($.transit.useTransitionEnd)) {
				// Use the 'transitionend' event if it's available.
				bound = true;
				self.bind(transitionEnd, cb);
			} else {
				// Fallback to timers if the 'transitionend' event isn't supported.
				window.setTimeout(cb, i);
			}

			// Apply transitions.
			self.each(function() {
				if (i > 0) {
					this.style[support.transition] = transitionValue;
				}
				$(this).css(theseProperties);
			});
		};

		// Defer running. This allows the browser to paint any pending CSS it hasn't
		// painted yet before doing the transitions.
		var deferredRun = function(next) {
			this.offsetWidth; // force a repaint
			run(next);
		};

		// Use jQuery's fx queue.
		callOrQueue(self, queue, deferredRun);

		// Chainability.
		return this;
	};

	function registerCssHook(prop, isPixels) {
		// For certain properties, the 'px' should not be implied.
		if (!isPixels) { $.cssNumber[prop] = true; }

		$.transit.propertyMap[prop] = support.transform;

		$.cssHooks[prop] = {
			get: function(elem) {
				var t = $(elem).css('transit:transform');
				return t.get(prop);
			},

			set: function(elem, value) {
				var t = $(elem).css('transit:transform');
				t.setFromString(prop, value);

				$(elem).css({ 'transit:transform': t });
			}
		};

	}

	// ### uncamel(str)
	// Converts a camelcase string to a dasherized string.
	// (`marginLeft` => `margin-left`)
	function uncamel(str) {
		return str.replace(/([A-Z])/g, function(letter) { return '-' + letter.toLowerCase(); });
	}

	// ### unit(number, unit)
	// Ensures that number `number` has a unit. If no unit is found, assume the
	// default is `unit`.
	//
	//     unit(2, 'px')          //=> "2px"
	//     unit("30deg", 'rad')   //=> "30deg"
	//
	function unit(i, units) {
		if ((typeof i === "string") && (!i.match(/^[\-0-9\.]+$/))) {
			return i;
		} else {
			return "" + i + units;
		}
	}

	// ### toMS(duration)
	// Converts given `duration` to a millisecond string.
	//
	// toMS('fast') => $.fx.speeds[i] => "200ms"
	// toMS('normal') //=> $.fx.speeds._default => "400ms"
	// toMS(10) //=> '10ms'
	// toMS('100ms') //=> '100ms'
	//
	function toMS(duration) {
		var i = duration;

		// Allow string durations like 'fast' and 'slow', without overriding numeric values.
		if (typeof i === 'string' && (!i.match(/^[\-0-9\.]+/))) { i = $.fx.speeds[i] || $.fx.speeds._default; }

		return unit(i, 'ms');
	}

	// Export some functions for testable-ness.
	$.transit.getTransitionValue = getTransition;

	return $;
}));
//     JavaScript Expression Parser (JSEP) 0.3.0
//     JSEP may be freely distributed under the MIT License
//     http://jsep.from.so/

/*global module: true, exports: true, console: true */
(function (root) {
	'use strict';
	// Node Types
	// ----------

	// This is the full set of types that any JSEP node can be.
	// Store them here to save space when minified
	var COMPOUND = 'Compound',
		IDENTIFIER = 'Identifier',
		MEMBER_EXP = 'MemberExpression',
		LITERAL = 'Literal',
		THIS_EXP = 'ThisExpression',
		CALL_EXP = 'CallExpression',
		UNARY_EXP = 'UnaryExpression',
		BINARY_EXP = 'BinaryExpression',
		LOGICAL_EXP = 'LogicalExpression',
		CONDITIONAL_EXP = 'ConditionalExpression',
		ARRAY_EXP = 'ArrayExpression',

		PERIOD_CODE = 46, // '.'
		COMMA_CODE  = 44, // ','
		SQUOTE_CODE = 39, // single quote
		DQUOTE_CODE = 34, // double quotes
		OPAREN_CODE = 40, // (
		CPAREN_CODE = 41, // )
		OBRACK_CODE = 91, // [
		CBRACK_CODE = 93, // ]
		QUMARK_CODE = 63, // ?
		SEMCOL_CODE = 59, // ;
		COLON_CODE  = 58, // :

		throwError = function(message, index) {
			var error = new Error(message + ' at character ' + index);
			error.index = index;
			error.description = message;
			throw error;
		},

	// Operations
	// ----------

	// Set `t` to `true` to save space (when minified, not gzipped)
		t = true,
	// Use a quickly-accessible map to store all of the unary operators
	// Values are set to `true` (it really doesn't matter)
		unary_ops = {'-': t, '!': t, '~': t, '+': t},
	// Also use a map for the binary operations but set their values to their
	// binary precedence for quick reference:
	// see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)
		binary_ops = {
			'||': 1, '&&': 2, '|': 3,  '^': 4,  '&': 5,
			'==': 6, '!=': 6, '===': 6, '!==': 6,
			'<': 7,  '>': 7,  '<=': 7,  '>=': 7,
			'<<':8,  '>>': 8, '>>>': 8,
			'+': 9, '-': 9,
			'*': 10, '/': 10, '%': 10
		},
	// Get return the longest key length of any object
		getMaxKeyLen = function(obj) {
			var max_len = 0, len;
			for(var key in obj) {
				if((len = key.length) > max_len && obj.hasOwnProperty(key)) {
					max_len = len;
				}
			}
			return max_len;
		},
		max_unop_len = getMaxKeyLen(unary_ops),
		max_binop_len = getMaxKeyLen(binary_ops),
	// Literals
	// ----------
	// Store the values to return for the various literals we may encounter
		literals = {
			'true': true,
			'false': false,
			'null': null
		},
	// Except for `this`, which is special. This could be changed to something like `'self'` as well
		this_str = 'this',
	// Returns the precedence of a binary operator or `0` if it isn't a binary operator
		binaryPrecedence = function(op_val) {
			return binary_ops[op_val] || 0;
		},
	// Utility function (gets called from multiple places)
	// Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions
		createBinaryExpression = function (operator, left, right) {
			var type = (operator === '||' || operator === '&&') ? LOGICAL_EXP : BINARY_EXP;
			return {
				type: type,
				operator: operator,
				left: left,
				right: right
			};
		},
	// `ch` is a character code in the next three functions
		isDecimalDigit = function(ch) {
			return (ch >= 48 && ch <= 57); // 0...9
		},
		isIdentifierStart = function(ch) {
			return (ch === 36) || (ch === 64) || (ch === 95) || // `$` and `@` and `_`
				(ch >= 65 && ch <= 90) || // A...Z
				(ch >= 97 && ch <= 122); // a...z
		},
		isIdentifierPart = function(ch) {
			return (ch === 36) || (ch === 64) || (ch === 95) || // `$` and `@` and `_`
				(ch >= 65 && ch <= 90) || // A...Z
				(ch >= 97 && ch <= 122) || // a...z
				(ch >= 48 && ch <= 57); // 0...9
		},

	// Parsing
	// -------
	// `expr` is a string with the passed in expression
		jsep = function(expr) {
			// `index` stores the character number we are currently at while `length` is a constant
			// All of the gobbles below will modify `index` as we move along
			var index = 0,
				charAtFunc = expr.charAt,
				charCodeAtFunc = expr.charCodeAt,
				exprI = function(i) { return charAtFunc.call(expr, i); },
				exprICode = function(i) { return charCodeAtFunc.call(expr, i); },
				length = expr.length,

			// Push `index` up to the next non-space character
				gobbleSpaces = function() {
					var ch = exprICode(index);
					// space or tab
					while(ch === 32 || ch === 9) {
						ch = exprICode(++index);
					}
				},

			// The main parsing function. Much of this code is dedicated to ternary expressions
				gobbleExpression = function() {
					var test = gobbleBinaryExpression(),
						consequent, alternate;
					gobbleSpaces();
					if(exprICode(index) === QUMARK_CODE) {
						// Ternary expression: test ? consequent : alternate
						index++;
						consequent = gobbleExpression();
						if(!consequent) {
							throwError('Expected expression', index);
						}
						gobbleSpaces();
						if(exprICode(index) === COLON_CODE) {
							index++;
							alternate = gobbleExpression();
							if(!alternate) {
								throwError('Expected expression', index);
							}
							return {
								type: CONDITIONAL_EXP,
								test: test,
								consequent: consequent,
								alternate: alternate
							};
						} else {
							throwError('Expected :', index);
						}
					} else {
						return test;
					}
				},

			// Search for the operation portion of the string (e.g. `+`, `===`)
			// Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)
			// and move down from 3 to 2 to 1 character until a matching binary operation is found
			// then, return that binary operation
				gobbleBinaryOp = function() {
					gobbleSpaces();
					var biop, to_check = expr.substr(index, max_binop_len), tc_len = to_check.length;
					while(tc_len > 0) {
						if(binary_ops.hasOwnProperty(to_check)) {
							index += tc_len;
							return to_check;
						}
						to_check = to_check.substr(0, --tc_len);
					}
					return false;
				},

			// This function is responsible for gobbling an individual expression,
			// e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`
				gobbleBinaryExpression = function() {
					var ch_i, node, biop, prec, stack, biop_info, left, right, i;

					// First, try to get the leftmost thing
					// Then, check to see if there's a binary operator operating on that leftmost thing
					left = gobbleToken();
					biop = gobbleBinaryOp();

					// If there wasn't a binary operator, just return the leftmost node
					if(!biop) {
						return left;
					}

					// Otherwise, we need to start a stack to properly place the binary operations in their
					// precedence structure
					biop_info = { value: biop, prec: binaryPrecedence(biop)};

					right = gobbleToken();
					if(!right) {
						throwError("Expected expression after " + biop, index);
					}
					stack = [left, biop_info, right];

					// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)
					while((biop = gobbleBinaryOp())) {
						prec = binaryPrecedence(biop);

						if(prec === 0) {
							break;
						}
						biop_info = { value: biop, prec: prec };

						// Reduce: make a binary expression from the three topmost entries.
						while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
							right = stack.pop();
							biop = stack.pop().value;
							left = stack.pop();
							node = createBinaryExpression(biop, left, right);
							stack.push(node);
						}

						node = gobbleToken();
						if(!node) {
							throwError("Expected expression after " + biop, index);
						}
						stack.push(biop_info, node);
					}

					i = stack.length - 1;
					node = stack[i];
					while(i > 1) {
						node = createBinaryExpression(stack[i - 1].value, stack[i - 2], node);
						i -= 2;
					}
					return node;
				},

			// An individual part of a binary expression:
			// e.g. `foo.bar(baz)`, `1`, `"abc"`, `(a % 2)` (because it's in parenthesis)
				gobbleToken = function() {
					var ch, to_check, tc_len;

					gobbleSpaces();
					ch = exprICode(index);

					if(isDecimalDigit(ch) || ch === PERIOD_CODE) {
						// Char code 46 is a dot `.` which can start off a numeric literal
						return gobbleNumericLiteral();
					} else if(ch === SQUOTE_CODE || ch === DQUOTE_CODE) {
						// Single or double quotes
						return gobbleStringLiteral();
					} else if(isIdentifierStart(ch) || ch === OPAREN_CODE) { // open parenthesis
						// `foo`, `bar.baz`
						return gobbleVariable();
					} else if (ch === OBRACK_CODE) {
						return gobbleArray();
					} else {
						to_check = expr.substr(index, max_unop_len);
						tc_len = to_check.length;
						while(tc_len > 0) {
							if(unary_ops.hasOwnProperty(to_check)) {
								index += tc_len;
								return {
									type: UNARY_EXP,
									operator: to_check,
									argument: gobbleToken(),
									prefix: true
								};
							}
							to_check = to_check.substr(0, --tc_len);
						}

						return false;
					}
				},
			// Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to
			// keep track of everything in the numeric literal and then calling `parseFloat` on that string
				gobbleNumericLiteral = function() {
					var number = '', ch, chCode;
					while(isDecimalDigit(exprICode(index))) {
						number += exprI(index++);
					}

					if(exprICode(index) === PERIOD_CODE) { // can start with a decimal marker
						number += exprI(index++);

						while(isDecimalDigit(exprICode(index))) {
							number += exprI(index++);
						}
					}

					ch = exprI(index);
					if(ch === 'e' || ch === 'E') { // exponent marker
						number += exprI(index++);
						ch = exprI(index);
						if(ch === '+' || ch === '-') { // exponent sign
							number += exprI(index++);
						}
						while(isDecimalDigit(exprICode(index))) { //exponent itself
							number += exprI(index++);
						}
						if(!isDecimalDigit(exprICode(index-1)) ) {
							throwError('Expected exponent (' + number + exprI(index) + ')', index);
						}
					}


					chCode = exprICode(index);
					// Check to make sure this isn't a variable name that start with a number (123abc)
					if(isIdentifierStart(chCode)) {
						throwError('Variable names cannot start with a number (' +
						number + exprI(index) + ')', index);
					} else if(chCode === PERIOD_CODE) {
						throwError('Unexpected period', index);
					}

					return {
						type: LITERAL,
						value: parseFloat(number),
						raw: number
					};
				},

			// Parses a string literal, staring with single or double quotes with basic support for escape codes
			// e.g. `"hello world"`, `'this is\nJSEP'`
				gobbleStringLiteral = function() {
					var str = '', quote = exprI(index++), closed = false, ch;

					while(index < length) {
						ch = exprI(index++);
						if(ch === quote) {
							closed = true;
							break;
						} else if(ch === '\\') {
							// Check for all of the common escape codes
							ch = exprI(index++);
							switch(ch) {
								case 'n': str += '\n'; break;
								case 'r': str += '\r'; break;
								case 't': str += '\t'; break;
								case 'b': str += '\b'; break;
								case 'f': str += '\f'; break;
								case 'v': str += '\x0B'; break;
							}
						} else {
							str += ch;
						}
					}

					if(!closed) {
						throwError('Unclosed quote after "'+str+'"', index);
					}

					return {
						type: LITERAL,
						value: str,
						raw: quote + str + quote
					};
				},

			// Gobbles only identifiers
			// e.g.: `foo`, `_value`, `$x1`
			// Also, this function checks if that identifier is a literal:
			// (e.g. `true`, `false`, `null`) or `this`
				gobbleIdentifier = function() {
					var ch = exprICode(index), start = index, identifier;

					if(isIdentifierStart(ch)) {
						index++;
					} else {
						throwError('Unexpected ' + exprI(index), index);
					}

					while(index < length) {
						ch = exprICode(index);
						if(isIdentifierPart(ch)) {
							index++;
						} else {
							break;
						}
					}
					identifier = expr.slice(start, index);

					if(literals.hasOwnProperty(identifier)) {
						return {
							type: LITERAL,
							value: literals[identifier],
							raw: identifier
						};
					} else if(identifier === this_str) {
						return { type: THIS_EXP };
					} else {
						return {
							type: IDENTIFIER,
							name: identifier
						};
					}
				},

			// Gobbles a list of arguments within the context of a function call
			// or array literal. This function also assumes that the opening character
			// `(` or `[` has already been gobbled, and gobbles expressions and commas
			// until the terminator character `)` or `]` is encountered.
			// e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`
				gobbleArguments = function(termination) {
					var ch_i, args = [], node;
					while(index < length) {
						gobbleSpaces();
						ch_i = exprICode(index);
						if(ch_i === termination) { // done parsing
							index++;
							break;
						} else if (ch_i === COMMA_CODE) { // between expressions
							index++;
						} else {
							node = gobbleExpression();
							if(!node || node.type === COMPOUND) {
								throwError('Expected comma', index);
							}
							args.push(node);
						}
					}
					return args;
				},

			// Gobble a non-literal variable name. This variable name may include properties
			// e.g. `foo`, `bar.baz`, `foo['bar'].baz`
			// It also gobbles function calls:
			// e.g. `Math.acos(obj.angle)`
				gobbleVariable = function() {
					var ch_i, node;
					ch_i = exprICode(index);

					if(ch_i === OPAREN_CODE) {
						node = gobbleGroup();
					} else {
						node = gobbleIdentifier();
					}
					gobbleSpaces();
					ch_i = exprICode(index);
					while(ch_i === PERIOD_CODE || ch_i === OBRACK_CODE || ch_i === OPAREN_CODE) {
						index++;
						if(ch_i === PERIOD_CODE) {
							gobbleSpaces();
							node = {
								type: MEMBER_EXP,
								computed: false,
								object: node,
								property: gobbleIdentifier()
							};
						} else if(ch_i === OBRACK_CODE) {
							node = {
								type: MEMBER_EXP,
								computed: true,
								object: node,
								property: gobbleExpression()
							};
							gobbleSpaces();
							ch_i = exprICode(index);
							if(ch_i !== CBRACK_CODE) {
								throwError('Unclosed [', index);
							}
							index++;
						} else if(ch_i === OPAREN_CODE) {
							// A function call is being made; gobble all the arguments
							node = {
								type: CALL_EXP,
								'arguments': gobbleArguments(CPAREN_CODE),
								callee: node
							};
						}
						gobbleSpaces();
						ch_i = exprICode(index);
					}
					return node;
				},

			// Responsible for parsing a group of things within parentheses `()`
			// This function assumes that it needs to gobble the opening parenthesis
			// and then tries to gobble everything within that parenthesis, assuming
			// that the next thing it should see is the close parenthesis. If not,
			// then the expression probably doesn't have a `)`
				gobbleGroup = function() {
					index++;
					var node = gobbleExpression();
					gobbleSpaces();
					if(exprICode(index) === CPAREN_CODE) {
						index++;
						return node;
					} else {
						throwError('Unclosed (', index);
					}
				},

			// Responsible for parsing Array literals `[1, 2, 3]`
			// This function assumes that it needs to gobble the opening bracket
			// and then tries to gobble the expressions as arguments.
				gobbleArray = function() {
					index++;
					return {
						type: ARRAY_EXP,
						elements: gobbleArguments(CBRACK_CODE)
					};
				},

				nodes = [], ch_i, node;

			while(index < length) {
				ch_i = exprICode(index);

				// Expressions can be separated by semicolons, commas, or just inferred without any
				// separators
				if(ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {
					index++; // ignore separators
				} else {
					// Try to gobble each expression individually
					if((node = gobbleExpression())) {
						nodes.push(node);
						// If we weren't able to find a binary expression and are out of room, then
						// the expression passed in probably has too much
					} else if(index < length) {
						throwError('Unexpected "' + exprI(index) + '"', index);
					}
				}
			}

			// If there's only one expression just try returning the expression
			if(nodes.length === 1) {
				return nodes[0];
			} else {
				return {
					type: COMPOUND,
					body: nodes
				};
			}
		};

	// To be filled in by the template
	jsep.version = '0.3.0';
	jsep.toString = function() { return 'JavaScript Expression Parser (JSEP) v' + jsep.version; };

	/**
	 * @method jsep.addUnaryOp
	 * @param {string} op_name The name of the unary op to add
	 * @return jsep
	 */
	jsep.addUnaryOp = function(op_name) {
		unary_ops[op_name] = t; return this;
	};

	/**
	 * @method jsep.addBinaryOp
	 * @param {string} op_name The name of the binary op to add
	 * @param {number} precedence The precedence of the binary op (can be a float)
	 * @return jsep
	 */
	jsep.addBinaryOp = function(op_name, precedence) {
		max_binop_len = Math.max(op_name.length, max_binop_len);
		binary_ops[op_name] = precedence;
		return this;
	};

	/**
	 * @method jsep.removeUnaryOp
	 * @param {string} op_name The name of the unary op to remove
	 * @return jsep
	 */
	jsep.removeUnaryOp = function(op_name) {
		delete unary_ops[op_name];
		if(op_name.length === max_unop_len) {
			max_unop_len = getMaxKeyLen(unary_ops);
		}
		return this;
	};

	/**
	 * @method jsep.removeBinaryOp
	 * @param {string} op_name The name of the binary op to remove
	 * @return jsep
	 */
	jsep.removeBinaryOp = function(op_name) {
		delete binary_ops[op_name];
		if(op_name.length === max_binop_len) {
			max_binop_len = getMaxKeyLen(binary_ops);
		}
		return this;
	};

	// In desktop environments, have a way to restore the old value for `jsep`
	if (typeof exports === 'undefined') {
		var old_jsep = root.jsep;
		// The star of the show! It's a function!
		root.jsep = jsep;
		// And a courteous function willing to move out of the way for other similarly-named objects!
		jsep.noConflict = function() {
			if(root.jsep === jsep) {
				root.jsep = old_jsep;
			}
			return jsep;
		};
	} else {
		// In Node.JS environments
		if (typeof module !== 'undefined' && module.exports) {
			exports = module.exports = jsep;
		} else {
			exports.parse = jsep;
		}
	}
}(this));
/*
 * Scroller
 * http://github.com/zynga/scroller
 *
 * Copyright 2011, Zynga Inc.
 * Licensed under the MIT License.
 * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
 *
 * Based on the work of: Unify Project (unify-project.org)
 * http://unify-project.org
 * Copyright 2011, Deutsche Telekom AG
 * License: MIT + Apache (V2)
 */

/**
 * Generic animation class with support for dropped frames both optional easing and duration.
 *
 * Optional duration is useful when the lifetime is defined by another condition than time
 * e.g. speed of an animating object, etc.
 *
 * Dropped frame logic allows to keep using the same updater logic independent from the actual
 * rendering. This eases a lot of cases where it might be pretty complex to break down a state
 * based on the pure time difference.
 */
(function(global) {
	var time = Date.now || function() {
		return +new Date();
	};
	var desiredFrames = 60;
	var millisecondsPerSecond = 1000;
	var running = {};
	var counter = 1;

	// Create namespaces
	if (!global.core) {
		global.core = { effect : {} };

	} else if (!core.effect) {
		core.effect = {};
	}

	core.effect.Animate = {

		/**
		 * A requestAnimationFrame wrapper / polyfill.
		 *
		 * @param callback {Function} The callback to be invoked before the next repaint.
		 * @param root {HTMLElement} The root element for the repaint
		 */
		requestAnimationFrame: (function() {

			// Check for request animation Frame support
			var requestFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame;
			var isNative = !!requestFrame;

			if (requestFrame && !/requestAnimationFrame\(\)\s*\{\s*\[native code\]\s*\}/i.test(requestFrame.toString())) {
				isNative = false;
			}

			if (isNative) {
				return function(callback, root) {
					requestFrame(callback, root)
				};
			}

			var TARGET_FPS = 60;
			var requests = {};
			var requestCount = 0;
			var rafHandle = 1;
			var intervalHandle = null;
			var lastActive = +new Date();

			return function(callback, root) {
				var callbackHandle = rafHandle++;

				// Store callback
				requests[callbackHandle] = callback;
				requestCount++;

				// Create timeout at first request
				if (intervalHandle === null) {

					intervalHandle = setInterval(function() {

						var time = +new Date();
						var currentRequests = requests;

						// Reset data structure before executing callbacks
						requests = {};
						requestCount = 0;

						for(var key in currentRequests) {
							if (currentRequests.hasOwnProperty(key)) {
								currentRequests[key](time);
								lastActive = time;
							}
						}

						// Disable the timeout when nothing happens for a certain
						// period of time
						if (time - lastActive > 2500) {
							clearInterval(intervalHandle);
							intervalHandle = null;
						}

					}, 1000 / TARGET_FPS);
				}

				return callbackHandle;
			};

		})(),


		/**
		 * Stops the given animation.
		 *
		 * @param id {Integer} Unique animation ID
		 * @return {Boolean} Whether the animation was stopped (aka, was running before)
		 */
		stop: function(id) {
			var cleared = running[id] != null;
			if (cleared) {
				running[id] = null;
			}

			return cleared;
		},


		/**
		 * Whether the given animation is still running.
		 *
		 * @param id {Integer} Unique animation ID
		 * @return {Boolean} Whether the animation is still running
		 */
		isRunning: function(id) {
			return running[id] != null;
		},


		/**
		 * Start the animation.
		 *
		 * @param stepCallback {Function} Pointer to function which is executed on every step.
		 *   Signature of the method should be `function(percent, now, virtual) { return continueWithAnimation; }`
		 * @param verifyCallback {Function} Executed before every animation step.
		 *   Signature of the method should be `function() { return continueWithAnimation; }`
		 * @param completedCallback {Function}
		 *   Signature of the method should be `function(droppedFrames, finishedAnimation) {}`
		 * @param duration {Integer} Milliseconds to run the animation
		 * @param easingMethod {Function} Pointer to easing function
		 *   Signature of the method should be `function(percent) { return modifiedValue; }`
		 * @param root {Element ? document.body} Render root, when available. Used for internal
		 *   usage of requestAnimationFrame.
		 * @return {Integer} Identifier of animation. Can be used to stop it any time.
		 */
		start: function(stepCallback, verifyCallback, completedCallback, duration, easingMethod, root) {

			var start = time();
			var lastFrame = start;
			var percent = 0;
			var dropCounter = 0;
			var id = counter++;

			if (!root) {
				root = document.body;
			}

			// Compacting running db automatically every few new animations
			if (id % 20 === 0) {
				var newRunning = {};
				for (var usedId in running) {
					newRunning[usedId] = true;
				}
				running = newRunning;
			}

			// This is the internal step method which is called every few milliseconds
			var step = function(virtual) {

				// Normalize virtual value
				var render = virtual !== true;

				// Get current time
				var now = time();

				// Verification is executed before next animation step
				if (!running[id] || (verifyCallback && !verifyCallback(id))) {

					running[id] = null;
					completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, false);
					return;

				}

				// For the current rendering to apply let's update omitted steps in memory.
				// This is important to bring internal state variables up-to-date with progress in time.
				if (render) {

					var droppedFrames = Math.round((now - lastFrame) / (millisecondsPerSecond / desiredFrames)) - 1;
					for (var j = 0; j < Math.min(droppedFrames, 4); j++) {
						step(true);
						dropCounter++;
					}

				}

				// Compute percent value
				if (duration) {
					percent = (now - start) / duration;
					if (percent > 1) {
						percent = 1;
					}
				}

				// Execute step callback, then...
				var value = easingMethod ? easingMethod(percent) : percent;
				if ((stepCallback(value, now, render) === false || percent === 1) && render) {
					running[id] = null;
					completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, percent === 1 || duration == null);
				} else if (render) {
					lastFrame = now;
					core.effect.Animate.requestAnimationFrame(step, root);
				}
			};

			// Mark as running
			running[id] = true;

			// Init first step
			core.effect.Animate.requestAnimationFrame(step, root);

			// Return unique animation ID
			return id;
		}
	};
})(this);


/*
 * Scroller
 * http://github.com/zynga/scroller
 *
 * Copyright 2011, Zynga Inc.
 * Licensed under the MIT License.
 * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
 *
 * Based on the work of: Unify Project (unify-project.org)
 * http://unify-project.org
 * Copyright 2011, Deutsche Telekom AG
 * License: MIT + Apache (V2)
 */

var Scroller;

(function() {
	var NOOP = function(){};

	/**
	 * A pure logic 'component' for 'virtual' scrolling/zooming.
	 */
	Scroller = function(callback, options) {

		this.__callback = callback;

		this.options = {

			/** Enable scrolling on x-axis */
			scrollingX: true,

			/** Enable scrolling on y-axis */
			scrollingY: true,

			/** Enable animations for deceleration, snap back, zooming and scrolling */
			animating: true,

			/** duration for animations triggered by scrollTo/zoomTo */
			animationDuration: 250,

			/** Enable bouncing (content can be slowly moved outside and jumps back after releasing) */
			bouncing: true,

			/** Enable locking to the main axis if user moves only slightly on one of them at start */
			locking: true,

			/** Enable pagination mode (switching between full page content panes) */
			paging: false,

			/** Enable snapping of content to a configured pixel grid */
			snapping: false,

			/** Enable zooming of content via API, fingers and mouse wheel */
			zooming: false,

			/** Minimum zoom level */
			minZoom: 0.5,

			/** Maximum zoom level */
			maxZoom: 3,

			/** Multiply or decrease scrolling speed **/
			speedMultiplier: 1,

			/** Callback that is fired on the later of touch end or deceleration end,
			 provided that another scrolling action has not begun. Used to know
			 when to fade out a scrollbar. */
			scrollingComplete: NOOP,

			/** This configures the amount of change applied to deceleration when reaching boundaries  **/
			penetrationDeceleration : 0.03,

			/** This configures the amount of change applied to acceleration when reaching boundaries  **/
			penetrationAcceleration : 0.08

		};

		for (var key in options) {
			this.options[key] = options[key];
		}

	};


	// Easing Equations (c) 2003 Robert Penner, all rights reserved.
	// Open source under the BSD License.

	/**
	 * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
	 **/
	var easeOutCubic = function(pos) {
		return (Math.pow((pos - 1), 3) + 1);
	};

	/**
	 * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
	 **/
	var easeInOutCubic = function(pos) {
		if ((pos /= 0.5) < 1) {
			return 0.5 * Math.pow(pos, 3);
		}

		return 0.5 * (Math.pow((pos - 2), 3) + 2);
	};


	var members = {

		/*
		 ---------------------------------------------------------------------------
		 INTERNAL FIELDS :: STATUS
		 ---------------------------------------------------------------------------
		 */

		/** {Boolean} Whether only a single finger is used in touch handling */
		__isSingleTouch: false,

		/** {Boolean} Whether a touch event sequence is in progress */
		__isTracking: false,

		/** {Boolean} Whether a deceleration animation went to completion. */
		__didDecelerationComplete: false,

		/**
		 * {Boolean} Whether a gesture zoom/rotate event is in progress. Activates when
		 * a gesturestart event happens. This has higher priority than dragging.
		 */
		__isGesturing: false,

		/**
		 * {Boolean} Whether the user has moved by such a distance that we have enabled
		 * dragging mode. Hint: It's only enabled after some pixels of movement to
		 * not interrupt with clicks etc.
		 */
		__isDragging: false,

		/**
		 * {Boolean} Not touching and dragging anymore, and smoothly animating the
		 * touch sequence using deceleration.
		 */
		__isDecelerating: false,

		/**
		 * {Boolean} Smoothly animating the currently configured change
		 */
		__isAnimating: false,



		/*
		 ---------------------------------------------------------------------------
		 INTERNAL FIELDS :: DIMENSIONS
		 ---------------------------------------------------------------------------
		 */

		/** {Integer} Available outer left position (from document perspective) */
		__clientLeft: 0,

		/** {Integer} Available outer top position (from document perspective) */
		__clientTop: 0,

		/** {Integer} Available outer width */
		__clientWidth: 0,

		/** {Integer} Available outer height */
		__clientHeight: 0,

		/** {Integer} Outer width of content */
		__contentWidth: 0,

		/** {Integer} Outer height of content */
		__contentHeight: 0,

		/** {Integer} Snapping width for content */
		__snapWidth: 100,

		/** {Integer} Snapping height for content */
		__snapHeight: 100,

		/** {Integer} Height to assign to refresh area */
		__refreshHeight: null,

		/** {Boolean} Whether the refresh process is enabled when the event is released now */
		__refreshActive: false,

		/** {Function} Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release */
		__refreshActivate: null,

		/** {Function} Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled */
		__refreshDeactivate: null,

		/** {Function} Callback to execute to start the actual refresh. Call {@link #refreshFinish} when done */
		__refreshStart: null,

		/** {Number} Zoom level */
		__zoomLevel: 1,

		/** {Number} Scroll position on x-axis */
		__scrollLeft: 0,

		/** {Number} Scroll position on y-axis */
		__scrollTop: 0,

		/** {Integer} Maximum allowed scroll position on x-axis */
		__maxScrollLeft: 0,

		/** {Integer} Maximum allowed scroll position on y-axis */
		__maxScrollTop: 0,

		/* {Number} Scheduled left position (final position when animating) */
		__scheduledLeft: 0,

		/* {Number} Scheduled top position (final position when animating) */
		__scheduledTop: 0,

		/* {Number} Scheduled zoom level (final scale when animating) */
		__scheduledZoom: 0,



		/*
		 ---------------------------------------------------------------------------
		 INTERNAL FIELDS :: LAST POSITIONS
		 ---------------------------------------------------------------------------
		 */

		/** {Number} Left position of finger at start */
		__lastTouchLeft: null,

		/** {Number} Top position of finger at start */
		__lastTouchTop: null,

		/** {Date} Timestamp of last move of finger. Used to limit tracking range for deceleration speed. */
		__lastTouchMove: null,

		/** {Array} List of positions, uses three indexes for each state: left, top, timestamp */
		__positions: null,



		/*
		 ---------------------------------------------------------------------------
		 INTERNAL FIELDS :: DECELERATION SUPPORT
		 ---------------------------------------------------------------------------
		 */

		/** {Integer} Minimum left scroll position during deceleration */
		__minDecelerationScrollLeft: null,

		/** {Integer} Minimum top scroll position during deceleration */
		__minDecelerationScrollTop: null,

		/** {Integer} Maximum left scroll position during deceleration */
		__maxDecelerationScrollLeft: null,

		/** {Integer} Maximum top scroll position during deceleration */
		__maxDecelerationScrollTop: null,

		/** {Number} Current factor to modify horizontal scroll position with on every step */
		__decelerationVelocityX: null,

		/** {Number} Current factor to modify vertical scroll position with on every step */
		__decelerationVelocityY: null,



		/*
		 ---------------------------------------------------------------------------
		 PUBLIC API
		 ---------------------------------------------------------------------------
		 */

		/**
		 * Configures the dimensions of the client (outer) and content (inner) elements.
		 * Requires the available space for the outer element and the outer size of the inner element.
		 * All values which are falsy (null or zero etc.) are ignored and the old value is kept.
		 *
		 * @param clientWidth {Integer ? null} Inner width of outer element
		 * @param clientHeight {Integer ? null} Inner height of outer element
		 * @param contentWidth {Integer ? null} Outer width of inner element
		 * @param contentHeight {Integer ? null} Outer height of inner element
		 */
		setDimensions: function(clientWidth, clientHeight, contentWidth, contentHeight) {

			var self = this;

			// Only update values which are defined
			if (clientWidth === +clientWidth) {
				self.__clientWidth = clientWidth;
			}

			if (clientHeight === +clientHeight) {
				self.__clientHeight = clientHeight;
			}

			if (contentWidth === +contentWidth) {
				self.__contentWidth = contentWidth;
			}

			if (contentHeight === +contentHeight) {
				self.__contentHeight = contentHeight;
			}

			// Refresh maximums
			self.__computeScrollMax();

			// Refresh scroll position
			self.scrollTo(self.__scrollLeft, self.__scrollTop, true);

		},


		/**
		 * Sets the client coordinates in relation to the document.
		 *
		 * @param left {Integer ? 0} Left position of outer element
		 * @param top {Integer ? 0} Top position of outer element
		 */
		setPosition: function(left, top) {

			var self = this;

			self.__clientLeft = left || 0;
			self.__clientTop = top || 0;

		},


		/**
		 * Configures the snapping (when snapping is active)
		 *
		 * @param width {Integer} Snapping width
		 * @param height {Integer} Snapping height
		 */
		setSnapSize: function(width, height) {

			var self = this;

			self.__snapWidth = width;
			self.__snapHeight = height;

		},


		/**
		 * Activates pull-to-refresh. A special zone on the top of the list to start a list refresh whenever
		 * the user event is released during visibility of this zone. This was introduced by some apps on iOS like
		 * the official Twitter client.
		 *
		 * @param height {Integer} Height of pull-to-refresh zone on top of rendered list
		 * @param activateCallback {Function} Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release.
		 * @param deactivateCallback {Function} Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled.
		 * @param startCallback {Function} Callback to execute to start the real async refresh action. Call {@link #finishPullToRefresh} after finish of refresh.
		 */
		activatePullToRefresh: function(height, activateCallback, deactivateCallback, startCallback) {

			var self = this;

			self.__refreshHeight = height;
			self.__refreshActivate = activateCallback;
			self.__refreshDeactivate = deactivateCallback;
			self.__refreshStart = startCallback;

		},


		/**
		 * Starts pull-to-refresh manually.
		 */
		triggerPullToRefresh: function() {
			// Use publish instead of scrollTo to allow scrolling to out of boundary position
			// We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
			this.__publish(this.__scrollLeft, -this.__refreshHeight, this.__zoomLevel, true);

			if (this.__refreshStart) {
				this.__refreshStart();
			}
		},


		/**
		 * Signalizes that pull-to-refresh is finished.
		 */
		finishPullToRefresh: function() {

			var self = this;

			self.__refreshActive = false;
			if (self.__refreshDeactivate) {
				self.__refreshDeactivate();
			}

			self.scrollTo(self.__scrollLeft, self.__scrollTop, true);

		},


		/**
		 * Returns the scroll position and zooming values
		 *
		 * @return {Map} `left` and `top` scroll position and `zoom` level
		 */
		getValues: function() {

			var self = this;

			return {
				left: self.__scrollLeft,
				top: self.__scrollTop,
				zoom: self.__zoomLevel
			};

		},


		/**
		 * Returns the maximum scroll values
		 *
		 * @return {Map} `left` and `top` maximum scroll values
		 */
		getScrollMax: function() {

			var self = this;

			return {
				left: self.__maxScrollLeft,
				top: self.__maxScrollTop
			};

		},


		/**
		 * Zooms to the given level. Supports optional animation. Zooms
		 * the center when no coordinates are given.
		 *
		 * @param level {Number} Level to zoom to
		 * @param animate {Boolean ? false} Whether to use animation
		 * @param originLeft {Number ? null} Zoom in at given left coordinate
		 * @param originTop {Number ? null} Zoom in at given top coordinate
		 * @param callback {Function ? null} A callback that gets fired when the zoom is complete.
		 */
		zoomTo: function(level, animate, originLeft, originTop, callback) {

			var self = this;

			if (!self.options.zooming) {
				throw new Error("Zooming is not enabled!");
			}

			// Add callback if exists
			if(callback) {
				self.__zoomComplete = callback;
			}

			// Stop deceleration
			if (self.__isDecelerating) {
				core.effect.Animate.stop(self.__isDecelerating);
				self.__isDecelerating = false;
			}

			var oldLevel = self.__zoomLevel;

			// Normalize input origin to center of viewport if not defined
			if (originLeft == null) {
				originLeft = self.__clientWidth / 2;
			}

			if (originTop == null) {
				originTop = self.__clientHeight / 2;
			}

			// Limit level according to configuration
			level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

			// Recompute maximum values while temporary tweaking maximum scroll ranges
			self.__computeScrollMax(level);

			// Recompute left and top coordinates based on new zoom level
			var left = ((originLeft + self.__scrollLeft) * level / oldLevel) - originLeft;
			var top = ((originTop + self.__scrollTop) * level / oldLevel) - originTop;

			// Limit x-axis
			if (left > self.__maxScrollLeft) {
				left = self.__maxScrollLeft;
			} else if (left < 0) {
				left = 0;
			}

			// Limit y-axis
			if (top > self.__maxScrollTop) {
				top = self.__maxScrollTop;
			} else if (top < 0) {
				top = 0;
			}

			// Push values out
			self.__publish(left, top, level, animate);

		},


		/**
		 * Zooms the content by the given factor.
		 *
		 * @param factor {Number} Zoom by given factor
		 * @param animate {Boolean ? false} Whether to use animation
		 * @param originLeft {Number ? 0} Zoom in at given left coordinate
		 * @param originTop {Number ? 0} Zoom in at given top coordinate
		 * @param callback {Function ? null} A callback that gets fired when the zoom is complete.
		 */
		zoomBy: function(factor, animate, originLeft, originTop, callback) {

			var self = this;

			self.zoomTo(self.__zoomLevel * factor, animate, originLeft, originTop, callback);

		},


		/**
		 * Scrolls to the given position. Respect limitations and snapping automatically.
		 *
		 * @param left {Number?null} Horizontal scroll position, keeps current if value is <code>null</code>
		 * @param top {Number?null} Vertical scroll position, keeps current if value is <code>null</code>
		 * @param animate {Boolean?false} Whether the scrolling should happen using an animation
		 * @param zoom {Number?null} Zoom level to go to
		 */
		scrollTo: function(left, top, animate, zoom) {

			var self = this;

			// Stop deceleration
			if (self.__isDecelerating) {
				core.effect.Animate.stop(self.__isDecelerating);
				self.__isDecelerating = false;
			}

			// Correct coordinates based on new zoom level
			if (zoom != null && zoom !== self.__zoomLevel) {

				if (!self.options.zooming) {
					throw new Error("Zooming is not enabled!");
				}

				left *= zoom;
				top *= zoom;

				// Recompute maximum values while temporary tweaking maximum scroll ranges
				self.__computeScrollMax(zoom);

			} else {

				// Keep zoom when not defined
				zoom = self.__zoomLevel;

			}

			if (!self.options.scrollingX) {

				left = self.__scrollLeft;

			} else {

				if (self.options.paging) {
					left = Math.round(left / self.__clientWidth) * self.__clientWidth;
				} else if (self.options.snapping) {
					left = Math.round(left / self.__snapWidth) * self.__snapWidth;
				}

			}

			if (!self.options.scrollingY) {

				top = self.__scrollTop;

			} else {

				if (self.options.paging) {
					top = Math.round(top / self.__clientHeight) * self.__clientHeight;
				} else if (self.options.snapping) {
					top = Math.round(top / self.__snapHeight) * self.__snapHeight;
				}

			}

			// Limit for allowed ranges
			left = Math.max(Math.min(self.__maxScrollLeft, left), 0);
			top = Math.max(Math.min(self.__maxScrollTop, top), 0);

			// Don't animate when no change detected, still call publish to make sure
			// that rendered position is really in-sync with internal data
			if (left === self.__scrollLeft && top === self.__scrollTop) {
				animate = false;
			}

			// Publish new values
			self.__publish(left, top, zoom, animate);

		},


		/**
		 * Scroll by the given offset
		 *
		 * @param left {Number ? 0} Scroll x-axis by given offset
		 * @param top {Number ? 0} Scroll x-axis by given offset
		 * @param animate {Boolean ? false} Whether to animate the given change
		 */
		scrollBy: function(left, top, animate) {

			var self = this;

			var startLeft = self.__isAnimating ? self.__scheduledLeft : self.__scrollLeft;
			var startTop = self.__isAnimating ? self.__scheduledTop : self.__scrollTop;

			self.scrollTo(startLeft + (left || 0), startTop + (top || 0), animate);

		},



		/*
		 ---------------------------------------------------------------------------
		 EVENT CALLBACKS
		 ---------------------------------------------------------------------------
		 */

		/**
		 * Mouse wheel handler for zooming support
		 */
		doMouseZoom: function(wheelDelta, timeStamp, pageX, pageY) {

			var self = this;
			var change = wheelDelta > 0 ? 0.97 : 1.03;

			return self.zoomTo(self.__zoomLevel * change, false, pageX - self.__clientLeft, pageY - self.__clientTop);

		},


		/**
		 * Touch start handler for scrolling support
		 */
		doTouchStart: function(touches, timeStamp) {

			// Array-like check is enough here
			if (touches.length == null) {
				throw new Error("Invalid touch list: " + touches);
			}

			if (timeStamp instanceof Date) {
				timeStamp = timeStamp.valueOf();
			}
			if (typeof timeStamp !== "number") {
				throw new Error("Invalid timestamp value: " + timeStamp);
			}

			var self = this;

			// Reset interruptedAnimation flag
			self.__interruptedAnimation = true;

			// Stop deceleration
			if (self.__isDecelerating) {
				core.effect.Animate.stop(self.__isDecelerating);
				self.__isDecelerating = false;
				self.__interruptedAnimation = true;
			}

			// Stop animation
			if (self.__isAnimating) {
				core.effect.Animate.stop(self.__isAnimating);
				self.__isAnimating = false;
				self.__interruptedAnimation = true;
			}

			// Use center point when dealing with two fingers
			var currentTouchLeft, currentTouchTop;
			var isSingleTouch = touches.length === 1;
			if (isSingleTouch) {
				currentTouchLeft = touches[0].pageX;
				currentTouchTop = touches[0].pageY;
			} else {
				currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
				currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
			}

			// Store initial positions
			self.__initialTouchLeft = currentTouchLeft;
			self.__initialTouchTop = currentTouchTop;

			// Store current zoom level
			self.__zoomLevelStart = self.__zoomLevel;

			// Store initial touch positions
			self.__lastTouchLeft = currentTouchLeft;
			self.__lastTouchTop = currentTouchTop;

			// Store initial move time stamp
			self.__lastTouchMove = timeStamp;

			// Reset initial scale
			self.__lastScale = 1;

			// Reset locking flags
			self.__enableScrollX = !isSingleTouch && self.options.scrollingX;
			self.__enableScrollY = !isSingleTouch && self.options.scrollingY;

			// Reset tracking flag
			self.__isTracking = true;

			// Reset deceleration complete flag
			self.__didDecelerationComplete = false;

			// Dragging starts directly with two fingers, otherwise lazy with an offset
			self.__isDragging = !isSingleTouch;

			// Some features are disabled in multi touch scenarios
			self.__isSingleTouch = isSingleTouch;

			// Clearing data structure
			self.__positions = [];

		},


		/**
		 * Touch move handler for scrolling support
		 */
		doTouchMove: function(touches, timeStamp, scale) {

			// Array-like check is enough here
			if (touches.length == null) {
				throw new Error("Invalid touch list: " + touches);
			}

			if (timeStamp instanceof Date) {
				timeStamp = timeStamp.valueOf();
			}
			if (typeof timeStamp !== "number") {
				throw new Error("Invalid timestamp value: " + timeStamp);
			}

			var self = this;

			// Ignore event when tracking is not enabled (event might be outside of element)
			if (!self.__isTracking) {
				return;
			}


			var currentTouchLeft, currentTouchTop;

			// Compute move based around of center of fingers
			if (touches.length === 2) {
				currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
				currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
			} else {
				currentTouchLeft = touches[0].pageX;
				currentTouchTop = touches[0].pageY;
			}

			var positions = self.__positions;

			// Are we already is dragging mode?
			if (self.__isDragging) {

				// Compute move distance
				var moveX = currentTouchLeft - self.__lastTouchLeft;
				var moveY = currentTouchTop - self.__lastTouchTop;

				// Read previous scroll position and zooming
				var scrollLeft = self.__scrollLeft;
				var scrollTop = self.__scrollTop;
				var level = self.__zoomLevel;

				// Work with scaling
				if (scale != null && self.options.zooming) {

					var oldLevel = level;

					// Recompute level based on previous scale and new scale
					level = level / self.__lastScale * scale;

					// Limit level according to configuration
					level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

					// Only do further compution when change happened
					if (oldLevel !== level) {

						// Compute relative event position to container
						var currentTouchLeftRel = currentTouchLeft - self.__clientLeft;
						var currentTouchTopRel = currentTouchTop - self.__clientTop;

						// Recompute left and top coordinates based on new zoom level
						scrollLeft = ((currentTouchLeftRel + scrollLeft) * level / oldLevel) - currentTouchLeftRel;
						scrollTop = ((currentTouchTopRel + scrollTop) * level / oldLevel) - currentTouchTopRel;

						// Recompute max scroll values
						self.__computeScrollMax(level);

					}
				}

				if (self.__enableScrollX) {

					scrollLeft -= moveX * this.options.speedMultiplier;
					var maxScrollLeft = self.__maxScrollLeft;

					if (scrollLeft > maxScrollLeft || scrollLeft < 0) {

						// Slow down on the edges
						if (self.options.bouncing) {

							scrollLeft += (moveX / 2  * this.options.speedMultiplier);

						} else if (scrollLeft > maxScrollLeft) {

							scrollLeft = maxScrollLeft;

						} else {

							scrollLeft = 0;

						}
					}
				}

				// Compute new vertical scroll position
				if (self.__enableScrollY) {

					scrollTop -= moveY * this.options.speedMultiplier;
					var maxScrollTop = self.__maxScrollTop;

					if (scrollTop > maxScrollTop || scrollTop < 0) {

						// Slow down on the edges
						if (self.options.bouncing) {

							scrollTop += (moveY / 2 * this.options.speedMultiplier);

							// Support pull-to-refresh (only when only y is scrollable)
							if (!self.__enableScrollX && self.__refreshHeight != null) {

								if (!self.__refreshActive && scrollTop <= -self.__refreshHeight) {

									self.__refreshActive = true;
									if (self.__refreshActivate) {
										self.__refreshActivate();
									}

								} else if (self.__refreshActive && scrollTop > -self.__refreshHeight) {

									self.__refreshActive = false;
									if (self.__refreshDeactivate) {
										self.__refreshDeactivate();
									}

								}
							}

						} else if (scrollTop > maxScrollTop) {

							scrollTop = maxScrollTop;

						} else {

							scrollTop = 0;

						}
					}
				}

				// Keep list from growing infinitely (holding min 10, max 20 measure points)
				if (positions.length > 60) {
					positions.splice(0, 30);
				}

				// Track scroll movement for decleration
				positions.push(scrollLeft, scrollTop, timeStamp);

				// Sync scroll position
				self.__publish(scrollLeft, scrollTop, level);

				// Otherwise figure out whether we are switching into dragging mode now.
			} else {

				var minimumTrackingForScroll = self.options.locking ? 3 : 0;
				var minimumTrackingForDrag = 5;

				var distanceX = Math.abs(currentTouchLeft - self.__initialTouchLeft);
				var distanceY = Math.abs(currentTouchTop - self.__initialTouchTop);

				self.__enableScrollX = self.options.scrollingX && distanceX >= minimumTrackingForScroll;
				self.__enableScrollY = self.options.scrollingY && distanceY >= minimumTrackingForScroll;

				positions.push(self.__scrollLeft, self.__scrollTop, timeStamp);

				self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
				if (self.__isDragging) {
					self.__interruptedAnimation = false;
				}

			}

			// Update last touch positions and time stamp for next event
			self.__lastTouchLeft = currentTouchLeft;
			self.__lastTouchTop = currentTouchTop;
			self.__lastTouchMove = timeStamp;
			self.__lastScale = scale;

		},


		/**
		 * Touch end handler for scrolling support
		 */
		doTouchEnd: function(timeStamp) {

			if (timeStamp instanceof Date) {
				timeStamp = timeStamp.valueOf();
			}
			if (typeof timeStamp !== "number") {
				throw new Error("Invalid timestamp value: " + timeStamp);
			}

			var self = this;

			// Ignore event when tracking is not enabled (no touchstart event on element)
			// This is required as this listener ('touchmove') sits on the document and not on the element itself.
			if (!self.__isTracking) {
				return;
			}

			// Not touching anymore (when two finger hit the screen there are two touch end events)
			self.__isTracking = false;

			// Be sure to reset the dragging flag now. Here we also detect whether
			// the finger has moved fast enough to switch into a deceleration animation.
			if (self.__isDragging) {

				// Reset dragging flag
				self.__isDragging = false;

				// Start deceleration
				// Verify that the last move detected was in some relevant time frame
				if (self.__isSingleTouch && self.options.animating && (timeStamp - self.__lastTouchMove) <= 100) {

					// Then figure out what the scroll position was about 100ms ago
					var positions = self.__positions;
					var endPos = positions.length - 1;
					var startPos = endPos;

					// Move pointer to position measured 100ms ago
					for (var i = endPos; i > 0 && positions[i] > (self.__lastTouchMove - 100); i -= 3) {
						startPos = i;
					}

					// If start and stop position is identical in a 100ms timeframe,
					// we cannot compute any useful deceleration.
					if (startPos !== endPos) {

						// Compute relative movement between these two points
						var timeOffset = positions[endPos] - positions[startPos];
						var movedLeft = self.__scrollLeft - positions[startPos - 2];
						var movedTop = self.__scrollTop - positions[startPos - 1];

						// Based on 50ms compute the movement to apply for each render step
						self.__decelerationVelocityX = movedLeft / timeOffset * (1000 / 60);
						self.__decelerationVelocityY = movedTop / timeOffset * (1000 / 60);

						// How much velocity is required to start the deceleration
						var minVelocityToStartDeceleration = self.options.paging || self.options.snapping ? 4 : 1;

						// Verify that we have enough velocity to start deceleration
						if (Math.abs(self.__decelerationVelocityX) > minVelocityToStartDeceleration || Math.abs(self.__decelerationVelocityY) > minVelocityToStartDeceleration) {

							// Deactivate pull-to-refresh when decelerating
							if (!self.__refreshActive) {
								self.__startDeceleration(timeStamp);
							}
						}
					} else {
						self.options.scrollingComplete();
					}
				} else if ((timeStamp - self.__lastTouchMove) > 100) {
					self.options.scrollingComplete();
				}
			}

			// If this was a slower move it is per default non decelerated, but this
			// still means that we want snap back to the bounds which is done here.
			// This is placed outside the condition above to improve edge case stability
			// e.g. touchend fired without enabled dragging. This should normally do not
			// have modified the scroll positions or even showed the scrollbars though.
			if (!self.__isDecelerating) {

				if (self.__refreshActive && self.__refreshStart) {

					// Use publish instead of scrollTo to allow scrolling to out of boundary position
					// We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
					self.__publish(self.__scrollLeft, -self.__refreshHeight, self.__zoomLevel, true);

					if (self.__refreshStart) {
						self.__refreshStart();
					}

				} else {

					if (self.__interruptedAnimation || self.__isDragging) {
						self.options.scrollingComplete();
					}
					self.scrollTo(self.__scrollLeft, self.__scrollTop, true, self.__zoomLevel);

					// Directly signalize deactivation (nothing todo on refresh?)
					if (self.__refreshActive) {

						self.__refreshActive = false;
						if (self.__refreshDeactivate) {
							self.__refreshDeactivate();
						}

					}
				}
			}

			// Fully cleanup list
			self.__positions.length = 0;

		},



		/*
		 ---------------------------------------------------------------------------
		 PRIVATE API
		 ---------------------------------------------------------------------------
		 */

		/**
		 * Applies the scroll position to the content element
		 *
		 * @param left {Number} Left scroll position
		 * @param top {Number} Top scroll position
		 * @param animate {Boolean?false} Whether animation should be used to move to the new coordinates
		 */
		__publish: function(left, top, zoom, animate) {

			var self = this;

			// Remember whether we had an animation, then we try to continue based on the current "drive" of the animation
			var wasAnimating = self.__isAnimating;
			if (wasAnimating) {
				core.effect.Animate.stop(wasAnimating);
				self.__isAnimating = false;
			}

			if (animate && self.options.animating) {

				// Keep scheduled positions for scrollBy/zoomBy functionality
				self.__scheduledLeft = left;
				self.__scheduledTop = top;
				self.__scheduledZoom = zoom;

				var oldLeft = self.__scrollLeft;
				var oldTop = self.__scrollTop;
				var oldZoom = self.__zoomLevel;

				var diffLeft = left - oldLeft;
				var diffTop = top - oldTop;
				var diffZoom = zoom - oldZoom;

				var step = function(percent, now, render) {

					if (render) {

						self.__scrollLeft = oldLeft + (diffLeft * percent);
						self.__scrollTop = oldTop + (diffTop * percent);
						self.__zoomLevel = oldZoom + (diffZoom * percent);

						// Push values out
						if (self.__callback) {
							self.__callback(self.__scrollLeft, self.__scrollTop, self.__zoomLevel);
						}

					}
				};

				var verify = function(id) {
					return self.__isAnimating === id;
				};

				var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
					if (animationId === self.__isAnimating) {
						self.__isAnimating = false;
					}
					if (self.__didDecelerationComplete || wasFinished) {
						self.options.scrollingComplete();
					}

					if (self.options.zooming) {
						self.__computeScrollMax();
						if(self.__zoomComplete) {
							self.__zoomComplete();
							self.__zoomComplete = null;
						}
					}
				};

				// When continuing based on previous animation we choose an ease-out animation instead of ease-in-out
				self.__isAnimating = core.effect.Animate.start(step, verify, completed, self.options.animationDuration, wasAnimating ? easeOutCubic : easeInOutCubic);

			} else {

				self.__scheduledLeft = self.__scrollLeft = left;
				self.__scheduledTop = self.__scrollTop = top;
				self.__scheduledZoom = self.__zoomLevel = zoom;

				// Push values out
				if (self.__callback) {
					self.__callback(left, top, zoom);
				}

				// Fix max scroll ranges
				if (self.options.zooming) {
					self.__computeScrollMax();
					if(self.__zoomComplete) {
						self.__zoomComplete();
						self.__zoomComplete = null;
					}
				}
			}
		},


		/**
		 * Recomputes scroll minimum values based on client dimensions and content dimensions.
		 */
		__computeScrollMax: function(zoomLevel) {

			var self = this;

			if (zoomLevel == null) {
				zoomLevel = self.__zoomLevel;
			}

			self.__maxScrollLeft = Math.max((self.__contentWidth * zoomLevel) - self.__clientWidth, 0);
			self.__maxScrollTop = Math.max((self.__contentHeight * zoomLevel) - self.__clientHeight, 0);

		},



		/*
		 ---------------------------------------------------------------------------
		 ANIMATION (DECELERATION) SUPPORT
		 ---------------------------------------------------------------------------
		 */

		/**
		 * Called when a touch sequence end and the speed of the finger was high enough
		 * to switch into deceleration mode.
		 */
		__startDeceleration: function(timeStamp) {

			var self = this;

			if (self.options.paging) {

				var scrollLeft = Math.max(Math.min(self.__scrollLeft, self.__maxScrollLeft), 0);
				var scrollTop = Math.max(Math.min(self.__scrollTop, self.__maxScrollTop), 0);
				var clientWidth = self.__clientWidth;
				var clientHeight = self.__clientHeight;

				// We limit deceleration not to the min/max values of the allowed range, but to the size of the visible client area.
				// Each page should have exactly the size of the client area.
				self.__minDecelerationScrollLeft = Math.floor(scrollLeft / clientWidth) * clientWidth;
				self.__minDecelerationScrollTop = Math.floor(scrollTop / clientHeight) * clientHeight;
				self.__maxDecelerationScrollLeft = Math.ceil(scrollLeft / clientWidth) * clientWidth;
				self.__maxDecelerationScrollTop = Math.ceil(scrollTop / clientHeight) * clientHeight;

			} else {

				self.__minDecelerationScrollLeft = 0;
				self.__minDecelerationScrollTop = 0;
				self.__maxDecelerationScrollLeft = self.__maxScrollLeft;
				self.__maxDecelerationScrollTop = self.__maxScrollTop;

			}

			// Wrap class method
			var step = function(percent, now, render) {
				self.__stepThroughDeceleration(render);
			};

			// How much velocity is required to keep the deceleration running
			var minVelocityToKeepDecelerating = self.options.snapping ? 4 : 0.1;

			// Detect whether it's still worth to continue animating steps
			// If we are already slow enough to not being user perceivable anymore, we stop the whole process here.
			var verify = function() {
				var shouldContinue = Math.abs(self.__decelerationVelocityX) >= minVelocityToKeepDecelerating || Math.abs(self.__decelerationVelocityY) >= minVelocityToKeepDecelerating;
				if (!shouldContinue) {
					self.__didDecelerationComplete = true;
				}
				return shouldContinue;
			};

			var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
				self.__isDecelerating = false;
				if (self.__didDecelerationComplete) {
					self.options.scrollingComplete();
				}

				// Animate to grid when snapping is active, otherwise just fix out-of-boundary positions
				self.scrollTo(self.__scrollLeft, self.__scrollTop, self.options.snapping);
			};

			// Start animation and switch on flag
			self.__isDecelerating = core.effect.Animate.start(step, verify, completed);

		},


		/**
		 * Called on every step of the animation
		 *
		 * @param inMemory {Boolean?false} Whether to not render the current step, but keep it in memory only. Used internally only!
		 */
		__stepThroughDeceleration: function(render) {

			var self = this;


			//
			// COMPUTE NEXT SCROLL POSITION
			//

			// Add deceleration to scroll position
			var scrollLeft = self.__scrollLeft + self.__decelerationVelocityX;
			var scrollTop = self.__scrollTop + self.__decelerationVelocityY;


			//
			// HARD LIMIT SCROLL POSITION FOR NON BOUNCING MODE
			//

			if (!self.options.bouncing) {

				var scrollLeftFixed = Math.max(Math.min(self.__maxDecelerationScrollLeft, scrollLeft), self.__minDecelerationScrollLeft);
				if (scrollLeftFixed !== scrollLeft) {
					scrollLeft = scrollLeftFixed;
					self.__decelerationVelocityX = 0;
				}

				var scrollTopFixed = Math.max(Math.min(self.__maxDecelerationScrollTop, scrollTop), self.__minDecelerationScrollTop);
				if (scrollTopFixed !== scrollTop) {
					scrollTop = scrollTopFixed;
					self.__decelerationVelocityY = 0;
				}

			}


			//
			// UPDATE SCROLL POSITION
			//

			if (render) {

				self.__publish(scrollLeft, scrollTop, self.__zoomLevel);

			} else {

				self.__scrollLeft = scrollLeft;
				self.__scrollTop = scrollTop;

			}


			//
			// SLOW DOWN
			//

			// Slow down velocity on every iteration
			if (!self.options.paging) {

				// This is the factor applied to every iteration of the animation
				// to slow down the process. This should emulate natural behavior where
				// objects slow down when the initiator of the movement is removed
				var frictionFactor = 0.95;

				self.__decelerationVelocityX *= frictionFactor;
				self.__decelerationVelocityY *= frictionFactor;

			}


			//
			// BOUNCING SUPPORT
			//

			if (self.options.bouncing) {

				var scrollOutsideX = 0;
				var scrollOutsideY = 0;

				// This configures the amount of change applied to deceleration/acceleration when reaching boundaries
				var penetrationDeceleration = self.options.penetrationDeceleration;
				var penetrationAcceleration = self.options.penetrationAcceleration;

				// Check limits
				if (scrollLeft < self.__minDecelerationScrollLeft) {
					scrollOutsideX = self.__minDecelerationScrollLeft - scrollLeft;
				} else if (scrollLeft > self.__maxDecelerationScrollLeft) {
					scrollOutsideX = self.__maxDecelerationScrollLeft - scrollLeft;
				}

				if (scrollTop < self.__minDecelerationScrollTop) {
					scrollOutsideY = self.__minDecelerationScrollTop - scrollTop;
				} else if (scrollTop > self.__maxDecelerationScrollTop) {
					scrollOutsideY = self.__maxDecelerationScrollTop - scrollTop;
				}

				// Slow down until slow enough, then flip back to snap position
				if (scrollOutsideX !== 0) {
					if (scrollOutsideX * self.__decelerationVelocityX <= 0) {
						self.__decelerationVelocityX += scrollOutsideX * penetrationDeceleration;
					} else {
						self.__decelerationVelocityX = scrollOutsideX * penetrationAcceleration;
					}
				}

				if (scrollOutsideY !== 0) {
					if (scrollOutsideY * self.__decelerationVelocityY <= 0) {
						self.__decelerationVelocityY += scrollOutsideY * penetrationDeceleration;
					} else {
						self.__decelerationVelocityY = scrollOutsideY * penetrationAcceleration;
					}
				}
			}
		}
	};

	// Copy over members to prototype
	for (var key in members) {
		Scroller.prototype[key] = members[key];
	}

})();
var EasyScroller = function(content, options) {
	
	this.content = content;
	this.container = content.parentNode;
	this.options = options || {};

	// create Scroller instance
	var that = this;
	this.scroller = new Scroller(function(left, top, zoom) {
		that.render(left, top, zoom);
	}, options);

	// bind events
	this.bindEvents();

	// the content element needs a correct transform origin for zooming
	this.content.style[EasyScroller.vendorPrefix + 'TransformOrigin'] = "left top";

	// reflow for the first time
	this.reflow();

};

EasyScroller.prototype.render = (function() {
	
	var docStyle = document.documentElement.style;
	
	var engine;
	if (window.opera && Object.prototype.toString.call(opera) === '[object Opera]') {
		engine = 'presto';
	} else if ('MozAppearance' in docStyle) {
		engine = 'gecko';
	} else if ('WebkitAppearance' in docStyle) {
		engine = 'webkit';
	} else if (typeof navigator.cpuClass === 'string') {
		engine = 'trident';
	}
	
	var vendorPrefix = EasyScroller.vendorPrefix = {
		trident: 'ms',
		gecko: 'Moz',
		webkit: 'Webkit',
		presto: 'O'
	}[engine];
	
	var helperElem = document.createElement("div");
	var undef;
	
	var perspectiveProperty = vendorPrefix + "Perspective";
	var transformProperty = vendorPrefix + "Transform";
	
	if (helperElem.style[perspectiveProperty] !== undef) {
		
		return function(left, top, zoom) {
			this.content.style[transformProperty] = 'translate3d(' + (-left) + 'px,' + (-top) + 'px,0) scale(' + zoom + ')';
		};	
		
	} else if (helperElem.style[transformProperty] !== undef) {
		
		return function(left, top, zoom) {
			this.content.style[transformProperty] = 'translate(' + (-left) + 'px,' + (-top) + 'px) scale(' + zoom + ')';
		};
		
	} else {
		
		return function(left, top, zoom) {
			this.content.style.marginLeft = left ? (-left/zoom) + 'px' : '';
			this.content.style.marginTop = top ? (-top/zoom) + 'px' : '';
			this.content.style.zoom = zoom || '';
		};
		
	}
})();

EasyScroller.prototype.reflow = function() {

	// set the right scroller dimensions
	this.scroller.setDimensions(this.container.clientWidth, this.container.clientHeight, this.content.offsetWidth, this.content.offsetHeight);

	// refresh the position for zooming purposes
	var rect = this.container.getBoundingClientRect();
	this.scroller.setPosition(rect.left + this.container.clientLeft, rect.top + this.container.clientTop);
	
};

EasyScroller.prototype.bindEvents = function() {

	var that = this;

	// reflow handling
	window.addEventListener("resize", function() {
		that.reflow();
	}, false);

	// touch devices bind touch events
	if ('ontouchstart' in window) {

		this.container.addEventListener("touchstart", function(e) {

			// Don't react if initial down happens on a form element
			if (e.touches[0] && e.touches[0].target && e.touches[0].target.tagName.match(/input|textarea|select/i)) {
				return;
			}

			that.scroller.doTouchStart(e.touches, e.timeStamp);
			e.preventDefault();

		}, false);

		document.addEventListener("touchmove", function(e) {
			that.scroller.doTouchMove(e.touches, e.timeStamp, e.scale);
		}, false);

		document.addEventListener("touchend", function(e) {
			that.scroller.doTouchEnd(e.timeStamp);
		}, false);

		document.addEventListener("touchcancel", function(e) {
			that.scroller.doTouchEnd(e.timeStamp);
		}, false);

	// non-touch bind mouse events
	} else {
		
		var mousedown = false;

		this.container.addEventListener("mousedown", function(e) {

			if (e.target.tagName.match(/input|textarea|select/i)) {
				return;
			}
		
			that.scroller.doTouchStart([{
				pageX: e.pageX,
				pageY: e.pageY
			}], e.timeStamp);

			mousedown = true;
			e.preventDefault();

		}, false);

		document.addEventListener("mousemove", function(e) {

			if (!mousedown) {
				return;
			}
			
			that.scroller.doTouchMove([{
				pageX: e.pageX,
				pageY: e.pageY
			}], e.timeStamp);

			mousedown = true;

		}, false);

		document.addEventListener("mouseup", function(e) {

			if (!mousedown) {
				return;
			}
			
			that.scroller.doTouchEnd(e.timeStamp);

			mousedown = false;

		}, false);

		this.container.addEventListener("mousewheel", function(e) {
			if(that.options.zooming) {
				that.scroller.doMouseZoom(e.wheelDelta, e.timeStamp, e.pageX, e.pageY);	
				e.preventDefault();
			}
		}, false);

	}

};

// automatically attach an EasyScroller to elements found with the right data attributes
document.addEventListener("DOMContentLoaded", function() {
	
	var elements = document.querySelectorAll('[data-scrollable],[data-zoomable]'), element;
	for (var i = 0; i < elements.length; i++) {

		element = elements[i];
		var scrollable = element.dataset.scrollable;
		var zoomable = element.dataset.zoomable || '';
		var zoomOptions = zoomable.split('-');
		var minZoom = zoomOptions.length > 1 && parseFloat(zoomOptions[0]);
		var maxZoom = zoomOptions.length > 1 && parseFloat(zoomOptions[1]);

		new EasyScroller(element, {
			scrollingX: scrollable === 'true' || scrollable === 'x',
			scrollingY: scrollable === 'true' || scrollable === 'y',
			zooming: zoomable === 'true' || zoomOptions.length > 1,
			minZoom: minZoom,
			maxZoom: maxZoom
		});

	};

}, false);
;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	 * Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	 *
	 * @type boolean
	 */
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

			// Don't send a synthetic click to disabled inputs (issue #62)
			case 'button':
			case 'select':
			case 'textarea':
				if (target.disabled) {
					return true;
				}

				break;
			case 'input':

				// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
				if ((deviceIsIOS && target.type === 'file') || target.disabled) {
					return true;
				}

				break;
			case 'label':
			case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
			case 'video':
				return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
			case 'textarea':
				return true;
			case 'select':
				return !deviceIsAndroid;
			case 'input':
				switch (target.type) {
					case 'button':
					case 'checkbox':
					case 'file':
					case 'image':
					case 'radio':
					case 'submit':
						return false;
				}

				// No point in attempting to focus disabled inputs
				return !target.disabled && !target.readOnly;
			default:
				return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

				// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

		// AMD. Register as an anonymous module.
		define(function() {
			return FastClick;
		});
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());
 /*
 * # Semantic UI - 2.1.8
 * https://github.com/Semantic-Org/Semantic-UI
 * http://www.semantic-ui.com/
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
/*!
 * # Semantic UI 2.1.8 - Site
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
;(function ( $, window, document, undefined ) {

$.site = $.fn.site = function(parameters) {
  var
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    settings        = ( $.isPlainObject(parameters) )
      ? $.extend(true, {}, $.site.settings, parameters)
      : $.extend({}, $.site.settings),

    namespace       = settings.namespace,
    error           = settings.error,

    eventNamespace  = '.' + namespace,
    moduleNamespace = 'module-' + namespace,

    $document       = $(document),
    $module         = $document,
    element         = this,
    instance        = $module.data(moduleNamespace),

    module,
    returnedValue
  ;
  module = {

    initialize: function() {
      module.instantiate();
    },

    instantiate: function() {
      module.verbose('Storing instance of site', module);
      instance = module;
      $module
        .data(moduleNamespace, module)
      ;
    },

    normalize: function() {
      module.fix.console();
      module.fix.requestAnimationFrame();
    },

    fix: {
      console: function() {
        module.debug('Normalizing window.console');
        if (console === undefined || console.log === undefined) {
          module.verbose('Console not available, normalizing events');
          module.disable.console();
        }
        if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {
          module.verbose('Console group not available, normalizing events');
          window.console.group = function() {};
          window.console.groupEnd = function() {};
          window.console.groupCollapsed = function() {};
        }
        if (typeof console.markTimeline == 'undefined') {
          module.verbose('Mark timeline not available, normalizing events');
          window.console.markTimeline = function() {};
        }
      },
      consoleClear: function() {
        module.debug('Disabling programmatic console clearing');
        window.console.clear = function() {};
      },
      requestAnimationFrame: function() {
        module.debug('Normalizing requestAnimationFrame');
        if(window.requestAnimationFrame === undefined) {
          module.debug('RequestAnimationFrame not available, normalizing event');
          window.requestAnimationFrame = window.requestAnimationFrame
            || window.mozRequestAnimationFrame
            || window.webkitRequestAnimationFrame
            || window.msRequestAnimationFrame
            || function(callback) { setTimeout(callback, 0); }
          ;
        }
      }
    },

    moduleExists: function(name) {
      return ($.fn[name] !== undefined && $.fn[name].settings !== undefined);
    },

    enabled: {
      modules: function(modules) {
        var
          enabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(module.moduleExists(name)) {
            enabledModules.push(name);
          }
        });
        return enabledModules;
      }
    },

    disabled: {
      modules: function(modules) {
        var
          disabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(!module.moduleExists(name)) {
            disabledModules.push(name);
          }
        });
        return disabledModules;
      }
    },

    change: {
      setting: function(setting, value, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? (modules === 'all')
            ? settings.modules
            : [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            namespace = (module.moduleExists(name))
              ? $.fn[name].settings.namespace || false
              : true,
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', setting, value, name);
            $.fn[name].settings[setting] = value;
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', setting, value);
              }
            }
          }
        });
      },
      settings: function(newSettings, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', newSettings, name);
            $.extend(true, $.fn[name].settings, newSettings);
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', newSettings);
              }
            }
          }
        });
      }
    },

    enable: {
      console: function() {
        module.console(true);
      },
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling debug for modules', modules);
        module.change.setting('debug', true, modules, modifyExisting);
      },
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling verbose debug for modules', modules);
        module.change.setting('verbose', true, modules, modifyExisting);
      }
    },
    disable: {
      console: function() {
        module.console(false);
      },
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling debug for modules', modules);
        module.change.setting('debug', false, modules, modifyExisting);
      },
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling verbose debug for modules', modules);
        module.change.setting('verbose', false, modules, modifyExisting);
      }
    },

    console: function(enable) {
      if(enable) {
        if(instance.cache.console === undefined) {
          module.error(error.console);
          return;
        }
        module.debug('Restoring console function');
        window.console = instance.cache.console;
      }
      else {
        module.debug('Disabling console function');
        instance.cache.console = window.console;
        window.console = {
          clear          : function(){},
          error          : function(){},
          group          : function(){},
          groupCollapsed : function(){},
          groupEnd       : function(){},
          info           : function(){},
          log            : function(){},
          markTimeline   : function(){},
          warn           : function(){}
        };
      }
    },

    destroy: function() {
      module.verbose('Destroying previous site for', $module);
      $module
        .removeData(moduleNamespace)
      ;
    },

    cache: {},

    setting: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, settings, name);
      }
      else if(value !== undefined) {
        settings[name] = value;
      }
      else {
        return settings[name];
      }
    },
    internal: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, module, name);
      }
      else if(value !== undefined) {
        module[name] = value;
      }
      else {
        return module[name];
      }
    },
    debug: function() {
      if(settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
        }
        else {
          module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.debug.apply(console, arguments);
        }
      }
    },
    verbose: function() {
      if(settings.verbose && settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
        }
        else {
          module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.verbose.apply(console, arguments);
        }
      }
    },
    error: function() {
      module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
      module.error.apply(console, arguments);
    },
    performance: {
      log: function(message) {
        var
          currentTime,
          executionTime,
          previousTime
        ;
        if(settings.performance) {
          currentTime   = new Date().getTime();
          previousTime  = time || currentTime;
          executionTime = currentTime - previousTime;
          time          = currentTime;
          performance.push({
            'Element'        : element,
            'Name'           : message[0],
            'Arguments'      : [].slice.call(message, 1) || '',
            'Execution Time' : executionTime
          });
        }
        clearTimeout(module.performance.timer);
        module.performance.timer = setTimeout(module.performance.display, 500);
      },
      display: function() {
        var
          title = settings.name + ':',
          totalTime = 0
        ;
        time = false;
        clearTimeout(module.performance.timer);
        $.each(performance, function(index, data) {
          totalTime += data['Execution Time'];
        });
        title += ' ' + totalTime + 'ms';
        if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
          console.groupCollapsed(title);
          if(console.table) {
            console.table(performance);
          }
          else {
            $.each(performance, function(index, data) {
              console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
            });
          }
          console.groupEnd();
        }
        performance = [];
      }
    },
    invoke: function(query, passedArguments, context) {
      var
        object = instance,
        maxDepth,
        found,
        response
      ;
      passedArguments = passedArguments || queryArguments;
      context         = element         || context;
      if(typeof query == 'string' && object !== undefined) {
        query    = query.split(/[\. ]/);
        maxDepth = query.length - 1;
        $.each(query, function(depth, value) {
          var camelCaseValue = (depth != maxDepth)
            ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
            : query
          ;
          if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
            object = object[camelCaseValue];
          }
          else if( object[camelCaseValue] !== undefined ) {
            found = object[camelCaseValue];
            return false;
          }
          else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
            object = object[value];
          }
          else if( object[value] !== undefined ) {
            found = object[value];
            return false;
          }
          else {
            module.error(error.method, query);
            return false;
          }
        });
      }
      if ( $.isFunction( found ) ) {
        response = found.apply(context, passedArguments);
      }
      else if(found !== undefined) {
        response = found;
      }
      if($.isArray(returnedValue)) {
        returnedValue.push(response);
      }
      else if(returnedValue !== undefined) {
        returnedValue = [returnedValue, response];
      }
      else if(response !== undefined) {
        returnedValue = response;
      }
      return found;
    }
  };

  if(methodInvoked) {
    if(instance === undefined) {
      module.initialize();
    }
    module.invoke(query);
  }
  else {
    if(instance !== undefined) {
      module.destroy();
    }
    module.initialize();
  }
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.site.settings = {

  name        : 'Site',
  namespace   : 'site',

  error : {
    console : 'Console cannot be restored, most likely it was overwritten outside of module',
    method : 'The method you called is not defined.'
  },

  debug       : false,
  verbose     : false,
  performance : true,

  modules: [
    'accordion',
    'api',
    'checkbox',
    'dimmer',
    'dropdown',
    'embed',
    'form',
    'modal',
    'nag',
    'popup',
    'rating',
    'shape',
    'sidebar',
    'state',
    'sticky',
    'tab',
    'transition',
    'visit',
    'visibility'
  ],

  siteNamespace   : 'site',
  namespaceStub   : {
    cache     : {},
    config    : {},
    sections  : {},
    section   : {},
    utilities : {}
  }

};

// allows for selection of elements with data attributes
$.extend($.expr[ ":" ], {
  data: ($.expr.createPseudo)
    ? $.expr.createPseudo(function(dataName) {
        return function(elem) {
          return !!$.data(elem, dataName);
        };
      })
    : function(elem, i, match) {
      // support: jQuery < 1.8
      return !!$.data(elem, match[ 3 ]);
    }
});


})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Form Validation
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.form = function(parameters) {
  var
    $allModules      = $(this),
    moduleSelector   = $allModules.selector || '',

    time             = new Date().getTime(),
    performance      = [],

    query            = arguments[0],
    legacyParameters = arguments[1],
    methodInvoked    = (typeof query == 'string'),
    queryArguments   = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        $module     = $(this),
        element     = this,

        formErrors  = [],
        keyHeldDown = false,

        // set at run-time
        $field,
        $group,
        $message,
        $prompt,
        $submit,
        $clear,
        $reset,

        settings,
        validation,

        metadata,
        selector,
        className,
        error,

        namespace,
        moduleNamespace,
        eventNamespace,

        instance,
        module
      ;

      module      = {

        initialize: function() {

          // settings grabbed at run time
          module.get.settings();
          if(methodInvoked) {
            if(instance === undefined) {
              module.instantiate();
            }
            module.invoke(query);
          }
          else {
            module.verbose('Initializing form validation', $module, settings);
            module.bindEvents();
            module.set.defaults();
            module.instantiate();
          }
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          module.removeEvents();
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $field      = $module.find(selector.field);
          $group      = $module.find(selector.group);
          $message    = $module.find(selector.message);
          $prompt     = $module.find(selector.prompt);

          $submit     = $module.find(selector.submit);
          $clear      = $module.find(selector.clear);
          $reset      = $module.find(selector.reset);
        },

        submit: function() {
          module.verbose('Submitting form', $module);
          $module
            .submit()
          ;
        },

        attachEvents: function(selector, action) {
          action = action || 'submit';
          $(selector)
            .on('click' + eventNamespace, function(event) {
              module[action]();
              event.preventDefault();
            })
          ;
        },

        bindEvents: function() {
          module.verbose('Attaching form events');
          $module
            .on('submit' + eventNamespace, module.validate.form)
            .on('blur'   + eventNamespace, selector.field, module.event.field.blur)
            .on('click'  + eventNamespace, selector.submit, module.submit)
            .on('click'  + eventNamespace, selector.reset, module.reset)
            .on('click'  + eventNamespace, selector.clear, module.clear)
          ;
          if(settings.keyboardShortcuts) {
            $module
              .on('keydown' + eventNamespace, selector.field, module.event.field.keydown)
            ;
          }
          $field
            .each(function() {
              var
                $input     = $(this),
                type       = $input.prop('type'),
                inputEvent = module.get.changeEvent(type, $input)
              ;
              $(this)
                .on(inputEvent + eventNamespace, module.event.field.change)
              ;
            })
          ;
        },

        clear: function() {
          $field
            .each(function () {
              var
                $field       = $(this),
                $element     = $field.parent(),
                $fieldGroup  = $field.closest($group),
                $prompt      = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue) || '',
                isCheckbox   = $element.is(selector.uiCheckbox),
                isDropdown   = $element.is(selector.uiDropdown),
                isErrored    = $fieldGroup.hasClass(className.error)
              ;
              if(isErrored) {
                module.verbose('Resetting error on field', $fieldGroup);
                $fieldGroup.removeClass(className.error);
                $prompt.remove();
              }
              if(isDropdown) {
                module.verbose('Resetting dropdown value', $element, defaultValue);
                $element.dropdown('clear');
              }
              else if(isCheckbox) {
                $field.prop('checked', false);
              }
              else {
                module.verbose('Resetting field value', $field, defaultValue);
                $field.val('');
              }
            })
          ;
        },

        reset: function() {
          $field
            .each(function () {
              var
                $field       = $(this),
                $element     = $field.parent(),
                $fieldGroup  = $field.closest($group),
                $prompt      = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue),
                isCheckbox   = $element.is(selector.uiCheckbox),
                isDropdown   = $element.is(selector.uiDropdown),
                isErrored    = $fieldGroup.hasClass(className.error)
              ;
              if(defaultValue === undefined) {
                return;
              }
              if(isErrored) {
                module.verbose('Resetting error on field', $fieldGroup);
                $fieldGroup.removeClass(className.error);
                $prompt.remove();
              }
              if(isDropdown) {
                module.verbose('Resetting dropdown value', $element, defaultValue);
                $element.dropdown('restore defaults');
              }
              else if(isCheckbox) {
                module.verbose('Resetting checkbox value', $element, defaultValue);
                $field.prop('checked', defaultValue);
              }
              else {
                module.verbose('Resetting field value', $field, defaultValue);
                $field.val(defaultValue);
              }
            })
          ;
        },

        is: {
          bracketedRule: function(rule) {
            return (rule.type && rule.type.match(settings.regExp.bracket));
          },
          valid: function() {
            var
              allValid = true
            ;
            module.verbose('Checking if form is valid');
            $.each(validation, function(fieldName, field) {
              if( !( module.validate.field(field, fieldName) ) ) {
                allValid = false;
              }
            });
            return allValid;
          }
        },

        removeEvents: function() {
          $module
            .off(eventNamespace)
          ;
          $field
            .off(eventNamespace)
          ;
          $submit
            .off(eventNamespace)
          ;
          $field
            .off(eventNamespace)
          ;
        },

        event: {
          field: {
            keydown: function(event) {
              var
                $field  = $(this),
                key     = event.which,
                keyCode = {
                  enter  : 13,
                  escape : 27
                }
              ;
              if( key == keyCode.escape) {
                module.verbose('Escape key pressed blurring field');
                $field
                  .blur()
                ;
              }
              if(!event.ctrlKey && key == keyCode.enter && $field.is(selector.input) && $field.not(selector.checkbox).length > 0 ) {
                if(!keyHeldDown) {
                  $field
                    .one('keyup' + eventNamespace, module.event.field.keyup)
                  ;
                  module.submit();
                  module.debug('Enter pressed on input submitting form');
                }
                keyHeldDown = true;
              }
            },
            keyup: function() {
              keyHeldDown = false;
            },
            blur: function(event) {
              var
                $field          = $(this),
                $fieldGroup     = $field.closest($group),
                validationRules = module.get.validation($field)
              ;
              if( $fieldGroup.hasClass(className.error) ) {
                module.debug('Revalidating field', $field, validationRules);
                module.validate.form.call(module, event, true);
              }
              else if(settings.on == 'blur' || settings.on == 'change') {
                if(validationRules) {
                  module.validate.field( validationRules );
                }
              }
            },
            change: function(event) {
              var
                $field      = $(this),
                $fieldGroup = $field.closest($group)
              ;
              if(settings.on == 'change' || ( $fieldGroup.hasClass(className.error) && settings.revalidate) ) {
                clearTimeout(module.timer);
                module.timer = setTimeout(function() {
                  module.debug('Revalidating field', $field,  module.get.validation($field));
                  module.validate.form.call(module, event, true);
                }, settings.delay);
              }
            }
          }

        },

        get: {
          ancillaryValue: function(rule) {
            if(!rule.type || !module.is.bracketedRule(rule)) {
              return false;
            }
            return rule.type.match(settings.regExp.bracket)[1] + '';
          },
          ruleName: function(rule) {
            if( module.is.bracketedRule(rule) ) {
              return rule.type.replace(rule.type.match(settings.regExp.bracket)[0], '');
            }
            return rule.type;
          },
          changeEvent: function(type, $input) {
            if(type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {
              return 'change';
            }
            else {
              return module.get.inputEvent();
            }
          },
          inputEvent: function() {
            return (document.createElement('input').oninput !== undefined)
              ? 'input'
              : (document.createElement('input').onpropertychange !== undefined)
                ? 'propertychange'
                : 'keyup'
            ;
          },
          prompt: function(rule, field) {
            var
              ruleName      = module.get.ruleName(rule),
              ancillary     = module.get.ancillaryValue(rule),
              prompt        = rule.prompt || settings.prompt[ruleName] || settings.text.unspecifiedRule,
              requiresValue = (prompt.search('{value}') !== -1),
              requiresName  = (prompt.search('{name}') !== -1),
              $label,
              $field,
              name
            ;
            if(requiresName || requiresValue) {
              $field = module.get.field(field.identifier);
            }
            if(requiresValue) {
              prompt = prompt.replace('{value}', $field.val());
            }
            if(requiresName) {
              $label = $field.closest(selector.group).find('label').eq(0);
              name = ($label.size() == 1)
                ? $label.text()
                : $field.prop('placeholder') || settings.text.unspecifiedField
              ;
              prompt = prompt.replace('{name}', name);
            }
            prompt = prompt.replace('{identifier}', field.identifier);
            prompt = prompt.replace('{ruleValue}', ancillary);
            if(!rule.prompt) {
              module.verbose('Using default validation prompt for type', prompt, ruleName);
            }
            return prompt;
          },
          settings: function() {
            if($.isPlainObject(parameters)) {
              var
                keys     = Object.keys(parameters),
                isLegacySettings = (keys.length > 0)
                  ? (parameters[keys[0]].identifier !== undefined && parameters[keys[0]].rules !== undefined)
                  : false,
                ruleKeys
              ;
              if(isLegacySettings) {
                // 1.x (ducktyped)
                settings   = $.extend(true, {}, $.fn.form.settings, legacyParameters);
                validation = $.extend({}, $.fn.form.settings.defaults, parameters);
                module.error(settings.error.oldSyntax, element);
                module.verbose('Extending settings from legacy parameters', validation, settings);
              }
              else {
                // 2.x
                if(parameters.fields) {
                  ruleKeys = Object.keys(parameters.fields);
                  if( typeof parameters.fields[ruleKeys[0]] == 'string' || $.isArray(parameters.fields[ruleKeys[0]]) ) {
                    $.each(parameters.fields, function(name, rules) {
                      if(typeof rules == 'string') {
                        rules = [rules];
                      }
                      parameters.fields[name] = {
                        rules: []
                      };
                      $.each(rules, function(index, rule) {
                        parameters.fields[name].rules.push({ type: rule });
                      });
                    });
                  }
                }

                settings   = $.extend(true, {}, $.fn.form.settings, parameters);
                validation = $.extend({}, $.fn.form.settings.defaults, settings.fields);
                module.verbose('Extending settings', validation, settings);
              }
            }
            else {
              settings   = $.fn.form.settings;
              validation = $.fn.form.settings.defaults;
              module.verbose('Using default form validation', validation, settings);
            }

            // shorthand
            namespace       = settings.namespace;
            metadata        = settings.metadata;
            selector        = settings.selector;
            className       = settings.className;
            error           = settings.error;
            moduleNamespace = 'module-' + namespace;
            eventNamespace  = '.' + namespace;

            // grab instance
            instance = $module.data(moduleNamespace);

            // refresh selector cache
            module.refresh();
          },
          field: function(identifier) {
            module.verbose('Finding field with identifier', identifier);
            if( $field.filter('#' + identifier).length > 0 ) {
              return $field.filter('#' + identifier);
            }
            else if( $field.filter('[name="' + identifier +'"]').length > 0 ) {
              return $field.filter('[name="' + identifier +'"]');
            }
            else if( $field.filter('[name="' + identifier +'[]"]').length > 0 ) {
              return $field.filter('[name="' + identifier +'[]"]');
            }
            else if( $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]').length > 0 ) {
              return $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]');
            }
            return $('<input/>');
          },
          fields: function(fields) {
            var
              $fields = $()
            ;
            $.each(fields, function(index, name) {
              $fields = $fields.add( module.get.field(name) );
            });
            return $fields;
          },
          validation: function($field) {
            var
              fieldValidation,
              identifier
            ;
            if(!validation) {
              return false;
            }
            $.each(validation, function(fieldName, field) {
              identifier = field.identifier || fieldName;
              if( module.get.field(identifier)[0] == $field[0] ) {
                field.identifier = identifier;
                fieldValidation = field;
              }
            });
            return fieldValidation || false;
          },
          value: function (field) {
            var
              fields = [],
              results
            ;
            fields.push(field);
            results = module.get.values.call(element, fields);
            return results[field];
          },
          values: function (fields) {
            var
              $fields = $.isArray(fields)
                ? module.get.fields(fields)
                : $field,
              values = {}
            ;
            $fields.each(function(index, field) {
              var
                $field     = $(field),
                type       = $field.prop('type'),
                name       = $field.prop('name'),
                value      = $field.val(),
                isCheckbox = $field.is(selector.checkbox),
                isRadio    = $field.is(selector.radio),
                isMultiple = (name.indexOf('[]') !== -1),
                isChecked  = (isCheckbox)
                  ? $field.is(':checked')
                  : false
              ;
              if(name) {
                if(isMultiple) {
                  name = name.replace('[]', '');
                  if(!values[name]) {
                    values[name] = [];
                  }
                  if(isCheckbox) {
                    if(isChecked) {
                      values[name].push(value || true);
                    }
                    else {
                      values[name].push(false);
                    }
                  }
                  else {
                    values[name].push(value);
                  }
                }
                else {
                  if(isRadio) {
                    if(isChecked) {
                      values[name] = value;
                    }
                  }
                  else if(isCheckbox) {
                    if(isChecked) {
                      values[name] = value || true;
                    }
                    else {
                      values[name] = false;
                    }
                  }
                  else {
                    values[name] = value;
                  }
                }
              }
            });
            return values;
          }
        },

        has: {

          field: function(identifier) {
            module.verbose('Checking for existence of a field with identifier', identifier);
            if(typeof identifier !== 'string') {
              module.error(error.identifier, identifier);
            }
            if( $field.filter('#' + identifier).length > 0 ) {
              return true;
            }
            else if( $field.filter('[name="' + identifier +'"]').length > 0 ) {
              return true;
            }
            else if( $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]').length > 0 ) {
              return true;
            }
            return false;
          }

        },

        add: {
          prompt: function(identifier, errors) {
            var
              $field       = module.get.field(identifier),
              $fieldGroup  = $field.closest($group),
              $prompt      = $fieldGroup.children(selector.prompt),
              promptExists = ($prompt.length !== 0)
            ;
            errors = (typeof errors == 'string')
              ? [errors]
              : errors
            ;
            module.verbose('Adding field error state', identifier);
            $fieldGroup
              .addClass(className.error)
            ;
            if(settings.inline) {
              if(!promptExists) {
                $prompt = settings.templates.prompt(errors);
                $prompt
                  .appendTo($fieldGroup)
                ;
              }
              $prompt
                .html(errors[0])
              ;
              if(!promptExists) {
                if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                  module.verbose('Displaying error with css transition', settings.transition);
                  $prompt.transition(settings.transition + ' in', settings.duration);
                }
                else {
                  module.verbose('Displaying error with fallback javascript animation');
                  $prompt
                    .fadeIn(settings.duration)
                  ;
                }
              }
              else {
                module.verbose('Inline errors are disabled, no inline error added', identifier);
              }
            }
          },
          errors: function(errors) {
            module.debug('Adding form error messages', errors);
            module.set.error();
            $message
              .html( settings.templates.error(errors) )
            ;
          }
        },

        remove: {
          prompt: function(identifier) {
            var
              $field      = module.get.field(identifier),
              $fieldGroup = $field.closest($group),
              $prompt     = $fieldGroup.children(selector.prompt)
            ;
            $fieldGroup
              .removeClass(className.error)
            ;
            if(settings.inline && $prompt.is(':visible')) {
              module.verbose('Removing prompt for field', identifier);
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                $prompt.transition(settings.transition + ' out', settings.duration, function() {
                  $prompt.remove();
                });
              }
              else {
                $prompt
                  .fadeOut(settings.duration, function(){
                    $prompt.remove();
                  })
                ;
              }
            }
          }
        },

        set: {
          success: function() {
            $module
              .removeClass(className.error)
              .addClass(className.success)
            ;
          },
          defaults: function () {
            $field
              .each(function () {
                var
                  $field     = $(this),
                  isCheckbox = ($field.filter(selector.checkbox).length > 0),
                  value      = (isCheckbox)
                    ? $field.is(':checked')
                    : $field.val()
                ;
                $field.data(metadata.defaultValue, value);
              })
            ;
          },
          error: function() {
            $module
              .removeClass(className.success)
              .addClass(className.error)
            ;
          },
          value: function (field, value) {
            var
              fields = {}
            ;
            fields[field] = value;
            return module.set.values.call(element, fields);
          },
          values: function (fields) {
            if($.isEmptyObject(fields)) {
              return;
            }
            $.each(fields, function(key, value) {
              var
                $field      = module.get.field(key),
                $element    = $field.parent(),
                isMultiple  = $.isArray(value),
                isCheckbox  = $element.is(selector.uiCheckbox),
                isDropdown  = $element.is(selector.uiDropdown),
                isRadio     = ($field.is(selector.radio) && isCheckbox),
                fieldExists = ($field.length > 0),
                $multipleField
              ;
              if(fieldExists) {
                if(isMultiple && isCheckbox) {
                  module.verbose('Selecting multiple', value, $field);
                  $element.checkbox('uncheck');
                  $.each(value, function(index, value) {
                    $multipleField = $field.filter('[value="' + value + '"]');
                    $element       = $multipleField.parent();
                    if($multipleField.length > 0) {
                      $element.checkbox('check');
                    }
                  });
                }
                else if(isRadio) {
                  module.verbose('Selecting radio value', value, $field);
                  $field.filter('[value="' + value + '"]')
                    .parent(selector.uiCheckbox)
                      .checkbox('check')
                  ;
                }
                else if(isCheckbox) {
                  module.verbose('Setting checkbox value', value, $element);
                  if(value === true) {
                    $element.checkbox('check');
                  }
                  else {
                    $element.checkbox('uncheck');
                  }
                }
                else if(isDropdown) {
                  module.verbose('Setting dropdown value', value, $element);
                  $element.dropdown('set selected', value);
                }
                else {
                  module.verbose('Setting field value', value, $field);
                  $field.val(value);
                }
              }
            });
          }
        },

        validate: {

          form: function(event, ignoreCallbacks) {
            var
              values = module.get.values(),
              apiRequest
            ;

            // input keydown event will fire submit repeatedly by browser default
            if(keyHeldDown) {
              return false;
            }

            // reset errors
            formErrors = [];
            if( module.is.valid() ) {
              module.debug('Form has no validation errors, submitting');
              module.set.success();
              if(ignoreCallbacks !== true) {
                return settings.onSuccess.call(element, event, values);
              }
            }
            else {
              module.debug('Form has errors');
              module.set.error();
              if(!settings.inline) {
                module.add.errors(formErrors);
              }
              // prevent ajax submit
              if($module.data('moduleApi') !== undefined) {
                event.stopImmediatePropagation();
              }
              if(ignoreCallbacks !== true) {
                return settings.onFailure.call(element, formErrors, values);
              }
            }
          },

          // takes a validation object and returns whether field passes validation
          field: function(field, fieldName) {
            var
              identifier  = field.identifier || fieldName,
              $field      = module.get.field(identifier),
              fieldValid  = true,
              fieldErrors = []
            ;
            if(!field.identifier) {
              module.debug('Using field name as identifier', identifier);
              field.identifier = identifier;
            }
            if($field.prop('disabled')) {
              module.debug('Field is disabled. Skipping', identifier);
              fieldValid = true;
            }
            else if(field.optional && $.trim($field.val()) === ''){
              module.debug('Field is optional and empty. Skipping', identifier);
              fieldValid = true;
            }
            else if(field.rules !== undefined) {
              $.each(field.rules, function(index, rule) {
                if( module.has.field(identifier) && !( module.validate.rule(field, rule) ) ) {
                  module.debug('Field is invalid', identifier, rule.type);
                  fieldErrors.push(module.get.prompt(rule, field));
                  fieldValid = false;
                }
              });
            }
            if(fieldValid) {
              module.remove.prompt(identifier, fieldErrors);
              settings.onValid.call($field);
            }
            else {
              formErrors = formErrors.concat(fieldErrors);
              module.add.prompt(identifier, fieldErrors);
              settings.onInvalid.call($field, fieldErrors);
              return false;
            }
            return true;
          },

          // takes validation rule and returns whether field passes rule
          rule: function(field, rule) {
            var
              $field       = module.get.field(field.identifier),
              type         = rule.type,
              value        = $field.val(),
              isValid      = true,
              ancillary    = module.get.ancillaryValue(rule),
              ruleName     = module.get.ruleName(rule),
              ruleFunction = settings.rules[ruleName]
            ;
            if( !$.isFunction(ruleFunction) ) {
              module.error(error.noRule, ruleName);
              return;
            }
            // cast to string avoiding encoding special values
            value = (value === undefined || value === '' || value === null)
              ? ''
              : $.trim(value + '')
            ;
            return ruleFunction.call($field, value, ancillary);
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      module.initialize();
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.form.settings = {

  name              : 'Form',
  namespace         : 'form',

  debug             : false,
  verbose           : false,
  performance       : true,

  fields            : false,

  keyboardShortcuts : true,
  on                : 'submit',
  inline            : false,

  delay             : 200,
  revalidate        : true,

  transition        : 'scale',
  duration          : 200,

  onValid           : function() {},
  onInvalid         : function() {},
  onSuccess         : function() { return true; },
  onFailure         : function() { return false; },

  metadata : {
    defaultValue : 'default',
    validate     : 'validate'
  },

  regExp: {
    bracket : /\[(.*)\]/i,
    decimal : /^\d*(\.)\d+/,
    email   : "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
    escape  : /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
    flags   : /^\/(.*)\/(.*)?/,
    integer : /^\-?\d+$/,
    number  : /^\-?\d*(\.\d+)?$/,
    url     : /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/i
  },

  text: {
    unspecifiedRule  : 'Please enter a valid value',
    unspecifiedField : 'This field'
  },

  prompt: {
    empty                : '{name} must have a value',
    checked              : '{name} must be checked',
    email                : '{name} must be a valid e-mail',
    url                  : '{name} must be a valid url',
    regExp               : '{name} is not formatted correctly',
    integer              : '{name} must be an integer',
    decimal              : '{name} must be a decimal number',
    number               : '{name} must be set to a number',
    is                   : '{name} must be "{ruleValue}"',
    isExactly            : '{name} must be exactly "{ruleValue}"',
    not                  : '{name} cannot be set to "{ruleValue}"',
    notExactly           : '{name} cannot be set to exactly "{ruleValue}"',
    contain              : '{name} cannot contain "{ruleValue}"',
    containExactly       : '{name} cannot contain exactly "{ruleValue}"',
    doesntContain        : '{name} must contain  "{ruleValue}"',
    doesntContainExactly : '{name} must contain exactly "{ruleValue}"',
    minLength            : '{name} must be at least {ruleValue} characters',
    length               : '{name} must be at least {ruleValue} characters',
    exactLength          : '{name} must be exactly {ruleValue} characters',
    maxLength            : '{name} cannot be longer than {ruleValue} characters',
    match                : '{name} must match {ruleValue} field',
    different            : '{name} must have a different value than {ruleValue} field',
    creditCard           : '{name} must be a valid credit card number',
    minCount             : '{name} must have at least {ruleValue} choices',
    exactCount           : '{name} must have exactly {ruleValue} choices',
    maxCount             : '{name} must have {ruleValue} or less choices'
  },

  selector : {
    checkbox   : 'input[type="checkbox"], input[type="radio"]',
    clear      : '.clear',
    field      : 'input, textarea, select',
    group      : '.field',
    input      : 'input',
    message    : '.error.message',
    prompt     : '.prompt.label',
    radio      : 'input[type="radio"]',
    reset      : '.reset:not([type="reset"])',
    submit     : '.submit:not([type="submit"])',
    uiCheckbox : '.ui.checkbox',
    uiDropdown : '.ui.dropdown'
  },

  className : {
    error   : 'error',
    label   : 'ui prompt label',
    pressed : 'down',
    success : 'success'
  },

  error: {
    identifier : 'You must specify a string identifier for each field',
    method     : 'The method you called is not defined.',
    noRule     : 'There is no rule matching the one you specified',
    oldSyntax  : 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.'
  },

  templates: {

    // template that produces error message
    error: function(errors) {
      var
        html = '<ul class="list">'
      ;
      $.each(errors, function(index, value) {
        html += '<li>' + value + '</li>';
      });
      html += '</ul>';
      return $(html);
    },

    // template that produces label
    prompt: function(errors) {
      return $('<div/>')
        .addClass('ui basic red pointing prompt label')
        .html(errors[0])
      ;
    }
  },

  rules: {

    // is not empty or blank string
    empty: function(value) {
      return !(value === undefined || '' === value || $.isArray(value) && value.length === 0);
    },

    // checkbox checked
    checked: function() {
      return ($(this).filter(':checked').length > 0);
    },

    // is most likely an email
    email: function(value){
      var
        emailRegExp = new RegExp($.fn.form.settings.regExp.email, 'i')
      ;
      return emailRegExp.test(value);
    },

    // value is most likely url
    url: function(value) {
      return $.fn.form.settings.regExp.url.test(value);
    },

    // matches specified regExp
    regExp: function(value, regExp) {
      var
        regExpParts = regExp.match($.fn.form.settings.regExp.flags),
        flags
      ;
      // regular expression specified as /baz/gi (flags)
      if(regExpParts) {
        regExp = (regExpParts.length >= 2)
          ? regExpParts[1]
          : regExp
        ;
        flags = (regExpParts.length >= 3)
          ? regExpParts[2]
          : ''
        ;
      }
      return value.match( new RegExp(regExp, flags) );
    },

    // is valid integer or matches range
    integer: function(value, range) {
      var
        intRegExp = $.fn.form.settings.regExp.integer,
        min,
        max,
        parts
      ;
      if( !range || ['', '..'].indexOf(range) !== -1) {
        // do nothing
      }
      else if(range.indexOf('..') == -1) {
        if(intRegExp.test(range)) {
          min = max = range - 0;
        }
      }
      else {
        parts = range.split('..', 2);
        if(intRegExp.test(parts[0])) {
          min = parts[0] - 0;
        }
        if(intRegExp.test(parts[1])) {
          max = parts[1] - 0;
        }
      }
      return (
        intRegExp.test(value) &&
        (min === undefined || value >= min) &&
        (max === undefined || value <= max)
      );
    },

    // is valid number (with decimal)
    decimal: function(value) {
      return $.fn.form.settings.regExp.decimal.test(value);
    },

    // is valid number
    number: function(value) {
      return $.fn.form.settings.regExp.number.test(value);
    },

    // is value (case insensitive)
    is: function(value, text) {
      text = (typeof text == 'string')
        ? text.toLowerCase()
        : text
      ;
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      return (value == text);
    },

    // is value
    isExactly: function(value, text) {
      return (value == text);
    },

    // value is not another value (case insensitive)
    not: function(value, notValue) {
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      notValue = (typeof notValue == 'string')
        ? notValue.toLowerCase()
        : notValue
      ;
      return (value != notValue);
    },

    // value is not another value (case sensitive)
    notExactly: function(value, notValue) {
      return (value != notValue);
    },

    // value contains text (insensitive)
    contains: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text, 'i') ) !== -1);
    },

    // value contains text (case sensitive)
    containsExactly: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text) ) !== -1);
    },

    // value contains text (insensitive)
    doesntContain: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text, 'i') ) === -1);
    },

    // value contains text (case sensitive)
    doesntContainExactly: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text) ) === -1);
    },

    // is at least string length
    minLength: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length >= requiredLength)
        : false
      ;
    },

    // see rls notes for 2.0.6 (this is a duplicate of minLength)
    length: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length >= requiredLength)
        : false
      ;
    },

    // is exactly length
    exactLength: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length == requiredLength)
        : false
      ;
    },

    // is less than length
    maxLength: function(value, maxLength) {
      return (value !== undefined)
        ? (value.length <= maxLength)
        : false
      ;
    },

    // matches another field
    match: function(value, identifier) {
      var
        $form = $(this),
        matchingValue
      ;
      if( $('[data-validate="'+ identifier +'"]').length > 0 ) {
        matchingValue = $('[data-validate="'+ identifier +'"]').val();
      }
      else if($('#' + identifier).length > 0) {
        matchingValue = $('#' + identifier).val();
      }
      else if($('[name="' + identifier +'"]').length > 0) {
        matchingValue = $('[name="' + identifier + '"]').val();
      }
      else if( $('[name="' + identifier +'[]"]').length > 0 ) {
        matchingValue = $('[name="' + identifier +'[]"]');
      }
      return (matchingValue !== undefined)
        ? ( value.toString() == matchingValue.toString() )
        : false
      ;
    },

    // different than another field
    different: function(value, identifier) {
      // use either id or name of field
      var
        $form = $(this),
        matchingValue
      ;
      if( $('[data-validate="'+ identifier +'"]').length > 0 ) {
        matchingValue = $('[data-validate="'+ identifier +'"]').val();
      }
      else if($('#' + identifier).length > 0) {
        matchingValue = $('#' + identifier).val();
      }
      else if($('[name="' + identifier +'"]').length > 0) {
        matchingValue = $('[name="' + identifier + '"]').val();
      }
      else if( $('[name="' + identifier +'[]"]').length > 0 ) {
        matchingValue = $('[name="' + identifier +'[]"]');
      }
      return (matchingValue !== undefined)
        ? ( value.toString() !== matchingValue.toString() )
        : false
      ;
    },

    creditCard: function(cardNumber, cardTypes) {
      var
        cards = {
          visa: {
            pattern : /^4/,
            length  : [16]
          },
          amex: {
            pattern : /^3[47]/,
            length  : [15]
          },
          mastercard: {
            pattern : /^5[1-5]/,
            length  : [16]
          },
          discover: {
            pattern : /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,
            length  : [16]
          },
          unionPay: {
            pattern : /^(62|88)/,
            length  : [16, 17, 18, 19]
          },
          jcb: {
            pattern : /^35(2[89]|[3-8][0-9])/,
            length  : [16]
          },
          maestro: {
            pattern : /^(5018|5020|5038|6304|6759|676[1-3])/,
            length  : [12, 13, 14, 15, 16, 17, 18, 19]
          },
          dinersClub: {
            pattern : /^(30[0-5]|^36)/,
            length  : [14]
          },
          laser: {
            pattern : /^(6304|670[69]|6771)/,
            length  : [16, 17, 18, 19]
          },
          visaElectron: {
            pattern : /^(4026|417500|4508|4844|491(3|7))/,
            length  : [16]
          }
        },
        valid         = {},
        validCard     = false,
        requiredTypes = (typeof cardTypes == 'string')
          ? cardTypes.split(',')
          : false,
        unionPay,
        validation
      ;

      if(typeof cardNumber !== 'string' || cardNumber.length === 0) {
        return;
      }

      // verify card types
      if(requiredTypes) {
        $.each(requiredTypes, function(index, type){
          // verify each card type
          validation = cards[type];
          if(validation) {
            valid = {
              length  : ($.inArray(cardNumber.length, validation.length) !== -1),
              pattern : (cardNumber.search(validation.pattern) !== -1)
            };
            if(valid.length && valid.pattern) {
              validCard = true;
            }
          }
        });

        if(!validCard) {
          return false;
        }
      }

      // skip luhn for UnionPay
      unionPay = {
        number  : ($.inArray(cardNumber.length, cards.unionPay.length) !== -1),
        pattern : (cardNumber.search(cards.unionPay.pattern) !== -1)
      };
      if(unionPay.number && unionPay.pattern) {
        return true;
      }

      // verify luhn, adapted from  <https://gist.github.com/2134376>
      var
        length        = cardNumber.length,
        multiple      = 0,
        producedValue = [
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
          [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]
        ],
        sum           = 0
      ;
      while (length--) {
        sum += producedValue[multiple][parseInt(cardNumber.charAt(length), 10)];
        multiple ^= 1;
      }
      return (sum % 10 === 0 && sum > 0);
    },

    minCount: function(value, minCount) {
      if(minCount == 0) {
        return true;
      }
      if(minCount == 1) {
        return (value !== '');
      }
      return (value.split(',').length >= minCount);
    },

    exactCount: function(value, exactCount) {
      if(exactCount == 0) {
        return (value === '');
      }
      if(exactCount == 1) {
        return (value !== '' && value.search(',') === -1);
      }
      return (value.split(',').length == exactCount);
    },

    maxCount: function(value, maxCount) {
      if(maxCount == 0) {
        return false;
      }
      if(maxCount == 1) {
        return (value.search(',') === -1);
      }
      return (value.split(',').length <= maxCount);
    }
  }

};

})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Accordion
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.accordion = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.accordion.settings, parameters)
          : $.extend({}, $.fn.accordion.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        $module  = $(this),
        $title   = $module.find(selector.title),
        $content = $module.find(selector.content),

        element  = this,
        instance = $module.data(moduleNamespace),
        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', $module);
          module.bind.events();
          if(settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function() {
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.debug('Destroying previous instance', $module);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          $title   = $module.find(selector.title);
          $content = $module.find(selector.content);
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function() {
            module.debug('Binding delegated events');
            $module
              .on(settings.on + eventNamespace, selector.trigger, module.event.click)
            ;
          }
        },

        event: {
          click: function() {
            module.toggle.call(this);
          }
        },

        toggle: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isOpen      = (isActive && !isAnimating),
            isOpening   = (!isActive && isAnimating)
          ;
          module.debug('Toggling visibility of content', $activeTitle);
          if(isOpen || isOpening) {
            if(settings.collapsible) {
              module.close.call($activeTitle);
            }
            else {
              module.debug('Cannot close accordion content collapsing is disabled');
            }
          }
          else {
            module.open.call($activeTitle);
          }
        },

        open: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isOpen      = (isActive || isAnimating)
          ;
          if(isOpen) {
            module.debug('Accordion already open, skipping', $activeContent);
            return;
          }
          module.debug('Opening accordion content', $activeTitle);
          settings.onOpening.call($activeContent);
          if(settings.exclusive) {
            module.closeOthers.call($activeTitle);
          }
          $activeTitle
            .addClass(className.active)
          ;
          $activeContent
            .stop(true, true)
            .addClass(className.animating)
          ;
          if(settings.animateChildren) {
            if($.fn.transition !== undefined && $module.transition('is supported')) {
              $activeContent
                .children()
                  .transition({
                    animation   : 'fade in',
                    queue       : false,
                    useFailSafe : true,
                    debug       : settings.debug,
                    verbose     : settings.verbose,
                    duration    : settings.duration
                  })
              ;
            }
            else {
              $activeContent
                .children()
                  .stop(true, true)
                  .animate({
                    opacity: 1
                  }, settings.duration, module.resetOpacity)
              ;
            }
          }
          $activeContent
            .slideDown(settings.duration, settings.easing, function() {
              $activeContent
                .removeClass(className.animating)
                .addClass(className.active)
              ;
              module.reset.display.call(this);
              settings.onOpen.call(this);
              settings.onChange.call(this);
            })
          ;
        },

        close: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating    = $activeContent.hasClass(className.animating),
            isActive       = $activeContent.hasClass(className.active),
            isOpening      = (!isActive && isAnimating),
            isClosing      = (isActive && isAnimating)
          ;
          if((isActive || isOpening) && !isClosing) {
            module.debug('Closing accordion content', $activeContent);
            settings.onClosing.call($activeContent);
            $activeTitle
              .removeClass(className.active)
            ;
            $activeContent
              .stop(true, true)
              .addClass(className.animating)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent
                  .children()
                    .transition({
                      animation   : 'fade out',
                      queue       : false,
                      useFailSafe : true,
                      debug       : settings.debug,
                      verbose     : settings.verbose,
                      duration    : settings.duration
                    })
                ;
              }
              else {
                $activeContent
                  .children()
                    .stop(true, true)
                    .animate({
                      opacity: 0
                    }, settings.duration, module.resetOpacity)
                ;
              }
            }
            $activeContent
              .slideUp(settings.duration, settings.easing, function() {
                $activeContent
                  .removeClass(className.animating)
                  .removeClass(className.active)
                ;
                module.reset.display.call(this);
                settings.onClose.call(this);
                settings.onChange.call(this);
              })
            ;
          }
        },

        closeOthers: function(index) {
          var
            $activeTitle = (index !== undefined)
              ? $title.eq(index)
              : $(this).closest(selector.title),
            $parentTitles    = $activeTitle.parents(selector.content).prev(selector.title),
            $activeAccordion = $activeTitle.closest(selector.accordion),
            activeSelector   = selector.title + '.' + className.active + ':visible',
            activeContent    = selector.content + '.' + className.active + ':visible',
            $openTitles,
            $nestedTitles,
            $openContents
          ;
          if(settings.closeNested) {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $openContents = $openTitles.next($content);
          }
          else {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);
            $openTitles   = $openTitles.not($nestedTitles);
            $openContents = $openTitles.next($content);
          }
          if( ($openTitles.length > 0) ) {
            module.debug('Exclusive enabled, closing other content', $openTitles);
            $openTitles
              .removeClass(className.active)
            ;
            $openContents
              .removeClass(className.animating)
              .stop(true, true)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $openContents
                  .children()
                    .transition({
                      animation   : 'fade out',
                      useFailSafe : true,
                      debug       : settings.debug,
                      verbose     : settings.verbose,
                      duration    : settings.duration
                    })
                ;
              }
              else {
                $openContents
                  .children()
                    .stop(true, true)
                    .animate({
                      opacity: 0
                    }, settings.duration, module.resetOpacity)
                ;
              }
            }
            $openContents
              .slideUp(settings.duration , settings.easing, function() {
                $(this).removeClass(className.active);
                module.reset.display.call(this);
              })
            ;
          }
        },

        reset: {

          display: function() {
            module.verbose('Removing inline display from element', this);
            $(this).css('display', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
            }
          },

          opacity: function() {
            module.verbose('Removing inline opacity from element', this);
            $(this).css('opacity', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
            }
          },

        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          module.debug('Changing internal', name, value);
          if(value !== undefined) {
            if( $.isPlainObject(name) ) {
              $.extend(true, module, name);
            }
            else {
              module[name] = value;
            }
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.accordion.settings = {

  name            : 'Accordion',
  namespace       : 'accordion',

  debug           : false,
  verbose         : false,
  performance     : true,

  on              : 'click', // event on title that opens accordion

  observeChanges  : true,  // whether accordion should automatically refresh on DOM insertion

  exclusive       : true,  // whether a single accordion content panel should be open at once
  collapsible     : true,  // whether accordion content can be closed
  closeNested     : false, // whether nested content should be closed when a panel is closed
  animateChildren : true,  // whether children opacity should be animated

  duration        : 350, // duration of animation
  easing          : 'easeOutQuad', // easing equation for animation


  onOpening       : function(){}, // callback before open animation
  onOpen          : function(){}, // callback after open animation
  onClosing       : function(){}, // callback before closing animation
  onClose         : function(){}, // callback after closing animation
  onChange        : function(){}, // callback after closing or opening animation

  error: {
    method : 'The method you called is not defined'
  },

  className   : {
    active    : 'active',
    animating : 'animating'
  },

  selector    : {
    accordion : '.accordion',
    title     : '.title',
    trigger   : '.title',
    content   : '.content'
  }

};

// Adds easing
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  }
});

})( jQuery, window, document );


/*!
 * # Semantic UI 2.1.8 - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.checkbox = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = $.extend(true, {}, $.fn.checkbox.settings, parameters),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $label          = $(this).children(selector.label),
        $input          = $(this).children(selector.input),
        input           = $input[0],

        initialLoad     = false,
        shortcutPressed = false,
        instance        = $module.data(moduleNamespace),

        observer,
        element         = this,
        module
      ;

      module      = {

        initialize: function() {
          module.verbose('Initializing checkbox', settings);

          module.create.label();
          module.bind.events();

          module.set.tabbable();
          module.hide.input();

          module.observeChanges();
          module.instantiate();
          module.setup();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying module');
          module.unbind.events();
          module.show.input();
          $module.removeData(moduleNamespace);
        },

        fix: {
          reference: function() {
            if( $module.is(selector.input) ) {
              module.debug('Behavior called on <input> adjusting invoked element');
              $module = $module.closest(selector.checkbox);
              module.refresh();
            }
          }
        },

        setup: function() {
          module.set.initialLoad();
          if( module.is.indeterminate() ) {
            module.debug('Initial value is indeterminate');
            module.indeterminate();
          }
          else if( module.is.checked() ) {
            module.debug('Initial value is checked');
            module.check();
          }
          else {
            module.debug('Initial value is unchecked');
            module.uncheck();
          }
          module.remove.initialLoad();
        },

        refresh: function() {
          $label = $module.children(selector.label);
          $input = $module.children(selector.input);
          input  = $input[0];
        },

        hide: {
          input: function() {
            module.verbose('Modfying <input> z-index to be unselectable');
            $input.addClass(className.hidden);
          }
        },
        show: {
          input: function() {
            module.verbose('Modfying <input> z-index to be selectable');
            $input.removeClass(className.hidden);
          }
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        attachEvents: function(selector, event) {
          var
            $element = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($element.length > 0) {
            module.debug('Attaching checkbox events to element', selector, event);
            $element
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound);
          }
        },

        event: {
          click: function(event) {
            var
              $target = $(event.target)
            ;
            if( $target.is(selector.input) ) {
              module.verbose('Using default check action on initialized checkbox');
              return;
            }
            if( $target.is(selector.link) ) {
              module.debug('Clicking link inside checkbox, skipping toggle');
              return;
            }
            module.toggle();
            $input.focus();
            event.preventDefault();
          },
          keydown: function(event) {
            var
              key     = event.which,
              keyCode = {
                enter  : 13,
                space  : 32,
                escape : 27
              }
            ;
            if(key == keyCode.escape) {
              module.verbose('Escape key pressed blurring field');
              $input.blur();
              shortcutPressed = true;
            }
            else if(!event.ctrlKey && ( key == keyCode.space || key == keyCode.enter) ) {
              module.verbose('Enter/space key pressed, toggling checkbox');
              module.toggle();
              shortcutPressed = true;
            }
            else {
              shortcutPressed = false;
            }
          },
          keyup: function(event) {
            if(shortcutPressed) {
              event.preventDefault();
            }
          }
        },

        check: function() {
          if( !module.should.allowCheck() ) {
            return;
          }
          module.debug('Checking checkbox', $input);
          module.set.checked();
          if( !module.should.ignoreCallbacks() ) {
            settings.onChecked.call(input);
            settings.onChange.call(input);
          }
        },

        uncheck: function() {
          if( !module.should.allowUncheck() ) {
            return;
          }
          module.debug('Unchecking checkbox');
          module.set.unchecked();
          if( !module.should.ignoreCallbacks() ) {
            settings.onUnchecked.call(input);
            settings.onChange.call(input);
          }
        },

        indeterminate: function() {
          if( module.should.allowIndeterminate() ) {
            module.debug('Checkbox is already indeterminate');
            return;
          }
          module.debug('Making checkbox indeterminate');
          module.set.indeterminate();
          if( !module.should.ignoreCallbacks() ) {
            settings.onIndeterminate.call(input);
            settings.onChange.call(input);
          }
        },

        determinate: function() {
          if( module.should.allowDeterminate() ) {
            module.debug('Checkbox is already determinate');
            return;
          }
          module.debug('Making checkbox determinate');
          module.set.determinate();
          if( !module.should.ignoreCallbacks() ) {
            settings.onDeterminate.call(input);
            settings.onChange.call(input);
          }
        },

        enable: function() {
          if( module.is.enabled() ) {
            module.debug('Checkbox is already enabled');
            return;
          }
          module.debug('Enabling checkbox');
          module.set.enabled();
          settings.onEnabled.call(input);
        },

        disable: function() {
          if( module.is.disabled() ) {
            module.debug('Checkbox is already disabled');
            return;
          }
          module.debug('Disabling checkbox');
          module.set.disabled();
          settings.onDisabled.call(input);
        },

        get: {
          radios: function() {
            var
              name = module.get.name()
            ;
            return $('input[name="' + name + '"]').closest(selector.checkbox);
          },
          otherRadios: function() {
            return module.get.radios().not($module);
          },
          name: function() {
            return $input.attr('name');
          }
        },

        is: {
          initialLoad: function() {
            return initialLoad;
          },
          radio: function() {
            return ($input.hasClass(className.radio) || $input.attr('type') == 'radio');
          },
          indeterminate: function() {
            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');
          },
          checked: function() {
            return $input.prop('checked') !== undefined && $input.prop('checked');
          },
          disabled: function() {
            return $input.prop('disabled') !== undefined && $input.prop('disabled');
          },
          enabled: function() {
            return !module.is.disabled();
          },
          determinate: function() {
            return !module.is.indeterminate();
          },
          unchecked: function() {
            return !module.is.checked();
          }
        },

        should: {
          allowCheck: function() {
            if(module.is.determinate() && module.is.checked() && !module.should.forceCallbacks() ) {
              module.debug('Should not allow check, checkbox is already checked');
              return false;
            }
            if(settings.beforeChecked.apply(input) === false) {
              module.debug('Should not allow check, beforeChecked cancelled');
              return false;
            }
            return true;
          },
          allowUncheck: function() {
            if(module.is.determinate() && module.is.unchecked() && !module.should.forceCallbacks() ) {
              module.debug('Should not allow uncheck, checkbox is already unchecked');
              return false;
            }
            if(settings.beforeUnchecked.apply(input) === false) {
              module.debug('Should not allow uncheck, beforeUnchecked cancelled');
              return false;
            }
            return true;
          },
          allowIndeterminate: function() {
            if(module.is.indeterminate() && !module.should.forceCallbacks() ) {
              module.debug('Should not allow indeterminate, checkbox is already indeterminate');
              return false;
            }
            if(settings.beforeIndeterminate.apply(input) === false) {
              module.debug('Should not allow indeterminate, beforeIndeterminate cancelled');
              return false;
            }
            return true;
          },
          allowDeterminate: function() {
            if(module.is.determinate() && !module.should.forceCallbacks() ) {
              module.debug('Should not allow determinate, checkbox is already determinate');
              return false;
            }
            if(settings.beforeDeterminate.apply(input) === false) {
              module.debug('Should not allow determinate, beforeDeterminate cancelled');
              return false;
            }
            return true;
          },
          forceCallbacks: function() {
            return (module.is.initialLoad() && settings.fireOnInit);
          },
          ignoreCallbacks: function() {
            return (initialLoad && !settings.fireOnInit);
          }
        },

        can: {
          change: function() {
            return !( $module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly') );
          },
          uncheck: function() {
            return (typeof settings.uncheckable === 'boolean')
              ? settings.uncheckable
              : !module.is.radio()
            ;
          }
        },

        set: {
          initialLoad: function() {
            initialLoad = true;
          },
          checked: function() {
            module.verbose('Setting class to checked');
            $module
              .removeClass(className.indeterminate)
              .addClass(className.checked)
            ;
            if( module.is.radio() ) {
              module.uncheckOthers();
            }
            if(!module.is.indeterminate() && module.is.checked()) {
              module.debug('Input is already checked, skipping input property change');
              return;
            }
            module.verbose('Setting state to checked', input);
            $input
              .prop('indeterminate', false)
              .prop('checked', true)
            ;
            module.trigger.change();
          },
          unchecked: function() {
            module.verbose('Removing checked class');
            $module
              .removeClass(className.indeterminate)
              .removeClass(className.checked)
            ;
            if(!module.is.indeterminate() &&  module.is.unchecked() ) {
              module.debug('Input is already unchecked');
              return;
            }
            module.debug('Setting state to unchecked');
            $input
              .prop('indeterminate', false)
              .prop('checked', false)
            ;
            module.trigger.change();
          },
          indeterminate: function() {
            module.verbose('Setting class to indeterminate');
            $module
              .addClass(className.indeterminate)
            ;
            if( module.is.indeterminate() ) {
              module.debug('Input is already indeterminate, skipping input property change');
              return;
            }
            module.debug('Setting state to indeterminate');
            $input
              .prop('indeterminate', true)
            ;
            module.trigger.change();
          },
          determinate: function() {
            module.verbose('Removing indeterminate class');
            $module
              .removeClass(className.indeterminate)
            ;
            if( module.is.determinate() ) {
              module.debug('Input is already determinate, skipping input property change');
              return;
            }
            module.debug('Setting state to determinate');
            $input
              .prop('indeterminate', false)
            ;
          },
          disabled: function() {
            module.verbose('Setting class to disabled');
            $module
              .addClass(className.disabled)
            ;
            if( module.is.disabled() ) {
              module.debug('Input is already disabled, skipping input property change');
              return;
            }
            module.debug('Setting state to disabled');
            $input
              .prop('disabled', 'disabled')
            ;
            module.trigger.change();
          },
          enabled: function() {
            module.verbose('Removing disabled class');
            $module.removeClass(className.disabled);
            if( module.is.enabled() ) {
              module.debug('Input is already enabled, skipping input property change');
              return;
            }
            module.debug('Setting state to enabled');
            $input
              .prop('disabled', false)
            ;
            module.trigger.change();
          },
          tabbable: function() {
            module.verbose('Adding tabindex to checkbox');
            if( $input.attr('tabindex') === undefined) {
              $input.attr('tabindex', 0);
            }
          }
        },

        remove: {
          initialLoad: function() {
            initialLoad = false;
          }
        },

        trigger: {
          change: function() {
            var
              events       = document.createEvent('HTMLEvents'),
              inputElement = $input[0]
            ;
            if(inputElement) {
              module.verbose('Triggering native change event');
              events.initEvent('change', true, false);
              inputElement.dispatchEvent(events);
            }
          }
        },


        create: {
          label: function() {
            if($input.prevAll(selector.label).length > 0) {
              $input.prev(selector.label).detach().insertAfter($input);
              module.debug('Moving existing label', $label);
            }
            else if( !module.has.label() ) {
              $label = $('<label>').insertAfter($input);
              module.debug('Creating label', $label);
            }
          }
        },

        has: {
          label: function() {
            return ($label.length > 0);
          }
        },

        bind: {
          events: function() {
            module.verbose('Attaching checkbox events');
            $module
              .on('click'   + eventNamespace, module.event.click)
              .on('keydown' + eventNamespace, selector.input, module.event.keydown)
              .on('keyup'   + eventNamespace, selector.input, module.event.keyup)
            ;
          }
        },

        unbind: {
          events: function() {
            module.debug('Removing events');
            $module
              .off(eventNamespace)
            ;
          }
        },

        uncheckOthers: function() {
          var
            $radios = module.get.otherRadios()
          ;
          module.debug('Unchecking other radios', $radios);
          $radios.removeClass(className.checked);
        },

        toggle: function() {
          if( !module.can.change() ) {
            if(!module.is.radio()) {
              module.debug('Checkbox is read-only or disabled, ignoring toggle');
            }
            return;
          }
          if( module.is.indeterminate() || module.is.unchecked() ) {
            module.debug('Currently unchecked');
            module.check();
          }
          else if( module.is.checked() && module.can.uncheck() ) {
            module.debug('Currently checked');
            module.uncheck();
          }
        },
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.checkbox.settings = {

  name                : 'Checkbox',
  namespace           : 'checkbox',

  debug               : false,
  verbose             : true,
  performance         : true,

  // delegated event context
  uncheckable         : 'auto',
  fireOnInit          : false,

  onChange            : function(){},

  beforeChecked       : function(){},
  beforeUnchecked     : function(){},
  beforeDeterminate   : function(){},
  beforeIndeterminate : function(){},

  onChecked           : function(){},
  onUnchecked         : function(){},

  onDeterminate       : function() {},
  onIndeterminate     : function() {},

  onEnable            : function(){},
  onDisable           : function(){},

  className       : {
    checked       : 'checked',
    indeterminate : 'indeterminate',
    disabled      : 'disabled',
    hidden        : 'hidden',
    radio         : 'radio',
    readOnly      : 'read-only'
  },

  error     : {
    method       : 'The method you called is not defined'
  },

  selector : {
    checkbox : '.ui.checkbox',
    label    : 'label, .box',
    input    : 'input[type="checkbox"], input[type="radio"]',
    link     : 'a[href]'
  }

};

})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.dimmer = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.dimmer.settings, parameters)
          : $.extend({}, $.fn.dimmer.settings),

        selector        = settings.selector,
        namespace       = settings.namespace,
        className       = settings.className,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        clickEvent      = ('ontouchstart' in document.documentElement)
          ? 'touchstart'
          : 'click',

        $module = $(this),
        $dimmer,
        $dimmable,

        element   = this,
        instance  = $module.data(moduleNamespace),
        module
      ;

      module = {

        preinitialize: function() {
          if( module.is.dimmer() ) {

            $dimmable = $module.parent();
            $dimmer   = $module;
          }
          else {
            $dimmable = $module;
            if( module.has.dimmer() ) {
              if(settings.dimmerName) {
                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);
              }
              else {
                $dimmer = $dimmable.find(selector.dimmer);
              }
            }
            else {
              $dimmer = module.create();
            }
          }
        },

        initialize: function() {
          module.debug('Initializing dimmer', settings);

          module.bind.events();
          module.set.dimmable();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', $dimmer);
          module.unbind.events();
          module.remove.variation();
          $dimmable
            .off(eventNamespace)
          ;
        },

        bind: {
          events: function() {
            if(settings.on == 'hover') {
              $dimmable
                .on('mouseenter' + eventNamespace, module.show)
                .on('mouseleave' + eventNamespace, module.hide)
              ;
            }
            else if(settings.on == 'click') {
              $dimmable
                .on(clickEvent + eventNamespace, module.toggle)
              ;
            }
            if( module.is.page() ) {
              module.debug('Setting as a page dimmer', $dimmable);
              module.set.pageDimmer();
            }

            if( module.is.closable() ) {
              module.verbose('Adding dimmer close event', $dimmer);
              $dimmable
                .on(clickEvent + eventNamespace, selector.dimmer, module.event.click)
              ;
            }
          }
        },

        unbind: {
          events: function() {
            $module
              .removeData(moduleNamespace)
            ;
          }
        },

        event: {
          click: function(event) {
            module.verbose('Determining if event occured on dimmer', event);
            if( $dimmer.find(event.target).length === 0 || $(event.target).is(selector.content) ) {
              module.hide();
              event.stopImmediatePropagation();
            }
          }
        },

        addContent: function(element) {
          var
            $content = $(element)
          ;
          module.debug('Add content to dimmer', $content);
          if($content.parent()[0] !== $dimmer[0]) {
            $content.detach().appendTo($dimmer);
          }
        },

        create: function() {
          var
            $element = $( settings.template.dimmer() )
          ;
          if(settings.variation) {
            module.debug('Creating dimmer with variation', settings.variation);
            $element.addClass(settings.variation);
          }
          if(settings.dimmerName) {
            module.debug('Creating named dimmer', settings.dimmerName);
            $element.addClass(settings.dimmerName);
          }
          $element
            .appendTo($dimmable)
          ;
          return $element;
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.debug('Showing dimmer', $dimmer, settings);
          if( (!module.is.dimmed() || module.is.animating()) && module.is.enabled() ) {
            module.animate.show(callback);
            settings.onShow.call(element);
            settings.onChange.call(element);
          }
          else {
            module.debug('Dimmer is already shown or disabled');
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.dimmed() || module.is.animating() ) {
            module.debug('Hiding dimmer', $dimmer);
            module.animate.hide(callback);
            settings.onHide.call(element);
            settings.onChange.call(element);
          }
          else {
            module.debug('Dimmer is not visible');
          }
        },

        toggle: function() {
          module.verbose('Toggling dimmer visibility', $dimmer);
          if( !module.is.dimmed() ) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        animate: {
          show: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              if(settings.opacity !== 'auto') {
                module.set.opacity();
              }
              $dimmer
                .transition({
                  animation   : settings.transition + ' in',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onStart     : function() {
                    module.set.dimmed();
                  },
                  onComplete  : function() {
                    module.set.active();
                    callback();
                  }
                })
              ;
            }
            else {
              module.verbose('Showing dimmer animation with javascript');
              module.set.dimmed();
              if(settings.opacity == 'auto') {
                settings.opacity = 0.8;
              }
              $dimmer
                .stop()
                .css({
                  opacity : 0,
                  width   : '100%',
                  height  : '100%'
                })
                .fadeTo(module.get.duration(), settings.opacity, function() {
                  $dimmer.removeAttr('style');
                  module.set.active();
                  callback();
                })
              ;
            }
          },
          hide: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              module.verbose('Hiding dimmer with css');
              $dimmer
                .transition({
                  animation   : settings.transition + ' out',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onStart     : function() {
                    module.remove.dimmed();
                  },
                  onComplete  : function() {
                    module.remove.active();
                    callback();
                  }
                })
              ;
            }
            else {
              module.verbose('Hiding dimmer with javascript');
              module.remove.dimmed();
              $dimmer
                .stop()
                .fadeOut(module.get.duration(), function() {
                  module.remove.active();
                  $dimmer.removeAttr('style');
                  callback();
                })
              ;
            }
          }
        },

        get: {
          dimmer: function() {
            return $dimmer;
          },
          duration: function() {
            if(typeof settings.duration == 'object') {
              if( module.is.active() ) {
                return settings.duration.hide;
              }
              else {
                return settings.duration.show;
              }
            }
            return settings.duration;
          }
        },

        has: {
          dimmer: function() {
            if(settings.dimmerName) {
              return ($module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0);
            }
            else {
              return ( $module.find(selector.dimmer).length > 0 );
            }
          }
        },

        is: {
          active: function() {
            return $dimmer.hasClass(className.active);
          },
          animating: function() {
            return ( $dimmer.is(':animated') || $dimmer.hasClass(className.animating) );
          },
          closable: function() {
            if(settings.closable == 'auto') {
              if(settings.on == 'hover') {
                return false;
              }
              return true;
            }
            return settings.closable;
          },
          dimmer: function() {
            return $module.hasClass(className.dimmer);
          },
          dimmable: function() {
            return $module.hasClass(className.dimmable);
          },
          dimmed: function() {
            return $dimmable.hasClass(className.dimmed);
          },
          disabled: function() {
            return $dimmable.hasClass(className.disabled);
          },
          enabled: function() {
            return !module.is.disabled();
          },
          page: function () {
            return $dimmable.is('body');
          },
          pageDimmer: function() {
            return $dimmer.hasClass(className.pageDimmer);
          }
        },

        can: {
          show: function() {
            return !$dimmer.hasClass(className.disabled);
          }
        },

        set: {
          opacity: function(opacity) {
            var
              color      = $dimmer.css('background-color'),
              colorArray = color.split(','),
              isRGBA     = (colorArray && colorArray.length == 4)
            ;
            opacity    = settings.opacity === 0 ? 0 : settings.opacity || opacity;
            if(isRGBA) {
              colorArray[3] = opacity + ')';
              color         = colorArray.join(',');
            }
            else {
              color = 'rgba(0, 0, 0, ' + opacity + ')';
            }
            module.debug('Setting opacity to', opacity);
            $dimmer.css('background-color', color);
          },
          active: function() {
            $dimmer.addClass(className.active);
          },
          dimmable: function() {
            $dimmable.addClass(className.dimmable);
          },
          dimmed: function() {
            $dimmable.addClass(className.dimmed);
          },
          pageDimmer: function() {
            $dimmer.addClass(className.pageDimmer);
          },
          disabled: function() {
            $dimmer.addClass(className.disabled);
          },
          variation: function(variation) {
            variation = variation || settings.variation;
            if(variation) {
              $dimmer.addClass(variation);
            }
          }
        },

        remove: {
          active: function() {
            $dimmer
              .removeClass(className.active)
            ;
          },
          dimmed: function() {
            $dimmable.removeClass(className.dimmed);
          },
          disabled: function() {
            $dimmer.removeClass(className.disabled);
          },
          variation: function(variation) {
            variation = variation || settings.variation;
            if(variation) {
              $dimmer.removeClass(variation);
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      module.preinitialize();

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.dimmer.settings = {

  name        : 'Dimmer',
  namespace   : 'dimmer',

  debug       : false,
  verbose     : false,
  performance : true,

  // name to distinguish between multiple dimmers in context
  dimmerName  : false,

  // whether to add a variation type
  variation   : false,

  // whether to bind close events
  closable    : 'auto',

  // whether to use css animations
  useCSS      : true,

  // css animation to use
  transition  : 'fade',

  // event to bind to
  on          : false,

  // overriding opacity value
  opacity     : 'auto',

  // transition durations
  duration    : {
    show : 500,
    hide : 500
  },

  onChange    : function(){},
  onShow      : function(){},
  onHide      : function(){},

  error   : {
    method   : 'The method you called is not defined.'
  },

  className : {
    active     : 'active',
    animating  : 'animating',
    dimmable   : 'dimmable',
    dimmed     : 'dimmed',
    dimmer     : 'dimmer',
    disabled   : 'disabled',
    hide       : 'hide',
    pageDimmer : 'page',
    show       : 'show'
  },

  selector: {
    dimmer   : '> .ui.dimmer',
    content  : '.ui.dimmer > .content, .ui.dimmer > .content > .center'
  },

  template: {
    dimmer: function() {
     return $('<div />').attr('class', 'ui dimmer');
    }
  }

};

})( jQuery, window, document );
/*!
 * # Semantic UI 2.1.8 - Dropdown
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.dropdown = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),

    moduleSelector = $allModules.selector || '',

    hasTouch       = ('ontouchstart' in document.documentElement),
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function(elementIndex) {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.dropdown.settings, parameters)
          : $.extend({}, $.fn.dropdown.settings),

        className       = settings.className,
        message         = settings.message,
        fields          = settings.fields,
        keys            = settings.keys,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        regExp          = settings.regExp,
        selector        = settings.selector,
        error           = settings.error,
        templates       = settings.templates,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),
        $text           = $module.find(selector.text),
        $search         = $module.find(selector.search),
        $input          = $module.find(selector.input),
        $icon           = $module.find(selector.icon),

        $combo = ($module.prev().find(selector.text).length > 0)
          ? $module.prev().find(selector.text)
          : $module.prev(),

        $menu           = $module.children(selector.menu),
        $item           = $menu.find(selector.item),

        activated       = false,
        itemActivated   = false,
        internalChange  = false,
        element         = this,
        instance        = $module.data(moduleNamespace),

        initialLoad,
        pageLostFocus,
        elementNamespace,
        id,
        selectObserver,
        menuObserver,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing dropdown', settings);

          if( module.is.alreadySetup() ) {
            module.setup.reference();
          }
          else {
            module.setup.layout();
            module.refreshData();

            module.save.defaults();
            module.restore.selected();

            module.create.id();
            module.bind.events();

            module.observeChanges();
            module.instantiate();
          }

        },

        instantiate: function() {
          module.verbose('Storing instance of dropdown', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous dropdown', $module);
          module.remove.tabbable();
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          $menu
            .off(eventNamespace)
          ;
          $document
            .off(elementNamespace)
          ;
          if(selectObserver) {
            selectObserver.disconnect();
          }
          if(menuObserver) {
            menuObserver.disconnect();
          }
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            selectObserver = new MutationObserver(function(mutations) {
              module.debug('<select> modified, recreating menu');
              module.setup.select();
            });
            menuObserver = new MutationObserver(function(mutations) {
              module.debug('Menu modified, updating selector cache');
              module.refresh();
            });
            if(module.has.input()) {
              selectObserver.observe($input[0], {
                childList : true,
                subtree   : true
              });
            }
            if(module.has.menu()) {
              menuObserver.observe($menu[0], {
                childList : true,
                subtree   : true
              });
            }
            module.debug('Setting up mutation observer', selectObserver, menuObserver);
          }
        },

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          },
          userChoice: function(values) {
            var
              $userChoices,
              $userChoice,
              isUserValue,
              html
            ;
            values = values || module.get.userValues();
            if(!values) {
              return false;
            }
            values = $.isArray(values)
              ? values
              : [values]
            ;
            $.each(values, function(index, value) {
              if(module.get.item(value) === false) {
                html         = settings.templates.addition( module.add.variables(message.addResult, value) );
                $userChoice  = $('<div />')
                  .html(html)
                  .attr('data-' + metadata.value, value)
                  .attr('data-' + metadata.text, value)
                  .addClass(className.addition)
                  .addClass(className.item)
                ;
                $userChoices = ($userChoices === undefined)
                  ? $userChoice
                  : $userChoices.add($userChoice)
                ;
                module.verbose('Creating user choices for value', value, $userChoice);
              }
            });
            return $userChoices;
          },
          userLabels: function(value) {
            var
              userValues = module.get.userValues()
            ;
            if(userValues) {
              module.debug('Adding user labels', userValues);
              $.each(userValues, function(index, value) {
                module.verbose('Adding custom user value');
                module.add.label(value, value);
              });
            }
          },
          menu: function() {
            $menu = $('<div />')
              .addClass(className.menu)
              .appendTo($module)
            ;
          }
        },

        search: function(query) {
          query = (query !== undefined)
            ? query
            : module.get.query()
          ;
          module.verbose('Searching for query', query);
          module.filter(query);
        },

        select: {
          firstUnfiltered: function() {
            module.verbose('Selecting first non-filtered element');
            module.remove.selectedItem();
            $item
              .not(selector.unselectable)
                .eq(0)
                .addClass(className.selected)
            ;
          },
          nextAvailable: function($selected) {
            $selected = $selected.eq(0);
            var
              $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),
              $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),
              hasNext        = ($nextAvailable.length > 0)
            ;
            if(hasNext) {
              module.verbose('Moving selection to', $nextAvailable);
              $nextAvailable.addClass(className.selected);
            }
            else {
              module.verbose('Moving selection to', $prevAvailable);
              $prevAvailable.addClass(className.selected);
            }
          }
        },

        setup: {
          api: function() {
            var
              apiSettings = {
                debug : settings.debug,
                on    : false
              }
            ;
            module.verbose('First request, initializing API');
            $module
              .api(apiSettings)
            ;
          },
          layout: function() {
            if( $module.is('select') ) {
              module.setup.select();
              module.setup.returnedObject();
            }
            if( !module.has.menu() ) {
              module.create.menu();
            }
            if( module.is.search() && !module.has.search() ) {
              module.verbose('Adding search input');
              $search = $('<input />')
                .addClass(className.search)
                .prop('autocomplete', 'off')
                .insertBefore($text)
              ;
            }
            if(settings.allowTab) {
              module.set.tabbable();
            }
          },
          select: function() {
            var
              selectValues  = module.get.selectValues()
            ;
            module.debug('Dropdown initialized on a select', selectValues);
            if( $module.is('select') ) {
              $input = $module;
            }
            // see if select is placed correctly already
            if($input.parent(selector.dropdown).length > 0) {
              module.debug('UI dropdown already exists. Creating dropdown menu only');
              $module = $input.closest(selector.dropdown);
              if( !module.has.menu() ) {
                module.create.menu();
              }
              $menu = $module.children(selector.menu);
              module.setup.menu(selectValues);
            }
            else {
              module.debug('Creating entire dropdown from select');
              $module = $('<div />')
                .attr('class', $input.attr('class') )
                .addClass(className.selection)
                .addClass(className.dropdown)
                .html( templates.dropdown(selectValues) )
                .insertBefore($input)
              ;
              if($input.hasClass(className.multiple) && $input.prop('multiple') === false) {
                module.error(error.missingMultiple);
                $input.prop('multiple', true);
              }
              if($input.is('[multiple]')) {
                module.set.multiple();
              }
              if ($input.prop('disabled')) {
                module.debug('Disabling dropdown')
                $module.addClass(className.disabled)
              }
              $input
                .removeAttr('class')
                .detach()
                .prependTo($module)
              ;
            }
            module.refresh();
          },
          menu: function(values) {
            $menu.html( templates.menu(values, fields));
            $item = $menu.find(selector.item);
          },
          reference: function() {
            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');
            // replace module reference
            $module = $module.parent(selector.dropdown);
            module.refresh();
            module.setup.returnedObject();
            // invoke method in context of current instance
            if(methodInvoked) {
              instance = module;
              module.invoke(query);
            }
          },
          returnedObject: function() {
            var
              $firstModules = $allModules.slice(0, elementIndex),
              $lastModules = $allModules.slice(elementIndex + 1)
            ;
            // adjust all modules to use correct reference
            $allModules = $firstModules.add($module).add($lastModules);
          }
        },

        refresh: function() {
          module.refreshSelectors();
          module.refreshData();
        },

        refreshSelectors: function() {
          module.verbose('Refreshing selector cache');
          $text   = $module.find(selector.text);
          $search = $module.find(selector.search);
          $input  = $module.find(selector.input);
          $icon   = $module.find(selector.icon);
          $combo  = ($module.prev().find(selector.text).length > 0)
            ? $module.prev().find(selector.text)
            : $module.prev()
          ;
          $menu    = $module.children(selector.menu);
          $item    = $menu.find(selector.item);
        },

        refreshData: function() {
          module.verbose('Refreshing cached metadata');
          $item
            .removeData(metadata.text)
            .removeData(metadata.value)
          ;
          $module
            .removeData(metadata.defaultText)
            .removeData(metadata.defaultValue)
            .removeData(metadata.placeholderText)
          ;
        },

        toggle: function() {
          module.verbose('Toggling menu visibility');
          if( !module.is.active() ) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.can.show() && !module.is.active() ) {
            module.debug('Showing dropdown');
            if(module.is.multiple() && !module.has.search() && module.is.allFiltered()) {
              return true;
            }
            if(module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered()) ) {
              module.remove.message();
            }
            if(settings.onShow.call(element) !== false) {
              module.animate.show(function() {
                if( module.can.click() ) {
                  module.bind.intent();
                }
                module.set.visible();
                callback.call(element);
              });
            }
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.active() ) {
            module.debug('Hiding dropdown');
            if(settings.onHide.call(element) !== false) {
              module.animate.hide(function() {
                module.remove.visible();
                callback.call(element);
              });
            }
          }
        },

        hideOthers: function() {
          module.verbose('Finding other dropdowns to hide');
          $allModules
            .not($module)
              .has(selector.menu + '.' + className.visible)
                .dropdown('hide')
          ;
        },

        hideMenu: function() {
          module.verbose('Hiding menu  instantaneously');
          module.remove.active();
          module.remove.visible();
          $menu.transition('hide');
        },

        hideSubMenus: function() {
          var
            $subMenus = $menu.children(selector.item).find(selector.menu)
          ;
          module.verbose('Hiding sub menus', $subMenus);
          $subMenus.transition('hide');
        },

        bind: {
          events: function() {
            if(hasTouch) {
              module.bind.touchEvents();
            }
            module.bind.keyboardEvents();
            module.bind.inputEvents();
            module.bind.mouseEvents();
          },
          touchEvents: function() {
            module.debug('Touch device detected binding additional touch events');
            if( module.is.searchSelection() ) {
              // do nothing special yet
            }
            else if( module.is.single() ) {
              $module
                .on('touchstart' + eventNamespace, module.event.test.toggle)
              ;
            }
            $menu
              .on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter)
            ;
          },
          keyboardEvents: function() {
            module.verbose('Binding keyboard events');
            $module
              .on('keydown' + eventNamespace, module.event.keydown)
            ;
            if( module.has.search() ) {
              $module
                .on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input)
              ;
            }
            if( module.is.multiple() ) {
              $document
                .on('keydown' + elementNamespace, module.event.document.keydown)
              ;
            }
          },
          inputEvents: function() {
            module.verbose('Binding input change events');
            $module
              .on('change' + eventNamespace, selector.input, module.event.change)
            ;
          },
          mouseEvents: function() {
            module.verbose('Binding mouse events');
            if(module.is.multiple()) {
              $module
                .on('click'   + eventNamespace, selector.label,  module.event.label.click)
                .on('click'   + eventNamespace, selector.remove, module.event.remove.click)
              ;
            }
            if( module.is.searchSelection() ) {
              $module
                .on('mousedown' + eventNamespace, selector.menu,   module.event.menu.mousedown)
                .on('mouseup'   + eventNamespace, selector.menu,   module.event.menu.mouseup)
                .on('click'     + eventNamespace, selector.icon,   module.event.icon.click)
                .on('click'     + eventNamespace, selector.search, module.show)
                .on('focus'     + eventNamespace, selector.search, module.event.search.focus)
                .on('blur'      + eventNamespace, selector.search, module.event.search.blur)
                .on('click'     + eventNamespace, selector.text,   module.event.text.focus)
              ;
              if(module.is.multiple()) {
                $module
                  .on('click' + eventNamespace, module.event.click)
                ;
              }
            }
            else {
              if(settings.on == 'click') {
                $module
                  .on('click' + eventNamespace, selector.icon, module.event.icon.click)
                  .on('click' + eventNamespace, module.event.test.toggle)
                ;
              }
              else if(settings.on == 'hover') {
                $module
                  .on('mouseenter' + eventNamespace, module.delay.show)
                  .on('mouseleave' + eventNamespace, module.delay.hide)
                ;
              }
              else {
                $module
                  .on(settings.on + eventNamespace, module.toggle)
                ;
              }
              $module
                .on('mousedown' + eventNamespace, module.event.mousedown)
                .on('mouseup'   + eventNamespace, module.event.mouseup)
                .on('focus'     + eventNamespace, module.event.focus)
                .on('blur'      + eventNamespace, module.event.blur)
              ;
            }
            $menu
              .on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter)
              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)
              .on('click'      + eventNamespace, selector.item, module.event.item.click)
            ;
          },
          intent: function() {
            module.verbose('Binding hide intent event to document');
            if(hasTouch) {
              $document
                .on('touchstart' + elementNamespace, module.event.test.touch)
                .on('touchmove'  + elementNamespace, module.event.test.touch)
              ;
            }
            $document
              .on('click' + elementNamespace, module.event.test.hide)
            ;
          }
        },

        unbind: {
          intent: function() {
            module.verbose('Removing hide intent event from document');
            if(hasTouch) {
              $document
                .off('touchstart' + elementNamespace)
                .off('touchmove' + elementNamespace)
              ;
            }
            $document
              .off('click' + elementNamespace)
            ;
          }
        },

        filter: function(query) {
          var
            searchTerm = (query !== undefined)
              ? query
              : module.get.query(),
            afterFiltered = function() {
              if(module.is.multiple()) {
                module.filterActive();
              }
              module.select.firstUnfiltered();
              if( module.has.allResultsFiltered() ) {
                if( settings.onNoResults.call(element, searchTerm) ) {
                  if(!settings.allowAdditions) {
                    module.verbose('All items filtered, showing message', searchTerm);
                    module.add.message(message.noResults);
                  }
                }
                else {
                  module.verbose('All items filtered, hiding dropdown', searchTerm);
                  module.hideMenu();
                }
              }
              else {
                module.remove.message();
              }
              if(settings.allowAdditions) {
                module.add.userSuggestion(query);
              }
              if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch() ) {
                module.show();
              }
            }
          ;
          if(settings.useLabels && module.has.maxSelections()) {
            return;
          }
          if(settings.apiSettings) {
            if( module.can.useAPI() ) {
              module.queryRemote(searchTerm, function() {
                afterFiltered();
              });
            }
            else {
              module.error(error.noAPI);
            }
          }
          else {
            module.filterItems(searchTerm);
            afterFiltered();
          }
        },

        queryRemote: function(query, callback) {
          var
            apiSettings = {
              errorDuration        : false,
              throttle             : settings.throttle,
              urlData              : {
                query: query
              },
              onError: function() {
                module.add.message(message.serverError);
                callback();
              },
              onFailure: function() {
                module.add.message(message.serverError);
                callback();
              },
              onSuccess : function(response) {
                module.remove.message();
                module.setup.menu({
                  values: response[fields.remoteValues]
                });
                callback();
              }
            }
          ;
          if( !$module.api('get request') ) {
            module.setup.api();
          }
          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);
          $module
            .api('setting', apiSettings)
            .api('query')
          ;
        },

        filterItems: function(query) {
          var
            searchTerm = (query !== undefined)
              ? query
              : module.get.query(),
            results          =  null,
            escapedTerm      = module.escape.regExp(searchTerm),
            beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm')
          ;
          // avoid loop if we're matching nothing
          if( module.has.query() ) {
            results = [];

            module.verbose('Searching for matching values', searchTerm);
            $item
              .each(function(){
                var
                  $choice = $(this),
                  text,
                  value
                ;
                if(settings.match == 'both' || settings.match == 'text') {
                  text = String(module.get.choiceText($choice, false));
                  if(text.search(beginsWithRegExp) !== -1) {
                    results.push(this);
                    return true;
                  }
                  else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, text)) {
                    results.push(this);
                    return true;
                  }
                }
                if(settings.match == 'both' || settings.match == 'value') {
                  value = String(module.get.choiceValue($choice, text));

                  if(value.search(beginsWithRegExp) !== -1) {
                    results.push(this);
                    return true;
                  }
                  else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, value)) {
                    results.push(this);
                    return true;
                  }
                }
              })
            ;
          }
          module.debug('Showing only matched items', searchTerm);
          module.remove.filteredItem();
          if(results) {
            $item
              .not(results)
              .addClass(className.filtered)
            ;
          }
        },

        fuzzySearch: function(query, term) {
          var
            termLength  = term.length,
            queryLength = query.length
          ;
          query = query.toLowerCase();
          term  = term.toLowerCase();
          if(queryLength > termLength) {
            return false;
          }
          if(queryLength === termLength) {
            return (query === term);
          }
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var
              queryCharacter = query.charCodeAt(characterIndex)
            ;
            while(nextCharacterIndex < termLength) {
              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
              }
            }
            return false;
          }
          return true;
        },

        filterActive: function() {
          if(settings.useLabels) {
            $item.filter('.' + className.active)
              .addClass(className.filtered)
            ;
          }
        },

        focusSearch: function() {
          if( module.is.search() && !module.is.focusedOnSearch() ) {
            $search[0].focus();
          }
        },

        forceSelection: function() {
          var
            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),
            $activeItem        = $item.not(className.filtered).filter('.' + className.active).eq(0),
            $selectedItem      = ($currentlySelected.length > 0)
              ? $currentlySelected
              : $activeItem,
            hasSelected = ($selectedItem.size() > 0)
          ;
          if( module.has.query() ) {
            if(hasSelected) {
              module.debug('Forcing partial selection to selected item', $selectedItem);
              module.event.item.click.call($selectedItem);
              return;
            }
            else {
              module.remove.searchTerm();
            }
          }
          module.hide();
        },

        event: {
          change: function() {
            if(!internalChange) {
              module.debug('Input changed, updating selection');
              module.set.selected();
            }
          },
          focus: function() {
            if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {
              module.show();
            }
          },
          click: function(event) {
            var
              $target = $(event.target)
            ;
            // focus search
            if($target.is($module) && !module.is.focusedOnSearch()) {
              module.focusSearch();
            }
          },
          blur: function(event) {
            pageLostFocus = (document.activeElement === this);
            if(!activated && !pageLostFocus) {
              module.remove.activeLabel();
              module.hide();
            }
          },
          // prevents focus callback from occurring on mousedown
          mousedown: function() {
            activated = true;
          },
          mouseup: function() {
            activated = false;
          },
          search: {
            focus: function() {
              activated = true;
              if(module.is.multiple()) {
                module.remove.activeLabel();
              }
              if(settings.showOnFocus) {
                module.search();
                module.show();
              }
            },
            blur: function(event) {
              pageLostFocus = (document.activeElement === this);
              if(!itemActivated && !pageLostFocus) {
                if(module.is.multiple()) {
                  module.remove.activeLabel();
                  module.hide();
                }
                else if(settings.forceSelection) {
                  module.forceSelection();
                }
                else {
                  module.hide();
                }
              }
              else if(pageLostFocus) {
                if(settings.forceSelection) {
                  module.forceSelection();
                }
              }
            }
          },
          icon: {
            click: function(event) {
              module.toggle();
              event.stopPropagation();
            }
          },
          text: {
            focus: function(event) {
              activated = true;
              module.focusSearch();
            }
          },
          input: function(event) {
            if(module.is.multiple() || module.is.searchSelection()) {
              module.set.filtered();
            }
            clearTimeout(module.timer);
            module.timer = setTimeout(module.search, settings.delay.search);
          },
          label: {
            click: function(event) {
              var
                $label        = $(this),
                $labels       = $module.find(selector.label),
                $activeLabels = $labels.filter('.' + className.active),
                $nextActive   = $label.nextAll('.' + className.active),
                $prevActive   = $label.prevAll('.' + className.active),
                $range = ($nextActive.length > 0)
                  ? $label.nextUntil($nextActive).add($activeLabels).add($label)
                  : $label.prevUntil($prevActive).add($activeLabels).add($label)
              ;
              if(event.shiftKey) {
                $activeLabels.removeClass(className.active);
                $range.addClass(className.active);
              }
              else if(event.ctrlKey) {
                $label.toggleClass(className.active);
              }
              else {
                $activeLabels.removeClass(className.active);
                $label.addClass(className.active);
              }
              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));
            }
          },
          remove: {
            click: function() {
              var
                $label = $(this).parent()
              ;
              if( $label.hasClass(className.active) ) {
                // remove all selected labels
                module.remove.activeLabels();
              }
              else {
                // remove this label only
                module.remove.activeLabels( $label );
              }
            }
          },
          test: {
            toggle: function(event) {
              var
                toggleBehavior = (module.is.multiple())
                  ? module.show
                  : module.toggle
              ;
              if( module.determine.eventOnElement(event, toggleBehavior) ) {
                event.preventDefault();
              }
            },
            touch: function(event) {
              module.determine.eventOnElement(event, function() {
                if(event.type == 'touchstart') {
                  module.timer = setTimeout(function() {
                    module.hide();
                  }, settings.delay.touch);
                }
                else if(event.type == 'touchmove') {
                  clearTimeout(module.timer);
                }
              });
              event.stopPropagation();
            },
            hide: function(event) {
              module.determine.eventInModule(event, module.hide);
            }
          },
          menu: {
            mousedown: function() {
              itemActivated = true;
            },
            mouseup: function() {
              itemActivated = false;
            }
          },
          item: {
            mouseenter: function(event) {
              var
                $subMenu    = $(this).children(selector.menu),
                $otherMenus = $(this).siblings(selector.item).children(selector.menu)
              ;
              if( $subMenu.length > 0 ) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Showing sub-menu', $subMenu);
                  $.each($otherMenus, function() {
                    module.animate.hide(false, $(this));
                  });
                  module.animate.show(false,  $subMenu);
                }, settings.delay.show);
                event.preventDefault();
              }
            },
            mouseleave: function(event) {
              var
                $subMenu = $(this).children(selector.menu)
              ;
              if($subMenu.length > 0) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Hiding sub-menu', $subMenu);
                  module.animate.hide(false,  $subMenu);
                }, settings.delay.hide);
              }
            },
            touchend: function() {
            },
            click: function (event) {
              var
                $choice        = $(this),
                $target        = (event)
                  ? $(event.target)
                  : $(''),
                $subMenu       = $choice.find(selector.menu),
                text           = module.get.choiceText($choice),
                value          = module.get.choiceValue($choice, text),
                hasSubMenu     = ($subMenu.length > 0),
                isBubbledEvent = ($subMenu.find($target).length > 0)
              ;
              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {
                if(!settings.useLabels) {
                  module.remove.filteredItem();
                  module.remove.searchTerm();
                  module.set.scrollPosition($choice);
                }
                module.determine.selectAction.call(this, text, value);
              }
            }
          },

          document: {
            // label selection should occur even when element has no focus
            keydown: function(event) {
              var
                pressedKey    = event.which,
                isShortcutKey = module.is.inObject(pressedKey, keys)
              ;
              if(isShortcutKey) {
                var
                  $label            = $module.find(selector.label),
                  $activeLabel      = $label.filter('.' + className.active),
                  activeValue       = $activeLabel.data(metadata.value),
                  labelIndex        = $label.index($activeLabel),
                  labelCount        = $label.length,
                  hasActiveLabel    = ($activeLabel.length > 0),
                  hasMultipleActive = ($activeLabel.length > 1),
                  isFirstLabel      = (labelIndex === 0),
                  isLastLabel       = (labelIndex + 1 == labelCount),
                  isSearch          = module.is.searchSelection(),
                  isFocusedOnSearch = module.is.focusedOnSearch(),
                  isFocused         = module.is.focused(),
                  caretAtStart      = (isFocusedOnSearch && module.get.caretPosition() === 0),
                  $nextLabel
                ;
                if(isSearch && !hasActiveLabel && !isFocusedOnSearch) {
                  return;
                }

                if(pressedKey == keys.leftArrow) {
                  // activate previous label
                  if((isFocused || caretAtStart) && !hasActiveLabel) {
                    module.verbose('Selecting previous label');
                    $label.last().addClass(className.active);
                  }
                  else if(hasActiveLabel) {
                    if(!event.shiftKey) {
                      module.verbose('Selecting previous label');
                      $label.removeClass(className.active);
                    }
                    else {
                      module.verbose('Adding previous label to selection');
                    }
                    if(isFirstLabel && !hasMultipleActive) {
                      $activeLabel.addClass(className.active);
                    }
                    else {
                      $activeLabel.prev(selector.siblingLabel)
                        .addClass(className.active)
                        .end()
                      ;
                    }
                    event.preventDefault();
                  }
                }
                else if(pressedKey == keys.rightArrow) {
                  // activate first label
                  if(isFocused && !hasActiveLabel) {
                    $label.first().addClass(className.active);
                  }
                  // activate next label
                  if(hasActiveLabel) {
                    if(!event.shiftKey) {
                      module.verbose('Selecting next label');
                      $label.removeClass(className.active);
                    }
                    else {
                      module.verbose('Adding next label to selection');
                    }
                    if(isLastLabel) {
                      if(isSearch) {
                        if(!isFocusedOnSearch) {
                          module.focusSearch();
                        }
                        else {
                          $label.removeClass(className.active);
                        }
                      }
                      else if(hasMultipleActive) {
                        $activeLabel.next(selector.siblingLabel).addClass(className.active);
                      }
                      else {
                        $activeLabel.addClass(className.active);
                      }
                    }
                    else {
                      $activeLabel.next(selector.siblingLabel).addClass(className.active);
                    }
                    event.preventDefault();
                  }
                }
                else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace) {
                  if(hasActiveLabel) {
                    module.verbose('Removing active labels');
                    if(isLastLabel) {
                      if(isSearch && !isFocusedOnSearch) {
                        module.focusSearch();
                      }
                    }
                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);
                    module.remove.activeLabels($activeLabel);
                    event.preventDefault();
                  }
                  else if(caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {
                    module.verbose('Removing last label on input backspace');
                    $activeLabel = $label.last().addClass(className.active);
                    module.remove.activeLabels($activeLabel);
                  }
                }
                else {
                  $activeLabel.removeClass(className.active);
                }
              }
            }
          },

          keydown: function(event) {
            var
              pressedKey    = event.which,
              isShortcutKey = module.is.inObject(pressedKey, keys)
            ;
            if(isShortcutKey) {
              var
                $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),
                $activeItem        = $menu.children('.' + className.active).eq(0),
                $selectedItem      = ($currentlySelected.length > 0)
                  ? $currentlySelected
                  : $activeItem,
                $visibleItems = ($selectedItem.length > 0)
                  ? $selectedItem.siblings(':not(.' + className.filtered +')').andSelf()
                  : $menu.children(':not(.' + className.filtered +')'),
                $subMenu             = $selectedItem.children(selector.menu),
                $parentMenu          = $selectedItem.closest(selector.menu),
                inVisibleMenu        = ($parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0),
                hasSubMenu           = ($subMenu.length> 0),
                hasSelectedItem      = ($selectedItem.length > 0),
                selectedIsSelectable = ($selectedItem.not(selector.unselectable).length > 0),
                delimiterPressed     = (pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple()),
                $nextItem,
                isSubMenuItem,
                newIndex
              ;
              // visible menu keyboard shortcuts
              if( module.is.visible() ) {

                // enter (select or open sub-menu)
                if(pressedKey == keys.enter || delimiterPressed) {
                  if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {
                    module.verbose('Pressed enter on unselectable category, opening sub menu');
                    pressedKey = keys.rightArrow;
                  }
                  else if(selectedIsSelectable) {
                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);
                    module.event.item.click.call($selectedItem, event);
                    if(module.is.searchSelection()) {
                      module.remove.searchTerm();
                    }
                  }
                  event.preventDefault();
                }

                // left arrow (hide sub-menu)
                if(pressedKey == keys.leftArrow) {

                  isSubMenuItem = ($parentMenu[0] !== $menu[0]);

                  if(isSubMenuItem) {
                    module.verbose('Left key pressed, closing sub-menu');
                    module.animate.hide(false,  $parentMenu);
                    $selectedItem
                      .removeClass(className.selected)
                    ;
                    $parentMenu
                      .closest(selector.item)
                        .addClass(className.selected)
                    ;
                    event.preventDefault();
                  }
                }

                // right arrow (show sub-menu)
                if(pressedKey == keys.rightArrow) {
                  if(hasSubMenu) {
                    module.verbose('Right key pressed, opening sub-menu');
                    module.animate.show(false,  $subMenu);
                    $selectedItem
                      .removeClass(className.selected)
                    ;
                    $subMenu
                      .find(selector.item).eq(0)
                        .addClass(className.selected)
                    ;
                    event.preventDefault();
                  }
                }

                // up arrow (traverse menu up)
                if(pressedKey == keys.upArrow) {
                  $nextItem = (hasSelectedItem && inVisibleMenu)
                    ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)
                    : $item.eq(0)
                  ;
                  if($visibleItems.index( $nextItem ) < 0) {
                    module.verbose('Up key pressed but reached top of current menu');
                    event.preventDefault();
                    return;
                  }
                  else {
                    module.verbose('Up key pressed, changing active item');
                    $selectedItem
                      .removeClass(className.selected)
                    ;
                    $nextItem
                      .addClass(className.selected)
                    ;
                    module.set.scrollPosition($nextItem);
                  }
                  event.preventDefault();
                }

                // down arrow (traverse menu down)
                if(pressedKey == keys.downArrow) {
                  $nextItem = (hasSelectedItem && inVisibleMenu)
                    ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)
                    : $item.eq(0)
                  ;
                  if($nextItem.length === 0) {
                    module.verbose('Down key pressed but reached bottom of current menu');
                    event.preventDefault();
                    return;
                  }
                  else {
                    module.verbose('Down key pressed, changing active item');
                    $item
                      .removeClass(className.selected)
                    ;
                    $nextItem
                      .addClass(className.selected)
                    ;
                    module.set.scrollPosition($nextItem);
                  }
                  event.preventDefault();
                }

                // page down (show next page)
                if(pressedKey == keys.pageUp) {
                  module.scrollPage('up');
                  event.preventDefault();
                }
                if(pressedKey == keys.pageDown) {
                  module.scrollPage('down');
                  event.preventDefault();
                }

                // escape (close menu)
                if(pressedKey == keys.escape) {
                  module.verbose('Escape key pressed, closing dropdown');
                  module.hide();
                }

              }
              else {
                // delimiter key
                if(delimiterPressed) {
                  event.preventDefault();
                }
                // down arrow (open menu)
                if(pressedKey == keys.downArrow) {
                  module.verbose('Down key pressed, showing dropdown');
                  module.show();
                  event.preventDefault();
                }
              }
            }
            else {
              if( module.is.selection() && !module.is.search() ) {
                module.set.selectedLetter( String.fromCharCode(pressedKey) );
              }
            }
          }
        },

        trigger: {
          change: function() {
            var
              events       = document.createEvent('HTMLEvents'),
              inputElement = $input[0]
            ;
            if(inputElement) {
              module.verbose('Triggering native change event');
              events.initEvent('change', true, false);
              inputElement.dispatchEvent(events);
            }
          }
        },

        determine: {
          selectAction: function(text, value) {
            module.verbose('Determining action', settings.action);
            if( $.isFunction( module.action[settings.action] ) ) {
              module.verbose('Triggering preset action', settings.action, text, value);
              module.action[ settings.action ].call(this, text, value);
            }
            else if( $.isFunction(settings.action) ) {
              module.verbose('Triggering user action', settings.action, text, value);
              settings.action.call(this, text, value);
            }
            else {
              module.error(error.action, settings.action);
            }
          },
          eventInModule: function(event, callback) {
            var
              $target    = $(event.target),
              inDocument = ($target.closest(document.documentElement).length > 0),
              inModule   = ($target.closest($module).length > 0)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(inDocument && !inModule) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            }
            else {
              module.verbose('Event occurred in dropdown, canceling callback');
              return false;
            }
          },
          eventOnElement: function(event, callback) {
            var
              $target    = $(event.target),
              $label     = $target.closest(selector.siblingLabel),
              notOnLabel = ($module.find($label).length === 0),
              notInMenu  = ($target.closest($menu).length === 0)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(notOnLabel && notInMenu) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            }
            else {
              module.verbose('Event occurred in dropdown menu, canceling callback');
              return false;
            }
          }
        },

        action: {

          nothing: function() {},

          activate: function(text, value) {
            value = (value !== undefined)
              ? value
              : text
            ;
            if( module.can.activate( $(this) ) ) {
              module.set.selected(value, $(this));
              if(module.is.multiple() && !module.is.allFiltered()) {
                return;
              }
              else {
                module.hideAndClear();
              }
            }
          },

          select: function(text, value) {
            // mimics action.activate but does not select text
            module.action.activate.call(this);
          },

          combo: function(text, value) {
            value = (value !== undefined)
              ? value
              : text
            ;
            module.set.selected(value, $(this));
            module.hideAndClear();
          },

          hide: function(text, value) {
            module.set.value(value);
            module.hideAndClear();
          }

        },

        get: {
          id: function() {
            return id;
          },
          defaultText: function() {
            return $module.data(metadata.defaultText);
          },
          defaultValue: function() {
            return $module.data(metadata.defaultValue);
          },
          placeholderText: function() {
            return $module.data(metadata.placeholderText) || '';
          },
          text: function() {
            return $text.text();
          },
          query: function() {
            return $.trim($search.val());
          },
          searchWidth: function(characterCount) {
            return (characterCount * settings.glyphWidth) + 'em';
          },
          selectionCount: function() {
            var
              values = module.get.values(),
              count
            ;
            count = ( module.is.multiple() )
              ? $.isArray(values)
                ? values.length
                : 0
              : (module.get.value() !== '')
                ? 1
                : 0
            ;
            return count;
          },
          transition: function($subMenu) {
            return (settings.transition == 'auto')
              ? module.is.upward($subMenu)
                ? 'slide up'
                : 'slide down'
              : settings.transition
            ;
          },
          userValues: function() {
            var
              values = module.get.values()
            ;
            if(!values) {
              return false;
            }
            values = $.isArray(values)
              ? values
              : [values]
            ;
            return $.grep(values, function(value) {
              return (module.get.item(value) === false);
            });
          },
          uniqueArray: function(array) {
            return $.grep(array, function (value, index) {
                return $.inArray(value, array) === index;
            });
          },
          caretPosition: function() {
            var
              input = $search.get(0),
              range,
              rangeLength
            ;
            if('selectionStart' in input) {
              return input.selectionStart;
            }
            else if (document.selection) {
              input.focus();
              range       = document.selection.createRange();
              rangeLength = range.text.length;
              range.moveStart('character', -input.value.length);
              return range.text.length - rangeLength;
            }
          },
          value: function() {
            var
              value = ($input.length > 0)
                ? $input.val()
                : $module.data(metadata.value)
            ;
            // prevents placeholder element from being selected when multiple
            if($.isArray(value) && value.length === 1 && value[0] === '') {
              return '';
            }
            return value;
          },
          values: function() {
            var
              value = module.get.value()
            ;
            if(value === '') {
              return '';
            }
            return ( !module.has.selectInput() && module.is.multiple() )
              ? (typeof value == 'string') // delimited string
                ? value.split(settings.delimiter)
                : ''
              : value
            ;
          },
          remoteValues: function() {
            var
              values = module.get.values(),
              remoteValues = false
            ;
            if(values) {
              if(typeof values == 'string') {
                values = [values];
              }
              remoteValues = {};
              $.each(values, function(index, value) {
                var
                  name = module.read.remoteData(value)
                ;
                module.verbose('Restoring value from session data', name, value);
                remoteValues[value] = (name)
                  ? name
                  : value
                ;
              });
            }
            return remoteValues;
          },
          choiceText: function($choice, preserveHTML) {
            preserveHTML = (preserveHTML !== undefined)
              ? preserveHTML
              : settings.preserveHTML
            ;
            if($choice) {
              if($choice.find(selector.menu).length > 0) {
                module.verbose('Retreiving text of element with sub-menu');
                $choice = $choice.clone();
                $choice.find(selector.menu).remove();
                $choice.find(selector.menuIcon).remove();
              }
              return ($choice.data(metadata.text) !== undefined)
                ? $choice.data(metadata.text)
                : (preserveHTML)
                  ? $.trim($choice.html())
                  : $.trim($choice.text())
              ;
            }
          },
          choiceValue: function($choice, choiceText) {
            choiceText = choiceText || module.get.choiceText($choice);
            if(!$choice) {
              return false;
            }
            return ($choice.data(metadata.value) !== undefined)
              ? String( $choice.data(metadata.value) )
              : (typeof choiceText === 'string')
                ? $.trim(choiceText.toLowerCase())
                : String(choiceText)
            ;
          },
          inputEvent: function() {
            var
              input = $search[0]
            ;
            if(input) {
              return (input.oninput !== undefined)
                ? 'input'
                : (input.onpropertychange !== undefined)
                  ? 'propertychange'
                  : 'keyup'
              ;
            }
            return false;
          },
          selectValues: function() {
            var
              select = {}
            ;
            select.values = [];
            $module
              .find('option')
                .each(function() {
                  var
                    $option  = $(this),
                    name     = $option.html(),
                    disabled = $option.attr('disabled'),
                    value    = ( $option.attr('value') !== undefined )
                      ? $option.attr('value')
                      : name
                  ;
                  if(settings.placeholder === 'auto' && value === '') {
                    select.placeholder = name;
                  }
                  else {
                    select.values.push({
                      name     : name,
                      value    : value,
                      disabled : disabled
                    });
                  }
                })
            ;
            if(settings.placeholder && settings.placeholder !== 'auto') {
              module.debug('Setting placeholder value to', settings.placeholder);
              select.placeholder = settings.placeholder;
            }
            if(settings.sortSelect) {
              select.values.sort(function(a, b) {
                return (a.name > b.name)
                  ? 1
                  : -1
                ;
              });
              module.debug('Retrieved and sorted values from select', select);
            }
            else {
              module.debug('Retreived values from select', select);
            }
            return select;
          },
          activeItem: function() {
            return $item.filter('.'  + className.active);
          },
          selectedItem: function() {
            var
              $selectedItem = $item.not(selector.unselectable).filter('.'  + className.selected)
            ;
            return ($selectedItem.length > 0)
              ? $selectedItem
              : $item.eq(0)
            ;
          },
          itemWithAdditions: function(value) {
            var
              $items       = module.get.item(value),
              $userItems   = module.create.userChoice(value),
              hasUserItems = ($userItems && $userItems.length > 0)
            ;
            if(hasUserItems) {
              $items = ($items.length > 0)
                ? $items.add($userItems)
                : $userItems
              ;
            }
            return $items;
          },
          item: function(value, strict) {
            var
              $selectedItem = false,
              shouldSearch,
              isMultiple
            ;
            value = (value !== undefined)
              ? value
              : ( module.get.values() !== undefined)
                ? module.get.values()
                : module.get.text()
            ;
            shouldSearch = (isMultiple)
              ? (value.length > 0)
              : (value !== undefined && value !== null)
            ;
            isMultiple = (module.is.multiple() && $.isArray(value));
            strict     = (value === '' || value === 0)
              ? true
              : strict || false
            ;
            if(shouldSearch) {
              $item
                .each(function() {
                  var
                    $choice       = $(this),
                    optionText    = module.get.choiceText($choice),
                    optionValue   = module.get.choiceValue($choice, optionText)
                  ;
                  // safe early exit
                  if(optionValue === null || optionValue === undefined) {
                    return;
                  }
                  if(isMultiple) {
                    if($.inArray( String(optionValue), value) !== -1 || $.inArray(optionText, value) !== -1) {
                      $selectedItem = ($selectedItem)
                        ? $selectedItem.add($choice)
                        : $choice
                      ;
                    }
                  }
                  else if(strict) {
                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);
                    if( optionValue === value || optionText === value) {
                      $selectedItem = $choice;
                      return true;
                    }
                  }
                  else {
                    if( String(optionValue) == String(value) || optionText == value) {
                      module.verbose('Found select item by value', optionValue, value);
                      $selectedItem = $choice;
                      return true;
                    }
                  }
                })
              ;
            }
            return $selectedItem;
          }
        },

        check: {
          maxSelections: function(selectionCount) {
            if(settings.maxSelections) {
              selectionCount = (selectionCount !== undefined)
                ? selectionCount
                : module.get.selectionCount()
              ;
              if(selectionCount >= settings.maxSelections) {
                module.debug('Maximum selection count reached');
                if(settings.useLabels) {
                  $item.addClass(className.filtered);
                  module.add.message(message.maxSelections);
                }
                return true;
              }
              else {
                module.verbose('No longer at maximum selection count');
                module.remove.message();
                module.remove.filteredItem();
                if(module.is.searchSelection()) {
                  module.filterItems();
                }
                return false;
              }
            }
            return true;
          }
        },

        restore: {
          defaults: function() {
            module.clear();
            module.restore.defaultText();
            module.restore.defaultValue();
          },
          defaultText: function() {
            var
              defaultText     = module.get.defaultText(),
              placeholderText = module.get.placeholderText
            ;
            if(defaultText === placeholderText) {
              module.debug('Restoring default placeholder text', defaultText);
              module.set.placeholderText(defaultText);
            }
            else {
              module.debug('Restoring default text', defaultText);
              module.set.text(defaultText);
            }
          },
          defaultValue: function() {
            var
              defaultValue = module.get.defaultValue()
            ;
            if(defaultValue !== undefined) {
              module.debug('Restoring default value', defaultValue);
              if(defaultValue !== '') {
                module.set.value(defaultValue);
                module.set.selected();
              }
              else {
                module.remove.activeItem();
                module.remove.selectedItem();
              }
            }
          },
          labels: function() {
            if(settings.allowAdditions) {
              if(!settings.useLabels) {
                module.error(error.labels);
                settings.useLabels = true;
              }
              module.debug('Restoring selected values');
              module.create.userLabels();
            }
            module.check.maxSelections();
          },
          selected: function() {
            module.restore.values();
            if(module.is.multiple()) {
              module.debug('Restoring previously selected values and labels');
              module.restore.labels();
            }
            else {
              module.debug('Restoring previously selected values');
            }
          },
          values: function() {
            // prevents callbacks from occuring on initial load
            module.set.initialLoad();
            if(settings.apiSettings) {
              if(settings.saveRemoteData) {
                module.restore.remoteValues();
              }
              else {
                module.clearValue();
              }
            }
            else {
              module.set.selected();
            }
            module.remove.initialLoad();
          },
          remoteValues: function() {
            var
              values = module.get.remoteValues()
            ;
            module.debug('Recreating selected from session data', values);
            if(values) {
              if( module.is.single() ) {
                $.each(values, function(value, name) {
                  module.set.text(name);
                });
              }
              else {
                $.each(values, function(value, name) {
                  module.add.label(value, name);
                });
              }
            }
          }
        },

        read: {
          remoteData: function(value) {
            var
              name
            ;
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            name = sessionStorage.getItem(value);
            return (name !== undefined)
              ? name
              : false
            ;
          }
        },

        save: {
          defaults: function() {
            module.save.defaultText();
            module.save.placeholderText();
            module.save.defaultValue();
          },
          defaultValue: function() {
            var
              value = module.get.value()
            ;
            module.verbose('Saving default value as', value);
            $module.data(metadata.defaultValue, value);
          },
          defaultText: function() {
            var
              text = module.get.text()
            ;
            module.verbose('Saving default text as', text);
            $module.data(metadata.defaultText, text);
          },
          placeholderText: function() {
            var
              text
            ;
            if(settings.placeholder !== false && $text.hasClass(className.placeholder)) {
              text = module.get.text();
              module.verbose('Saving placeholder text as', text);
              $module.data(metadata.placeholderText, text);
            }
          },
          remoteData: function(name, value) {
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            module.verbose('Saving remote data to session storage', value, name);
            sessionStorage.setItem(value, name);
          }
        },

        clear: function() {
          if(module.is.multiple()) {
            module.remove.labels();
          }
          else {
            module.remove.activeItem();
            module.remove.selectedItem();
          }
          module.set.placeholderText();
          module.clearValue();
        },

        clearValue: function() {
          module.set.value('');
        },

        scrollPage: function(direction, $selectedItem) {
          var
            $currentItem  = $selectedItem || module.get.selectedItem(),
            $menu         = $currentItem.closest(selector.menu),
            menuHeight    = $menu.outerHeight(),
            currentScroll = $menu.scrollTop(),
            itemHeight    = $item.eq(0).outerHeight(),
            itemsPerPage  = Math.floor(menuHeight / itemHeight),
            maxScroll     = $menu.prop('scrollHeight'),
            newScroll     = (direction == 'up')
              ? currentScroll - (itemHeight * itemsPerPage)
              : currentScroll + (itemHeight * itemsPerPage),
            $selectableItem = $item.not(selector.unselectable),
            isWithinRange,
            $nextSelectedItem,
            elementIndex
          ;
          elementIndex      = (direction == 'up')
            ? $selectableItem.index($currentItem) - itemsPerPage
            : $selectableItem.index($currentItem) + itemsPerPage
          ;
          isWithinRange = (direction == 'up')
            ? (elementIndex >= 0)
            : (elementIndex < $selectableItem.length)
          ;
          $nextSelectedItem = (isWithinRange)
            ? $selectableItem.eq(elementIndex)
            : (direction == 'up')
              ? $selectableItem.first()
              : $selectableItem.last()
          ;
          if($nextSelectedItem.length > 0) {
            module.debug('Scrolling page', direction, $nextSelectedItem);
            $currentItem
              .removeClass(className.selected)
            ;
            $nextSelectedItem
              .addClass(className.selected)
            ;
            $menu
              .scrollTop(newScroll)
            ;
          }
        },

        set: {
          filtered: function() {
            var
              isMultiple       = module.is.multiple(),
              isSearch         = module.is.searchSelection(),
              isSearchMultiple = (isMultiple && isSearch),
              searchValue      = (isSearch)
                ? module.get.query()
                : '',
              hasSearchValue   = (typeof searchValue === 'string' && searchValue.length > 0),
              searchWidth      = module.get.searchWidth(searchValue.length),
              valueIsSet       = searchValue !== ''
            ;
            if(isMultiple && hasSearchValue) {
              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);
              $search.css('width', searchWidth);
            }
            if(hasSearchValue || (isSearchMultiple && valueIsSet)) {
              module.verbose('Hiding placeholder text');
              $text.addClass(className.filtered);
            }
            else if(!isMultiple || (isSearchMultiple && !valueIsSet)) {
              module.verbose('Showing placeholder text');
              $text.removeClass(className.filtered);
            }
          },
          loading: function() {
            $module.addClass(className.loading);
          },
          placeholderText: function(text) {
            text = text || module.get.placeholderText();
            module.debug('Setting placeholder text', text);
            module.set.text(text);
            $text.addClass(className.placeholder);
          },
          tabbable: function() {
            if( module.has.search() ) {
              module.debug('Added tabindex to searchable dropdown');
              $search
                .val('')
                .attr('tabindex', 0)
              ;
              $menu
                .attr('tabindex', -1)
              ;
            }
            else {
              module.debug('Added tabindex to dropdown');
              if( $module.attr('tabindex') === undefined) {
                $module
                  .attr('tabindex', 0)
                ;
                $menu
                  .attr('tabindex', -1)
                ;
              }
            }
          },
          initialLoad: function() {
            module.verbose('Setting initial load');
            initialLoad = true;
          },
          activeItem: function($item) {
            if( settings.allowAdditions && $item.filter(selector.addition).length > 0 ) {
              $item.addClass(className.filtered);
            }
            else {
              $item.addClass(className.active);
            }
          },
          scrollPosition: function($item, forceScroll) {
            var
              edgeTolerance = 5,
              $menu,
              hasActive,
              offset,
              itemHeight,
              itemOffset,
              menuOffset,
              menuScroll,
              menuHeight,
              abovePage,
              belowPage
            ;

            $item       = $item || module.get.selectedItem();
            $menu       = $item.closest(selector.menu);
            hasActive   = ($item && $item.length > 0);
            forceScroll = (forceScroll !== undefined)
              ? forceScroll
              : false
            ;
            if($item && $menu.length > 0 && hasActive) {
              itemOffset = $item.position().top;

              $menu.addClass(className.loading);
              menuScroll = $menu.scrollTop();
              menuOffset = $menu.offset().top;
              itemOffset = $item.offset().top;
              offset     = menuScroll - menuOffset + itemOffset;
              if(!forceScroll) {
                menuHeight = $menu.height();
                belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);
                abovePage  = ((offset - edgeTolerance) < menuScroll);
              }
              module.debug('Scrolling to active item', offset);
              if(forceScroll || abovePage || belowPage) {
                $menu.scrollTop(offset);
              }
              $menu.removeClass(className.loading);
            }
          },
          text: function(text) {
            if(settings.action !== 'select') {
              if(settings.action == 'combo') {
                module.debug('Changing combo button text', text, $combo);
                if(settings.preserveHTML) {
                  $combo.html(text);
                }
                else {
                  $combo.text(text);
                }
              }
              else {
                if(text !== module.get.placeholderText()) {
                  $text.removeClass(className.placeholder);
                }
                module.debug('Changing text', text, $text);
                $text
                  .removeClass(className.filtered)
                ;
                if(settings.preserveHTML) {
                  $text.html(text);
                }
                else {
                  $text.text(text);
                }
              }
            }
          },
          selectedLetter: function(letter) {
            var
              $selectedItem         = $item.filter('.' + className.selected),
              alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),
              $nextValue            = false,
              $nextItem
            ;
            // check next of same letter
            if(alreadySelectedLetter) {
              $nextItem = $selectedItem.nextAll($item).eq(0);
              if( module.has.firstLetter($nextItem, letter) ) {
                $nextValue  = $nextItem;
              }
            }
            // check all values
            if(!$nextValue) {
              $item
                .each(function(){
                  if(module.has.firstLetter($(this), letter)) {
                    $nextValue = $(this);
                    return false;
                  }
                })
              ;
            }
            // set next value
            if($nextValue) {
              module.verbose('Scrolling to next value with letter', letter);
              module.set.scrollPosition($nextValue);
              $selectedItem.removeClass(className.selected);
              $nextValue.addClass(className.selected);
            }
          },
          direction: function($menu) {
            if(settings.direction == 'auto') {
              if(module.is.onScreen($menu)) {
                module.remove.upward($menu);
              }
              else {
                module.set.upward($menu);
              }
            }
            else if(settings.direction == 'upward') {
              module.set.upward($menu);
            }
          },
          upward: function($menu) {
            var $element = $menu || $module;
            $element.addClass(className.upward);
          },
          value: function(value, text, $selected) {
            var
              hasInput     = ($input.length > 0),
              isAddition   = !module.has.value(value),
              currentValue = module.get.values(),
              stringValue  = (value !== undefined)
                ? String(value)
                : value,
              newValue
            ;
            if(hasInput) {
              if(stringValue == currentValue) {
                module.verbose('Skipping value update already same value', value, currentValue);
                if(!module.is.initialLoad()) {
                  return;
                }
              }

              if( module.is.single() && module.has.selectInput() && module.can.extendSelect() ) {
                module.debug('Adding user option', value);
                module.add.optionValue(value);
              }
              module.debug('Updating input value', value, currentValue);
              internalChange = true;
              $input
                .val(value)
              ;
              if(settings.fireOnInit === false && module.is.initialLoad()) {
                module.debug('Input native change event ignored on initial load');
              }
              else {
                module.trigger.change();
              }
              internalChange = false;
            }
            else {
              module.verbose('Storing value in metadata', value, $input);
              if(value !== currentValue) {
                $module.data(metadata.value, stringValue);
              }
            }
            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('No callback on initial load', settings.onChange);
            }
            else {
              settings.onChange.call(element, value, text, $selected);
            }
          },
          active: function() {
            $module
              .addClass(className.active)
            ;
          },
          multiple: function() {
            $module.addClass(className.multiple);
          },
          visible: function() {
            $module.addClass(className.visible);
          },
          exactly: function(value, $selectedItem) {
            module.debug('Setting selected to exact values');
            module.clear();
            module.set.selected(value, $selectedItem);
          },
          selected: function(value, $selectedItem) {
            var
              isMultiple = module.is.multiple(),
              $userSelectedItem
            ;
            $selectedItem = (settings.allowAdditions)
              ? $selectedItem || module.get.itemWithAdditions(value)
              : $selectedItem || module.get.item(value)
            ;
            if(!$selectedItem) {
              return;
            }
            module.debug('Setting selected menu item to', $selectedItem);
            if(module.is.single()) {
              module.remove.activeItem();
              module.remove.selectedItem();
            }
            else if(settings.useLabels) {
              module.remove.selectedItem();
            }
            // select each item
            $selectedItem
              .each(function() {
                var
                  $selected      = $(this),
                  selectedText   = module.get.choiceText($selected),
                  selectedValue  = module.get.choiceValue($selected, selectedText),

                  isFiltered     = $selected.hasClass(className.filtered),
                  isActive       = $selected.hasClass(className.active),
                  isUserValue    = $selected.hasClass(className.addition),
                  shouldAnimate  = (isMultiple && $selectedItem.length == 1)
                ;
                if(isMultiple) {
                  if(!isActive || isUserValue) {
                    if(settings.apiSettings && settings.saveRemoteData) {
                      module.save.remoteData(selectedText, selectedValue);
                    }
                    if(settings.useLabels) {
                      module.add.value(selectedValue, selectedText, $selected);
                      module.add.label(selectedValue, selectedText, shouldAnimate);
                      module.set.activeItem($selected);
                      module.filterActive();
                      module.select.nextAvailable($selectedItem);
                    }
                    else {
                      module.add.value(selectedValue, selectedText, $selected);
                      module.set.text(module.add.variables(message.count));
                      module.set.activeItem($selected);
                    }
                  }
                  else if(!isFiltered) {
                    module.debug('Selected active value, removing label');
                    module.remove.selected(selectedValue);
                  }
                }
                else {
                  if(settings.apiSettings && settings.saveRemoteData) {
                    module.save.remoteData(selectedText, selectedValue);
                  }
                  module.set.text(selectedText);
                  module.set.value(selectedValue, selectedText, $selected);
                  $selected
                    .addClass(className.active)
                    .addClass(className.selected)
                  ;
                }
              })
            ;
          }
        },

        add: {
          label: function(value, text, shouldAnimate) {
            var
              $next  = module.is.searchSelection()
                ? $search
                : $text,
              $label
            ;
            $label =  $('<a />')
              .addClass(className.label)
              .attr('data-value', value)
              .html(templates.label(value, text))
            ;
            $label = settings.onLabelCreate.call($label, value, text);

            if(module.has.label(value)) {
              module.debug('Label already exists, skipping', value);
              return;
            }
            if(settings.label.variation) {
              $label.addClass(settings.label.variation);
            }
            if(shouldAnimate === true) {
              module.debug('Animating in label', $label);
              $label
                .addClass(className.hidden)
                .insertBefore($next)
                .transition(settings.label.transition, settings.label.duration)
              ;
            }
            else {
              module.debug('Adding selection label', $label);
              $label
                .insertBefore($next)
              ;
            }
          },
          message: function(message) {
            var
              $message = $menu.children(selector.message),
              html     = settings.templates.message(module.add.variables(message))
            ;
            if($message.length > 0) {
              $message
                .html(html)
              ;
            }
            else {
              $message = $('<div/>')
                .html(html)
                .addClass(className.message)
                .appendTo($menu)
              ;
            }
          },
          optionValue: function(value) {
            var
              $option   = $input.find('option[value="' + value + '"]'),
              hasOption = ($option.length > 0)
            ;
            if(hasOption) {
              return;
            }
            // temporarily disconnect observer
            if(selectObserver) {
              selectObserver.disconnect();
              module.verbose('Temporarily disconnecting mutation observer', value);
            }
            if( module.is.single() ) {
              module.verbose('Removing previous user addition');
              $input.find('option.' + className.addition).remove();
            }
            $('<option/>')
              .prop('value', value)
              .addClass(className.addition)
              .html(value)
              .appendTo($input)
            ;
            module.verbose('Adding user addition as an <option>', value);
            if(selectObserver) {
              selectObserver.observe($input[0], {
                childList : true,
                subtree   : true
              });
            }
          },
          userSuggestion: function(value) {
            var
              $addition         = $menu.children(selector.addition),
              $existingItem     = module.get.item(value),
              alreadyHasValue   = $existingItem && $existingItem.not(selector.addition).length,
              hasUserSuggestion = $addition.length > 0,
              html
            ;
            if(settings.useLabels && module.has.maxSelections()) {
              return;
            }
            if(value === '' || alreadyHasValue) {
              $addition.remove();
              return;
            }
            $item
              .removeClass(className.selected)
            ;
            if(hasUserSuggestion) {
              html = settings.templates.addition( module.add.variables(message.addResult, value) );
              $addition
                .html(html)
                .attr('data-' + metadata.value, value)
                .attr('data-' + metadata.text, value)
                .removeClass(className.filtered)
                .addClass(className.selected)
              ;
              module.verbose('Replacing user suggestion with new value', $addition);
            }
            else {
              $addition = module.create.userChoice(value);
              $addition
                .prependTo($menu)
                .addClass(className.selected)
              ;
              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);
            }
          },
          variables: function(message, term) {
            var
              hasCount    = (message.search('{count}') !== -1),
              hasMaxCount = (message.search('{maxCount}') !== -1),
              hasTerm     = (message.search('{term}') !== -1),
              values,
              count,
              query
            ;
            module.verbose('Adding templated variables to message', message);
            if(hasCount) {
              count  = module.get.selectionCount();
              message = message.replace('{count}', count);
            }
            if(hasMaxCount) {
              count  = module.get.selectionCount();
              message = message.replace('{maxCount}', settings.maxSelections);
            }
            if(hasTerm) {
              query   = term || module.get.query();
              message = message.replace('{term}', query);
            }
            return message;
          },
          value: function(addedValue, addedText, $selectedItem) {
            var
              currentValue = module.get.values(),
              newValue
            ;
            if(addedValue === '') {
              module.debug('Cannot select blank values from multiselect');
              return;
            }
            // extend current array
            if($.isArray(currentValue)) {
              newValue = currentValue.concat([addedValue]);
              newValue = module.get.uniqueArray(newValue);
            }
            else {
              newValue = [addedValue];
            }
            // add values
            if( module.has.selectInput() ) {
              if(module.can.extendSelect()) {
                module.debug('Adding value to select', addedValue, newValue, $input);
                module.add.optionValue(addedValue);
              }
            }
            else {
              newValue = newValue.join(settings.delimiter);
              module.debug('Setting hidden input to delimited value', newValue, $input);
            }

            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('Skipping onadd callback on initial load', settings.onAdd);
            }
            else {
              settings.onAdd.call(element, addedValue, addedText, $selectedItem);
            }
            module.set.value(newValue, addedValue, addedText, $selectedItem);
            module.check.maxSelections();
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          activeLabel: function() {
            $module.find(selector.label).removeClass(className.active);
          },
          loading: function() {
            $module.removeClass(className.loading);
          },
          initialLoad: function() {
            initialLoad = false;
          },
          upward: function($menu) {
            var $element = $menu || $module;
            $element.removeClass(className.upward);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          activeItem: function() {
            $item.removeClass(className.active);
          },
          filteredItem: function() {
            if(settings.useLabels && module.has.maxSelections() ) {
              return;
            }
            if(settings.useLabels && module.is.multiple()) {
              $item.not('.' + className.active).removeClass(className.filtered);
            }
            else {
              $item.removeClass(className.filtered);
            }
          },
          optionValue: function(value) {
            var
              $option   = $input.find('option[value="' + value + '"]'),
              hasOption = ($option.length > 0)
            ;
            if(!hasOption || !$option.hasClass(className.addition)) {
              return;
            }
            // temporarily disconnect observer
            if(selectObserver) {
              selectObserver.disconnect();
              module.verbose('Temporarily disconnecting mutation observer', value);
            }
            $option.remove();
            module.verbose('Removing user addition as an <option>', value);
            if(selectObserver) {
              selectObserver.observe($input[0], {
                childList : true,
                subtree   : true
              });
            }
          },
          message: function() {
            $menu.children(selector.message).remove();
          },
          searchTerm: function() {
            module.verbose('Cleared search term');
            $search.val('');
            module.set.filtered();
          },
          selected: function(value, $selectedItem) {
            $selectedItem = (settings.allowAdditions)
              ? $selectedItem || module.get.itemWithAdditions(value)
              : $selectedItem || module.get.item(value)
            ;

            if(!$selectedItem) {
              return false;
            }

            $selectedItem
              .each(function() {
                var
                  $selected     = $(this),
                  selectedText  = module.get.choiceText($selected),
                  selectedValue = module.get.choiceValue($selected, selectedText)
                ;
                if(module.is.multiple()) {
                  if(settings.useLabels) {
                    module.remove.value(selectedValue, selectedText, $selected);
                    module.remove.label(selectedValue);
                  }
                  else {
                    module.remove.value(selectedValue, selectedText, $selected);
                    if(module.get.selectionCount() === 0) {
                      module.set.placeholderText();
                    }
                    else {
                      module.set.text(module.add.variables(message.count));
                    }
                  }
                }
                else {
                  module.remove.value(selectedValue, selectedText, $selected);
                }
                $selected
                  .removeClass(className.filtered)
                  .removeClass(className.active)
                ;
                if(settings.useLabels) {
                  $selected.removeClass(className.selected);
                }
              })
            ;
          },
          selectedItem: function() {
            $item.removeClass(className.selected);
          },
          value: function(removedValue, removedText, $removedItem) {
            var
              values = module.get.values(),
              newValue
            ;
            if( module.has.selectInput() ) {
              module.verbose('Input is <select> removing selected option', removedValue);
              newValue = module.remove.arrayValue(removedValue, values);
              module.remove.optionValue(removedValue);
            }
            else {
              module.verbose('Removing from delimited values', removedValue);
              newValue = module.remove.arrayValue(removedValue, values);
              newValue = newValue.join(settings.delimiter);
            }
            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('No callback on initial load', settings.onRemove);
            }
            else {
              settings.onRemove.call(element, removedValue, removedText, $removedItem);
            }
            module.set.value(newValue, removedText, $removedItem);
            module.check.maxSelections();
          },
          arrayValue: function(removedValue, values) {
            if( !$.isArray(values) ) {
              values = [values];
            }
            values = $.grep(values, function(value){
              return (removedValue != value);
            });
            module.verbose('Removed value from delimited string', removedValue, values);
            return values;
          },
          label: function(value, shouldAnimate) {
            var
              $labels       = $module.find(selector.label),
              $removedLabel = $labels.filter('[data-value="' + value +'"]')
            ;
            module.verbose('Removing label', $removedLabel);
            $removedLabel.remove();
          },
          activeLabels: function($activeLabels) {
            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);
            module.verbose('Removing active label selections', $activeLabels);
            module.remove.labels($activeLabels);
          },
          labels: function($labels) {
            $labels = $labels || $module.find(selector.label);
            module.verbose('Removing labels', $labels);
            $labels
              .each(function(){
                var
                  $label      = $(this),
                  value       = $label.data(metadata.value),
                  stringValue = (value !== undefined)
                    ? String(value)
                    : value,
                  isUserValue = module.is.userValue(stringValue)
                ;
                if(settings.onLabelRemove.call($label, value) === false) {
                  module.debug('Label remove callback cancelled removal');
                  return;
                }
                if(isUserValue) {
                  module.remove.value(stringValue);
                  module.remove.label(stringValue);
                }
                else {
                  // selected will also remove label
                  module.remove.selected(stringValue);
                }
              })
            ;
          },
          tabbable: function() {
            if( module.has.search() ) {
              module.debug('Searchable dropdown initialized');
              $search
                .removeAttr('tabindex')
              ;
              $menu
                .removeAttr('tabindex')
              ;
            }
            else {
              module.debug('Simple selection dropdown initialized');
              $module
                .removeAttr('tabindex')
              ;
              $menu
                .removeAttr('tabindex')
              ;
            }
          }
        },

        has: {
          search: function() {
            return ($search.length > 0);
          },
          selectInput: function() {
            return ( $input.is('select') );
          },
          firstLetter: function($item, letter) {
            var
              text,
              firstLetter
            ;
            if(!$item || $item.length === 0 || typeof letter !== 'string') {
              return false;
            }
            text        = module.get.choiceText($item, false);
            letter      = letter.toLowerCase();
            firstLetter = String(text).charAt(0).toLowerCase();
            return (letter == firstLetter);
          },
          input: function() {
            return ($input.length > 0);
          },
          items: function() {
            return ($item.length > 0);
          },
          menu: function() {
            return ($menu.length > 0);
          },
          message: function() {
            return ($menu.children(selector.message).length !== 0);
          },
          label: function(value) {
            var
              $labels = $module.find(selector.label)
            ;
            return ($labels.filter('[data-value="' + value +'"]').length > 0);
          },
          maxSelections: function() {
            return (settings.maxSelections && module.get.selectionCount() >= settings.maxSelections);
          },
          allResultsFiltered: function() {
            return ($item.filter(selector.unselectable).length === $item.length);
          },
          query: function() {
            return (module.get.query() !== '');
          },
          value: function(value) {
            var
              values   = module.get.values(),
              hasValue = $.isArray(values)
               ? values && ($.inArray(value, values) !== -1)
               : (values == value)
            ;
            return (hasValue)
              ? true
              : false
            ;
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          alreadySetup: function() {
            return ($module.is('select') && $module.parent(selector.dropdown).length > 0  && $module.prev().length === 0);
          },
          animating: function($subMenu) {
            return ($subMenu)
              ? $subMenu.transition && $subMenu.transition('is animating')
              : $menu.transition    && $menu.transition('is animating')
            ;
          },
          disabled: function() {
            return $module.hasClass(className.disabled);
          },
          focused: function() {
            return (document.activeElement === $module[0]);
          },
          focusedOnSearch: function() {
            return (document.activeElement === $search[0]);
          },
          allFiltered: function() {
            return( (module.is.multiple() || module.has.search()) && !module.has.message() && module.has.allResultsFiltered() );
          },
          hidden: function($subMenu) {
            return !module.is.visible($subMenu);
          },
          initialLoad: function() {
            return initialLoad;
          },
          onScreen: function($subMenu) {
            var
              $currentMenu   = $subMenu || $menu,
              canOpenDownward = true,
              onScreen = {},
              calculations
            ;
            $currentMenu.addClass(className.loading);
            calculations = {
              context: {
                scrollTop : $context.scrollTop(),
                height    : $context.outerHeight()
              },
              menu : {
                offset: $currentMenu.offset(),
                height: $currentMenu.outerHeight()
              }
            };
            onScreen = {
              above : (calculations.context.scrollTop) <= calculations.menu.offset.top - calculations.menu.height,
              below : (calculations.context.scrollTop + calculations.context.height) >= calculations.menu.offset.top + calculations.menu.height
            };
            if(onScreen.below) {
              module.verbose('Dropdown can fit in context downward', onScreen);
              canOpenDownward = true;
            }
            else if(!onScreen.below && !onScreen.above) {
              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);
              canOpenDownward = true;
            }
            else {
              module.verbose('Dropdown cannot fit below, opening upward', onScreen);
              canOpenDownward = false;
            }
            $currentMenu.removeClass(className.loading);
            return canOpenDownward;
          },
          inObject: function(needle, object) {
            var
              found = false
            ;
            $.each(object, function(index, property) {
              if(property == needle) {
                found = true;
                return true;
              }
            });
            return found;
          },
          multiple: function() {
            return $module.hasClass(className.multiple);
          },
          single: function() {
            return !module.is.multiple();
          },
          selectMutation: function(mutations) {
            var
              selectChanged = false
            ;
            $.each(mutations, function(index, mutation) {
              if(mutation.target && $(mutation.target).is('select')) {
                selectChanged = true;
                return true;
              }
            });
            return selectChanged;
          },
          search: function() {
            return $module.hasClass(className.search);
          },
          searchSelection: function() {
            return ( module.has.search() && $search.parent(selector.dropdown).length === 1 );
          },
          selection: function() {
            return $module.hasClass(className.selection);
          },
          userValue: function(value) {
            return ($.inArray(value, module.get.userValues()) !== -1);
          },
          upward: function($menu) {
            var $element = $menu || $module;
            return $element.hasClass(className.upward);
          },
          visible: function($subMenu) {
            return ($subMenu)
              ? $subMenu.hasClass(className.visible)
              : $menu.hasClass(className.visible)
            ;
          }
        },

        can: {
          activate: function($item) {
            if(settings.useLabels) {
              return true;
            }
            if(!module.has.maxSelections()) {
              return true;
            }
            if(module.has.maxSelections() && $item.hasClass(className.active)) {
              return true;
            }
            return false;
          },
          click: function() {
            return (hasTouch || settings.on == 'click');
          },
          extendSelect: function() {
            return settings.allowAdditions || settings.apiSettings;
          },
          show: function() {
            return !module.is.disabled() && (module.has.items() || module.has.message());
          },
          useAPI: function() {
            return $.fn.api !== undefined;
          }
        },

        animate: {
          show: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              start = ($subMenu)
                ? function() {}
                : function() {
                  module.hideSubMenus();
                  module.hideOthers();
                  module.set.active();
                },
              transition
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            module.verbose('Doing menu show animation', $currentMenu);
            module.set.direction($subMenu);
            transition = module.get.transition($subMenu);
            if( module.is.selection() ) {
              module.set.scrollPosition(module.get.selectedItem(), true);
            }
            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {
              if(transition == 'none') {
                start();
                $currentMenu.transition('show');
                callback.call(element);
              }
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : transition + ' in',
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    duration   : settings.duration,
                    queue      : true,
                    onStart    : start,
                    onComplete : function() {
                      callback.call(element);
                    }
                  })
                ;
              }
              else {
                module.error(error.noTransition, transition);
              }
            }
          },
          hide: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              duration = ($subMenu)
                ? (settings.duration * 0.9)
                : settings.duration,
              start = ($subMenu)
                ? function() {}
                : function() {
                  if( module.can.click() ) {
                    module.unbind.intent();
                  }
                  module.remove.active();
                },
              transition = module.get.transition($subMenu)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {
              module.verbose('Doing menu hide animation', $currentMenu);

              if(transition == 'none') {
                start();
                $currentMenu.transition('hide');
                callback.call(element);
              }
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : transition + ' out',
                    duration   : settings.duration,
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    queue      : true,
                    onStart    : start,
                    onComplete : function() {
                      if(settings.direction == 'auto') {
                        module.remove.upward($subMenu);
                      }
                      callback.call(element);
                    }
                  })
                ;
              }
              else {
                module.error(error.transition);
              }
            }
          }
        },

        hideAndClear: function() {
          module.remove.searchTerm();
          if( module.has.maxSelections() ) {
            return;
          }
          if(module.has.search()) {
            module.hide(function() {
              module.remove.filteredItem();
            });
          }
          else {
            module.hide();
          }
        },

        delay: {
          show: function() {
            module.verbose('Delaying show event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.show, settings.delay.show);
          },
          hide: function() {
            module.verbose('Delaying hide event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.hide, settings.delay.hide);
          }
        },

        escape: {
          regExp: function(text) {
            text =  String(text);
            return text.replace(regExp.escape, '\\$&');
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : $allModules
  ;
};

$.fn.dropdown.settings = {

  debug                  : false,
  verbose                : false,
  performance            : true,

  on                     : 'click',    // what event should show menu action on item selection
  action                 : 'activate', // action on item selection (nothing, activate, select, combo, hide, function(){})


  apiSettings            : false,
  saveRemoteData         : true,      // Whether remote name/value pairs should be stored in sessionStorage to allow remote data to be restored on page refresh
  throttle               : 200,       // How long to wait after last user input to search remotely

  context                : window,      // Context to use when determining if on screen
  direction              : 'auto',     // Whether dropdown should always open in one direction
  keepOnScreen           : true,       // Whether dropdown should check whether it is on screen before showing

  match                  : 'both',     // what to match against with search selection (both, text, or label)
  fullTextSearch         : false,      // search anywhere in value

  placeholder            : 'auto',     // whether to convert blank <select> values to placeholder text
  preserveHTML           : true,       // preserve html when selecting value
  sortSelect             : false,      // sort selection on init

  forceSelection         : true,       // force a choice on blur with search selection
  allowAdditions         : false,      // whether multiple select should allow user added values

  maxSelections          : false,      // When set to a number limits the number of selections to this count
  useLabels              : true,       // whether multiple select should filter currently active selections from choices
  delimiter              : ',',        // when multiselect uses normal <input> the values will be delimited with this character

  showOnFocus            : true,       // show menu on focus
  allowTab               : true,       // add tabindex to element
  allowCategorySelection : false,      // allow elements with sub-menus to be selected

  fireOnInit             : false,      // Whether callbacks should fire when initializing dropdown values

  transition             : 'auto',     // auto transition will slide down or up based on direction
  duration               : 200,        // duration of transition

  glyphWidth             : 1.0714,     // widest glyph width in em (W is 1.0714 em) used to calculate multiselect input width

  // label settings on multi-select
  label: {
    transition : 'scale',
    duration   : 200,
    variation  : false
  },

  // delay before event
  delay : {
    hide   : 300,
    show   : 200,
    search : 20,
    touch  : 50
  },

  /* Callbacks */
  onChange      : function(value, text, $selected){},
  onAdd         : function(value, text, $selected){},
  onRemove      : function(value, text, $selected){},

  onLabelSelect : function($selectedLabels){},
  onLabelCreate : function(value, text) { return $(this); },
  onLabelRemove : function(value) { return true; },
  onNoResults   : function(searchTerm) { return true; },
  onShow        : function(){},
  onHide        : function(){},

  /* Component */
  name           : 'Dropdown',
  namespace      : 'dropdown',

  message: {
    addResult     : 'Add <b>{term}</b>',
    count         : '{count} selected',
    maxSelections : 'Max {maxCount} selections',
    noResults     : 'No results found.',
    serverError   : 'There was an error contacting the server'
  },

  error : {
    action          : 'You called a dropdown action that was not defined',
    alreadySetup    : 'Once a select has been initialized behaviors must be called on the created ui dropdown',
    labels          : 'Allowing user additions currently requires the use of labels.',
    missingMultiple : '<select> requires multiple property to be set to correctly preserve multiple values',
    method          : 'The method you called is not defined.',
    noAPI           : 'The API module is required to load resources remotely',
    noStorage       : 'Saving remote data requires session storage',
    noTransition    : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>'
  },

  regExp : {
    escape   : /[-[\]{}()*+?.,\\^$|#\s]/g,
  },

  metadata : {
    defaultText     : 'defaultText',
    defaultValue    : 'defaultValue',
    placeholderText : 'placeholder',
    text            : 'text',
    value           : 'value'
  },

  // property names for remote query
  fields: {
    remoteValues : 'results', // grouping for api results
    values       : 'values', // grouping for all dropdown values
    name         : 'name',   // displayed dropdown text
    value        : 'value'   // actual dropdown value
  },

  keys : {
    backspace  : 8,
    delimiter  : 188, // comma
    deleteKey  : 46,
    enter      : 13,
    escape     : 27,
    pageUp     : 33,
    pageDown   : 34,
    leftArrow  : 37,
    upArrow    : 38,
    rightArrow : 39,
    downArrow  : 40
  },

  selector : {
    addition     : '.addition',
    dropdown     : '.ui.dropdown',
    icon         : '> .dropdown.icon',
    input        : '> input[type="hidden"], > select',
    item         : '.item',
    label        : '> .label',
    remove       : '> .label > .delete.icon',
    siblingLabel : '.label',
    menu         : '.menu',
    message      : '.message',
    menuIcon     : '.dropdown.icon',
    search       : 'input.search, .menu > .search > input',
    text         : '> .text:not(.icon)',
    unselectable : '.disabled, .filtered'
  },

  className : {
    active      : 'active',
    addition    : 'addition',
    animating   : 'animating',
    disabled    : 'disabled',
    dropdown    : 'ui dropdown',
    filtered    : 'filtered',
    hidden      : 'hidden transition',
    item        : 'item',
    label       : 'ui label',
    loading     : 'loading',
    menu        : 'menu',
    message     : 'message',
    multiple    : 'multiple',
    placeholder : 'default',
    search      : 'search',
    selected    : 'selected',
    selection   : 'selection',
    upward      : 'upward',
    visible     : 'visible'
  }

};

/* Templates */
$.fn.dropdown.settings.templates = {

  // generates dropdown from select values
  dropdown: function(select) {
    var
      placeholder = select.placeholder || false,
      values      = select.values || {},
      html        = ''
    ;
    html +=  '<i class="dropdown icon"></i>';
    if(select.placeholder) {
      html += '<div class="default text">' + placeholder + '</div>';
    }
    else {
      html += '<div class="text"></div>';
    }
    html += '<div class="menu">';
    $.each(select.values, function(index, option) {
      html += (option.disabled)
        ? '<div class="disabled item" data-value="' + option.value + '">' + option.name + '</div>'
        : '<div class="item" data-value="' + option.value + '">' + option.name + '</div>'
      ;
    });
    html += '</div>';
    return html;
  },

  // generates just menu from select
  menu: function(response, fields) {
    var
      values = response[fields.values] || {},
      html   = ''
    ;
    $.each(values, function(index, option) {
      html += '<div class="item" data-value="' + option[fields.value] + '">' + option[fields.name] + '</div>';
    });
    return html;
  },

  // generates label for multiselect
  label: function(value, text) {
    return text + '<i class="delete icon"></i>';
  },


  // generates messages like "No results"
  message: function(message) {
    return message;
  },

  // generates user addition to selection menu
  addition: function(choice) {
    return choice;
  }

};

})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.embed = function(parameters) {

  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.embed.settings, parameters)
          : $.extend({}, $.fn.embed.settings),

        selector        = settings.selector,
        className       = settings.className,
        sources         = settings.sources,
        error           = settings.error,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        templates       = settings.templates,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $window         = $(window),
        $module         = $(this),
        $placeholder    = $module.find(selector.placeholder),
        $icon           = $module.find(selector.icon),
        $embed          = $module.find(selector.embed),

        element         = this,
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing embed');
          module.determine.autoplay();
          module.create();
          module.bind.events();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance of embed');
          module.reset();
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $placeholder = $module.find(selector.placeholder);
          $icon        = $module.find(selector.icon);
          $embed       = $module.find(selector.embed);
        },

        bind: {
          events: function() {
            if( module.has.placeholder() ) {
              module.debug('Adding placeholder events');
              $module
                .on('click' + eventNamespace, selector.placeholder, module.createAndShow)
                .on('click' + eventNamespace, selector.icon, module.createAndShow)
              ;
            }
          }
        },

        create: function() {
          var
            placeholder = module.get.placeholder()
          ;
          if(placeholder) {
            module.createPlaceholder();
          }
          else {
            module.createAndShow();
          }
        },

        createPlaceholder: function(placeholder) {
          var
            icon  = module.get.icon(),
            url   = module.get.url(),
            embed = module.generate.embed(url)
          ;
          placeholder = placeholder || module.get.placeholder();
          $module.html( templates.placeholder(placeholder, icon) );
          module.debug('Creating placeholder for embed', placeholder, icon);
        },

        createEmbed: function(url) {
          module.refresh();
          url = url || module.get.url();
          $embed = $('<div/>')
            .addClass(className.embed)
            .html( module.generate.embed(url) )
            .appendTo($module)
          ;
          settings.onCreate.call(element, url);
          module.debug('Creating embed object', $embed);
        },

        createAndShow: function() {
          module.createEmbed();
          module.show();
        },

        // sets new embed
        change: function(source, id, url) {
          module.debug('Changing video to ', source, id, url);
          $module
            .data(metadata.source, source)
            .data(metadata.id, id)
            .data(metadata.url, url)
          ;
          module.create();
        },

        // clears embed
        reset: function() {
          module.debug('Clearing embed and showing placeholder');
          module.remove.active();
          module.remove.embed();
          module.showPlaceholder();
          settings.onReset.call(element);
        },

        // shows current embed
        show: function() {
          module.debug('Showing embed');
          module.set.active();
          settings.onDisplay.call(element);
        },

        hide: function() {
          module.debug('Hiding embed');
          module.showPlaceholder();
        },

        showPlaceholder: function() {
          module.debug('Showing placeholder image');
          module.remove.active();
          settings.onPlaceholderDisplay.call(element);
        },

        get: {
          id: function() {
            return settings.id || $module.data(metadata.id);
          },
          placeholder: function() {
            return settings.placeholder || $module.data(metadata.placeholder);
          },
          icon: function() {
            return (settings.icon)
              ? settings.icon
              : ($module.data(metadata.icon) !== undefined)
                ? $module.data(metadata.icon)
                : module.determine.icon()
            ;
          },
          source: function(url) {
            return (settings.source)
              ? settings.source
              : ($module.data(metadata.source) !== undefined)
                ? $module.data(metadata.source)
                : module.determine.source()
            ;
          },
          type: function() {
            var source = module.get.source();
            return (sources[source] !== undefined)
              ? sources[source].type
              : false
            ;
          },
          url: function() {
            return (settings.url)
              ? settings.url
              : ($module.data(metadata.url) !== undefined)
                ? $module.data(metadata.url)
                : module.determine.url()
            ;
          }
        },

        determine: {
          autoplay: function() {
            if(module.should.autoplay()) {
              settings.autoplay = true;
            }
          },
          source: function(url) {
            var
              matchedSource = false
            ;
            url = url || module.get.url();
            if(url) {
              $.each(sources, function(name, source) {
                if(url.search(source.domain) !== -1) {
                  matchedSource = name;
                  return false;
                }
              });
            }
            return matchedSource;
          },
          icon: function() {
            var
              source = module.get.source()
            ;
            return (sources[source] !== undefined)
              ? sources[source].icon
              : false
            ;
          },
          url: function() {
            var
              id     = settings.id     || $module.data(metadata.id),
              source = settings.source || $module.data(metadata.source),
              url
            ;
            url = (sources[source] !== undefined)
              ? sources[source].url.replace('{id}', id)
              : false
            ;
            if(url) {
              $module.data(metadata.url, url);
            }
            return url;
          }
        },


        set: {
          active: function() {
            $module.addClass(className.active);
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          embed: function() {
            $embed.empty();
          }
        },

        encode: {
          parameters: function(parameters) {
            var
              urlString = [],
              index
            ;
            for (index in parameters) {
              urlString.push( encodeURIComponent(index) + '=' + encodeURIComponent( parameters[index] ) );
            }
            return urlString.join('&amp;');
          }
        },

        generate: {
          embed: function(url) {
            module.debug('Generating embed html');
            var
              source = module.get.source(),
              html,
              parameters
            ;
            url = module.get.url(url);
            if(url) {
              parameters = module.generate.parameters(source);
              html       = templates.iframe(url, parameters);
            }
            else {
              module.error(error.noURL, $module);
            }
            return html;
          },
          parameters: function(source, extraParameters) {
            var
              parameters = (sources[source] && sources[source].parameters !== undefined)
                ? sources[source].parameters(settings)
                : {}
            ;
            extraParameters = extraParameters || settings.parameters;
            if(extraParameters) {
              parameters = $.extend({}, parameters, extraParameters);
            }
            parameters = settings.onEmbed(parameters);
            return module.encode.parameters(parameters);
          }
        },

        has: {
          placeholder: function() {
            return settings.placeholder || $module.data(metadata.placeholder);
          }
        },

        should: {
          autoplay: function() {
            return (settings.autoplay === 'auto')
              ? (settings.placeholder || $module.data(metadata.placeholder) !== undefined)
              : settings.autoplay
            ;
          }
        },

        is: {
          video: function() {
            return module.get.type() == 'video';
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.embed.settings = {

  name        : 'Embed',
  namespace   : 'embed',

  debug       : false,
  verbose     : false,
  performance : true,

  icon     : false,
  source   : false,
  url      : false,
  id       : false,

  // standard video settings
  autoplay  : 'auto',
  color     : '#444444',
  hd        : true,
  brandedUI : false,

  // additional parameters to include with the embed
  parameters: false,

  onDisplay            : function() {},
  onPlaceholderDisplay : function() {},
  onReset              : function() {},
  onCreate             : function(url) {},
  onEmbed              : function(parameters) {
    return parameters;
  },

  metadata    : {
    id          : 'id',
    icon        : 'icon',
    placeholder : 'placeholder',
    source      : 'source',
    url         : 'url'
  },

  error : {
    noURL  : 'No URL specified',
    method : 'The method you called is not defined'
  },

  className : {
    active : 'active',
    embed  : 'embed'
  },

  selector : {
    embed       : '.embed',
    placeholder : '.placeholder',
    icon        : '.icon'
  },

  sources: {
    youtube: {
      name   : 'youtube',
      type   : 'video',
      icon   : 'video play',
      domain : 'youtube.com',
      url    : '//www.youtube.com/embed/{id}',
      parameters: function(settings) {
        return {
          autohide       : !settings.brandedUI,
          autoplay       : settings.autoplay,
          color          : settings.colors || undefined,
          hq             : settings.hd,
          jsapi          : settings.api,
          modestbranding : !settings.brandedUI
        };
      }
    },
    vimeo: {
      name   : 'vimeo',
      type   : 'video',
      icon   : 'video play',
      domain : 'vimeo.com',
      url    : '//player.vimeo.com/video/{id}',
      parameters: function(settings) {
        return {
          api      : settings.api,
          autoplay : settings.autoplay,
          byline   : settings.brandedUI,
          color    : settings.colors || undefined,
          portrait : settings.brandedUI,
          title    : settings.brandedUI
        };
      }
    }
  },

  templates: {
    iframe : function(url, parameters) {
      return ''
        + '<iframe src="' + url + '?' + parameters + '"'
        + ' width="100%" height="100%"'
        + ' frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>'
      ;
    },
    placeholder : function(image, icon) {
      var
        html = ''
      ;
      if(icon) {
        html += '<i class="' + icon + ' icon"></i>';
      }
      if(image) {
        html += '<img class="placeholder" src="' + image + '">';
      }
      return html;
    }
  },

  // NOT YET IMPLEMENTED
  api     : true,
  onPause : function() {},
  onPlay  : function() {},
  onStop  : function() {}

};



})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.modal = function(parameters) {
  var
    $allModules    = $(this),
    $window        = $(window),
    $document      = $(document),
    $body          = $('body'),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings    = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.modal.settings, parameters)
          : $.extend({}, $.fn.modal.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),
        $close          = $module.find(selector.close),

        $allModals,
        $otherModals,
        $focusedElement,
        $dimmable,
        $dimmer,

        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        observer,
        module
      ;
      module  = {

        initialize: function() {
          module.verbose('Initializing dimmer', $context);

          module.create.id();
          module.create.dimmer();
          module.refreshModals();

          module.bind.events();
          if(settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of modal');
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        create: {
          dimmer: function() {
            var
              defaultSettings = {
                debug      : settings.debug,
                dimmerName : 'modals',
                duration   : {
                  show     : settings.duration,
                  hide     : settings.duration
                }
              },
              dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings)
            ;
            if(settings.inverted) {
              dimmerSettings.variation = (dimmerSettings.variation !== undefined)
                ? dimmerSettings.variation + ' inverted'
                : 'inverted'
              ;
            }
            if($.fn.dimmer === undefined) {
              module.error(error.dimmer);
              return;
            }
            module.debug('Creating dimmer with settings', dimmerSettings);
            $dimmable = $context.dimmer(dimmerSettings);
            if(settings.detachable) {
              module.verbose('Modal is detachable, moving content into dimmer');
              $dimmable.dimmer('add content', $module);
            }
            else {
              module.set.undetached();
            }
            if(settings.blurring) {
              $dimmable.addClass(className.blurring);
            }
            $dimmer = $dimmable.dimmer('get dimmer');
          },
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          }
        },

        destroy: function() {
          module.verbose('Destroying previous modal');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
          $window.off(elementNamespace);
          $close.off(eventNamespace);
          $context.dimmer('destroy');
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, refreshing');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        refresh: function() {
          module.remove.scrolling();
          module.cacheSizes();
          module.set.screenHeight();
          module.set.type();
          module.set.position();
        },

        refreshModals: function() {
          $otherModals = $module.siblings(selector.modal);
          $allModals   = $otherModals.add($module);
        },

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching modal events to element', selector, event);
            $toggle
              .off(eventNamespace)
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound, selector);
          }
        },

        bind: {
          events: function() {
            module.verbose('Attaching events');
            $module
              .on('click' + eventNamespace, selector.close, module.event.close)
              .on('click' + eventNamespace, selector.approve, module.event.approve)
              .on('click' + eventNamespace, selector.deny, module.event.deny)
            ;
            $window
              .on('resize' + elementNamespace, module.event.resize)
            ;
          }
        },

        get: {
          id: function() {
            return (Math.random().toString(16) + '000000000').substr(2,8);
          }
        },

        event: {
          approve: function() {
            if(settings.onApprove.call(element, $(this)) === false) {
              module.verbose('Approve callback returned false cancelling hide');
              return;
            }
            module.hide();
          },
          deny: function() {
            if(settings.onDeny.call(element, $(this)) === false) {
              module.verbose('Deny callback returned false cancelling hide');
              return;
            }
            module.hide();
          },
          close: function() {
            module.hide();
          },
          click: function(event) {
            var
              $target   = $(event.target),
              isInModal = ($target.closest(selector.modal).length > 0),
              isInDOM   = $.contains(document.documentElement, event.target)
            ;
            if(!isInModal && isInDOM) {
              module.debug('Dimmer clicked, hiding all modals');
              if( module.is.active() ) {
                module.remove.clickaway();
                if(settings.allowMultiple) {
                  module.hide();
                }
                else {
                  module.hideAll();
                }
              }
            }
          },
          debounce: function(method, delay) {
            clearTimeout(module.timer);
            module.timer = setTimeout(method, delay);
          },
          keyboard: function(event) {
            var
              keyCode   = event.which,
              escapeKey = 27
            ;
            if(keyCode == escapeKey) {
              if(settings.closable) {
                module.debug('Escape key pressed hiding modal');
                module.hide();
              }
              else {
                module.debug('Escape key pressed, but closable is set to false');
              }
              event.preventDefault();
            }
          },
          resize: function() {
            if( $dimmable.dimmer('is active') ) {
              requestAnimationFrame(module.refresh);
            }
          }
        },

        toggle: function() {
          if( module.is.active() || module.is.animating() ) {
            module.hide();
          }
          else {
            module.show();
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.refreshModals();
          module.showModal(callback);
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.refreshModals();
          module.hideModal(callback);
        },

        showModal: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.animating() || !module.is.active() ) {

            module.showDimmer();
            module.cacheSizes();
            module.set.position();
            module.set.screenHeight();
            module.set.type();
            module.set.clickaway();

            if( !settings.allowMultiple && module.others.active() ) {
              module.hideOthers(module.showModal);
            }
            else {
              settings.onShow.call(element);
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.debug('Showing modal with css animations');
                $module
                  .transition({
                    debug       : settings.debug,
                    animation   : settings.transition + ' in',
                    queue       : settings.queue,
                    duration    : settings.duration,
                    useFailSafe : true,
                    onComplete : function() {
                      settings.onVisible.apply(element);
                      module.add.keyboardShortcuts();
                      module.save.focus();
                      module.set.active();
                      if(settings.autofocus) {
                        module.set.autofocus();
                      }
                      callback();
                    }
                  })
                ;
              }
              else {
                module.error(error.noTransition);
              }
            }
          }
          else {
            module.debug('Modal is already visible');
          }
        },

        hideModal: function(callback, keepDimmed) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.debug('Hiding modal');
          if(settings.onHide.call(element, $(this)) === false) {
            module.verbose('Hide callback returned false cancelling hide');
            return;
          }

          if( module.is.animating() || module.is.active() ) {
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.remove.active();
              $module
                .transition({
                  debug       : settings.debug,
                  animation   : settings.transition + ' out',
                  queue       : settings.queue,
                  duration    : settings.duration,
                  useFailSafe : true,
                  onStart     : function() {
                    if(!module.others.active() && !keepDimmed) {
                      module.hideDimmer();
                    }
                    module.remove.keyboardShortcuts();
                  },
                  onComplete : function() {
                    settings.onHidden.call(element);
                    module.restore.focus();
                    callback();
                  }
                })
              ;
            }
            else {
              module.error(error.noTransition);
            }
          }
        },

        showDimmer: function() {
          if($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active') ) {
            module.debug('Showing dimmer');
            $dimmable.dimmer('show');
          }
          else {
            module.debug('Dimmer already visible');
          }
        },

        hideDimmer: function() {
          if( $dimmable.dimmer('is animating') || ($dimmable.dimmer('is active')) ) {
            $dimmable.dimmer('hide', function() {
              module.remove.clickaway();
              module.remove.screenHeight();
            });
          }
          else {
            module.debug('Dimmer is not visible cannot hide');
            return;
          }
        },

        hideAll: function(callback) {
          var
            $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating)
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding all visible modals');
            module.hideDimmer();
            $visibleModals
              .modal('hide modal', callback)
            ;
          }
        },

        hideOthers: function(callback) {
          var
            $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating)
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding other modals', $otherModals);
            $visibleModals
              .modal('hide modal', callback, true)
            ;
          }
        },

        others: {
          active: function() {
            return ($otherModals.filter('.' + className.active).length > 0);
          },
          animating: function() {
            return ($otherModals.filter('.' + className.animating).length > 0);
          }
        },


        add: {
          keyboardShortcuts: function() {
            module.verbose('Adding keyboard shortcuts');
            $document
              .on('keyup' + eventNamespace, module.event.keyboard)
            ;
          }
        },

        save: {
          focus: function() {
            $focusedElement = $(document.activeElement).blur();
          }
        },

        restore: {
          focus: function() {
            if($focusedElement && $focusedElement.length > 0) {
              $focusedElement.focus();
            }
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          clickaway: function() {
            if(settings.closable) {
              $dimmer
                .off('click' + elementNamespace)
              ;
            }
          },
          bodyStyle: function() {
            if($body.attr('style') === '') {
              module.verbose('Removing style attribute');
              $body.removeAttr('style');
            }
          },
          screenHeight: function() {
            module.debug('Removing page height');
            $body
              .css('height', '')
            ;
          },
          keyboardShortcuts: function() {
            module.verbose('Removing keyboard shortcuts');
            $document
              .off('keyup' + eventNamespace)
            ;
          },
          scrolling: function() {
            $dimmable.removeClass(className.scrolling);
            $module.removeClass(className.scrolling);
          }
        },

        cacheSizes: function() {
          var
            modalHeight = $module.outerHeight()
          ;
          if(module.cache === undefined || modalHeight !== 0) {
            module.cache = {
              pageHeight    : $(document).outerHeight(),
              height        : modalHeight + settings.offset,
              contextHeight : (settings.context == 'body')
                ? $(window).height()
                : $dimmable.height()
            };
          }
          module.debug('Caching modal and container sizes', module.cache);
        },

        can: {
          fit: function() {
            return ( ( module.cache.height + (settings.padding * 2) ) < module.cache.contextHeight);
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          animating: function() {
            return $module.transition('is supported')
              ? $module.transition('is animating')
              : $module.is(':visible')
            ;
          },
          scrolling: function() {
            return $dimmable.hasClass(className.scrolling);
          },
          modernBrowser: function() {
            // appName for IE11 reports 'Netscape' can no longer use
            return !(window.ActiveXObject || "ActiveXObject" in window);
          }
        },

        set: {
          autofocus: function() {
            var
              $inputs    = $module.find(':input').filter(':visible'),
              $autofocus = $inputs.filter('[autofocus]'),
              $input     = ($autofocus.length > 0)
                ? $autofocus.first()
                : $inputs.first()
            ;
            if($input.length > 0) {
              $input.focus();
            }
          },
          clickaway: function() {
            if(settings.closable) {
              $dimmer
                .on('click' + elementNamespace, module.event.click)
              ;
            }
          },
          screenHeight: function() {
            if( module.can.fit() ) {
              $body.css('height', '');
            }
            else {
              module.debug('Modal is taller than page content, resizing page height');
              $body
                .css('height', module.cache.height + (settings.padding * 2) )
              ;
            }
          },
          active: function() {
            $module.addClass(className.active);
          },
          scrolling: function() {
            $dimmable.addClass(className.scrolling);
            $module.addClass(className.scrolling);
          },
          type: function() {
            if(module.can.fit()) {
              module.verbose('Modal fits on screen');
              if(!module.others.active() && !module.others.animating()) {
                module.remove.scrolling();
              }
            }
            else {
              module.verbose('Modal cannot fit on screen setting to scrolling');
              module.set.scrolling();
            }
          },
          position: function() {
            module.verbose('Centering modal on page', module.cache);
            if(module.can.fit()) {
              $module
                .css({
                  top: '',
                  marginTop: -(module.cache.height / 2)
                })
              ;
            }
            else {
              $module
                .css({
                  marginTop : '',
                  top       : $document.scrollTop()
                })
              ;
            }
          },
          undetached: function() {
            $dimmable.addClass(className.undetached);
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.modal.settings = {

  name           : 'Modal',
  namespace      : 'modal',

  debug          : false,
  verbose        : false,
  performance    : true,

  observeChanges : false,

  allowMultiple  : false,
  detachable     : true,
  closable       : true,
  autofocus      : true,

  inverted       : false,
  blurring       : false,

  dimmerSettings : {
    closable : false,
    useCSS   : true
  },


  context    : 'body',

  queue      : false,
  duration   : 500,
  offset     : 0,
  transition : 'scale',

  // padding with edge of page
  padding    : 50,

  // called before show animation
  onShow     : function(){},

  // called after show animation
  onVisible  : function(){},

  // called before hide animation
  onHide     : function(){ return true; },

  // called after hide animation
  onHidden   : function(){},

  // called after approve selector match
  onApprove  : function(){ return true; },

  // called after deny selector match
  onDeny     : function(){ return true; },

  selector    : {
    close    : '> .close',
    approve  : '.actions .positive, .actions .approve, .actions .ok',
    deny     : '.actions .negative, .actions .deny, .actions .cancel',
    modal    : '.ui.modal'
  },
  error : {
    dimmer    : 'UI Dimmer, a required component is not included in this page',
    method    : 'The method you called is not defined.',
    notFound  : 'The element you specified could not be found'
  },
  className : {
    active     : 'active',
    animating  : 'animating',
    blurring   : 'blurring',
    scrolling  : 'scrolling',
    undetached : 'undetached'
  }
};


})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Nag
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.nag = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.nag.settings, parameters)
          : $.extend({}, $.fn.nag.settings),

        className       = settings.className,
        selector        = settings.selector,
        error           = settings.error,
        namespace       = settings.namespace,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        $close          = $module.find(selector.close),
        $context        = (settings.context)
          ? $(settings.context)
          : $('body'),

        element         = this,
        instance        = $module.data(moduleNamespace),

        moduleOffset,
        moduleHeight,

        contextWidth,
        contextHeight,
        contextOffset,

        yOffset,
        yPosition,

        timer,
        module,

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); }
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing element');

          $module
            .on('click' + eventNamespace, selector.close, module.dismiss)
            .data(moduleNamespace, module)
          ;

          if(settings.detachable && $module.parent()[0] !== $context[0]) {
            $module
              .detach()
              .prependTo($context)
            ;
          }

          if(settings.displayTime > 0) {
            setTimeout(module.hide, settings.displayTime);
          }
          module.show();
        },

        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        show: function() {
          if( module.should.show() && !$module.is(':visible') ) {
            module.debug('Showing nag', settings.animation.show);
            if(settings.animation.show == 'fade') {
              $module
                .fadeIn(settings.duration, settings.easing)
              ;
            }
            else {
              $module
                .slideDown(settings.duration, settings.easing)
              ;
            }
          }
        },

        hide: function() {
          module.debug('Showing nag', settings.animation.hide);
          if(settings.animation.show == 'fade') {
            $module
              .fadeIn(settings.duration, settings.easing)
            ;
          }
          else {
            $module
              .slideUp(settings.duration, settings.easing)
            ;
          }
        },

        onHide: function() {
          module.debug('Removing nag', settings.animation.hide);
          $module.remove();
          if (settings.onHide) {
            settings.onHide();
          }
        },

        dismiss: function(event) {
          if(settings.storageMethod) {
            module.storage.set(settings.key, settings.value);
          }
          module.hide();
          event.stopImmediatePropagation();
          event.preventDefault();
        },

        should: {
          show: function() {
            if(settings.persist) {
              module.debug('Persistent nag is set, can show nag');
              return true;
            }
            if( module.storage.get(settings.key) != settings.value.toString() ) {
              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));
              return true;
            }
            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));
            return false;
          }
        },

        get: {
          storageOptions: function() {
            var
              options = {}
            ;
            if(settings.expires) {
              options.expires = settings.expires;
            }
            if(settings.domain) {
              options.domain = settings.domain;
            }
            if(settings.path) {
              options.path = settings.path;
            }
            return options;
          }
        },

        clear: function() {
          module.storage.remove(settings.key);
        },

        storage: {
          set: function(key, value) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.setItem(key, value);
              module.debug('Value stored using local storage', key, value);
            }
            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {
              window.sessionStorage.setItem(key, value);
              module.debug('Value stored using session storage', key, value);
            }
            else if($.cookie !== undefined) {
              $.cookie(key, value, options);
              module.debug('Value stored using cookie', key, value, options);
            }
            else {
              module.error(error.noCookieStorage);
              return;
            }
          },
          get: function(key, value) {
            var
              storedValue
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              storedValue = window.localStorage.getItem(key);
            }
            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {
              storedValue = window.sessionStorage.getItem(key);
            }
            // get by cookie
            else if($.cookie !== undefined) {
              storedValue = $.cookie(key);
            }
            else {
              module.error(error.noCookieStorage);
            }
            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
              storedValue = undefined;
            }
            return storedValue;
          },
          remove: function(key) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.removeItem(key);
            }
            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {
              window.sessionStorage.removeItem(key);
            }
            // store by cookie
            else if($.cookie !== undefined) {
              $.removeCookie(key, options);
            }
            else {
              module.error(error.noStorage);
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.nag.settings = {

  name        : 'Nag',

  debug       : false,
  verbose     : false,
  performance : true,

  namespace   : 'Nag',

  // allows cookie to be overriden
  persist     : false,

  // set to zero to require manually dismissal, otherwise hides on its own
  displayTime : 0,

  animation   : {
    show : 'slide',
    hide : 'slide'
  },

  context       : false,
  detachable    : false,

  expires       : 30,
  domain        : false,
  path          : '/',

  // type of storage to use
  storageMethod : 'cookie',

  // value to store in dismissed localstorage/cookie
  key           : 'nag',
  value         : 'dismiss',

  error: {
    noCookieStorage : '$.cookie is not included. A storage solution is required.',
    noStorage       : 'Neither $.cookie or store is defined. A storage solution is required for storing state',
    method          : 'The method you called is not defined.'
  },

  className     : {
    bottom : 'bottom',
    fixed  : 'fixed'
  },

  selector      : {
    close : '.close.icon'
  },

  speed         : 500,
  easing        : 'easeOutQuad',

  onHide: function() {}

};

// Adds easing
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  }
});

})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Popup
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.popup = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),
    $window        = $(window),
    $body          = $('body'),

    moduleSelector = $allModules.selector || '',

    hasTouch       = (true),
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.popup.settings, parameters)
          : $.extend({}, $.fn.popup.settings),

        selector           = settings.selector,
        className          = settings.className,
        error              = settings.error,
        metadata           = settings.metadata,
        namespace          = settings.namespace,

        eventNamespace     = '.' + settings.namespace,
        moduleNamespace    = 'module-' + namespace,

        $module            = $(this),
        $context           = $(settings.context),
        $target            = (settings.target)
          ? $(settings.target)
          : $module,

        $popup,
        $offsetParent,

        searchDepth        = 0,
        triedPositions     = false,
        openedWithTouch    = false,

        element            = this,
        instance           = $module.data(moduleNamespace),

        elementNamespace,
        id,
        module
      ;

      module = {

        // binds events
        initialize: function() {
          module.debug('Initializing', $module);
          module.createID();
          module.bind.events();
          if( !module.exists() && settings.preserve) {
            module.create();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        refresh: function() {
          if(settings.popup) {
            $popup = $(settings.popup).eq(0);
          }
          else {
            if(settings.inline) {
              $popup = $target.nextAll(selector.popup).eq(0);
              settings.popup = $popup;
            }
          }
          if(settings.popup) {
            $popup.addClass(className.loading);
            $offsetParent = module.get.offsetParent();
            $popup.removeClass(className.loading);
            if(settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {
              module.debug('Moving popup to the same offset parent as activating element');
              $popup
                .detach()
                .appendTo($offsetParent)
              ;
            }
          }
          else {
            $offsetParent = (settings.inline)
              ? module.get.offsetParent($target)
              : module.has.popup()
                ? module.get.offsetParent($popup)
                : $body
            ;
          }
          if( $offsetParent.is('html') && $offsetParent[0] !== $body[0] ) {
            module.debug('Setting page as offset parent');
            $offsetParent = $body;
          }
          if( module.get.variation() ) {
            module.set.variation();
          }
        },

        reposition: function() {
          module.refresh();
          module.set.position();
        },

        destroy: function() {
          module.debug('Destroying previous module');
          // remove element only if was created dynamically
          if($popup && !settings.preserve) {
            module.removePopup();
          }
          // clear all timeouts
          clearTimeout(module.hideTimer);
          clearTimeout(module.showTimer);
          // remove events
          $window.off(elementNamespace);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        event: {
          start:  function(event) {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.show
                : settings.delay
            ;
            clearTimeout(module.hideTimer);
            if(!openedWithTouch) {
              module.showTimer = setTimeout(module.show, delay);
            }
          },
          end:  function() {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.hide
                : settings.delay
            ;
            clearTimeout(module.showTimer);
            module.hideTimer = setTimeout(module.hide, delay);
          },
          touchstart: function(event) {
            openedWithTouch = true;
            module.show();
          },
          resize: function() {
            if( module.is.visible() ) {
              module.set.position();
            }
          },
          hideGracefully: function(event) {
            // don't close on clicks inside popup
            if(event && $(event.target).closest(selector.popup).length === 0) {
              module.debug('Click occurred outside popup hiding popup');
              module.hide();
            }
            else {
              module.debug('Click was inside popup, keeping popup open');
            }
          }
        },

        // generates popup html from metadata
        create: function() {
          var
            html      = module.get.html(),
            title     = module.get.title(),
            content   = module.get.content()
          ;

          if(html || content || title) {
            module.debug('Creating pop-up html');
            if(!html) {
              html = settings.templates.popup({
                title   : title,
                content : content
              });
            }
            $popup = $('<div/>')
              .addClass(className.popup)
              .data(metadata.activator, $module)
              .html(html)
            ;
            if(settings.inline) {
              module.verbose('Inserting popup element inline', $popup);
              $popup
                .insertAfter($module)
              ;
            }
            else {
              module.verbose('Appending popup element to body', $popup);
              $popup
                .appendTo( $context )
              ;
            }
            module.refresh();
            module.set.variation();

            if(settings.hoverable) {
              module.bind.popup();
            }
            settings.onCreate.call($popup, element);
          }
          else if($target.next(selector.popup).length !== 0) {
            module.verbose('Pre-existing popup found');
            settings.inline = true;
            settings.popups  = $target.next(selector.popup).data(metadata.activator, $module);
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
          }
          else if(settings.popup) {
            $(settings.popup).data(metadata.activator, $module);
            module.verbose('Used popup specified in settings');
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
          }
          else {
            module.debug('No content specified skipping display', element);
          }
        },

        createID: function() {
          id = (Math.random().toString(16) + '000000000').substr(2,8);
          elementNamespace = '.' + id;
          module.verbose('Creating unique id for element', id);
        },

        // determines popup state
        toggle: function() {
          module.debug('Toggling pop-up');
          if( module.is.hidden() ) {
            module.debug('Popup is hidden, showing pop-up');
            module.unbind.close();
            module.show();
          }
          else {
            module.debug('Popup is visible, hiding pop-up');
            module.hide();
          }
        },

        show: function(callback) {
          callback = callback || function(){};
          module.debug('Showing pop-up', settings.transition);
          if(module.is.hidden() && !( module.is.active() && module.is.dropdown()) ) {
            if( !module.exists() ) {
              module.create();
            }
            if(settings.onShow.call($popup, element) === false) {
              module.debug('onShow callback returned false, cancelling popup animation');
              return;
            }
            else if(!settings.preserve && !settings.popup) {
              module.refresh();
            }
            if( $popup && module.set.position() ) {
              module.save.conditions();
              if(settings.exclusive) {
                module.hideAll();
              }
              module.animate.show(callback);
            }
          }
        },


        hide: function(callback) {
          callback = callback || function(){};
          if( module.is.visible() || module.is.animating() ) {
            if(settings.onHide.call($popup, element) === false) {
              module.debug('onHide callback returned false, cancelling popup animation');
              return;
            }
            module.remove.visible();
            module.unbind.close();
            module.restore.conditions();
            module.animate.hide(callback);
          }
        },

        hideAll: function() {
          $(selector.popup)
            .filter('.' + className.visible)
            .each(function() {
              $(this)
                .data(metadata.activator)
                .popup('hide')
              ;
            })
          ;
        },
        exists: function() {
          if(!$popup) {
            return false;
          }
          if(settings.inline || settings.popup) {
            return ( module.has.popup() );
          }
          else {
            return ( $popup.closest($context).length >= 1 )
              ? true
              : false
            ;
          }
        },

        removePopup: function() {
          if( module.has.popup() && !settings.popup) {
            module.debug('Removing popup', $popup);
            $popup.remove();
            $popup = undefined;
            settings.onRemove.call($popup, element);
          }
        },

        save: {
          conditions: function() {
            module.cache = {
              title: $module.attr('title')
            };
            if (module.cache.title) {
              $module.removeAttr('title');
            }
            module.verbose('Saving original attributes', module.cache.title);
          }
        },
        restore: {
          conditions: function() {
            if(module.cache && module.cache.title) {
              $module.attr('title', module.cache.title);
              module.verbose('Restoring original attributes', module.cache.title);
            }
            return true;
          }
        },
        animate: {
          show: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){};
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.set.visible();
              $popup
                .transition({
                  animation  : settings.transition + ' in',
                  queue      : false,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  onComplete : function() {
                    module.bind.close();
                    callback.call($popup, element);
                    settings.onVisible.call($popup, element);
                  }
                })
              ;
            }
            else {
              module.error(error.noTransition);
            }
          },
          hide: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){};
            module.debug('Hiding pop-up');
            if(settings.onHide.call($popup, element) === false) {
              module.debug('onHide callback returned false, cancelling popup animation');
              return;
            }
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              $popup
                .transition({
                  animation  : settings.transition + ' out',
                  queue      : false,
                  duration   : settings.duration,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  onComplete : function() {
                    module.reset();
                    callback.call($popup, element);
                    settings.onHidden.call($popup, element);
                  }
                })
              ;
            }
            else {
              module.error(error.noTransition);
            }
          }
        },

        change: {
          content: function(html) {
            $popup.html(html);
          }
        },

        get: {
          html: function() {
            $module.removeData(metadata.html);
            return $module.data(metadata.html) || settings.html;
          },
          title: function() {
            $module.removeData(metadata.title);
            return $module.data(metadata.title) || settings.title;
          },
          content: function() {
            $module.removeData(metadata.content);
            return $module.data(metadata.content) || $module.attr('title') || settings.content;
          },
          variation: function() {
            $module.removeData(metadata.variation);
            return $module.data(metadata.variation) || settings.variation;
          },
          popup: function() {
            return $popup;
          },
          popupOffset: function() {
            return $popup.offset();
          },
          calculations: function() {
            var
              targetElement  = $target[0],
              targetPosition = (settings.inline || (settings.popup && settings.movePopup))
                ? $target.position()
                : $target.offset(),
              calculations = {},
              screen
            ;
            calculations = {
              // element which is launching popup
              target : {
                element : $target[0],
                width   : $target.outerWidth(),
                height  : $target.outerHeight(),
                top     : targetPosition.top,
                left    : targetPosition.left,
                margin  : {}
              },
              // popup itself
              popup : {
                width  : $popup.outerWidth(),
                height : $popup.outerHeight()
              },
              // offset container (or 3d context)
              parent : {
                width  : $offsetParent.outerWidth(),
                height : $offsetParent.outerHeight()
              },
              // screen boundaries
              screen : {
                scroll: {
                  top  : $window.scrollTop(),
                  left : $window.scrollLeft()
                },
                width  : $window.width(),
                height : $window.height()
              }
            };

            // add in container calcs if fluid
            if( settings.setFluidWidth && module.is.fluid() ) {
              calculations.container = {
                width: $popup.parent().outerWidth()
              };
              calculations.popup.width = calculations.container.width;
            }

            // add in margins if inline
            calculations.target.margin.top = (settings.inline)
              ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10)
              : 0
            ;
            calculations.target.margin.left = (settings.inline)
              ? module.is.rtl()
                ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-right'), 10)
                : parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-left') , 10)
              : 0
            ;
            // calculate screen boundaries
            screen = calculations.screen;
            calculations.boundary = {
              top    : screen.scroll.top,
              bottom : screen.scroll.top + screen.height,
              left   : screen.scroll.left,
              right  : screen.scroll.left + screen.width
            };
            return calculations;
          },
          id: function() {
            return id;
          },
          startEvent: function() {
            if(settings.on == 'hover') {
              return 'mouseenter';
            }
            else if(settings.on == 'focus') {
              return 'focus';
            }
            return false;
          },
          scrollEvent: function() {
            return 'scroll';
          },
          endEvent: function() {
            if(settings.on == 'hover') {
              return 'mouseleave';
            }
            else if(settings.on == 'focus') {
              return 'blur';
            }
            return false;
          },
          distanceFromBoundary: function(offset, calculations) {
            var
              distanceFromBoundary = {},
              popup,
              boundary
            ;
            offset       = offset       || module.get.offset();
            calculations = calculations || module.get.calculations();

            // shorthand
            popup        = calculations.popup;
            boundary     = calculations.boundary;

            if(offset) {
              distanceFromBoundary = {
                top    : (offset.top - boundary.top),
                left   : (offset.left - boundary.left),
                right  : (boundary.right - (offset.left + popup.width) ),
                bottom : (boundary.bottom - (offset.top + popup.height) )
              };
              module.verbose('Distance from boundaries determined', offset, distanceFromBoundary);
            }
            return distanceFromBoundary;
          },
          offsetParent: function($target) {
            var
              element = ($target !== undefined)
                ? $target[0]
                : $module[0],
              parentNode = element.parentNode,
              $node    = $(parentNode)
            ;
            if(parentNode) {
              var
                is2D     = ($node.css('transform') === 'none'),
                isStatic = ($node.css('position') === 'static'),
                isHTML   = $node.is('html')
              ;
              while(parentNode && !isHTML && isStatic && is2D) {
                parentNode = parentNode.parentNode;
                $node    = $(parentNode);
                is2D     = ($node.css('transform') === 'none');
                isStatic = ($node.css('position') === 'static');
                isHTML   = $node.is('html');
              }
            }
            return ($node && $node.length > 0)
              ? $node
              : $()
            ;
          },
          positions: function() {
            return {
              'top left'      : false,
              'top center'    : false,
              'top right'     : false,
              'bottom left'   : false,
              'bottom center' : false,
              'bottom right'  : false,
              'left center'   : false,
              'right center'  : false
            };
          },
          nextPosition: function(position) {
            var
              positions          = position.split(' '),
              verticalPosition   = positions[0],
              horizontalPosition = positions[1],
              opposite = {
                top    : 'bottom',
                bottom : 'top',
                left   : 'right',
                right  : 'left'
              },
              adjacent = {
                left   : 'center',
                center : 'right',
                right  : 'left'
              },
              backup = {
                'top left'      : 'top center',
                'top center'    : 'top right',
                'top right'     : 'right center',
                'right center'  : 'bottom right',
                'bottom right'  : 'bottom center',
                'bottom center' : 'bottom left',
                'bottom left'   : 'left center',
                'left center'   : 'top left'
              },
              adjacentsAvailable = (verticalPosition == 'top' || verticalPosition == 'bottom'),
              oppositeTried = false,
              adjacentTried = false,
              nextPosition  = false
            ;
            if(!triedPositions) {
              module.verbose('All available positions available');
              triedPositions = module.get.positions();
            }

            module.debug('Recording last position tried', position);
            triedPositions[position] = true;

            if(settings.prefer === 'opposite') {
              nextPosition  = [opposite[verticalPosition], horizontalPosition];
              nextPosition  = nextPosition.join(' ');
              oppositeTried = (triedPositions[nextPosition] === true);
              module.debug('Trying opposite strategy', nextPosition);
            }
            if((settings.prefer === 'adjacent') && adjacentsAvailable ) {
              nextPosition  = [verticalPosition, adjacent[horizontalPosition]];
              nextPosition  = nextPosition.join(' ');
              adjacentTried = (triedPositions[nextPosition] === true);
              module.debug('Trying adjacent strategy', nextPosition);
            }
            if(adjacentTried || oppositeTried) {
              module.debug('Using backup position', nextPosition);
              nextPosition = backup[position];
            }
            return nextPosition;
          }
        },

        set: {
          position: function(position, calculations) {

            // exit conditions
            if($target.length === 0 || $popup.length === 0) {
              module.error(error.notFound);
              return;
            }
            var
              offset,
              distanceAway,
              target,
              popup,
              parent,
              positioning,
              popupOffset,
              distanceFromBoundary
            ;

            calculations = calculations || module.get.calculations();
            position     = position     || $module.data(metadata.position) || settings.position;

            offset       = $module.data(metadata.offset) || settings.offset;
            distanceAway = settings.distanceAway;

            // shorthand
            target = calculations.target;
            popup  = calculations.popup;
            parent = calculations.parent;

            if(target.width === 0 && target.height === 0 && !(target.element instanceof SVGGraphicsElement)) {
              module.debug('Popup target is hidden, no action taken');
              return false;
            }

            if(settings.inline) {
              module.debug('Adding margin to calculation', target.margin);
              if(position == 'left center' || position == 'right center') {
                offset       +=  target.margin.top;
                distanceAway += -target.margin.left;
              }
              else if (position == 'top left' || position == 'top center' || position == 'top right') {
                offset       += target.margin.left;
                distanceAway -= target.margin.top;
              }
              else {
                offset       += target.margin.left;
                distanceAway += target.margin.top;
              }
            }

            module.debug('Determining popup position from calculations', position, calculations);

            if (module.is.rtl()) {
              position = position.replace(/left|right/g, function (match) {
                return (match == 'left')
                  ? 'right'
                  : 'left'
                ;
              });
              module.debug('RTL: Popup position updated', position);
            }

            // if last attempt use specified last resort position
            if(searchDepth == settings.maxSearchDepth && typeof settings.lastResort === 'string') {
              position = settings.lastResort;
            }

            switch (position) {
              case 'top left':
                positioning = {
                  top    : 'auto',
                  bottom : parent.height - target.top + distanceAway,
                  left   : target.left + offset,
                  right  : 'auto'
                };
              break;
              case 'top center':
                positioning = {
                  bottom : parent.height - target.top + distanceAway,
                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,
                  top    : 'auto',
                  right  : 'auto'
                };
              break;
              case 'top right':
                positioning = {
                  bottom :  parent.height - target.top + distanceAway,
                  right  :  parent.width - target.left - target.width - offset,
                  top    : 'auto',
                  left   : 'auto'
                };
              break;
              case 'left center':
                positioning = {
                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,
                  right  : parent.width - target.left + distanceAway,
                  left   : 'auto',
                  bottom : 'auto'
                };
              break;
              case 'right center':
                positioning = {
                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,
                  left   : target.left + target.width + distanceAway,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom left':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  left   : target.left + offset,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom center':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom right':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  right  : parent.width - target.left  - target.width - offset,
                  left   : 'auto',
                  bottom : 'auto'
                };
              break;
            }
            if(positioning === undefined) {
              module.error(error.invalidPosition, position);
            }

            module.debug('Calculated popup positioning values', positioning);

            // tentatively place on stage
            $popup
              .css(positioning)
              .removeClass(className.position)
              .addClass(position)
              .addClass(className.loading)
            ;

            popupOffset = module.get.popupOffset();

            // see if any boundaries are surpassed with this tentative position
            distanceFromBoundary = module.get.distanceFromBoundary(popupOffset, calculations);

            if( module.is.offstage(distanceFromBoundary, position) ) {
              module.debug('Position is outside viewport', position);
              if(searchDepth < settings.maxSearchDepth) {
                searchDepth++;
                position = module.get.nextPosition(position);
                module.debug('Trying new position', position);
                return ($popup)
                  ? module.set.position(position, calculations)
                  : false
                ;
              }
              else {
                if(settings.lastResort) {
                  module.debug('No position found, showing with last position');
                }
                else {
                  module.debug('Popup could not find a position to display', $popup);
                  module.error(error.cannotPlace, element);
                  module.remove.attempts();
                  module.remove.loading();
                  module.reset();
                  settings.onUnplaceable.call($popup, element);
                  return false;
                }
              }
            }
            module.debug('Position is on stage', position);
            module.remove.attempts();
            module.remove.loading();
            if( settings.setFluidWidth && module.is.fluid() ) {
              module.set.fluidWidth(calculations);
            }
            return true;
          },

          fluidWidth: function(calculations) {
            calculations = calculations || module.get.calculations();
            module.debug('Automatically setting element width to parent width', calculations.parent.width);
            $popup.css('width', calculations.container.width);
          },

          variation: function(variation) {
            variation = variation || module.get.variation();
            if(variation && module.has.popup() ) {
              module.verbose('Adding variation to popup', variation);
              $popup.addClass(variation);
            }
          },

          visible: function() {
            $module.addClass(className.visible);
          }
        },

        remove: {
          loading: function() {
            $popup.removeClass(className.loading);
          },
          variation: function(variation) {
            variation = variation || module.get.variation();
            if(variation) {
              module.verbose('Removing variation', variation);
              $popup.removeClass(variation);
            }
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          attempts: function() {
            module.verbose('Resetting all searched positions');
            searchDepth    = 0;
            triedPositions = false;
          }
        },

        bind: {
          events: function() {
            module.debug('Binding popup events to module');
            if(settings.on == 'click') {
              $module
                .on('click' + eventNamespace, module.toggle)
              ;
            }
            if(settings.on == 'hover' && hasTouch) {
              $module
                .on('touchstart' + eventNamespace, module.event.touchstart)
              ;
            }
            if( module.get.startEvent() ) {
              $module
                .on(module.get.startEvent() + eventNamespace, module.event.start)
                .on(module.get.endEvent() + eventNamespace, module.event.end)
              ;
            }
            if(settings.target) {
              module.debug('Target set to element', $target);
            }
            $window.on('resize' + elementNamespace, module.event.resize);
          },
          popup: function() {
            module.verbose('Allowing hover events on popup to prevent closing');
            if( $popup && module.has.popup() ) {
              $popup
                .on('mouseenter' + eventNamespace, module.event.start)
                .on('mouseleave' + eventNamespace, module.event.end)
              ;
            }
          },
          close: function() {
            if(settings.hideOnScroll === true || (settings.hideOnScroll == 'auto' && settings.on != 'click'))   {
              $document
                .one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully)
              ;
              $context
                .one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully)
              ;
            }
            if(settings.on == 'hover' && openedWithTouch) {
              module.verbose('Binding popup close event to document');
              $document
                .on('touchstart' + elementNamespace, function(event) {
                  module.verbose('Touched away from popup');
                  module.event.hideGracefully.call(element, event);
                })
              ;
            }
            if(settings.on == 'click' && settings.closable) {
              module.verbose('Binding popup close event to document');
              $document
                .on('click' + elementNamespace, function(event) {
                  module.verbose('Clicked away from popup');
                  module.event.hideGracefully.call(element, event);
                })
              ;
            }
          }
        },

        unbind: {
          close: function() {
            if(settings.hideOnScroll === true || (settings.hideOnScroll == 'auto' && settings.on != 'click')) {
              $document
                .off('scroll' + elementNamespace, module.hide)
              ;
              $context
                .off('scroll' + elementNamespace, module.hide)
              ;
            }
            if(settings.on == 'hover' && openedWithTouch) {
              $document
                .off('touchstart' + elementNamespace)
              ;
              openedWithTouch = false;
            }
            if(settings.on == 'click' && settings.closable) {
              module.verbose('Removing close event from document');
              $document
                .off('click' + elementNamespace)
              ;
            }
          }
        },

        has: {
          popup: function() {
            return ($popup && $popup.length > 0);
          }
        },

        is: {
          offstage: function(distanceFromBoundary, position) {
            var
              offstage = []
            ;
            // return boundaries that have been surpassed
            $.each(distanceFromBoundary, function(direction, distance) {
              if(distance < -settings.jitter) {
                module.debug('Position exceeds allowable distance from edge', direction, distance, position);
                offstage.push(direction);
              }
            });
            if(offstage.length > 0) {
              return true;
            }
            else {
              return false;
            }
          },
          active: function() {
            return $module.hasClass(className.active);
          },
          animating: function() {
            return ($popup !== undefined && $popup.hasClass(className.animating) );
          },
          fluid: function() {
            return ($popup !== undefined && $popup.hasClass(className.fluid));
          },
          visible: function() {
            return ($popup !== undefined && $popup.hasClass(className.visible));
          },
          dropdown: function() {
            return $module.hasClass(className.dropdown);
          },
          hidden: function() {
            return !module.is.visible();
          },
          rtl: function () {
            return $module.css('direction') == 'rtl';
          }
        },

        reset: function() {
          module.remove.visible();
          if(settings.preserve) {
            if($.fn.transition !== undefined) {
              $popup
                .transition('remove transition')
              ;
            }
          }
          else {
            module.removePopup();
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.popup.settings = {

  name         : 'Popup',

  // module settings
  debug        : false,
  verbose      : false,
  performance  : true,
  namespace    : 'popup',

  // callback only when element added to dom
  onCreate     : function(){},

  // callback before element removed from dom
  onRemove     : function(){},

  // callback before show animation
  onShow       : function(){},

  // callback after show animation
  onVisible    : function(){},

  // callback before hide animation
  onHide       : function(){},

  // callback when popup cannot be positioned in visible screen
  onUnplaceable: function(){},

  // callback after hide animation
  onHidden     : function(){},

  // when to show popup
  on           : 'hover',

  // whether to add touchstart events when using hover
  addTouchEvents : true,

  // default position relative to element
  position     : 'top left',

  // name of variation to use
  variation    : '',

  // whether popup should be moved to context
  movePopup      : true,

  // element which popup should be relative to
  target         : false,

  // jq selector or element that should be used as popup
  popup          : false,

  // popup should remain inline next to activator
  inline         : false,

  // popup should be removed from page on hide
  preserve       : false,

  // popup should not close when being hovered on
  hoverable      : false,

  // explicitly set content
  content      : false,

  // explicitly set html
  html         : false,

  // explicitly set title
  title        : false,

  // whether automatically close on clickaway when on click
  closable     : true,

  // automatically hide on scroll
  hideOnScroll : 'auto',

  // hide other popups on show
  exclusive    : false,

  // context to attach popups
  context      : 'body',

  // position to prefer when calculating new position
  prefer       : 'opposite',

  // specify position to appear even if it doesn't fit
  lastResort   : false,

  // delay used to prevent accidental refiring of animations due to user error
  delay        : {
    show : 50,
    hide : 70
  },

  // whether fluid variation should assign width explicitly
  setFluidWidth  : true,

  // transition settings
  duration       : 200,
  transition     : 'scale',

  // distance away from activating element in px
  distanceAway   : 0,

  // number of pixels an element is allowed to be "offstage" for a position to be chosen (allows for rounding)
  jitter         : 2,

  // offset on aligning axis from calculated position
  offset         : 0,

  // maximum times to look for a position before failing (9 positions total)
  maxSearchDepth : 15,

  error: {
    invalidPosition : 'The position you specified is not a valid position',
    cannotPlace     : 'Popup does not fit within the boundaries of the viewport',
    method          : 'The method you called is not defined.',
    noTransition    : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',
    notFound        : 'The target or popup you specified does not exist on the page'
  },

  metadata: {
    activator : 'activator',
    content   : 'content',
    html      : 'html',
    offset    : 'offset',
    position  : 'position',
    title     : 'title',
    variation : 'variation'
  },

  className   : {
    active    : 'active',
    animating : 'animating',
    dropdown  : 'dropdown',
    fluid     : 'fluid',
    loading   : 'loading',
    popup     : 'ui popup',
    position  : 'top left center bottom right',
    visible   : 'visible'
  },

  selector    : {
    popup    : '.ui.popup'
  },

  templates: {
    escape: function(string) {
      var
        badChars     = /[&<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        },
        escapedChar  = function(chr) {
          return escape[chr];
        }
      ;
      if(shouldEscape.test(string)) {
        return string.replace(badChars, escapedChar);
      }
      return string;
    },
    popup: function(text) {
      var
        html   = '',
        escape = $.fn.popup.settings.templates.escape
      ;
      if(typeof text !== undefined) {
        if(typeof text.title !== undefined && text.title) {
          text.title = escape(text.title);
          html += '<div class="header">' + text.title + '</div>';
        }
        if(typeof text.content !== undefined && text.content) {
          text.content = escape(text.content);
          html += '<div class="content">' + text.content + '</div>';
        }
      }
      return html;
    }
  }

};


})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Progress
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.progress = function(parameters) {
  var
    $allModules    = $(this),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.progress.settings, parameters)
          : $.extend({}, $.fn.progress.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $bar            = $(this).find(selector.bar),
        $progress       = $(this).find(selector.progress),
        $label          = $(this).find(selector.label),

        element         = this,
        instance        = $module.data(moduleNamespace),

        animating = false,
        transitionEnd,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing progress bar', settings);

          module.set.duration();
          module.set.transitionEvent();

          module.read.metadata();
          module.read.settings();

          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of progress', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },
        destroy: function() {
          module.verbose('Destroying previous progress for', $module);
          clearInterval(instance.interval);
          module.remove.state();
          $module.removeData(moduleNamespace);
          instance = undefined;
        },

        reset: function() {
          module.set.percent(0);
          module.set.value(0);
        },

        complete: function() {
          if(module.percent === undefined || module.percent < 100) {
            module.set.percent(100);
          }
        },

        read: {
          metadata: function() {
            var
              data = {
                percent : $module.data(metadata.percent),
                total   : $module.data(metadata.total),
                value   : $module.data(metadata.value)
              }
            ;
            if(data.percent) {
              module.debug('Current percent value set from metadata', data.percent);
              module.set.percent(data.percent);
            }
            if(data.total) {
              module.debug('Total value set from metadata', data.total);
              module.set.total(data.total);
            }
            if(data.value) {
              module.debug('Current value set from metadata', data.value);
              module.set.value(data.value);
              module.set.progress(data.value);
            }
          },
          settings: function() {
            if(settings.total !== false) {
              module.debug('Current total set in settings', settings.total);
              module.set.total(settings.total);
            }
            if(settings.value !== false) {
              module.debug('Current value set in settings', settings.value);
              module.set.value(settings.value);
              module.set.progress(module.value);
            }
            if(settings.percent !== false) {
              module.debug('Current percent set in settings', settings.percent);
              module.set.percent(settings.percent);
            }
          }
        },

        increment: function(incrementValue) {
          var
            maxValue,
            startValue,
            newValue
          ;
          if( module.has.total() ) {
            startValue     = module.get.value();
            incrementValue = incrementValue || 1;

            newValue       = startValue + incrementValue;
            maxValue       = module.get.total();

            module.debug('Incrementing value', startValue, newValue, maxValue);
            if(newValue > maxValue ) {
              module.debug('Value cannot increment above total', maxValue);
              newValue = maxValue;
            }
          }
          else {
            startValue     = module.get.percent();
            incrementValue = incrementValue || module.get.randomValue();

            newValue       = startValue + incrementValue;
            maxValue       = 100;

            module.debug('Incrementing percentage by', startValue, newValue);
            if(newValue > maxValue ) {
              module.debug('Value cannot increment above 100 percent');
              newValue = maxValue;
            }
          }
          module.set.progress(newValue);
        },
        decrement: function(decrementValue) {
          var
            total     = module.get.total(),
            startValue,
            newValue
          ;
          if(total) {
            startValue     =  module.get.value();
            decrementValue =  decrementValue || 1;
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing value by', decrementValue, startValue);
          }
          else {
            startValue     =  module.get.percent();
            decrementValue =  decrementValue || module.get.randomValue();
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing percentage by', decrementValue, startValue);
          }

          if(newValue < 0) {
            module.debug('Value cannot decrement below 0');
            newValue = 0;
          }
          module.set.progress(newValue);
        },

        has: {
          total: function() {
            return (module.get.total() !== false);
          }
        },

        get: {
          text: function(templateText) {
            var
              value   = module.value                || 0,
              total   = module.total                || 0,
              percent = (animating)
                ? module.get.displayPercent()
                : module.percent || 0,
              left = (module.total > 0)
                ? (total - value)
                : (100 - percent)
            ;
            templateText = templateText || '';
            templateText = templateText
              .replace('{value}', value)
              .replace('{total}', total)
              .replace('{left}', left)
              .replace('{percent}', percent)
            ;
            module.debug('Adding variables to progress bar text', templateText);
            return templateText;
          },


          randomValue: function() {
            module.debug('Generating random increment percentage');
            return Math.floor((Math.random() * settings.random.max) + settings.random.min);
          },

          numericValue: function(value) {
            return (typeof value === 'string')
              ? (value.replace(/[^\d.]/g, '') !== '')
                ? +(value.replace(/[^\d.]/g, ''))
                : false
              : value
            ;
          },

          transitionEnd: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          },

          // gets current displayed percentage (if animating values this is the intermediary value)
          displayPercent: function() {
            var
              barWidth       = $bar.width(),
              totalWidth     = $module.width(),
              minDisplay     = parseInt($bar.css('min-width'), 10),
              displayPercent = (barWidth > minDisplay)
                ? (barWidth / totalWidth * 100)
                : module.percent
            ;
            return (settings.precision > 0)
              ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision)
              : Math.round(displayPercent)
            ;
          },

          percent: function() {
            return module.percent || 0;
          },
          value: function() {
            return module.value || 0;
          },
          total: function() {
            return module.total || false;
          }
        },

        is: {
          success: function() {
            return $module.hasClass(className.success);
          },
          warning: function() {
            return $module.hasClass(className.warning);
          },
          error: function() {
            return $module.hasClass(className.error);
          },
          active: function() {
            return $module.hasClass(className.active);
          },
          visible: function() {
            return $module.is(':visible');
          }
        },

        remove: {
          state: function() {
            module.verbose('Removing stored state');
            delete module.total;
            delete module.percent;
            delete module.value;
          },
          active: function() {
            module.verbose('Removing active state');
            $module.removeClass(className.active);
          },
          success: function() {
            module.verbose('Removing success state');
            $module.removeClass(className.success);
          },
          warning: function() {
            module.verbose('Removing warning state');
            $module.removeClass(className.warning);
          },
          error: function() {
            module.verbose('Removing error state');
            $module.removeClass(className.error);
          }
        },

        set: {
          barWidth: function(value) {
            if(value > 100) {
              module.error(error.tooHigh, value);
            }
            else if (value < 0) {
              module.error(error.tooLow, value);
            }
            else {
              $bar
                .css('width', value + '%')
              ;
              $module
                .attr('data-percent', parseInt(value, 10))
              ;
            }
          },
          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting progress bar transition duration', duration);
            $bar
              .css({
                'transition-duration':  duration
              })
            ;
          },
          percent: function(percent) {
            percent = (typeof percent == 'string')
              ? +(percent.replace('%', ''))
              : percent
            ;
            // round display percentage
            percent = (settings.precision > 0)
              ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision)
              : Math.round(percent)
            ;
            module.percent = percent;
            if( !module.has.total() ) {
              module.value = (settings.precision > 0)
                ? Math.round( (percent / 100) * module.total * (10 * settings.precision)) / (10 * settings.precision)
                : Math.round( (percent / 100) * module.total * 10) / 10
              ;
              if(settings.limitValues) {
                module.value = (module.value > 100)
                  ? 100
                  : (module.value < 0)
                    ? 0
                    : module.value
                ;
              }
            }
            module.set.barWidth(percent);
            module.set.labelInterval();
            module.set.labels();
            settings.onChange.call(element, percent, module.value, module.total);
          },
          labelInterval: function() {
            var
              animationCallback = function() {
                module.verbose('Bar finished animating, removing continuous label updates');
                clearInterval(module.interval);
                animating = false;
                module.set.labels();
              }
            ;
            clearInterval(module.interval);
            $bar.one(transitionEnd + eventNamespace, animationCallback);
            module.timer = setTimeout(animationCallback, settings.duration + 100);
            animating = true;
            module.interval = setInterval(module.set.labels, settings.framerate);
          },
          labels: function() {
            module.verbose('Setting both bar progress and outer label text');
            module.set.barLabel();
            module.set.state();
          },
          label: function(text) {
            text = text || '';
            if(text) {
              text = module.get.text(text);
              module.debug('Setting label to text', text);
              $label.text(text);
            }
          },
          state: function(percent) {
            percent = (percent !== undefined)
              ? percent
              : module.percent
            ;
            if(percent === 100) {
              if(settings.autoSuccess && !(module.is.warning() || module.is.error())) {
                module.set.success();
                module.debug('Automatically triggering success at 100%');
              }
              else {
                module.verbose('Reached 100% removing active state');
                module.remove.active();
              }
            }
            else if(percent > 0) {
              module.verbose('Adjusting active progress bar label', percent);
              module.set.active();
            }
            else {
              module.remove.active();
              module.set.label(settings.text.active);
            }
          },
          barLabel: function(text) {
            if(text !== undefined) {
              $progress.text( module.get.text(text) );
            }
            else if(settings.label == 'ratio' && module.total) {
              module.debug('Adding ratio to bar label');
              $progress.text( module.get.text(settings.text.ratio) );
            }
            else if(settings.label == 'percent') {
              module.debug('Adding percentage to bar label');
              $progress.text( module.get.text(settings.text.percent) );
            }
          },
          active: function(text) {
            text = text || settings.text.active;
            module.debug('Setting active state');
            if(settings.showActivity && !module.is.active() ) {
              $module.addClass(className.active);
            }
            module.remove.warning();
            module.remove.error();
            module.remove.success();
            if(text) {
              module.set.label(text);
            }
            settings.onActive.call(element, module.value, module.total);
          },
          success : function(text) {
            text = text || settings.text.success;
            module.debug('Setting success state');
            $module.addClass(className.success);
            module.remove.active();
            module.remove.warning();
            module.remove.error();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onSuccess.call(element, module.total);
          },
          warning : function(text) {
            text = text || settings.text.warning;
            module.debug('Setting warning state');
            $module.addClass(className.warning);
            module.remove.active();
            module.remove.success();
            module.remove.error();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onWarning.call(element, module.value, module.total);
          },
          error : function(text) {
            text = text || settings.text.error;
            module.debug('Setting error state');
            $module.addClass(className.error);
            module.remove.active();
            module.remove.success();
            module.remove.warning();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onError.call(element, module.value, module.total);
          },
          transitionEvent: function() {
            transitionEnd = module.get.transitionEnd();
          },
          total: function(totalValue) {
            module.total = totalValue;
          },
          value: function(value) {
            module.value = value;
          },
          progress: function(value) {
            var
              numericValue = module.get.numericValue(value),
              percentComplete
            ;
            if(numericValue === false) {
              module.error(error.nonNumeric, value);
            }
            if( module.has.total() ) {
              module.set.value(numericValue);
              percentComplete = (numericValue / module.total) * 100;
              module.debug('Calculating percent complete from total', percentComplete);
              module.set.percent( percentComplete );
            }
            else {
              percentComplete = numericValue;
              module.debug('Setting value to exact percentage value', percentComplete);
              module.set.percent( percentComplete );
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.progress.settings = {

  name         : 'Progress',
  namespace    : 'progress',

  debug        : false,
  verbose      : false,
  performance  : true,

  random       : {
    min : 2,
    max : 5
  },

  duration     : 300,

  autoSuccess  : true,
  showActivity : true,
  limitValues  : true,

  label        : 'percent',
  precision    : 0,
  framerate    : (1000 / 30), /// 30 fps

  percent      : false,
  total        : false,
  value        : false,

  onChange     : function(percent, value, total){},
  onSuccess    : function(total){},
  onActive     : function(value, total){},
  onError      : function(value, total){},
  onWarning    : function(value, total){},

  error    : {
    method     : 'The method you called is not defined.',
    nonNumeric : 'Progress value is non numeric',
    tooHigh    : 'Value specified is above 100%',
    tooLow     : 'Value specified is below 0%'
  },

  regExp: {
    variable: /\{\$*[A-z0-9]+\}/g
  },

  metadata: {
    percent : 'percent',
    total   : 'total',
    value   : 'value'
  },

  selector : {
    bar      : '> .bar',
    label    : '> .label',
    progress : '.bar > .progress'
  },

  text : {
    active  : false,
    error   : false,
    success : false,
    warning : false,
    percent : '{percent}%',
    ratio   : '{value} of {total}'
  },

  className : {
    active  : 'active',
    error   : 'error',
    success : 'success',
    warning : 'warning'
  }

};


})( jQuery, window, document );
/*!
 * # Semantic UI 2.1.8 - Rating
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.rating = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.rating.settings, parameters)
          : $.extend({}, $.fn.rating.settings),

        namespace       = settings.namespace,
        className       = settings.className,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        element         = this,
        instance        = $(this).data(moduleNamespace),

        $module         = $(this),
        $icon           = $module.find(selector.icon),

        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing rating module', settings);

          if($icon.length === 0) {
            module.setup.layout();
          }

          if(settings.interactive) {
            module.enable();
          }
          else {
            module.disable();
          }
          module.set.rating( module.get.initialRating() );
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Instantiating module', settings);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance', instance);
          module.remove.events();
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          $icon   = $module.find(selector.icon);
        },

        setup: {
          layout: function() {
            var
              maxRating = module.get.maxRating(),
              html      = $.fn.rating.settings.templates.icon(maxRating)
            ;
            module.debug('Generating icon html dynamically');
            $module
              .html(html)
            ;
            module.refresh();
          }
        },

        event: {
          mouseenter: function() {
            var
              $activeIcon = $(this)
            ;
            $activeIcon
              .nextAll()
                .removeClass(className.selected)
            ;
            $module
              .addClass(className.selected)
            ;
            $activeIcon
              .addClass(className.selected)
                .prevAll()
                .addClass(className.selected)
            ;
          },
          mouseleave: function() {
            $module
              .removeClass(className.selected)
            ;
            $icon
              .removeClass(className.selected)
            ;
          },
          click: function() {
            var
              $activeIcon   = $(this),
              currentRating = module.get.rating(),
              rating        = $icon.index($activeIcon) + 1,
              canClear      = (settings.clearable == 'auto')
               ? ($icon.length === 1)
               : settings.clearable
            ;
            if(canClear && currentRating == rating) {
              module.clearRating();
            }
            else {
              module.set.rating( rating );
            }
          }
        },

        clearRating: function() {
          module.debug('Clearing current rating');
          module.set.rating(0);
        },

        bind: {
          events: function() {
            module.verbose('Binding events');
            $module
              .on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter)
              .on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave)
              .on('click'      + eventNamespace, selector.icon, module.event.click)
            ;
          }
        },

        remove: {
          events: function() {
            module.verbose('Removing events');
            $module
              .off(eventNamespace)
            ;
          }
        },

        enable: function() {
          module.debug('Setting rating to interactive mode');
          module.bind.events();
          $module
            .removeClass(className.disabled)
          ;
        },

        disable: function() {
          module.debug('Setting rating to read-only mode');
          module.remove.events();
          $module
            .addClass(className.disabled)
          ;
        },

        get: {
          initialRating: function() {
            if($module.data(metadata.rating) !== undefined) {
              $module.removeData(metadata.rating);
              return $module.data(metadata.rating);
            }
            return settings.initialRating;
          },
          maxRating: function() {
            if($module.data(metadata.maxRating) !== undefined) {
              $module.removeData(metadata.maxRating);
              return $module.data(metadata.maxRating);
            }
            return settings.maxRating;
          },
          rating: function() {
            var
              currentRating = $icon.filter('.' + className.active).length
            ;
            module.verbose('Current rating retrieved', currentRating);
            return currentRating;
          }
        },

        set: {
          rating: function(rating) {
            var
              ratingIndex = (rating - 1 >= 0)
                ? (rating - 1)
                : 0,
              $activeIcon = $icon.eq(ratingIndex)
            ;
            $module
              .removeClass(className.selected)
            ;
            $icon
              .removeClass(className.selected)
              .removeClass(className.active)
            ;
            if(rating > 0) {
              module.verbose('Setting current rating to', rating);
              $activeIcon
                .prevAll()
                .andSelf()
                  .addClass(className.active)
              ;
            }
            settings.onRate.call(element, rating);
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.rating.settings = {

  name          : 'Rating',
  namespace     : 'rating',

  debug         : false,
  verbose       : false,
  performance   : true,

  initialRating : 0,
  interactive   : true,
  maxRating     : 4,
  clearable     : 'auto',

  onRate        : function(rating){},

  error         : {
    method    : 'The method you called is not defined',
    noMaximum : 'No maximum rating specified. Cannot generate HTML automatically'
  },


  metadata: {
    rating    : 'rating',
    maxRating : 'maxRating'
  },

  className : {
    active   : 'active',
    disabled : 'disabled',
    selected : 'selected',
    loading  : 'loading'
  },

  selector  : {
    icon : '.icon'
  },

  templates: {
    icon: function(maxRating) {
      var
        icon = 1,
        html = ''
      ;
      while(icon <= maxRating) {
        html += '<i class="icon"></i>';
        icon++;
      }
      return html;
    }
  }

};

})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Search
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.search = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $(this)
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.search.settings, parameters)
          : $.extend({}, $.fn.search.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        regExp          = settings.regExp,
        fields          = settings.fields,
        selector        = settings.selector,
        error           = settings.error,
        namespace       = settings.namespace,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),
        $prompt         = $module.find(selector.prompt),
        $searchButton   = $module.find(selector.searchButton),
        $results        = $module.find(selector.results),
        $result         = $module.find(selector.result),
        $category       = $module.find(selector.category),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing module');
          module.determine.searchFields();
          module.bind.events();
          module.set.type();
          module.create.results();
          module.instantiate();
        },
        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },
        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        bind: {
          events: function() {
            module.verbose('Binding events to search');
            if(settings.automatic) {
              $module
                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)
              ;
              $prompt
                .attr('autocomplete', 'off')
              ;
            }
            $module
              // prompt
              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)
              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)
              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)
              // search button
              .on('click'     + eventNamespace, selector.searchButton, module.query)
              // results
              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)
              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)
              .on('click'     + eventNamespace, selector.result,  module.event.result.click)
            ;
          }
        },

        determine: {
          searchFields: function() {
            // this makes sure $.extend does not add specified search fields to default fields
            // this is the only setting which should not extend defaults
            if(parameters && parameters.searchFields !== undefined) {
              settings.searchFields = parameters.searchFields;
            }
          }
        },

        event: {
          input: function() {
            clearTimeout(module.timer);
            module.timer = setTimeout(module.query, settings.searchDelay);
          },
          focus: function() {
            module.set.focus();
            if( module.has.minimumCharacters() ) {
              module.query();
              if( module.can.show() ) {
                module.showResults();
              }
            }
          },
          blur: function(event) {
            var
              pageLostFocus = (document.activeElement === this),
              callback      = function() {
                module.cancel.query();
                module.remove.focus();
                module.timer = setTimeout(module.hideResults, settings.hideDelay);
              }
            ;
            if(pageLostFocus) {
              return;
            }
            if(module.resultsClicked) {
              module.debug('Determining if user action caused search to close');
              $module
                .one('click', selector.results, function(event) {
                  if( !module.is.animating() && !module.is.hidden() ) {
                    callback();
                  }
                })
              ;
            }
            else {
              module.debug('Input blurred without user action, closing results');
              callback();
            }
          },
          result: {
            mousedown: function() {
              module.resultsClicked = true;
            },
            mouseup: function() {
              module.resultsClicked = false;
            },
            click: function(event) {
              module.debug('Search result selected');
              var
                $result = $(this),
                $title  = $result.find(selector.title).eq(0),
                $link   = $result.find('a[href]').eq(0),
                href    = $link.attr('href')   || false,
                target  = $link.attr('target') || false,
                title   = $title.html(),
                // title is used for result lookup
                value   = ($title.length > 0)
                  ? $title.text()
                  : false,
                results = module.get.results(),
                result  = $result.data(metadata.result) || module.get.result(value, results),
                returnedValue
              ;
              if( $.isFunction(settings.onSelect) ) {
                if(settings.onSelect.call(element, result, results) === false) {
                  module.debug('Custom onSelect callback cancelled default select action');
                  return;
                }
              }
              module.hideResults();
              if(value) {
                module.set.value(value);
              }
              if(href) {
                module.verbose('Opening search link found in result', $link);
                if(target == '_blank' || event.ctrlKey) {
                  window.open(href);
                }
                else {
                  window.location.href = (href);
                }
              }
            }
          }
        },
        handleKeyboard: function(event) {
          var
            // force selector refresh
            $result      = $module.find(selector.result),
            $category    = $module.find(selector.category),
            currentIndex = $result.index( $result.filter('.' + className.active) ),
            resultSize   = $result.length,

            keyCode      = event.which,
            keys         = {
              backspace : 8,
              enter     : 13,
              escape    : 27,
              upArrow   : 38,
              downArrow : 40
            },
            newIndex
          ;
          // search shortcuts
          if(keyCode == keys.escape) {
            module.verbose('Escape key pressed, blurring search field');
            module.trigger.blur();
          }
          if( module.is.visible() ) {
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, selecting active result');
              if( $result.filter('.' + className.active).length > 0 ) {
                module.event.result.click.call($result.filter('.' + className.active), event);
                event.preventDefault();
                return false;
              }
            }
            else if(keyCode == keys.upArrow) {
              module.verbose('Up key pressed, changing active result');
              newIndex = (currentIndex - 1 < 0)
                ? currentIndex
                : currentIndex - 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
            }
            else if(keyCode == keys.downArrow) {
              module.verbose('Down key pressed, changing active result');
              newIndex = (currentIndex + 1 >= resultSize)
                ? currentIndex
                : currentIndex + 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
            }
          }
          else {
            // query shortcuts
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, executing query');
              module.query();
              module.set.buttonPressed();
              $prompt.one('keyup', module.remove.buttonFocus);
            }
          }
        },

        setup: {
          api: function() {
            var
              apiSettings = {
                debug     : settings.debug,
                on        : false,
                cache     : 'local',
                action    : 'search',
                onError   : module.error
              },
              searchHTML
            ;
            module.verbose('First request, initializing API');
            $module.api(apiSettings);
          }
        },

        can: {
          useAPI: function() {
            return $.fn.api !== undefined;
          },
          show: function() {
            return module.is.focused() && !module.is.visible() && !module.is.empty();
          },
          transition: function() {
            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');
          }
        },

        is: {
          animating: function() {
            return $results.hasClass(className.animating);
          },
          hidden: function() {
            return $results.hasClass(className.hidden);
          },
          empty: function() {
            return ($results.html() === '');
          },
          visible: function() {
            return ($results.filter(':visible').length > 0);
          },
          focused: function() {
            return ($prompt.filter(':focus').length > 0);
          }
        },

        trigger: {
          blur: function() {
            var
              events        = document.createEvent('HTMLEvents'),
              promptElement = $prompt[0]
            ;
            if(promptElement) {
              module.verbose('Triggering native blur event');
              events.initEvent('blur', false, false);
              promptElement.dispatchEvent(events);
            }
          }
        },

        get: {
          inputEvent: function() {
            var
              prompt = $prompt[0],
              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)
                ? 'input'
                : (prompt !== undefined && prompt.onpropertychange !== undefined)
                  ? 'propertychange'
                  : 'keyup'
            ;
            return inputEvent;
          },
          value: function() {
            return $prompt.val();
          },
          results: function() {
            var
              results = $module.data(metadata.results)
            ;
            return results;
          },
          result: function(value, results) {
            var
              lookupFields = ['title', 'id'],
              result       = false
            ;
            value = (value !== undefined)
              ? value
              : module.get.value()
            ;
            results = (results !== undefined)
              ? results
              : module.get.results()
            ;
            if(settings.type === 'category') {
              module.debug('Finding result that matches', value);
              $.each(results, function(index, category) {
                if($.isArray(category.results)) {
                  result = module.search.object(value, category.results, lookupFields)[0];
                  // don't continue searching if a result is found
                  if(result) {
                    return false;
                  }
                }
              });
            }
            else {
              module.debug('Finding result in results object', value);
              result = module.search.object(value, results, lookupFields)[0];
            }
            return result || false;
          },
        },

        set: {
          focus: function() {
            $module.addClass(className.focus);
          },
          loading: function() {
            $module.addClass(className.loading);
          },
          value: function(value) {
            module.verbose('Setting search input value', value);
            $prompt
              .val(value)
            ;
          },
          type: function(type) {
            type = type || settings.type;
            if(settings.type == 'category') {
              $module.addClass(settings.type);
            }
          },
          buttonPressed: function() {
            $searchButton.addClass(className.pressed);
          }
        },

        remove: {
          loading: function() {
            $module.removeClass(className.loading);
          },
          focus: function() {
            $module.removeClass(className.focus);
          },
          buttonPressed: function() {
            $searchButton.removeClass(className.pressed);
          }
        },

        query: function() {
          var
            searchTerm = module.get.value(),
            cache = module.read.cache(searchTerm)
          ;
          if( module.has.minimumCharacters() )  {
            if(cache) {
              module.debug('Reading result from cache', searchTerm);
              module.save.results(cache.results);
              module.addResults(cache.html);
              module.inject.id(cache.results);
            }
            else {
              module.debug('Querying for', searchTerm);
              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {
                module.search.local(searchTerm);
              }
              else if( module.can.useAPI() ) {
                module.search.remote(searchTerm);
              }
              else {
                module.error(error.source);
              }
            }
            settings.onSearchQuery.call(element, searchTerm);
          }
          else {
            module.hideResults();
          }
        },

        search: {
          local: function(searchTerm) {
            var
              results = module.search.object(searchTerm, settings.content),
              searchHTML
            ;
            module.set.loading();
            module.save.results(results);
            module.debug('Returned local search results', results);

            searchHTML = module.generateResults({
              results: results
            });
            module.remove.loading();
            module.addResults(searchHTML);
            module.inject.id(results);
            module.write.cache(searchTerm, {
              html    : searchHTML,
              results : results
            });
          },
          remote: function(searchTerm) {
            var
              apiSettings = {
                onSuccess : function(response) {
                  module.parse.response.call(element, response, searchTerm);
                },
                onFailure: function() {
                  module.displayMessage(error.serverError);
                },
                urlData: {
                  query: searchTerm
                }
              }
            ;
            if( !$module.api('get request') ) {
              module.setup.api();
            }
            $.extend(true, apiSettings, settings.apiSettings);
            module.debug('Executing search', apiSettings);
            module.cancel.query();
            $module
              .api('setting', apiSettings)
              .api('query')
            ;
          },
          object: function(searchTerm, source, searchFields) {
            var
              results      = [],
              fuzzyResults = [],
              searchExp    = searchTerm.toString().replace(regExp.escape, '\\$&'),
              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),

              // avoid duplicates when pushing results
              addResult = function(array, result) {
                var
                  notResult      = ($.inArray(result, results) == -1),
                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1)
                ;
                if(notResult && notFuzzyResult) {
                  array.push(result);
                }
              }
            ;
            source = source || settings.source;
            searchFields = (searchFields !== undefined)
              ? searchFields
              : settings.searchFields
            ;

            // search fields should be array to loop correctly
            if(!$.isArray(searchFields)) {
              searchFields = [searchFields];
            }

            // exit conditions if no source
            if(source === undefined || source === false) {
              module.error(error.source);
              return [];
            }

            // iterate through search fields looking for matches
            $.each(searchFields, function(index, field) {
              $.each(source, function(label, content) {
                var
                  fieldExists = (typeof content[field] == 'string')
                ;
                if(fieldExists) {
                  if( content[field].search(matchRegExp) !== -1) {
                    // content starts with value (first in results)
                    addResult(results, content);
                  }
                  else if(settings.searchFullText && module.fuzzySearch(searchTerm, content[field]) ) {
                    // content fuzzy matches (last in results)
                    addResult(fuzzyResults, content);
                  }
                }
              });
            });
            return $.merge(results, fuzzyResults);
          }
        },

        fuzzySearch: function(query, term) {
          var
            termLength  = term.length,
            queryLength = query.length
          ;
          if(typeof query !== 'string') {
            return false;
          }
          query = query.toLowerCase();
          term  = term.toLowerCase();
          if(queryLength > termLength) {
            return false;
          }
          if(queryLength === termLength) {
            return (query === term);
          }
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var
              queryCharacter = query.charCodeAt(characterIndex)
            ;
            while(nextCharacterIndex < termLength) {
              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
              }
            }
            return false;
          }
          return true;
        },

        parse: {
          response: function(response, searchTerm) {
            var
              searchHTML = module.generateResults(response)
            ;
            module.verbose('Parsing server response', response);
            if(response !== undefined) {
              if(searchTerm !== undefined && response[fields.results] !== undefined) {
                module.addResults(searchHTML);
                module.inject.id(response[fields.results]);
                module.write.cache(searchTerm, {
                  html    : searchHTML,
                  results : response[fields.results]
                });
                module.save.results(response[fields.results]);
              }
            }
          }
        },

        cancel: {
          query: function() {
            if( module.can.useAPI() ) {
              $module.api('abort');
            }
          }
        },

        has: {
          minimumCharacters: function() {
            var
              searchTerm    = module.get.value(),
              numCharacters = searchTerm.length
            ;
            return (numCharacters >= settings.minCharacters);
          }
        },

        clear: {
          cache: function(value) {
            var
              cache = $module.data(metadata.cache)
            ;
            if(!value) {
              module.debug('Clearing cache', value);
              $module.removeData(metadata.cache);
            }
            else if(value && cache && cache[value]) {
              module.debug('Removing value from cache', value);
              delete cache[value];
              $module.data(metadata.cache, cache);
            }
          }
        },

        read: {
          cache: function(name) {
            var
              cache = $module.data(metadata.cache)
            ;
            if(settings.cache) {
              module.verbose('Checking cache for generated html for query', name);
              return (typeof cache == 'object') && (cache[name] !== undefined)
                ? cache[name]
                : false
              ;
            }
            return false;
          }
        },

        create: {
          id: function(resultIndex, categoryIndex) {
            var
              resultID      = (resultIndex + 1), // not zero indexed
              categoryID    = (categoryIndex + 1),
              firstCharCode,
              letterID,
              id
            ;
            if(categoryIndex !== undefined) {
              // start char code for "A"
              letterID = String.fromCharCode(97 + categoryIndex);
              id          = letterID + resultID;
              module.verbose('Creating category result id', id);
            }
            else {
              id = resultID;
              module.verbose('Creating result id', id);
            }
            return id;
          },
          results: function() {
            if($results.length === 0) {
              $results = $('<div />')
                .addClass(className.results)
                .appendTo($module)
              ;
            }
          }
        },

        inject: {
          result: function(result, resultIndex, categoryIndex) {
            module.verbose('Injecting result into results');
            var
              $selectedResult = (categoryIndex !== undefined)
                ? $results
                    .children().eq(categoryIndex)
                      .children(selector.result).eq(resultIndex)
                : $results
                    .children(selector.result).eq(resultIndex)
            ;
            module.verbose('Injecting results metadata', $selectedResult);
            $selectedResult
              .data(metadata.result, result)
            ;
          },
          id: function(results) {
            module.debug('Injecting unique ids into results');
            var
              // since results may be object, we must use counters
              categoryIndex = 0,
              resultIndex   = 0
            ;
            if(settings.type === 'category') {
              // iterate through each category result
              $.each(results, function(index, category) {
                resultIndex = 0;
                $.each(category.results, function(index, value) {
                  var
                    result = category.results[index]
                  ;
                  if(result.id === undefined) {
                    result.id = module.create.id(resultIndex, categoryIndex);
                  }
                  module.inject.result(result, resultIndex, categoryIndex);
                  resultIndex++;
                });
                categoryIndex++;
              });
            }
            else {
              // top level
              $.each(results, function(index, value) {
                var
                  result = results[index]
                ;
                if(result.id === undefined) {
                  result.id = module.create.id(resultIndex);
                }
                module.inject.result(result, resultIndex);
                resultIndex++;
              });
            }
            return results;
          }
        },

        save: {
          results: function(results) {
            module.verbose('Saving current search results to metadata', results);
            $module.data(metadata.results, results);
          }
        },

        write: {
          cache: function(name, value) {
            var
              cache = ($module.data(metadata.cache) !== undefined)
                ? $module.data(metadata.cache)
                : {}
            ;
            if(settings.cache) {
              module.verbose('Writing generated html to cache', name, value);
              cache[name] = value;
              $module
                .data(metadata.cache, cache)
              ;
            }
          }
        },

        addResults: function(html) {
          if( $.isFunction(settings.onResultsAdd) ) {
            if( settings.onResultsAdd.call($results, html) === false ) {
              module.debug('onResultsAdd callback cancelled default action');
              return false;
            }
          }
          $results
            .html(html)
          ;
          if( module.can.show() ) {
            module.showResults();
          }
        },

        showResults: function() {
          if(!module.is.visible()) {
            if( module.can.transition() ) {
              module.debug('Showing results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' in',
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  queue      : true
                })
              ;
            }
            else {
              module.debug('Showing results with javascript');
              $results
                .stop()
                .fadeIn(settings.duration, settings.easing)
              ;
            }
            settings.onResultsOpen.call($results);
          }
        },
        hideResults: function() {
          if( module.is.visible() ) {
            if( module.can.transition() ) {
              module.debug('Hiding results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' out',
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  queue      : true
                })
              ;
            }
            else {
              module.debug('Hiding results with javascript');
              $results
                .stop()
                .fadeOut(settings.duration, settings.easing)
              ;
            }
            settings.onResultsClose.call($results);
          }
        },

        generateResults: function(response) {
          module.debug('Generating html from response', response);
          var
            template       = settings.templates[settings.type],
            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),
            isProperArray  = ($.isArray(response[fields.results]) && response[fields.results].length > 0),
            html           = ''
          ;
          if(isProperObject || isProperArray ) {
            if(settings.maxResults > 0) {
              if(isProperObject) {
                if(settings.type == 'standard') {
                  module.error(error.maxResults);
                }
              }
              else {
                response[fields.results] = response[fields.results].slice(0, settings.maxResults);
              }
            }
            if($.isFunction(template)) {
              html = template(response, fields);
            }
            else {
              module.error(error.noTemplate, false);
            }
          }
          else {
            html = module.displayMessage(error.noResults, 'empty');
          }
          settings.onResults.call(element, response);
          return html;
        },

        displayMessage: function(text, type) {
          type = type || 'standard';
          module.debug('Displaying message', text, type);
          module.addResults( settings.templates.message(text, type) );
          return settings.templates.message(text, type);
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }

    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.search.settings = {

  name           : 'Search',
  namespace      : 'search',

  debug          : false,
  verbose        : false,
  performance    : true,

  type           : 'standard',
  // template to use (specified in settings.templates)

  minCharacters  : 1,
  // minimum characters required to search

  apiSettings    : false,
  // API config

  source         : false,
  // object to search

  searchFields   : [
    'title',
    'description'
  ],
  // fields to search

  displayField   : '',
  // field to display in standard results template

  searchFullText : true,
  // whether to include fuzzy results in local search

  automatic      : true,
  // whether to add events to prompt automatically

  hideDelay      : 0,
  // delay before hiding menu after blur

  searchDelay    : 200,
  // delay before searching

  maxResults     : 7,
  // maximum results returned from local

  cache          : true,
  // whether to store lookups in local cache

  // transition settings
  transition     : 'scale',
  duration       : 200,
  easing         : 'easeOutExpo',

  // callbacks
  onSelect       : false,
  onResultsAdd   : false,

  onSearchQuery  : function(query){},
  onResults      : function(response){},

  onResultsOpen  : function(){},
  onResultsClose : function(){},

  className: {
    animating : 'animating',
    active    : 'active',
    empty     : 'empty',
    focus     : 'focus',
    hidden    : 'hidden',
    loading   : 'loading',
    results   : 'results',
    pressed   : 'down'
  },

  error : {
    source      : 'Cannot search. No source used, and Semantic API module was not included',
    noResults   : 'Your search returned no results',
    logging     : 'Error in debug logging, exiting.',
    noEndpoint  : 'No search endpoint was specified',
    noTemplate  : 'A valid template name was not specified.',
    serverError : 'There was an issue querying the server.',
    maxResults  : 'Results must be an array to use maxResults setting',
    method      : 'The method you called is not defined.'
  },

  metadata: {
    cache   : 'cache',
    results : 'results',
    result  : 'result'
  },

  regExp: {
    escape     : /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
    beginsWith : '(?:\s|^)'
  },

  // maps api response attributes to internal representation
  fields: {
    categories      : 'results',     // array of categories (category view)
    categoryName    : 'name',        // name of category (category view)
    categoryResults : 'results',     // array of results (category view)
    description     : 'description', // result description
    image           : 'image',       // result image
    price           : 'price',       // result price
    results         : 'results',     // array of results (standard)
    title           : 'title',       // result title
    url             : 'url',         // result url
    action          : 'action',      // "view more" object name
    actionText      : 'text',        // "view more" text
    actionURL       : 'url'          // "view more" url
  },

  selector : {
    prompt       : '.prompt',
    searchButton : '.search.button',
    results      : '.results',
    category     : '.category',
    result       : '.result',
    title        : '.title, .name'
  },

  templates: {
    escape: function(string) {
      var
        badChars     = /[&<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        },
        escapedChar  = function(chr) {
          return escape[chr];
        }
      ;
      if(shouldEscape.test(string)) {
        return string.replace(badChars, escapedChar);
      }
      return string;
    },
    message: function(message, type) {
      var
        html = ''
      ;
      if(message !== undefined && type !== undefined) {
        html +=  ''
          + '<div class="message ' + type + '">'
        ;
        // message type
        if(type == 'empty') {
          html += ''
            + '<div class="header">No Results</div class="header">'
            + '<div class="description">' + message + '</div class="description">'
          ;
        }
        else {
          html += ' <div class="description">' + message + '</div>';
        }
        html += '</div>';
      }
      return html;
    },
    category: function(response, fields) {
      var
        html = '',
        escape = $.fn.search.settings.templates.escape
      ;
      if(response[fields.categoryResults] !== undefined) {

        // each category
        $.each(response[fields.categoryResults], function(index, category) {
          if(category[fields.results] !== undefined && category.results.length > 0) {

            html  += '<div class="category">';

            if(category[fields.categoryName] !== undefined) {
              html += '<div class="name">' + category[fields.categoryName] + '</div>';
            }

            // each item inside category
            $.each(category.results, function(index, result) {
              if(result[fields.url]) {
                html  += '<a class="result" href="' + result[fields.url] + '">';
              }
              else {
                html  += '<a class="result">';
              }
              if(result[fields.image] !== undefined) {
                html += ''
                  + '<div class="image">'
                  + ' <img src="' + result[fields.image] + '">'
                  + '</div>'
                ;
              }
              html += '<div class="content">';
              if(result[fields.price] !== undefined) {
                html += '<div class="price">' + result[fields.price] + '</div>';
              }
              if(result[fields.title] !== undefined) {
                html += '<div class="title">' + result[fields.title] + '</div>';
              }
              if(result[fields.description] !== undefined) {
                html += '<div class="description">' + result[fields.description] + '</div>';
              }
              html  += ''
                + '</div>'
              ;
              html += '</a>';
            });
            html  += ''
              + '</div>'
            ;
          }
        });
        if(response[fields.action]) {
          html += ''
          + '<a href="' + response[fields.action][fields.actionURL] + '" class="action">'
          +   response[fields.action][fields.actionText]
          + '</a>';
        }
        return html;
      }
      return false;
    },
    standard: function(response, fields) {
      var
        html = ''
      ;
      if(response[fields.results] !== undefined) {

        // each result
        $.each(response[fields.results], function(index, result) {
          if(result[fields.url]) {
            html  += '<a class="result" href="' + result[fields.url] + '">';
          }
          else {
            html  += '<a class="result">';
          }
          if(result[fields.image] !== undefined) {
            html += ''
              + '<div class="image">'
              + ' <img src="' + result[fields.image] + '">'
              + '</div>'
            ;
          }
          html += '<div class="content">';
          if(result[fields.price] !== undefined) {
            html += '<div class="price">' + result[fields.price] + '</div>';
          }
          if(result[fields.title] !== undefined) {
            html += '<div class="title">' + result[fields.title] + '</div>';
          }
          if(result[fields.description] !== undefined) {
            html += '<div class="description">' + result[fields.description] + '</div>';
          }
          html  += ''
            + '</div>'
          ;
          html += '</a>';
        });

        if(response[fields.action]) {
          html += ''
          + '<a href="' + response[fields.action][fields.actionURL] + '" class="action">'
          +   response[fields.action][fields.actionText]
          + '</a>';
        }
        return html;
      }
      return false;
    }
  }
};

})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Shape
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.shape = function(parameters) {
  var
    $allModules     = $(this),
    $body           = $('body'),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        moduleSelector = $allModules.selector || '',
        settings       = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.shape.settings, parameters)
          : $.extend({}, $.fn.shape.settings),

        // internal aliases
        namespace     = settings.namespace,
        selector      = settings.selector,
        error         = settings.error,
        className     = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // selector cache
        $module       = $(this),
        $sides        = $module.find(selector.sides),
        $side         = $module.find(selector.side),

        // private variables
        nextIndex = false,
        $activeSide,
        $nextSide,

        // standard module
        element       = this,
        instance      = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing module for', element);
          module.set.defaultSide();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache for', element);
          $module = $(element);
          $sides  = $(this).find(selector.shape);
          $side   = $(this).find(selector.side);
        },

        repaint: function() {
          module.verbose('Forcing repaint event');
          var
            shape          = $sides[0] || document.createElement('div'),
            fakeAssignment = shape.offsetWidth
          ;
        },

        animate: function(propertyObject, callback) {
          module.verbose('Animating box with properties', propertyObject);
          callback = callback || function(event) {
            module.verbose('Executing animation callback');
            if(event !== undefined) {
              event.stopPropagation();
            }
            module.reset();
            module.set.active();
          };
          settings.beforeChange.call($nextSide[0]);
          if(module.get.transitionEvent()) {
            module.verbose('Starting CSS animation');
            $module
              .addClass(className.animating)
            ;
            $sides
              .css(propertyObject)
              .one(module.get.transitionEvent(), callback)
            ;
            module.set.duration(settings.duration);
            requestAnimationFrame(function() {
              $module
                .addClass(className.animating)
              ;
              $activeSide
                .addClass(className.hidden)
              ;
            });
          }
          else {
            callback();
          }
        },

        queue: function(method) {
          module.debug('Queueing animation of', method);
          $sides
            .one(module.get.transitionEvent(), function() {
              module.debug('Executing queued animation');
              setTimeout(function(){
                $module.shape(method);
              }, 0);
            })
          ;
        },

        reset: function() {
          module.verbose('Animating states reset');
          $module
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
          // removeAttr style does not consistently work in safari
          $sides
            .attr('style', '')
            .removeAttr('style')
          ;
          $side
            .attr('style', '')
            .removeAttr('style')
            .removeClass(className.hidden)
          ;
          $nextSide
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
        },

        is: {
          complete: function() {
            return ($side.filter('.' + className.active)[0] == $nextSide[0]);
          },
          animating: function() {
            return $module.hasClass(className.animating);
          }
        },

        set: {

          defaultSide: function() {
            $activeSide = $module.find('.' + settings.className.active);
            $nextSide   = ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $module.find(selector.side).first()
            ;
            nextIndex = false;
            module.verbose('Active side set to', $activeSide);
            module.verbose('Next side set to', $nextSide);
          },

          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting animation duration', duration);
            if(settings.duration || settings.duration === 0) {
              $sides.add($side)
                .css({
                  '-webkit-transition-duration': duration,
                  '-moz-transition-duration': duration,
                  '-ms-transition-duration': duration,
                  '-o-transition-duration': duration,
                  'transition-duration': duration
                })
              ;
            }
          },

          currentStageSize: function() {
            var
              $activeSide = $module.find('.' + settings.className.active),
              width       = $activeSide.outerWidth(true),
              height      = $activeSide.outerHeight(true)
            ;
            $module
              .css({
                width: width,
                height: height
              })
            ;
          },

          stageSize: function() {
            var
              $clone      = $module.clone().addClass(className.loading),
              $activeSide = $clone.find('.' + settings.className.active),
              $nextSide   = (nextIndex)
                ? $clone.find(selector.side).eq(nextIndex)
                : ( $activeSide.next(selector.side).length > 0 )
                  ? $activeSide.next(selector.side)
                  : $clone.find(selector.side).first(),
              newSize = {}
            ;
            module.set.currentStageSize();
            $activeSide.removeClass(className.active);
            $nextSide.addClass(className.active);
            $clone.insertAfter($module);
            newSize = {
              width  : $nextSide.outerWidth(true),
              height : $nextSide.outerHeight(true)
            };
            $clone.remove();
            $module
              .css(newSize)
            ;
            module.verbose('Resizing stage to fit new content', newSize);
          },

          nextSide: function(selector) {
            nextIndex = selector;
            $nextSide = $side.filter(selector);
            nextIndex = $side.index($nextSide);
            if($nextSide.length === 0) {
              module.set.defaultSide();
              module.error(error.side);
            }
            module.verbose('Next side manually set to', $nextSide);
          },

          active: function() {
            module.verbose('Setting new side to active', $nextSide);
            $side
              .removeClass(className.active)
            ;
            $nextSide
              .addClass(className.active)
            ;
            settings.onChange.call($nextSide[0]);
            module.set.defaultSide();
          }
        },

        flip: {

          up: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping up', $nextSide);
              module.set.stageSize();
              module.stage.above();
              module.animate( module.get.transform.up() );
            }
            else {
              module.queue('flip up');
            }
          },

          down: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping down', $nextSide);
              module.set.stageSize();
              module.stage.below();
              module.animate( module.get.transform.down() );
            }
            else {
              module.queue('flip down');
            }
          },

          left: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping left', $nextSide);
              module.set.stageSize();
              module.stage.left();
              module.animate(module.get.transform.left() );
            }
            else {
              module.queue('flip left');
            }
          },

          right: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping right', $nextSide);
              module.set.stageSize();
              module.stage.right();
              module.animate(module.get.transform.right() );
            }
            else {
              module.queue('flip right');
            }
          },

          over: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping over', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.over() );
            }
            else {
              module.queue('flip over');
            }
          },

          back: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping back', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.back() );
            }
            else {
              module.queue('flip back');
            }
          }

        },

        get: {

          transform: {
            up: function() {
              var
                translate = {
                  y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                  z: -($activeSide.outerHeight(true) / 2)
                }
              ;
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(-90deg)'
              };
            },

            down: function() {
              var
                translate = {
                  y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                  z: -($activeSide.outerHeight(true) / 2)
                }
              ;
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(90deg)'
              };
            },

            left: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),
                  z : -($activeSide.outerWidth(true) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'
              };
            },

            right: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),
                  z : -($activeSide.outerWidth(true) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'
              };
            },

            over: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'
              };
            },

            back: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'
              };
            }
          },

          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          },

          nextSide: function() {
            return ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $module.find(selector.side).first()
            ;
          }

        },

        stage: {

          above: function() {
            var
              box = {
                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                depth  : {
                  active : ($nextSide.outerHeight(true) / 2),
                  next   : ($activeSide.outerHeight(true) / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as above', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          below: function() {
            var
              box = {
                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                depth  : {
                  active : ($nextSide.outerHeight(true) / 2),
                  next   : ($activeSide.outerHeight(true) / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as below', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          left: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
              },
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          right: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
              },
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          behind: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
              },
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as behind', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-180deg)'
              })
            ;
          }
        },
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.shape.settings = {

  // module info
  name : 'Shape',

  // debug content outputted to console
  debug      : false,

  // verbose debug output
  verbose    : false,

  // performance data output
  performance: true,

  // event namespace
  namespace  : 'shape',

  // callback occurs on side change
  beforeChange : function() {},
  onChange     : function() {},

  // allow animation to same side
  allowRepeats: false,

  // animation duration
  duration   : false,

  // possible errors
  error: {
    side   : 'You tried to switch to a side that does not exist.',
    method : 'The method you called is not defined'
  },

  // classnames used
  className   : {
    animating : 'animating',
    hidden    : 'hidden',
    loading   : 'loading',
    active    : 'active'
  },

  // selectors used
  selector    : {
    sides : '.sides',
    side  : '.side'
  }

};


})( jQuery, window, document );
/*!
 * # Semantic UI 2.1.8 - Sidebar
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.sidebar = function(parameters) {
  var
    $allModules     = $(this),
    $window         = $(window),
    $document       = $(document),
    $html           = $('html'),
    $head           = $('head'),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.sidebar.settings, parameters)
          : $.extend({}, $.fn.sidebar.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        regExp          = settings.regExp,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),

        $sidebars       = $module.children(selector.sidebar),
        $fixed          = $context.children(selector.fixed),
        $pusher         = $context.children(selector.pusher),
        $style,

        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        currentScroll,
        transitionEvent,

        module
      ;

      module      = {

        initialize: function() {
          module.debug('Initializing sidebar', parameters);

          module.create.id();

          transitionEvent = module.get.transitionEvent();

          if(module.is.ios()) {
            module.set.ios();
          }

          // avoids locking rendering if initialized in onReady
          if(settings.delaySetup) {
            requestAnimationFrame(module.setup.layout);
          }
          else {
            module.setup.layout();
          }

          requestAnimationFrame(function() {
            module.setup.cache();
          });

          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          }
        },

        destroy: function() {
          module.verbose('Destroying previous module for', $module);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          if(module.is.ios()) {
            module.remove.ios();
          }
          // bound by uuid
          $context.off(elementNamespace);
          $window.off(elementNamespace);
          $document.off(elementNamespace);
        },

        event: {
          clickaway: function(event) {
            var
              clickedInPusher = ($pusher.find(event.target).length > 0 || $pusher.is(event.target)),
              clickedContext  = ($context.is(event.target))
            ;
            if(clickedInPusher) {
              module.verbose('User clicked on dimmed page');
              module.hide();
            }
            if(clickedContext) {
              module.verbose('User clicked on dimmable context (scaled out page)');
              module.hide();
            }
          },
          touch: function(event) {
            //event.stopPropagation();
          },
          containScroll: function(event) {
            if(element.scrollTop <= 0)  {
              element.scrollTop = 1;
            }
            if((element.scrollTop + element.offsetHeight) >= element.scrollHeight) {
              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
            }
          },
          scroll: function(event) {
            if( $(event.target).closest(selector.sidebar).length === 0 ) {
              event.preventDefault();
            }
          }
        },

        bind: {
          clickaway: function() {
            module.verbose('Adding clickaway events to context', $context);
            if(settings.closable) {
              $context
                .on('click'    + elementNamespace, module.event.clickaway)
                .on('touchend' + elementNamespace, module.event.clickaway)
              ;
            }
          },
          scrollLock: function() {
            if(settings.scrollLock) {
              module.debug('Disabling page scroll');
              $window
                .on('DOMMouseScroll' + elementNamespace, module.event.scroll)
              ;
            }
            module.verbose('Adding events to contain sidebar scroll');
            $document
              .on('touchmove' + elementNamespace, module.event.touch)
            ;
            $module
              .on('scroll' + eventNamespace, module.event.containScroll)
            ;
          }
        },
        unbind: {
          clickaway: function() {
            module.verbose('Removing clickaway events from context', $context);
            $context.off(elementNamespace);
          },
          scrollLock: function() {
            module.verbose('Removing scroll lock from page');
            $document.off(elementNamespace);
            $window.off(elementNamespace);
            $module.off('scroll' + eventNamespace);
          }
        },

        add: {
          inlineCSS: function() {
            var
              width     = module.cache.width  || $module.outerWidth(),
              height    = module.cache.height || $module.outerHeight(),
              isRTL     = module.is.rtl(),
              direction = module.get.direction(),
              distance  = {
                left   : width,
                right  : -width,
                top    : height,
                bottom : -height
              },
              style
            ;

            if(isRTL){
              module.verbose('RTL detected, flipping widths');
              distance.left = -width;
              distance.right = width;
            }

            style  = '<style>';

            if(direction === 'left' || direction === 'right') {
              module.debug('Adding CSS rules for animation distance', width);
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + ' }'
              ;
            }
            else if(direction === 'top' || direction == 'bottom') {
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + ' }'
              ;
            }

            /* IE is only browser not to create context with transforms */
            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */
            if( module.is.ie() ) {
              if(direction === 'left' || direction === 'right') {
                module.debug('Adding CSS rules for animation distance', width);
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + ' }'
                ;
              }
              else if(direction === 'top' || direction == 'bottom') {
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + ' }'
                ;
              }
              /* opposite sides visible forces content overlay */
              style += ''
                + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,'
                + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {'
                + '   -webkit-transform: translate3d(0px, 0, 0);'
                + '           transform: translate3d(0px, 0, 0);'
                + ' }'
              ;
            }
            style += '</style>';
            $style = $(style)
              .appendTo($head)
            ;
            module.debug('Adding sizing css to head', $style);
          }
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $context  = $(settings.context);
          $sidebars = $context.children(selector.sidebar);
          $pusher   = $context.children(selector.pusher);
          $fixed    = $context.children(selector.fixed);
          module.clear.cache();
        },

        refreshSidebars: function() {
          module.verbose('Refreshing other sidebars');
          $sidebars = $context.children(selector.sidebar);
        },

        repaint: function() {
          module.verbose('Forcing repaint event');
          element.style.display = 'none';
          var ignored = element.offsetHeight;
          element.scrollTop = element.scrollTop;
          element.style.display = '';
        },

        setup: {
          cache: function() {
            module.cache = {
              width  : $module.outerWidth(),
              height : $module.outerHeight(),
              rtl    : ($module.css('direction') == 'rtl')
            };
          },
          layout: function() {
            if( $context.children(selector.pusher).length === 0 ) {
              module.debug('Adding wrapper element for sidebar');
              module.error(error.pusher);
              $pusher = $('<div class="pusher" />');
              $context
                .children()
                  .not(selector.omitted)
                  .not($sidebars)
                  .wrapAll($pusher)
              ;
              module.refresh();
            }
            if($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {
              module.debug('Moved sidebar to correct parent element');
              module.error(error.movedSidebar, element);
              $module.detach().prependTo($context);
              module.refresh();
            }
            module.clear.cache();
            module.set.pushable();
            module.set.direction();
          }
        },

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching sidebar events to element', selector, event);
            $toggle
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound, selector);
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(module.is.hidden()) {
            module.refreshSidebars();
            if(settings.overlay)  {
              module.error(error.overlay);
              settings.transition = 'overlay';
            }
            module.refresh();
            if(module.othersActive()) {
              module.debug('Other sidebars currently visible');
              if(settings.exclusive) {
                // if not overlay queue animation after hide
                if(settings.transition != 'overlay') {
                  module.hideOthers(module.show);
                  return;
                }
                else {
                  module.hideOthers();
                }
              }
              else {
                settings.transition = 'overlay';
              }
            }
            module.pushPage(function() {
              callback.call(element);
              settings.onShow.call(element);
            });
            settings.onChange.call(element);
            settings.onVisible.call(element);
          }
          else {
            module.debug('Sidebar is already visible');
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(module.is.visible() || module.is.animating()) {
            module.debug('Hiding sidebar', callback);
            module.refreshSidebars();
            module.pullPage(function() {
              callback.call(element);
              settings.onHidden.call(element);
            });
            settings.onChange.call(element);
            settings.onHide.call(element);
          }
        },

        othersAnimating: function() {
          return ($sidebars.not($module).filter('.' + className.animating).length > 0);
        },
        othersVisible: function() {
          return ($sidebars.not($module).filter('.' + className.visible).length > 0);
        },
        othersActive: function() {
          return(module.othersVisible() || module.othersAnimating());
        },

        hideOthers: function(callback) {
          var
            $otherSidebars = $sidebars.not($module).filter('.' + className.visible),
            sidebarCount   = $otherSidebars.length,
            callbackCount  = 0
          ;
          callback = callback || function(){};
          $otherSidebars
            .sidebar('hide', function() {
              callbackCount++;
              if(callbackCount == sidebarCount) {
                callback();
              }
            })
          ;
        },

        toggle: function() {
          module.verbose('Determining toggled direction');
          if(module.is.hidden()) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        pushPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition === 'overlay' || module.othersActive())
              ? $module
              : $pusher,
            animate,
            dim,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(settings.transition == 'scale down') {
            module.scrollToTop();
          }
          module.set.transition(transition);
          module.repaint();
          animate = function() {
            module.bind.clickaway();
            module.add.inlineCSS();
            module.set.animating();
            module.set.visible();
          };
          dim = function() {
            module.set.dimmed();
          };
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.bind.scrollLock();
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
          if(settings.dimPage && !module.othersVisible()) {
            requestAnimationFrame(dim);
          }
        },

        pullPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition == 'overlay' || module.othersActive())
              ? $module
              : $pusher,
            animate,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.verbose('Removing context push state', module.get.direction());

          module.unbind.clickaway();
          module.unbind.scrollLock();

          animate = function() {
            module.set.transition(transition);
            module.set.animating();
            module.remove.visible();
            if(settings.dimPage && !module.othersVisible()) {
              $pusher.removeClass(className.dimmed);
            }
          };
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.remove.transition();
              module.remove.inlineCSS();
              if(transition == 'scale down' || (settings.returnScroll && module.is.mobile()) ) {
                module.scrollBack();
              }
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
        },

        scrollToTop: function() {
          module.verbose('Scrolling to top of page to avoid animation issues');
          currentScroll = $(window).scrollTop();
          $module.scrollTop(0);
          window.scrollTo(0, 0);
        },

        scrollBack: function() {
          module.verbose('Scrolling back to original page position');
          window.scrollTo(0, currentScroll);
        },

        clear: {
          cache: function() {
            module.verbose('Clearing cached dimensions');
            module.cache = {};
          }
        },

        set: {

          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios
          ios: function() {
            $html.addClass(className.ios);
          },

          // container
          pushed: function() {
            $context.addClass(className.pushed);
          },
          pushable: function() {
            $context.addClass(className.pushable);
          },

          // pusher
          dimmed: function() {
            $pusher.addClass(className.dimmed);
          },

          // sidebar
          active: function() {
            $module.addClass(className.active);
          },
          animating: function() {
            $module.addClass(className.animating);
          },
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.addClass(transition);
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.addClass(className[direction]);
          },
          visible: function() {
            $module.addClass(className.visible);
          },
          overlay: function() {
            $module.addClass(className.overlay);
          }
        },
        remove: {

          inlineCSS: function() {
            module.debug('Removing inline css styles', $style);
            if($style && $style.length > 0) {
              $style.remove();
            }
          },

          // ios scroll on html not document
          ios: function() {
            $html.removeClass(className.ios);
          },

          // context
          pushed: function() {
            $context.removeClass(className.pushed);
          },
          pushable: function() {
            $context.removeClass(className.pushable);
          },

          // sidebar
          active: function() {
            $module.removeClass(className.active);
          },
          animating: function() {
            $module.removeClass(className.animating);
          },
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.removeClass(transition);
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.removeClass(className[direction]);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          overlay: function() {
            $module.removeClass(className.overlay);
          }
        },

        get: {
          direction: function() {
            if($module.hasClass(className.top)) {
              return className.top;
            }
            else if($module.hasClass(className.right)) {
              return className.right;
            }
            else if($module.hasClass(className.bottom)) {
              return className.bottom;
            }
            return className.left;
          },
          transition: function() {
            var
              direction = module.get.direction(),
              transition
            ;
            transition = ( module.is.mobile() )
              ? (settings.mobileTransition == 'auto')
                ? settings.defaultTransition.mobile[direction]
                : settings.mobileTransition
              : (settings.transition == 'auto')
                ? settings.defaultTransition.computer[direction]
                : settings.transition
            ;
            module.verbose('Determined transition', transition);
            return transition;
          },
          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          }
        },

        is: {

          ie: function() {
            var
              isIE11 = (!(window.ActiveXObject) && 'ActiveXObject' in window),
              isIE   = ('ActiveXObject' in window)
            ;
            return (isIE11 || isIE);
          },

          ios: function() {
            var
              userAgent      = navigator.userAgent,
              isIOS          = userAgent.match(regExp.ios),
              isMobileChrome = userAgent.match(regExp.mobileChrome)
            ;
            if(isIOS && !isMobileChrome) {
              module.verbose('Browser was found to be iOS', userAgent);
              return true;
            }
            else {
              return false;
            }
          },
          mobile: function() {
            var
              userAgent    = navigator.userAgent,
              isMobile     = userAgent.match(regExp.mobile)
            ;
            if(isMobile) {
              module.verbose('Browser was found to be mobile', userAgent);
              return true;
            }
            else {
              module.verbose('Browser is not mobile, using regular transition', userAgent);
              return false;
            }
          },
          hidden: function() {
            return !module.is.visible();
          },
          visible: function() {
            return $module.hasClass(className.visible);
          },
          // alias
          open: function() {
            return module.is.visible();
          },
          closed: function() {
            return module.is.hidden();
          },
          vertical: function() {
            return $module.hasClass(className.top);
          },
          animating: function() {
            return $context.hasClass(className.animating);
          },
          rtl: function () {
            if(module.cache.rtl === undefined) {
              module.cache.rtl = ($module.css('direction') == 'rtl');
            }
            return module.cache.rtl;
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      }
    ;

    if(methodInvoked) {
      if(instance === undefined) {
        module.initialize();
      }
      module.invoke(query);
    }
    else {
      if(instance !== undefined) {
        module.invoke('destroy');
      }
      module.initialize();
    }
  });

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.sidebar.settings = {

  name              : 'Sidebar',
  namespace         : 'sidebar',

  debug             : false,
  verbose           : false,
  performance       : true,

  transition        : 'auto',
  mobileTransition  : 'auto',

  defaultTransition : {
    computer: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
    },
    mobile: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
    }
  },

  context           : 'body',
  exclusive         : false,
  closable          : true,
  dimPage           : true,
  scrollLock        : false,
  returnScroll      : false,
  delaySetup        : false,

  duration          : 500,

  onChange          : function(){},
  onShow            : function(){},
  onHide            : function(){},

  onHidden          : function(){},
  onVisible         : function(){},

  className         : {
    active    : 'active',
    animating : 'animating',
    dimmed    : 'dimmed',
    ios       : 'ios',
    pushable  : 'pushable',
    pushed    : 'pushed',
    right     : 'right',
    top       : 'top',
    left      : 'left',
    bottom    : 'bottom',
    visible   : 'visible'
  },

  selector: {
    fixed   : '.fixed',
    omitted : 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',
    pusher  : '.pusher',
    sidebar : '.ui.sidebar'
  },

  regExp: {
    ios          : /(iPad|iPhone|iPod)/g,
    mobileChrome : /(CriOS)/g,
    mobile       : /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g
  },

  error   : {
    method       : 'The method you called is not defined.',
    pusher       : 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',
    movedSidebar : 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',
    overlay      : 'The overlay setting is no longer supported, use animation: overlay',
    notFound     : 'There were no elements that matched the specified selector'
  }

};


})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Sticky
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.sticky = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings              = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.sticky.settings, parameters)
          : $.extend({}, $.fn.sticky.settings),

        className             = settings.className,
        namespace             = settings.namespace,
        error                 = settings.error,

        eventNamespace        = '.' + namespace,
        moduleNamespace       = 'module-' + namespace,

        $module               = $(this),
        $window               = $(window),
        $scroll               = $(settings.scrollContext),
        $container,
        $context,

        selector              = $module.selector || '',
        instance              = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); },

        element         = this,
        observer,
        module
      ;

      module      = {

        initialize: function() {

          module.determineContainer();
          module.determineContext();
          module.verbose('Initializing sticky', settings, $container);

          module.save.positions();
          module.checkErrors();
          module.bind.events();

          if(settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance');
          module.reset();
          if(observer) {
            observer.disconnect();
          }
          $window
            .off('load' + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $scroll
            .off('scrollchange' + eventNamespace, module.event.scrollchange)
          ;
          $module.removeData(moduleNamespace);
        },

        observeChanges: function() {
          var
            context = $context[0]
          ;
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                module.verbose('DOM tree modified, updating sticky menu', mutations);
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            observer.observe(context, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        determineContainer: function() {
          $container = $module.offsetParent();
        },

        determineContext: function() {
          if(settings.context) {
            $context = $(settings.context);
          }
          else {
            $context = $container;
          }
          if($context.length === 0) {
            module.error(error.invalidContext, settings.context, $module);
            return;
          }
        },

        checkErrors: function() {
          if( module.is.hidden() ) {
            module.error(error.visible, $module);
          }
          if(module.cache.element.height > module.cache.context.height) {
            module.reset();
            module.error(error.elementSize, $module);
            return;
          }
        },

        bind: {
          events: function() {
            $window
              .on('load' + eventNamespace, module.event.load)
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $scroll
              .off('scroll' + eventNamespace)
              .on('scroll' + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
          }
        },

        event: {
          load: function() {
            module.verbose('Page contents finished loading');
            requestAnimationFrame(module.refresh);
          },
          resize: function() {
            module.verbose('Window resized');
            requestAnimationFrame(module.refresh);
          },
          scroll: function() {
            requestAnimationFrame(function() {
              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop() );
            });
          },
          scrollchange: function(event, scrollPosition) {
            module.stick(scrollPosition);
            settings.onScroll.call(element);
          }
        },

        refresh: function(hardRefresh) {
          module.reset();
          if(!settings.context) {
            module.determineContext();
          }
          if(hardRefresh) {
            module.determineContainer();
          }
          module.save.positions();
          module.stick();
          settings.onReposition.call(element);
        },

        supports: {
          sticky: function() {
            var
              $element = $('<div/>'),
              element = $element[0]
            ;
            $element.addClass(className.supported);
            return($element.css('position').match('sticky'));
          }
        },

        save: {
          lastScroll: function(scroll) {
            module.lastScroll = scroll;
          },
          elementScroll: function(scroll) {
            module.elementScroll = scroll;
          },
          positions: function() {
            var
              scrollContext = {
                height : $scroll.height()
              },
              element = {
                margin: {
                  top    : parseInt($module.css('margin-top'), 10),
                  bottom : parseInt($module.css('margin-bottom'), 10),
                },
                offset : $module.offset(),
                width  : $module.outerWidth(),
                height : $module.outerHeight()
              },
              context = {
                offset : $context.offset(),
                height : $context.outerHeight()
              },
              container = {
                height: $container.outerHeight()
              }
            ;
            if( !module.is.standardScroll() ) {
              module.debug('Non-standard scroll. Removing scroll offset from element offset');

              scrollContext.top  = $scroll.scrollTop();
              scrollContext.left = $scroll.scrollLeft();

              element.offset.top  += scrollContext.top;
              context.offset.top  += scrollContext.top;
              element.offset.left += scrollContext.left;
              context.offset.left += scrollContext.left;
            }
            module.cache = {
              fits : ( element.height < scrollContext.height ),
              scrollContext : {
                height : scrollContext.height
              },
              element: {
                margin : element.margin,
                top    : element.offset.top - element.margin.top,
                left   : element.offset.left,
                width  : element.width,
                height : element.height,
                bottom : element.offset.top + element.height
              },
              context: {
                top           : context.offset.top,
                height        : context.height,
                bottom        : context.offset.top + context.height
              }
            };
            module.set.containerSize();
            module.set.size();
            module.stick();
            module.debug('Caching element positions', module.cache);
          }
        },

        get: {
          direction: function(scroll) {
            var
              direction = 'down'
            ;
            scroll = scroll || $scroll.scrollTop();
            if(module.lastScroll !== undefined) {
              if(module.lastScroll < scroll) {
                direction = 'down';
              }
              else if(module.lastScroll > scroll) {
                direction = 'up';
              }
            }
            return direction;
          },
          scrollChange: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            return (module.lastScroll)
              ? (scroll - module.lastScroll)
              : 0
            ;
          },
          currentElementScroll: function() {
            if(module.elementScroll) {
              return module.elementScroll;
            }
            return ( module.is.top() )
              ? Math.abs(parseInt($module.css('top'), 10))    || 0
              : Math.abs(parseInt($module.css('bottom'), 10)) || 0
            ;
          },

          elementScroll: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            var
              element        = module.cache.element,
              scrollContext  = module.cache.scrollContext,
              delta          = module.get.scrollChange(scroll),
              maxScroll      = (element.height - scrollContext.height + settings.offset),
              elementScroll  = module.get.currentElementScroll(),
              possibleScroll = (elementScroll + delta)
            ;
            if(module.cache.fits || possibleScroll < 0) {
              elementScroll = 0;
            }
            else if(possibleScroll > maxScroll ) {
              elementScroll = maxScroll;
            }
            else {
              elementScroll = possibleScroll;
            }
            return elementScroll;
          }
        },

        remove: {
          lastScroll: function() {
            delete module.lastScroll;
          },
          elementScroll: function(scroll) {
            delete module.elementScroll;
          },
          offset: function() {
            $module.css('margin-top', '');
          }
        },

        set: {
          offset: function() {
            module.verbose('Setting offset on element', settings.offset);
            $module
              .css('margin-top', settings.offset)
            ;
          },
          containerSize: function() {
            var
              tagName = $container.get(0).tagName
            ;
            if(tagName === 'HTML' || tagName == 'body') {
              // this can trigger for too many reasons
              //module.error(error.container, tagName, $module);
              module.determineContainer();
            }
            else {
              if( Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {
                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);
                $container.css({
                  height: module.cache.context.height
                });
              }
            }
          },
          minimumSize: function() {
            var
              element   = module.cache.element
            ;
            $container
              .css('min-height', element.height)
            ;
          },
          scroll: function(scroll) {
            module.debug('Setting scroll on element', scroll);
            if(module.elementScroll == scroll) {
              return;
            }
            if( module.is.top() ) {
              $module
                .css('bottom', '')
                .css('top', -scroll)
              ;
            }
            if( module.is.bottom() ) {
              $module
                .css('top', '')
                .css('bottom', scroll)
              ;
            }
          },
          size: function() {
            if(module.cache.element.height !== 0 && module.cache.element.width !== 0) {
              element.style.setProperty('width',  module.cache.element.width  + 'px', 'important');
              element.style.setProperty('height', module.cache.element.height + 'px', 'important');
            }
          }
        },

        is: {
          standardScroll: function() {
            return ($scroll[0] == window);
          },
          top: function() {
            return $module.hasClass(className.top);
          },
          bottom: function() {
            return $module.hasClass(className.bottom);
          },
          initialPosition: function() {
            return (!module.is.fixed() && !module.is.bound());
          },
          hidden: function() {
            return (!$module.is(':visible'));
          },
          bound: function() {
            return $module.hasClass(className.bound);
          },
          fixed: function() {
            return $module.hasClass(className.fixed);
          }
        },

        stick: function(scroll) {
          var
            cachedPosition = scroll || $scroll.scrollTop(),
            cache          = module.cache,
            fits           = cache.fits,
            element        = cache.element,
            scrollContext  = cache.scrollContext,
            context        = cache.context,
            offset         = (module.is.bottom() && settings.pushing)
              ? settings.bottomOffset
              : settings.offset,
            scroll         = {
              top    : cachedPosition + offset,
              bottom : cachedPosition + offset + scrollContext.height
            },
            direction      = module.get.direction(scroll.top),
            elementScroll  = (fits)
              ? 0
              : module.get.elementScroll(scroll.top),

            // shorthand
            doesntFit      = !fits,
            elementVisible = (element.height !== 0)
          ;

          if(elementVisible) {

            if( module.is.initialPosition() ) {
              if(scroll.top >= context.bottom) {
                module.debug('Initial element position is bottom of container');
                module.bindBottom();
              }
              else if(scroll.top > element.top) {
                if( (element.height + scroll.top - elementScroll) >= context.bottom ) {
                  module.debug('Initial element position is bottom of container');
                  module.bindBottom();
                }
                else {
                  module.debug('Initial element position is fixed');
                  module.fixTop();
                }
              }

            }
            else if( module.is.fixed() ) {

              // currently fixed top
              if( module.is.top() ) {
                if( scroll.top <= element.top ) {
                  module.debug('Fixed element reached top of container');
                  module.setInitialPosition();
                }
                else if( (element.height + scroll.top - elementScroll) >= context.bottom ) {
                  module.debug('Fixed element reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                  module.save.lastScroll(scroll.top);
                  module.save.elementScroll(elementScroll);
                }
              }

              // currently fixed bottom
              else if(module.is.bottom() ) {

                // top edge
                if( (scroll.bottom - element.height) <= element.top) {
                  module.debug('Bottom fixed rail has reached top of container');
                  module.setInitialPosition();
                }
                // bottom edge
                else if(scroll.bottom >= context.bottom) {
                  module.debug('Bottom fixed rail has reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                  module.save.lastScroll(scroll.top);
                  module.save.elementScroll(elementScroll);
                }

              }
            }
            else if( module.is.bottom() ) {
              if( scroll.top <= element.top ) {
                module.debug('Jumped from bottom fixed to top fixed, most likely used home/end button');
                module.setInitialPosition();
              }
              else {
                if(settings.pushing) {
                  if(module.is.bound() && scroll.bottom <= context.bottom ) {
                    module.debug('Fixing bottom attached element to bottom of browser.');
                    module.fixBottom();
                  }
                }
                else {
                  if(module.is.bound() && (scroll.top <= context.bottom - element.height) ) {
                    module.debug('Fixing bottom attached element to top of browser.');
                    module.fixTop();
                  }
                }
              }
            }
          }
        },

        bindTop: function() {
          module.debug('Binding element to top of parent container');
          module.remove.offset();
          $module
            .css({
              left         : '',
              top          : '',
              marginBottom : ''
            })
            .removeClass(className.fixed)
            .removeClass(className.bottom)
            .addClass(className.bound)
            .addClass(className.top)
          ;
          settings.onTop.call(element);
          settings.onUnstick.call(element);
        },
        bindBottom: function() {
          module.debug('Binding element to bottom of parent container');
          module.remove.offset();
          $module
            .css({
              left         : '',
              top          : ''
            })
            .removeClass(className.fixed)
            .removeClass(className.top)
            .addClass(className.bound)
            .addClass(className.bottom)
          ;
          settings.onBottom.call(element);
          settings.onUnstick.call(element);
        },

        setInitialPosition: function() {
          module.debug('Returning to initial position');
          module.unfix();
          module.unbind();
        },


        fixTop: function() {
          module.debug('Fixing element to top of page');
          module.set.minimumSize();
          module.set.offset();
          $module
            .css({
              left         : module.cache.element.left,
              bottom       : '',
              marginBottom : ''
            })
            .removeClass(className.bound)
            .removeClass(className.bottom)
            .addClass(className.fixed)
            .addClass(className.top)
          ;
          settings.onStick.call(element);
        },

        fixBottom: function() {
          module.debug('Sticking element to bottom of page');
          module.set.minimumSize();
          module.set.offset();
          $module
            .css({
              left         : module.cache.element.left,
              bottom       : '',
              marginBottom : ''
            })
            .removeClass(className.bound)
            .removeClass(className.top)
            .addClass(className.fixed)
            .addClass(className.bottom)
          ;
          settings.onStick.call(element);
        },

        unbind: function() {
          if( module.is.bound() ) {
            module.debug('Removing container bound position on element');
            module.remove.offset();
            $module
              .removeClass(className.bound)
              .removeClass(className.top)
              .removeClass(className.bottom)
            ;
          }
        },

        unfix: function() {
          if( module.is.fixed() ) {
            module.debug('Removing fixed position on element');
            module.remove.offset();
            $module
              .removeClass(className.fixed)
              .removeClass(className.top)
              .removeClass(className.bottom)
            ;
            settings.onUnstick.call(element);
          }
        },

        reset: function() {
          module.debug('Reseting elements position');
          module.unbind();
          module.unfix();
          module.resetCSS();
          module.remove.offset();
          module.remove.lastScroll();
        },

        resetCSS: function() {
          $module
            .css({
              width  : '',
              height : ''
            })
          ;
          $container
            .css({
              height: ''
            })
          ;
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 0);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.sticky.settings = {

  name           : 'Sticky',
  namespace      : 'sticky',

  debug          : false,
  verbose        : true,
  performance    : true,

  // whether to stick in the opposite direction on scroll up
  pushing        : false,

  context        : false,

  // Context to watch scroll events
  scrollContext  : window,

  // Offset to adjust scroll
  offset         : 0,

  // Offset to adjust scroll when attached to bottom of screen
  bottomOffset   : 0,

  jitter         : 5, // will only set container height if difference between context and container is larger than this number

  // Whether to automatically observe changes with Mutation Observers
  observeChanges : false,

  // Called when position is recalculated
  onReposition   : function(){},

  // Called on each scroll
  onScroll       : function(){},

  // Called when element is stuck to viewport
  onStick        : function(){},

  // Called when element is unstuck from viewport
  onUnstick      : function(){},

  // Called when element reaches top of context
  onTop          : function(){},

  // Called when element reaches bottom of context
  onBottom       : function(){},

  error         : {
    container      : 'Sticky element must be inside a relative container',
    visible        : 'Element is hidden, you must call refresh after element becomes visible',
    method         : 'The method you called is not defined.',
    invalidContext : 'Context specified does not exist',
    elementSize    : 'Sticky element is larger than its container, cannot create sticky.'
  },

  className : {
    bound     : 'bound',
    fixed     : 'fixed',
    supported : 'native',
    top       : 'top',
    bottom    : 'bottom'
  }

};

})( jQuery, window, document );
/*!
 * # Semantic UI 2.1.8 - Tab
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.tab = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),

    moduleSelector  = $allModules.selector || '',
    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    initializedHistory = false,
    returnedValue
  ;

  $allModules
    .each(function() {
      var

        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.tab.settings, parameters)
          : $.extend({}, $.fn.tab.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + settings.namespace,
        moduleNamespace = 'module-' + settings.namespace,

        $module         = $(this),
        $context,
        $tabs,

        cache           = {},
        firstLoad       = true,
        recursionDepth  = 0,
        element         = this,
        instance        = $module.data(moduleNamespace),

        activeTabPath,
        parameterArray,
        module,

        historyEvent

      ;

      module = {

        initialize: function() {
          module.debug('Initializing tab menu item', $module);
          module.fix.callbacks();
          module.determineTabs();

          module.debug('Determining tabs', settings.context, $tabs);
          // set up automatic routing
          if(settings.auto) {
            module.set.auto();
          }
          module.bind.events();

          if(settings.history && !initializedHistory) {
            module.initializeHistory();
            initializedHistory = true;
          }

          module.instantiate();
        },

        instantiate: function () {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.debug('Destroying tabs', $module);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        bind: {
          events: function() {
            // if using $.tab don't add events
            if( !$.isWindow( element ) ) {
              module.debug('Attaching tab activation events to element', $module);
              $module
                .on('click' + eventNamespace, module.event.click)
              ;
            }
          }
        },

        determineTabs: function() {
          var
            $reference
          ;

          // determine tab context
          if(settings.context === 'parent') {
            if($module.closest(selector.ui).length > 0) {
              $reference = $module.closest(selector.ui);
              module.verbose('Using closest UI element as parent', $reference);
            }
            else {
              $reference = $module;
            }
            $context = $reference.parent();
            module.verbose('Determined parent element for creating context', $context);
          }
          else if(settings.context) {
            $context = $(settings.context);
            module.verbose('Using selector for tab context', settings.context, $context);
          }
          else {
            $context = $('body');
          }
          // find tabs
          if(settings.childrenOnly) {
            $tabs = $context.children(selector.tabs);
            module.debug('Searching tab context children for tabs', $context, $tabs);
          }
          else {
            $tabs = $context.find(selector.tabs);
            module.debug('Searching tab context for tabs', $context, $tabs);
          }
        },

        fix: {
          callbacks: function() {
            if( $.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit) ) {
              if(parameters.onTabLoad) {
                parameters.onLoad = parameters.onTabLoad;
                delete parameters.onTabLoad;
                module.error(error.legacyLoad, parameters.onLoad);
              }
              if(parameters.onTabInit) {
                parameters.onFirstLoad = parameters.onTabInit;
                delete parameters.onTabInit;
                module.error(error.legacyInit, parameters.onFirstLoad);
              }
              settings = $.extend(true, {}, $.fn.tab.settings, parameters);
            }
          }
        },

        initializeHistory: function() {
          module.debug('Initializing page state');
          if( $.address === undefined ) {
            module.error(error.state);
            return false;
          }
          else {
            if(settings.historyType == 'state') {
              module.debug('Using HTML5 to manage state');
              if(settings.path !== false) {
                $.address
                  .history(true)
                  .state(settings.path)
                ;
              }
              else {
                module.error(error.path);
                return false;
              }
            }
            $.address
              .bind('change', module.event.history.change)
            ;
          }
        },

        event: {
          click: function(event) {
            var
              tabPath = $(this).data(metadata.tab)
            ;
            if(tabPath !== undefined) {
              if(settings.history) {
                module.verbose('Updating page state', event);
                $.address.value(tabPath);
              }
              else {
                module.verbose('Changing tab', event);
                module.changeTab(tabPath);
              }
              event.preventDefault();
            }
            else {
              module.debug('No tab specified');
            }
          },
          history: {
            change: function(event) {
              var
                tabPath   = event.pathNames.join('/') || module.get.initialPath(),
                pageTitle = settings.templates.determineTitle(tabPath) || false
              ;
              module.performance.display();
              module.debug('History change event', tabPath, event);
              historyEvent = event;
              if(tabPath !== undefined) {
                module.changeTab(tabPath);
              }
              if(pageTitle) {
                $.address.title(pageTitle);
              }
            }
          }
        },

        refresh: function() {
          if(activeTabPath) {
            module.debug('Refreshing tab', activeTabPath);
            module.changeTab(activeTabPath);
          }
        },

        cache: {

          read: function(cacheKey) {
            return (cacheKey !== undefined)
              ? cache[cacheKey]
              : false
            ;
          },
          add: function(cacheKey, content) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Adding cached content for', cacheKey);
            cache[cacheKey] = content;
          },
          remove: function(cacheKey) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Removing cached content for', cacheKey);
            delete cache[cacheKey];
          }
        },

        set: {
          auto: function() {
            var
              url = (typeof settings.path == 'string')
                ? settings.path.replace(/\/$/, '') + '/{$tab}'
                : '/{$tab}'
            ;
            module.verbose('Setting up automatic tab retrieval from server', url);
            if($.isPlainObject(settings.apiSettings)) {
              settings.apiSettings.url = url;
            }
            else {
              settings.apiSettings = {
                url: url
              };
            }
          },
          loading: function(tabPath) {
            var
              $tab      = module.get.tabElement(tabPath),
              isLoading = $tab.hasClass(className.loading)
            ;
            if(!isLoading) {
              module.verbose('Setting loading state for', $tab);
              $tab
                .addClass(className.loading)
                .siblings($tabs)
                  .removeClass(className.active + ' ' + className.loading)
              ;
              if($tab.length > 0) {
                settings.onRequest.call($tab[0], tabPath);
              }
            }
          },
          state: function(state) {
            $.address.value(state);
          }
        },

        changeTab: function(tabPath) {
          var
            pushStateAvailable = (window.history && window.history.pushState),
            shouldIgnoreLoad   = (pushStateAvailable && settings.ignoreFirstLoad && firstLoad),
            remoteContent      = (settings.auto || $.isPlainObject(settings.apiSettings) ),
            // only add default path if not remote content
            pathArray = (remoteContent && !shouldIgnoreLoad)
              ? module.utilities.pathToArray(tabPath)
              : module.get.defaultPathArray(tabPath)
          ;
          tabPath = module.utilities.arrayToPath(pathArray);
          $.each(pathArray, function(index, tab) {
            var
              currentPathArray   = pathArray.slice(0, index + 1),
              currentPath        = module.utilities.arrayToPath(currentPathArray),

              isTab              = module.is.tab(currentPath),
              isLastIndex        = (index + 1 == pathArray.length),

              $tab               = module.get.tabElement(currentPath),
              $anchor,
              nextPathArray,
              nextPath,
              isLastTab
            ;
            module.verbose('Looking for tab', tab);
            if(isTab) {
              module.verbose('Tab was found', tab);
              // scope up
              activeTabPath  = currentPath;
              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);

              if(isLastIndex) {
                isLastTab = true;
              }
              else {
                nextPathArray = pathArray.slice(0, index + 2);
                nextPath      = module.utilities.arrayToPath(nextPathArray);
                isLastTab     = ( !module.is.tab(nextPath) );
                if(isLastTab) {
                  module.verbose('Tab parameters found', nextPathArray);
                }
              }
              if(isLastTab && remoteContent) {
                if(!shouldIgnoreLoad) {
                  module.activate.navigation(currentPath);
                  module.fetch.content(currentPath, tabPath);
                }
                else {
                  module.debug('Ignoring remote content on first tab load', currentPath);
                  firstLoad = false;
                  module.cache.add(tabPath, $tab.html());
                  module.activate.all(currentPath);
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                return false;
              }
              else {
                module.debug('Opened local tab', currentPath);
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
              }

            }
            else if(tabPath.search('/') == -1 && tabPath !== '') {
              // look for in page anchor
              $anchor     = $('#' + tabPath + ', a[name="' + tabPath + '"]');
              currentPath = $anchor.closest('[data-tab]').data(metadata.tab);
              $tab        = module.get.tabElement(currentPath);
              // if anchor exists use parent tab
              if($anchor && $anchor.length > 0 && currentPath) {
                module.debug('Anchor link used, opening parent tab', $tab, $anchor);
                if( !$tab.hasClass(className.active) ) {
                  setTimeout(function() {
                    module.scrollTo($anchor);
                  }, 0);
                }
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                return false;
              }
            }
            else {
              module.error(error.missingTab, $module, $context, currentPath);
              return false;
            }
          });
        },

        scrollTo: function($element) {
          var
            scrollOffset = ($element && $element.length > 0)
              ? $element.offset().top
              : false
          ;
          if(scrollOffset !== false) {
            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);
            $(document).scrollTop(scrollOffset);
          }
        },

        update: {
          content: function(tabPath, html, evaluateScripts) {
            var
              $tab = module.get.tabElement(tabPath),
              tab  = $tab[0]
            ;
            evaluateScripts = (evaluateScripts !== undefined)
              ? evaluateScripts
              : settings.evaluateScripts
            ;
            if(evaluateScripts) {
              module.debug('Updating HTML and evaluating inline scripts', tabPath, html);
              $tab.html(html);
            }
            else {
              module.debug('Updating HTML', tabPath, html);
              tab.innerHTML = html;
            }
          }
        },

        fetch: {

          content: function(tabPath, fullTabPath) {
            var
              $tab        = module.get.tabElement(tabPath),
              apiSettings = {
                dataType         : 'html',
                encodeParameters : false,
                on               : 'now',
                cache            : settings.alwaysRefresh,
                headers          : {
                  'X-Remote': true
                },
                onSuccess : function(response) {
                  module.cache.add(fullTabPath, response);
                  module.update.content(tabPath, response);
                  if(tabPath == activeTabPath) {
                    module.debug('Content loaded', tabPath);
                    module.activate.tab(tabPath);
                  }
                  else {
                    module.debug('Content loaded in background', tabPath);
                  }
                  settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);
                  settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);
                },
                urlData: {
                  tab: fullTabPath
                }
              },
              request         = $tab.api('get request') || false,
              existingRequest = ( request && request.state() === 'pending' ),
              requestSettings,
              cachedContent
            ;

            fullTabPath   = fullTabPath || tabPath;
            cachedContent = module.cache.read(fullTabPath);


            if(settings.cache && cachedContent) {
              module.activate.tab(tabPath);
              module.debug('Adding cached content', fullTabPath);
              if(settings.evaluateScripts == 'once') {
                module.update.content(tabPath, cachedContent, false);
              }
              else {
                module.update.content(tabPath, cachedContent);
              }
              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);
            }
            else if(existingRequest) {
              module.set.loading(tabPath);
              module.debug('Content is already loading', fullTabPath);
            }
            else if($.api !== undefined) {
              requestSettings = $.extend(true, {}, settings.apiSettings, apiSettings);
              module.debug('Retrieving remote content', fullTabPath, requestSettings);
              module.set.loading(tabPath);
              $tab.api(requestSettings);
            }
            else {
              module.error(error.api);
            }
          }
        },

        activate: {
          all: function(tabPath) {
            module.activate.tab(tabPath);
            module.activate.navigation(tabPath);
          },
          tab: function(tabPath) {
            var
              $tab     = module.get.tabElement(tabPath),
              isActive = $tab.hasClass(className.active)
            ;
            module.verbose('Showing tab content for', $tab);
            if(!isActive) {
              $tab
                .addClass(className.active)
                .siblings($tabs)
                  .removeClass(className.active + ' ' + className.loading)
              ;
              if($tab.length > 0) {
                settings.onVisible.call($tab[0], tabPath);
              }
            }
          },
          navigation: function(tabPath) {
            var
              $navigation = module.get.navElement(tabPath),
              isActive    = $navigation.hasClass(className.active)
            ;
            module.verbose('Activating tab navigation for', $navigation, tabPath);
            if(!isActive) {
              $navigation
                .addClass(className.active)
                .siblings($allModules)
                  .removeClass(className.active + ' ' + className.loading)
              ;
            }
          }
        },

        deactivate: {
          all: function() {
            module.deactivate.navigation();
            module.deactivate.tabs();
          },
          navigation: function() {
            $allModules
              .removeClass(className.active)
            ;
          },
          tabs: function() {
            $tabs
              .removeClass(className.active + ' ' + className.loading)
            ;
          }
        },

        is: {
          tab: function(tabName) {
            return (tabName !== undefined)
              ? ( module.get.tabElement(tabName).length > 0 )
              : false
            ;
          }
        },

        get: {
          initialPath: function() {
            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);
          },
          path: function() {
            return $.address.value();
          },
          // adds default tabs to tab path
          defaultPathArray: function(tabPath) {
            return module.utilities.pathToArray( module.get.defaultPath(tabPath) );
          },
          defaultPath: function(tabPath) {
            var
              $defaultNav = $allModules.filter('[data-' + metadata.tab + '^="' + tabPath + '/"]').eq(0),
              defaultTab  = $defaultNav.data(metadata.tab) || false
            ;
            if( defaultTab ) {
              module.debug('Found default tab', defaultTab);
              if(recursionDepth < settings.maxDepth) {
                recursionDepth++;
                return module.get.defaultPath(defaultTab);
              }
              module.error(error.recursion);
            }
            else {
              module.debug('No default tabs found for', tabPath, $tabs);
            }
            recursionDepth = 0;
            return tabPath;
          },
          navElement: function(tabPath) {
            tabPath = tabPath || activeTabPath;
            return $allModules.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
          },
          tabElement: function(tabPath) {
            var
              $fullPathTab,
              $simplePathTab,
              tabPathArray,
              lastTab
            ;
            tabPath        = tabPath || activeTabPath;
            tabPathArray   = module.utilities.pathToArray(tabPath);
            lastTab        = module.utilities.last(tabPathArray);
            $fullPathTab   = $tabs.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '="' + lastTab + '"]');
            return ($fullPathTab.length > 0)
              ? $fullPathTab
              : $simplePathTab
            ;
          },
          tab: function() {
            return activeTabPath;
          }
        },

        utilities: {
          filterArray: function(keepArray, removeArray) {
            return $.grep(keepArray, function(keepValue) {
              return ( $.inArray(keepValue, removeArray) == -1);
            });
          },
          last: function(array) {
            return $.isArray(array)
              ? array[ array.length - 1]
              : false
            ;
          },
          pathToArray: function(pathName) {
            if(pathName === undefined) {
              pathName = activeTabPath;
            }
            return typeof pathName == 'string'
              ? pathName.split('/')
              : [pathName]
            ;
          },
          arrayToPath: function(pathArray) {
            return $.isArray(pathArray)
              ? pathArray.join('/')
              : false
            ;
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;

};

// shortcut for tabbed content with no defined navigation
$.tab = function() {
  $(window).tab.apply(this, arguments);
};

$.fn.tab.settings = {

  name            : 'Tab',
  namespace       : 'tab',

  debug           : false,
  verbose         : false,
  performance     : true,

  auto            : false,  // uses pjax style endpoints fetching content from same url with remote-content headers
  history         : false,  // use browser history
  historyType     : 'hash', // #/ or html5 state
  path            : false,  // base path of url

  context         : false,  // specify a context that tabs must appear inside
  childrenOnly    : false,  // use only tabs that are children of context
  maxDepth        : 25,     // max depth a tab can be nested

  alwaysRefresh   : false,  // load tab content new every tab click
  cache           : true,   // cache the content requests to pull locally
  ignoreFirstLoad : false,  // don't load remote content on first load

  apiSettings     : false,  // settings for api call
  evaluateScripts : 'once', // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content

  onFirstLoad : function(tabPath, parameterArray, historyEvent) {}, // called first time loaded
  onLoad      : function(tabPath, parameterArray, historyEvent) {}, // called on every load
  onVisible   : function(tabPath, parameterArray, historyEvent) {}, // called every time tab visible
  onRequest   : function(tabPath, parameterArray, historyEvent) {}, // called ever time a tab beings loading remote content

  templates    : {
    determineTitle: function(tabArray) {} // returns page title for path
  },

  error: {
    api        : 'You attempted to load content without API module',
    method     : 'The method you called is not defined',
    missingTab : 'Activated tab cannot be found. Tabs are case-sensitive.',
    noContent  : 'The tab you specified is missing a content url.',
    path       : 'History enabled, but no path was specified',
    recursion  : 'Max recursive depth reached',
    legacyInit : 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',
    legacyLoad : 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',
    state      : 'History requires Asual\'s Address library <https://github.com/asual/jquery-address>'
  },

  metadata : {
    tab    : 'tab',
    loaded : 'loaded',
    promise: 'promise'
  },

  className   : {
    loading : 'loading',
    active  : 'active'
  },

  selector    : {
    tabs : '.ui.tab',
    ui   : '.ui'
  }

};

})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Transition
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.transition = function() {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    moduleArguments = arguments,
    query           = moduleArguments[0],
    queryArguments  = [].slice.call(arguments, 1),
    methodInvoked   = (typeof query === 'string'),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;
  $allModules
    .each(function(index) {
      var
        $module  = $(this),
        element  = this,

        // set at run time
        settings,
        instance,

        error,
        className,
        metadata,
        animationEnd,
        animationName,

        namespace,
        moduleNamespace,
        eventNamespace,
        module
      ;

      module = {

        initialize: function() {

          // get full settings
          settings        = module.get.settings.apply(element, moduleArguments);

          // shorthand
          className       = settings.className;
          error           = settings.error;
          metadata        = settings.metadata;

          // define namespace
          eventNamespace  = '.' + settings.namespace;
          moduleNamespace = 'module-' + settings.namespace;
          instance        = $module.data(moduleNamespace) || module;

          // get vendor specific events
          animationEnd    = module.get.animationEndEvent();

          if(methodInvoked) {
            methodInvoked = module.invoke(query);
          }

          // method not invoked, lets run an animation
          if(methodInvoked === false) {
            module.verbose('Converted arguments into settings object', settings);
            if(settings.interval) {
              module.delay(settings.animate);
            }
            else  {
              module.animate();
            }
            module.instantiate();
          }
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing display type on next animation');
          delete module.displayType;
        },

        forceRepaint: function() {
          module.verbose('Forcing element repaint');
          var
            $parentElement = $module.parent(),
            $nextElement = $module.next()
          ;
          if($nextElement.length === 0) {
            $module.detach().appendTo($parentElement);
          }
          else {
            $module.detach().insertBefore($nextElement);
          }
        },

        repaint: function() {
          module.verbose('Repainting element');
          var
            fakeAssignment = element.offsetWidth
          ;
        },

        delay: function(interval) {
          var
            direction = module.get.animationDirection(),
            shouldReverse,
            delay
          ;
          if(!direction) {
            direction = module.can.transition()
              ? module.get.direction()
              : 'static'
            ;
          }
          interval = (interval !== undefined)
            ? interval
            : settings.interval
          ;
          shouldReverse = (settings.reverse == 'auto' && direction == className.outward);
          delay = (shouldReverse || settings.reverse == true)
            ? ($allModules.length - index) * settings.interval
            : index * settings.interval
          ;
          module.debug('Delaying animation by', delay);
          setTimeout(module.animate, delay);
        },

        animate: function(overrideSettings) {
          settings = overrideSettings || settings;
          if(!module.is.supported()) {
            module.error(error.support);
            return false;
          }
          module.debug('Preparing animation', settings.animation);
          if(module.is.animating()) {
            if(settings.queue) {
              if(!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {
                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);
              }
              else {
                module.queue(settings.animation);
              }
              return false;
            }
            else if(!settings.allowRepeats && module.is.occurring()) {
              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);
              return false;
            }
            else {
              module.debug('New animation started, completing previous early', settings.animation);
              instance.complete();
            }
          }
          if( module.can.animate() ) {
            module.set.animating(settings.animation);
          }
          else {
            module.error(error.noAnimation, settings.animation, element);
          }
        },

        reset: function() {
          module.debug('Resetting animation to beginning conditions');
          module.remove.animationCallbacks();
          module.restore.conditions();
          module.remove.animating();
        },

        queue: function(animation) {
          module.debug('Queueing animation of', animation);
          module.queuing = true;
          $module
            .one(animationEnd + '.queue' + eventNamespace, function() {
              module.queuing = false;
              module.repaint();
              module.animate.apply(this, settings);
            })
          ;
        },

        complete: function (event) {
          module.debug('Animation complete', settings.animation);
          module.remove.completeCallback();
          module.remove.failSafe();
          if(!module.is.looping()) {
            if( module.is.outward() ) {
              module.verbose('Animation is outward, hiding element');
              module.restore.conditions();
              module.hide();
            }
            else if( module.is.inward() ) {
              module.verbose('Animation is outward, showing element');
              module.restore.conditions();
              module.show();
            }
            else {
              module.verbose('Static animation completed');
              module.restore.conditions();
              settings.onComplete.call(element);
            }
          }
        },

        force: {
          visible: function() {
            var
              style          = $module.attr('style'),
              userStyle      = module.get.userStyle(),
              displayType    = module.get.displayType(),
              overrideStyle  = userStyle + 'display: ' + displayType + ' !important;',
              currentDisplay = $module.css('display'),
              emptyStyle     = (style === undefined || style === '')
            ;
            if(currentDisplay !== displayType) {
              module.verbose('Overriding default display to show element', displayType);
              $module
                .attr('style', overrideStyle)
              ;
            }
            else if(emptyStyle) {
              $module.removeAttr('style');
            }
          },
          hidden: function() {
            var
              style          = $module.attr('style'),
              currentDisplay = $module.css('display'),
              emptyStyle     = (style === undefined || style === '')
            ;
            if(currentDisplay !== 'none' && !module.is.hidden()) {
              module.verbose('Overriding default display to hide element');
              $module
                .css('display', 'none')
              ;
            }
            else if(emptyStyle) {
              $module
                .removeAttr('style')
              ;
            }
          }
        },

        has: {
          direction: function(animation) {
            var
              hasDirection = false
            ;
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function(index, word){
                if(word === className.inward || word === className.outward) {
                  hasDirection = true;
                }
              });
            }
            return hasDirection;
          },
          inlineDisplay: function() {
            var
              style = $module.attr('style') || ''
            ;
            return $.isArray(style.match(/display.*?;/, ''));
          }
        },

        set: {
          animating: function(animation) {
            var
              animationClass,
              direction
            ;
            // remove previous callbacks
            module.remove.completeCallback();

            // determine exact animation
            animation      = animation || settings.animation;
            animationClass = module.get.animationClass(animation);

            // save animation class in cache to restore class names
            module.save.animation(animationClass);

            // override display if necessary so animation appears visibly
            module.force.visible();

            module.remove.hidden();
            module.remove.direction();

            module.start.animation(animationClass);

          },
          duration: function(animationName, duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            if(duration || duration === 0) {
              module.verbose('Setting animation duration', duration);
              $module
                .css({
                  'animation-duration':  duration
                })
              ;
            }
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            if(direction == className.inward) {
              module.set.inward();
            }
            else {
              module.set.outward();
            }
          },
          looping: function() {
            module.debug('Transition set to loop');
            $module
              .addClass(className.looping)
            ;
          },
          hidden: function() {
            $module
              .addClass(className.transition)
              .addClass(className.hidden)
            ;
          },
          inward: function() {
            module.debug('Setting direction to inward');
            $module
              .removeClass(className.outward)
              .addClass(className.inward)
            ;
          },
          outward: function() {
            module.debug('Setting direction to outward');
            $module
              .removeClass(className.inward)
              .addClass(className.outward)
            ;
          },
          visible: function() {
            $module
              .addClass(className.transition)
              .addClass(className.visible)
            ;
          }
        },

        start: {
          animation: function(animationClass) {
            animationClass = animationClass || module.get.animationClass();
            module.debug('Starting tween', animationClass);
            $module
              .addClass(animationClass)
              .one(animationEnd + '.complete' + eventNamespace, module.complete)
            ;
            if(settings.useFailSafe) {
              module.add.failSafe();
            }
            module.set.duration(settings.duration);
            settings.onStart.call(element);
          }
        },

        save: {
          animation: function(animation) {
            if(!module.cache) {
              module.cache = {};
            }
            module.cache.animation = animation;
          },
          displayType: function(displayType) {
            if(displayType !== 'none') {
              $module.data(metadata.displayType, displayType);
            }
          },
          transitionExists: function(animation, exists) {
            $.fn.transition.exists[animation] = exists;
            module.verbose('Saving existence of transition', animation, exists);
          }
        },

        restore: {
          conditions: function() {
            var
              animation = module.get.currentAnimation()
            ;
            if(animation) {
              $module
                .removeClass(animation)
              ;
              module.verbose('Removing animation class', module.cache);
            }
            module.remove.duration();
          }
        },

        add: {
          failSafe: function() {
            var
              duration = module.get.duration()
            ;
            module.timer = setTimeout(function() {
              $module.triggerHandler(animationEnd);
            }, duration + settings.failSafeDelay);
            module.verbose('Adding fail safe timer', module.timer);
          }
        },

        remove: {
          animating: function() {
            $module.removeClass(className.animating);
          },
          animationCallbacks: function() {
            module.remove.queueCallback();
            module.remove.completeCallback();
          },
          queueCallback: function() {
            $module.off('.queue' + eventNamespace);
          },
          completeCallback: function() {
            $module.off('.complete' + eventNamespace);
          },
          display: function() {
            $module.css('display', '');
          },
          direction: function() {
            $module
              .removeClass(className.inward)
              .removeClass(className.outward)
            ;
          },
          duration: function() {
            $module
              .css('animation-duration', '')
            ;
          },
          failSafe: function() {
            module.verbose('Removing fail safe timer', module.timer);
            if(module.timer) {
              clearTimeout(module.timer);
            }
          },
          hidden: function() {
            $module.removeClass(className.hidden);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          looping: function() {
            module.debug('Transitions are no longer looping');
            if( module.is.looping() ) {
              module.reset();
              $module
                .removeClass(className.looping)
              ;
            }
          },
          transition: function() {
            $module
              .removeClass(className.visible)
              .removeClass(className.hidden)
            ;
          }
        },
        get: {
          settings: function(animation, duration, onComplete) {
            // single settings object
            if(typeof animation == 'object') {
              return $.extend(true, {}, $.fn.transition.settings, animation);
            }
            // all arguments provided
            else if(typeof onComplete == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation  : animation,
                onComplete : onComplete,
                duration   : duration
              });
            }
            // only duration provided
            else if(typeof duration == 'string' || typeof duration == 'number') {
              return $.extend({}, $.fn.transition.settings, {
                animation : animation,
                duration  : duration
              });
            }
            // duration is actually settings object
            else if(typeof duration == 'object') {
              return $.extend({}, $.fn.transition.settings, duration, {
                animation : animation
              });
            }
            // duration is actually callback
            else if(typeof duration == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation  : animation,
                onComplete : duration
              });
            }
            // only animation provided
            else {
              return $.extend({}, $.fn.transition.settings, {
                animation : animation
              });
            }
            return $.fn.transition.settings;
          },
          animationClass: function(animation) {
            var
              animationClass = animation || settings.animation,
              directionClass = (module.can.transition() && !module.has.direction())
                ? module.get.direction() + ' '
                : ''
            ;
            return className.animating + ' '
              + className.transition + ' '
              + directionClass
              + animationClass
            ;
          },
          currentAnimation: function() {
            return (module.cache && module.cache.animation !== undefined)
              ? module.cache.animation
              : false
            ;
          },
          currentDirection: function() {
            return module.is.inward()
              ? className.inward
              : className.outward
            ;
          },
          direction: function() {
            return module.is.hidden() || !module.is.visible()
              ? className.inward
              : className.outward
            ;
          },
          animationDirection: function(animation) {
            var
              direction
            ;
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              // search animation name for out/in class
              $.each(animation, function(index, word){
                if(word === className.inward) {
                  direction = className.inward;
                }
                else if(word === className.outward) {
                  direction = className.outward;
                }
              });
            }
            // return found direction
            if(direction) {
              return direction;
            }
            return false;
          },
          duration: function(duration) {
            duration = duration || settings.duration;
            if(duration === false) {
              duration = $module.css('animation-duration') || 0;
            }
            return (typeof duration === 'string')
              ? (duration.indexOf('ms') > -1)
                ? parseFloat(duration)
                : parseFloat(duration) * 1000
              : duration
            ;
          },
          displayType: function() {
            if(settings.displayType) {
              return settings.displayType;
            }
            if($module.data(metadata.displayType) === undefined) {
              // create fake element to determine display state
              module.can.transition(true);
            }
            return $module.data(metadata.displayType);
          },
          userStyle: function(style) {
            style = style || $module.attr('style') || '';
            return style.replace(/display.*?;/, '');
          },
          transitionExists: function(animation) {
            return $.fn.transition.exists[animation];
          },
          animationStartEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationstart',
                'OAnimation'      :'oAnimationStart',
                'MozAnimation'    :'mozAnimationStart',
                'WebkitAnimation' :'webkitAnimationStart'
              },
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
              }
            }
            return false;
          },
          animationEndEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationend',
                'OAnimation'      :'oAnimationEnd',
                'MozAnimation'    :'mozAnimationEnd',
                'WebkitAnimation' :'webkitAnimationEnd'
              },
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
              }
            }
            return false;
          }

        },

        can: {
          transition: function(forced) {
            var
              animation         = settings.animation,
              transitionExists  = module.get.transitionExists(animation),
              elementClass,
              tagName,
              $clone,
              currentAnimation,
              inAnimation,
              directionExists,
              displayType
            ;
            if( transitionExists === undefined || forced) {
              module.verbose('Determining whether animation exists');
              elementClass = $module.attr('class');
              tagName      = $module.prop('tagName');

              $clone = $('<' + tagName + ' />').addClass( elementClass ).insertAfter($module);
              currentAnimation = $clone
                .addClass(animation)
                .removeClass(className.inward)
                .removeClass(className.outward)
                .addClass(className.animating)
                .addClass(className.transition)
                .css('animationName')
              ;
              inAnimation = $clone
                .addClass(className.inward)
                .css('animationName')
              ;
              displayType = $clone
                .attr('class', elementClass)
                .removeAttr('style')
                .removeClass(className.hidden)
                .removeClass(className.visible)
                .show()
                .css('display')
              ;
              module.verbose('Determining final display state', displayType);
              module.save.displayType(displayType);

              $clone.remove();
              if(currentAnimation != inAnimation) {
                module.debug('Direction exists for animation', animation);
                directionExists = true;
              }
              else if(currentAnimation == 'none' || !currentAnimation) {
                module.debug('No animation defined in css', animation);
                return;
              }
              else {
                module.debug('Static animation found', animation, displayType);
                directionExists = false;
              }
              module.save.transitionExists(animation, directionExists);
            }
            return (transitionExists !== undefined)
              ? transitionExists
              : directionExists
            ;
          },
          animate: function() {
            // can transition does not return a value if animation does not exist
            return (module.can.transition() !== undefined);
          }
        },

        is: {
          animating: function() {
            return $module.hasClass(className.animating);
          },
          inward: function() {
            return $module.hasClass(className.inward);
          },
          outward: function() {
            return $module.hasClass(className.outward);
          },
          looping: function() {
            return $module.hasClass(className.looping);
          },
          occurring: function(animation) {
            animation = animation || settings.animation;
            animation = '.' + animation.replace(' ', '.');
            return ( $module.filter(animation).length > 0 );
          },
          visible: function() {
            return $module.is(':visible');
          },
          hidden: function() {
            return $module.css('visibility') === 'hidden';
          },
          supported: function() {
            return(animationEnd !== false);
          }
        },

        hide: function() {
          module.verbose('Hiding element');
          if( module.is.animating() ) {
            module.reset();
          }
          element.blur(); // IE will trigger focus change if element is not blurred before hiding
          module.remove.display();
          module.remove.visible();
          module.set.hidden();
          module.force.hidden();
          settings.onHide.call(element);
          settings.onComplete.call(element);
          // module.repaint();
        },

        show: function(display) {
          module.verbose('Showing element', display);
          module.remove.hidden();
          module.set.visible();
          module.force.visible();
          settings.onShow.call(element);
          settings.onComplete.call(element);
          // module.repaint();
        },

        toggle: function() {
          if( module.is.visible() ) {
            module.hide();
          }
          else {
            module.show();
          }
        },

        stop: function() {
          module.debug('Stopping current animation');
          $module.triggerHandler(animationEnd);
        },

        stopAll: function() {
          module.debug('Stopping all animation');
          module.remove.queueCallback();
          $module.triggerHandler(animationEnd);
        },

        clear: {
          queue: function() {
            module.debug('Clearing animation queue');
            module.remove.queueCallback();
          }
        },

        enable: function() {
          module.verbose('Starting animation');
          $module.removeClass(className.disabled);
        },

        disable: function() {
          module.debug('Stopping animation');
          $module.addClass(className.disabled);
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        // modified for transition to return invoke success
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }

          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return (found !== undefined)
            ? found
            : false
          ;
        }
      };
      module.initialize();
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

// Records if CSS transition is available
$.fn.transition.exists = {};

$.fn.transition.settings = {

  // module info
  name          : 'Transition',

  // debug content outputted to console
  debug         : false,

  // verbose debug output
  verbose       : false,

  // performance data output
  performance   : true,

  // event namespace
  namespace     : 'transition',

  // delay between animations in group
  interval      : 0,

  // whether group animations should be reversed
  reverse       : 'auto',

  // animation callback event
  onStart       : function() {},
  onComplete    : function() {},
  onShow        : function() {},
  onHide        : function() {},

  // whether timeout should be used to ensure callback fires in cases animationend does not
  useFailSafe   : true,

  // delay in ms for fail safe
  failSafeDelay : 100,

  // whether EXACT animation can occur twice in a row
  allowRepeats  : false,

  // Override final display type on visible
  displayType   : false,

  // animation duration
  animation     : 'fade',
  duration      : false,

  // new animations will occur after previous ones
  queue         : true,

  metadata : {
    displayType: 'display'
  },

  className   : {
    animating  : 'animating',
    disabled   : 'disabled',
    hidden     : 'hidden',
    inward     : 'in',
    loading    : 'loading',
    looping    : 'looping',
    outward    : 'out',
    transition : 'transition',
    visible    : 'visible'
  },

  // possible errors
  error: {
    noAnimation : 'Element is no longer attached to DOM. Unable to animate.',
    repeated    : 'That animation is already occurring, cancelling repeated animation',
    method      : 'The method you called is not defined',
    support     : 'This browser does not support CSS animations'
  }

};


})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - API
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.api = $.fn.api = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),
    moduleSelector = $allModules.selector || '',
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.api.settings, parameters)
          : $.extend({}, $.fn.api.settings),

        // internal aliases
        namespace       = settings.namespace,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,
        className       = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // element that creates request
        $module         = $(this),
        $form           = $module.closest(selector.form),

        // context used for state
        $context        = (settings.stateContext)
          ? $(settings.stateContext)
          : $module,

        // request details
        ajaxSettings,
        requestSettings,
        url,
        data,
        requestStartTime,

        // standard module
        element         = this,
        context         = $context[0],
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          if(!methodInvoked) {
            module.bind.events();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        bind: {
          events: function() {
            var
              triggerEvent = module.get.event()
            ;
            if( triggerEvent ) {
              module.verbose('Attaching API events to element', triggerEvent);
              $module
                .on(triggerEvent + eventNamespace, module.event.trigger)
              ;
            }
            else if(settings.on == 'now') {
              module.debug('Querying API endpoint immediately');
              module.query();
            }
          }
        },

        decode: {
          json: function(response) {
            if(response !== undefined && typeof response == 'string') {
              try {
               response = JSON.parse(response);
              }
              catch(e) {
                // isnt json string
              }
            }
            return response;
          }
        },

        read: {
          cachedResponse: function(url) {
            var
              response
            ;
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            response = sessionStorage.getItem(url);
            module.debug('Using cached response', url, response);
            response = module.decode.json(response);
            return false;
          }
        },
        write: {
          cachedResponse: function(url, response) {
            if(response && response === '') {
              module.debug('Response empty, not caching', response);
              return;
            }
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            if( $.isPlainObject(response) ) {
              response = JSON.stringify(response);
            }
            sessionStorage.setItem(url, response);
            module.verbose('Storing cached response for url', url, response);
          }
        },

        query: function() {

          if(module.is.disabled()) {
            module.debug('Element is disabled API request aborted');
            return;
          }

          if(module.is.loading()) {
            if(settings.interruptRequests) {
              module.debug('Interrupting previous request');
              module.abort();
            }
            else {
              module.debug('Cancelling request, previous request is still pending');
              return;
            }
          }

          // pass element metadata to url (value, text)
          if(settings.defaultData) {
            $.extend(true, settings.urlData, module.get.defaultData());
          }

          // Add form content
          if(settings.serializeForm) {
            settings.data = module.add.formData(settings.data);
          }

          // call beforesend and get any settings changes
          requestSettings = module.get.settings();

          // check if before send cancelled request
          if(requestSettings === false) {
            module.cancelled = true;
            module.error(error.beforeSend);
            return;
          }
          else {
            module.cancelled = false;
          }

          // get url
          url = module.get.templatedURL();

          if(!url && !module.is.mocked()) {
            module.error(error.missingURL);
            return;
          }

          // replace variables
          url = module.add.urlData( url );
          // missing url parameters
          if( !url && !module.is.mocked()) {
            return;
          }

          requestSettings.url = settings.base + url;

          // look for jQuery ajax parameters in settings
          ajaxSettings = $.extend(true, {}, settings, {
            type       : settings.method || settings.type,
            data       : data,
            url        : settings.base + url,
            beforeSend : settings.beforeXHR,
            success    : function() {},
            failure    : function() {},
            complete   : function() {}
          });

          module.debug('Querying URL', ajaxSettings.url);
          module.verbose('Using AJAX settings', ajaxSettings);

          if(settings.cache === 'local' && module.read.cachedResponse(url)) {
            module.debug('Response returned from local cache');
            module.request = module.create.request();
            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);
            return;
          }

          if( !settings.throttle ) {
            module.debug('Sending request', data, ajaxSettings.method);
            module.send.request();
          }
          else {
            if(!settings.throttleFirstRequest && !module.timer) {
              module.debug('Sending request', data, ajaxSettings.method);
              module.send.request();
              module.timer = setTimeout(function(){}, settings.throttle);
            }
            else {
              module.debug('Throttling request', settings.throttle);
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                if(module.timer) {
                  delete module.timer;
                }
                module.debug('Sending throttled request', data, ajaxSettings.method);
                module.send.request();
              }, settings.throttle);
            }
          }

        },

        should: {
          removeError: function() {
            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );
          }
        },

        is: {
          disabled: function() {
            return ($module.filter(selector.disabled).length > 0);
          },
          form: function() {
            return $module.is('form') || $context.is('form');
          },
          mocked: function() {
            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);
          },
          input: function() {
            return $module.is('input');
          },
          loading: function() {
            return (module.request && module.request.state() == 'pending');
          },
          abortedRequest: function(xhr) {
            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {
              module.verbose('XHR request determined to be aborted');
              return true;
            }
            else {
              module.verbose('XHR request was not aborted');
              return false;
            }
          },
          validResponse: function(response) {
            if( (settings.dataType !== 'json' && settings.dataType !== 'jsonp') || !$.isFunction(settings.successTest) ) {
              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);
              return true;
            }
            module.debug('Checking JSON returned success', settings.successTest, response);
            if( settings.successTest(response) ) {
              module.debug('Response passed success test', response);
              return true;
            }
            else {
              module.debug('Response failed success test', response);
              return false;
            }
          }
        },

        was: {
          cancelled: function() {
            return (module.cancelled || false);
          },
          succesful: function() {
            return (module.request && module.request.state() == 'resolved');
          },
          failure: function() {
            return (module.request && module.request.state() == 'rejected');
          },
          complete: function() {
            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );
          }
        },

        add: {
          urlData: function(url, urlData) {
            var
              requiredVariables,
              optionalVariables
            ;
            if(url) {
              requiredVariables = url.match(settings.regExp.required);
              optionalVariables = url.match(settings.regExp.optional);
              urlData           = urlData || settings.urlData;
              if(requiredVariables) {
                module.debug('Looking for required URL variables', requiredVariables);
                $.each(requiredVariables, function(index, templatedString) {
                  var
                    // allow legacy {$var} style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(2, templatedString.length - 3)
                      : templatedString.substr(1, templatedString.length - 2),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // remove value
                  if(value === undefined) {
                    module.error(error.requiredParameter, variable, url);
                    url = false;
                    return false;
                  }
                  else {
                    module.verbose('Found required variable', variable, value);
                    value = (settings.encodeParameters)
                      ? module.get.urlEncodedValue(value)
                      : value
                    ;
                    url = url.replace(templatedString, value);
                  }
                });
              }
              if(optionalVariables) {
                module.debug('Looking for optional URL variables', requiredVariables);
                $.each(optionalVariables, function(index, templatedString) {
                  var
                    // allow legacy {/$var} style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(3, templatedString.length - 4)
                      : templatedString.substr(2, templatedString.length - 3),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // optional replacement
                  if(value !== undefined) {
                    module.verbose('Optional variable Found', variable, value);
                    url = url.replace(templatedString, value);
                  }
                  else {
                    module.verbose('Optional variable not found', variable);
                    // remove preceding slash if set
                    if(url.indexOf('/' + templatedString) !== -1) {
                      url = url.replace('/' + templatedString, '');
                    }
                    else {
                      url = url.replace(templatedString, '');
                    }
                  }
                });
              }
            }
            return url;
          },
          formData: function(data) {
            var
              canSerialize = ($.fn.serializeObject !== undefined),
              formData     = (canSerialize)
                ? $form.serializeObject()
                : $form.serialize(),
              hasOtherData
            ;
            data         = data || settings.data;
            hasOtherData = $.isPlainObject(data);

            if(hasOtherData) {
              if(canSerialize) {
                module.debug('Extending existing data with form data', data, formData);
                data = $.extend(true, {}, data, formData);
              }
              else {
                module.error(error.missingSerialize);
                module.debug('Cant extend data. Replacing data with form data', data, formData);
                data = formData;
              }
            }
            else {
              module.debug('Adding form data', formData);
              data = formData;
            }
            return data;
          }
        },

        send: {
          request: function() {
            module.set.loading();
            module.request = module.create.request();
            if( module.is.mocked() ) {
              module.mockedXHR = module.create.mockedXHR();
            }
            else {
              module.xhr = module.create.xhr();
            }
            settings.onRequest.call(context, module.request, module.xhr);
          }
        },

        event: {
          trigger: function(event) {
            module.query();
            if(event.type == 'submit' || event.type == 'click') {
              event.preventDefault();
            }
          },
          xhr: {
            always: function() {
              // nothing special
            },
            done: function(response, textStatus, xhr) {
              var
                context            = this,
                elapsedTime        = (new Date().getTime() - requestStartTime),
                timeLeft           = (settings.loadingDuration - elapsedTime),
                translatedResponse = ( $.isFunction(settings.onResponse) )
                  ? settings.onResponse.call(context, $.extend(true, {}, response))
                  : false
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              if(translatedResponse) {
                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);
                response = translatedResponse;
              }
              if(timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
              }
              setTimeout(function() {
                if( module.is.validResponse(response) ) {
                  module.request.resolveWith(context, [response, xhr]);
                }
                else {
                  module.request.rejectWith(context, [xhr, 'invalid']);
                }
              }, timeLeft);
            },
            fail: function(xhr, status, httpMessage) {
              var
                context     = this,
                elapsedTime = (new Date().getTime() - requestStartTime),
                timeLeft    = (settings.loadingDuration - elapsedTime)
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              if(timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
              }
              setTimeout(function() {
                if( module.is.abortedRequest(xhr) ) {
                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);
                }
                else {
                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);
                }
              }, timeLeft);
            }
          },
          request: {
            done: function(response, xhr) {
              module.debug('Successful API Response', response);
              if(settings.cache === 'local' && url) {
                module.write.cachedResponse(url, response);
                module.debug('Saving server response locally', module.cache);
              }
              settings.onSuccess.call(context, response, $module, xhr);
            },
            complete: function(firstParameter, secondParameter) {
              var
                xhr,
                response
              ;
              // have to guess callback parameters based on request success
              if( module.was.succesful() ) {
                response = firstParameter;
                xhr      = secondParameter;
              }
              else {
                xhr      = firstParameter;
                response = module.get.responseFromXHR(xhr);
              }
              module.remove.loading();
              settings.onComplete.call(context, response, $module, xhr);
            },
            fail: function(xhr, status, httpMessage) {
              var
                // pull response from xhr if available
                response     = module.get.responseFromXHR(xhr),
                errorMessage = module.get.errorFromRequest(response, status, httpMessage)
              ;
              if(status == 'aborted') {
                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);
                settings.onAbort.call(context, status, $module, xhr);
              }
              else if(status == 'invalid') {
                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);
              }
              else if(status == 'error')  {
                if(xhr !== undefined) {
                  module.debug('XHR produced a server error', status, httpMessage);
                  // make sure we have an error to display to console
                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {
                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);
                  }
                  settings.onError.call(context, errorMessage, $module, xhr);
                }
              }

              if(settings.errorDuration && status !== 'aborted') {
                module.debug('Adding error state');
                module.set.error();
                if( module.should.removeError() ) {
                  setTimeout(module.remove.error, settings.errorDuration);
                }
              }
              module.debug('API Request failed', errorMessage, xhr);
              settings.onFailure.call(context, response, $module, xhr);
            }
          }
        },

        create: {

          request: function() {
            // api request promise
            return $.Deferred()
              .always(module.event.request.complete)
              .done(module.event.request.done)
              .fail(module.event.request.fail)
            ;
          },

          mockedXHR: function () {
            var
              // xhr does not simulate these properties of xhr but must return them
              textStatus     = false,
              status         = false,
              httpMessage    = false,
              responder      = settings.mockResponse      || settings.response,
              asyncResponder = settings.mockResponseAsync || settings.responseAsync,
              asyncCallback,
              response,
              mockedXHR
            ;

            mockedXHR = $.Deferred()
              .always(module.event.xhr.complete)
              .done(module.event.xhr.done)
              .fail(module.event.xhr.fail)
            ;

            if(responder) {
              if( $.isFunction(responder) ) {
                module.debug('Using specified synchronous callback', responder);
                response = responder.call(context, requestSettings);
              }
              else {
                module.debug('Using settings specified response', responder);
                response = responder;
              }
              // simulating response
              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);
            }
            else if( $.isFunction(asyncResponder) ) {
              asyncCallback = function(response) {
                module.debug('Async callback returned response', response);

                if(response) {
                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);
                }
                else {
                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);
                }
              };
              module.debug('Using specified async response callback', asyncResponder);
              asyncResponder.call(context, requestSettings, asyncCallback);
            }
            return mockedXHR;
          },

          xhr: function() {
            var
              xhr
            ;
            // ajax request promise
            xhr = $.ajax(ajaxSettings)
              .always(module.event.xhr.always)
              .done(module.event.xhr.done)
              .fail(module.event.xhr.fail)
            ;
            module.verbose('Created server request', xhr);
            return xhr;
          }
        },

        set: {
          error: function() {
            module.verbose('Adding error state to element', $context);
            $context.addClass(className.error);
          },
          loading: function() {
            module.verbose('Adding loading state to element', $context);
            $context.addClass(className.loading);
            requestStartTime = new Date().getTime();
          }
        },

        remove: {
          error: function() {
            module.verbose('Removing error state from element', $context);
            $context.removeClass(className.error);
          },
          loading: function() {
            module.verbose('Removing loading state from element', $context);
            $context.removeClass(className.loading);
          }
        },

        get: {
          responseFromXHR: function(xhr) {
            return $.isPlainObject(xhr)
              ? (settings.dataType == 'json' || settings.dataType == 'jsonp')
                ? module.decode.json(xhr.responseText)
                : xhr.responseText
              : false
            ;
          },
          errorFromRequest: function(response, status, httpMessage) {
            return ($.isPlainObject(response) && response.error !== undefined)
              ? response.error // use json error message
              : (settings.error[status] !== undefined) // use server error message
                ? settings.error[status]
                : httpMessage
            ;
          },
          request: function() {
            return module.request || false;
          },
          xhr: function() {
            return module.xhr || false;
          },
          settings: function() {
            var
              runSettings
            ;
            runSettings = settings.beforeSend.call(context, settings);
            if(runSettings) {
              if(runSettings.success !== undefined) {
                module.debug('Legacy success callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.success);
                runSettings.onSuccess = runSettings.success;
              }
              if(runSettings.failure !== undefined) {
                module.debug('Legacy failure callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.failure);
                runSettings.onFailure = runSettings.failure;
              }
              if(runSettings.complete !== undefined) {
                module.debug('Legacy complete callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.complete);
                runSettings.onComplete = runSettings.complete;
              }
            }
            if(runSettings === undefined) {
              module.error(error.noReturnedValue);
            }
            return (runSettings !== undefined)
              ? $.extend(true, {}, runSettings)
              : $.extend(true, {}, settings)
            ;
          },
          urlEncodedValue: function(value) {
            var
              decodedValue   = window.decodeURIComponent(value),
              encodedValue   = window.encodeURIComponent(value),
              alreadyEncoded = (decodedValue !== value)
            ;
            if(alreadyEncoded) {
              module.debug('URL value is already encoded, avoiding double encoding', value);
              return value;
            }
            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);
            return encodedValue;
          },
          defaultData: function() {
            var
              data = {}
            ;
            if( !$.isWindow(element) ) {
              if( module.is.input() ) {
                data.value = $module.val();
              }
              else if( !module.is.form() ) {

              }
              else {
                data.text = $module.text();
              }
            }
            return data;
          },
          event: function() {
            if( $.isWindow(element) || settings.on == 'now' ) {
              module.debug('API called without element, no events attached');
              return false;
            }
            else if(settings.on == 'auto') {
              if( $module.is('input') ) {
                return (element.oninput !== undefined)
                  ? 'input'
                  : (element.onpropertychange !== undefined)
                    ? 'propertychange'
                    : 'keyup'
                ;
              }
              else if( $module.is('form') ) {
                return 'submit';
              }
              else {
                return 'click';
              }
            }
            else {
              return settings.on;
            }
          },
          templatedURL: function(action) {
            action = action || $module.data(metadata.action) || settings.action || false;
            url    = $module.data(metadata.url) || settings.url || false;
            if(url) {
              module.debug('Using specified url', url);
              return url;
            }
            if(action) {
              module.debug('Looking up url for action', action, settings.api);
              if(settings.api[action] === undefined && !module.is.mocked()) {
                module.error(error.missingAction, settings.action, settings.api);
                return;
              }
              url = settings.api[action];
            }
            else if( module.is.form() ) {
              url = $module.attr('action') || $context.attr('action') || false;
              module.debug('No url or action specified, defaulting to form action', url);
            }
            return url;
          }
        },

        abort: function() {
          var
            xhr = module.get.xhr()
          ;
          if( xhr && xhr.state() !== 'resolved') {
            module.debug('Cancelling API request');
            xhr.abort();
          }
        },

        // reset state
        reset: function() {
          module.remove.error();
          module.remove.loading();
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                //'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.api.settings = {

  name              : 'API',
  namespace         : 'api',

  debug             : false,
  verbose           : false,
  performance       : true,

  // object containing all templates endpoints
  api               : {},

  // whether to cache responses
  cache             : true,

  // whether new requests should abort previous requests
  interruptRequests : true,

  // event binding
  on                : 'auto',

  // context for applying state classes
  stateContext      : false,

  // duration for loading state
  loadingDuration   : 0,

  // whether to hide errors after a period of time
  hideError         : 'auto',

  // duration for error state
  errorDuration     : 2000,

  // whether parameters should be encoded with encodeURIComponent
  encodeParameters  : true,

  // API action to use
  action            : false,

  // templated URL to use
  url               : false,

  // base URL to apply to all endpoints
  base              : '',

  // data that will
  urlData           : {},

  // whether to add default data to url data
  defaultData          : true,

  // whether to serialize closest form
  serializeForm        : false,

  // how long to wait before request should occur
  throttle             : 0,

  // whether to throttle first request or only repeated
  throttleFirstRequest : true,

  // standard ajax settings
  method            : 'get',
  data              : {},
  dataType          : 'json',

  // mock response
  mockResponse      : false,
  mockResponseAsync : false,

  // aliases for mock
  response          : false,
  responseAsync     : false,

  // callbacks before request
  beforeSend  : function(settings) { return settings; },
  beforeXHR   : function(xhr) {},
  onRequest   : function(promise, xhr) {},

  // after request
  onResponse  : false, // function(response) { },

  // response was successful, if JSON passed validation
  onSuccess   : function(response, $module) {},

  // request finished without aborting
  onComplete  : function(response, $module) {},

  // failed JSON success test
  onFailure   : function(response, $module) {},

  // server error
  onError     : function(errorMessage, $module) {},

  // request aborted
  onAbort     : function(errorMessage, $module) {},

  successTest : false,

  // errors
  error : {
    beforeSend        : 'The before send function has aborted the request',
    error             : 'There was an error with your request',
    exitConditions    : 'API Request Aborted. Exit conditions met',
    JSONParse         : 'JSON could not be parsed during error handling',
    legacyParameters  : 'You are using legacy API success callback names',
    method            : 'The method you called is not defined',
    missingAction     : 'API action used but no url was defined',
    missingSerialize  : 'jquery-serialize-object is required to add form data to an existing data object',
    missingURL        : 'No URL specified for api event',
    noReturnedValue   : 'The beforeSend callback must return a settings object, beforeSend ignored.',
    noStorage         : 'Caching responses locally requires session storage',
    parseError        : 'There was an error parsing your request',
    requiredParameter : 'Missing a required URL parameter: ',
    statusMessage     : 'Server gave an error: ',
    timeout           : 'Your request timed out'
  },

  regExp  : {
    required : /\{\$*[A-z0-9]+\}/g,
    optional : /\{\/\$*[A-z0-9]+\}/g,
  },

  className: {
    loading : 'loading',
    error   : 'error'
  },

  selector: {
    disabled : '.disabled',
    form      : 'form'
  },

  metadata: {
    action  : 'action',
    url     : 'url'
  }
};



})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - State
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.state = function(parameters) {
  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    hasTouch        = ('ontouchstart' in document.documentElement),
    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.state.settings, parameters)
          : $.extend({}, $.fn.state.settings),

        error           = settings.error,
        metadata        = settings.metadata,
        className       = settings.className,
        namespace       = settings.namespace,
        states          = settings.states,
        text            = settings.text,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing module');

          // allow module to guess desired state based on element
          if(settings.automatic) {
            module.add.defaults();
          }

          // bind events with delegated events
          if(settings.context && moduleSelector !== '') {
            $(settings.context)
              .on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text)
              .on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text)
              .on(moduleSelector, 'click'      + eventNamespace, module.toggle.state)
            ;
          }
          else {
            $module
              .on('mouseenter' + eventNamespace, module.change.text)
              .on('mouseleave' + eventNamespace, module.reset.text)
              .on('click'      + eventNamespace, module.toggle.state)
            ;
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $module = $(element);
        },

        add: {
          defaults: function() {
            var
              userStates = parameters && $.isPlainObject(parameters.states)
                ? parameters.states
                : {}
            ;
            $.each(settings.defaults, function(type, typeStates) {
              if( module.is[type] !== undefined && module.is[type]() ) {
                module.verbose('Adding default states', type, element);
                $.extend(settings.states, typeStates, userStates);
              }
            });
          }
        },

        is: {

          active: function() {
            return $module.hasClass(className.active);
          },
          loading: function() {
            return $module.hasClass(className.loading);
          },
          inactive: function() {
            return !( $module.hasClass(className.active) );
          },
          state: function(state) {
            if(className[state] === undefined) {
              return false;
            }
            return $module.hasClass( className[state] );
          },

          enabled: function() {
            return !( $module.is(settings.filter.active) );
          },
          disabled: function() {
            return ( $module.is(settings.filter.active) );
          },
          textEnabled: function() {
            return !( $module.is(settings.filter.text) );
          },

          // definitions for automatic type detection
          button: function() {
            return $module.is('.button:not(a, .submit)');
          },
          input: function() {
            return $module.is('input');
          },
          progress: function() {
            return $module.is('.ui.progress');
          }
        },

        allow: function(state) {
          module.debug('Now allowing state', state);
          states[state] = true;
        },
        disallow: function(state) {
          module.debug('No longer allowing', state);
          states[state] = false;
        },

        allows: function(state) {
          return states[state] || false;
        },

        enable: function() {
          $module.removeClass(className.disabled);
        },

        disable: function() {
          $module.addClass(className.disabled);
        },

        setState: function(state) {
          if(module.allows(state)) {
            $module.addClass( className[state] );
          }
        },

        removeState: function(state) {
          if(module.allows(state)) {
            $module.removeClass( className[state] );
          }
        },

        toggle: {
          state: function() {
            var
              apiRequest,
              requestCancelled
            ;
            if( module.allows('active') && module.is.enabled() ) {
              module.refresh();
              if($.fn.api !== undefined) {
                apiRequest       = $module.api('get request');
                requestCancelled = $module.api('was cancelled');
                if( requestCancelled ) {
                  module.debug('API Request cancelled by beforesend');
                  settings.activateTest   = function(){ return false; };
                  settings.deactivateTest = function(){ return false; };
                }
                else if(apiRequest) {
                  module.listenTo(apiRequest);
                  return;
                }
              }
              module.change.state();
            }
          }
        },

        listenTo: function(apiRequest) {
          module.debug('API request detected, waiting for state signal', apiRequest);
          if(apiRequest) {
            if(text.loading) {
              module.update.text(text.loading);
            }
            $.when(apiRequest)
              .then(function() {
                if(apiRequest.state() == 'resolved') {
                  module.debug('API request succeeded');
                  settings.activateTest   = function(){ return true; };
                  settings.deactivateTest = function(){ return true; };
                }
                else {
                  module.debug('API request failed');
                  settings.activateTest   = function(){ return false; };
                  settings.deactivateTest = function(){ return false; };
                }
                module.change.state();
              })
            ;
          }
        },

        // checks whether active/inactive state can be given
        change: {

          state: function() {
            module.debug('Determining state change direction');
            // inactive to active change
            if( module.is.inactive() ) {
              module.activate();
            }
            else {
              module.deactivate();
            }
            if(settings.sync) {
              module.sync();
            }
            settings.onChange.call(element);
          },

          text: function() {
            if( module.is.textEnabled() ) {
              if(module.is.disabled() ) {
                module.verbose('Changing text to disabled text', text.hover);
                module.update.text(text.disabled);
              }
              else if( module.is.active() ) {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
                }
                else if(text.deactivate) {
                  module.verbose('Changing text to deactivating text', text.deactivate);
                  module.update.text(text.deactivate);
                }
              }
              else {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
                }
                else if(text.activate){
                  module.verbose('Changing text to activating text', text.activate);
                  module.update.text(text.activate);
                }
              }
            }
          }

        },

        activate: function() {
          if( settings.activateTest.call(element) ) {
            module.debug('Setting state to active');
            $module
              .addClass(className.active)
            ;
            module.update.text(text.active);
            settings.onActivate.call(element);
          }
        },

        deactivate: function() {
          if( settings.deactivateTest.call(element) ) {
            module.debug('Setting state to inactive');
            $module
              .removeClass(className.active)
            ;
            module.update.text(text.inactive);
            settings.onDeactivate.call(element);
          }
        },

        sync: function() {
          module.verbose('Syncing other buttons to current state');
          if( module.is.active() ) {
            $allModules
              .not($module)
                .state('activate');
          }
          else {
            $allModules
              .not($module)
                .state('deactivate')
            ;
          }
        },

        get: {
          text: function() {
            return (settings.selector.text)
              ? $module.find(settings.selector.text).text()
              : $module.html()
            ;
          },
          textFor: function(state) {
            return text[state] || false;
          }
        },

        flash: {
          text: function(text, duration, callback) {
            var
              previousText = module.get.text()
            ;
            module.debug('Flashing text message', text, duration);
            text     = text     || settings.text.flash;
            duration = duration || settings.flashDuration;
            callback = callback || function() {};
            module.update.text(text);
            setTimeout(function(){
              module.update.text(previousText);
              callback.call(element);
            }, duration);
          }
        },

        reset: {
          // on mouseout sets text to previous value
          text: function() {
            var
              activeText   = text.active   || $module.data(metadata.storedText),
              inactiveText = text.inactive || $module.data(metadata.storedText)
            ;
            if( module.is.textEnabled() ) {
              if( module.is.active() && activeText) {
                module.verbose('Resetting active text', activeText);
                module.update.text(activeText);
              }
              else if(inactiveText) {
                module.verbose('Resetting inactive text', activeText);
                module.update.text(inactiveText);
              }
            }
          }
        },

        update: {
          text: function(text) {
            var
              currentText = module.get.text()
            ;
            if(text && text !== currentText) {
              module.debug('Updating text', text);
              if(settings.selector.text) {
                $module
                  .data(metadata.storedText, text)
                  .find(settings.selector.text)
                    .text(text)
                ;
              }
              else {
                $module
                  .data(metadata.storedText, text)
                  .html(text)
                ;
              }
            }
            else {
              module.debug('Text is already set, ignoring update', text);
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.state.settings = {

  // module info
  name           : 'State',

  // debug output
  debug          : false,

  // verbose debug output
  verbose        : false,

  // namespace for events
  namespace      : 'state',

  // debug data includes performance
  performance    : true,

  // callback occurs on state change
  onActivate     : function() {},
  onDeactivate   : function() {},
  onChange       : function() {},

  // state test functions
  activateTest   : function() { return true; },
  deactivateTest : function() { return true; },

  // whether to automatically map default states
  automatic      : true,

  // activate / deactivate changes all elements instantiated at same time
  sync           : false,

  // default flash text duration, used for temporarily changing text of an element
  flashDuration  : 1000,

  // selector filter
  filter     : {
    text   : '.loading, .disabled',
    active : '.disabled'
  },

  context    : false,

  // error
  error: {
    beforeSend : 'The before send function has cancelled state change',
    method     : 'The method you called is not defined.'
  },

  // metadata
  metadata: {
    promise    : 'promise',
    storedText : 'stored-text'
  },

  // change class on state
  className: {
    active   : 'active',
    disabled : 'disabled',
    error    : 'error',
    loading  : 'loading',
    success  : 'success',
    warning  : 'warning'
  },

  selector: {
    // selector for text node
    text: false
  },

  defaults : {
    input: {
      disabled : true,
      loading  : true,
      active   : true
    },
    button: {
      disabled : true,
      loading  : true,
      active   : true,
    },
    progress: {
      active   : true,
      success  : true,
      warning  : true,
      error    : true
    }
  },

  states     : {
    active   : true,
    disabled : true,
    error    : true,
    loading  : true,
    success  : true,
    warning  : true
  },

  text     : {
    disabled   : false,
    flash      : false,
    hover      : false,
    active     : false,
    inactive   : false,
    activate   : false,
    deactivate : false
  }

};



})( jQuery, window, document );

/*!
 * # Semantic UI 2.1.8 - Visibility
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.visibility = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.visibility.settings, parameters)
          : $.extend({}, $.fn.visibility.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,
        metadata        = settings.metadata,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $window         = $(window),

        $module         = $(this),
        $context        = $(settings.context),

        $placeholder,

        selector        = $module.selector || '',
        instance        = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); },

        element         = this,
        disabled        = false,

        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', settings);

          module.setup.cache();

          if( module.should.trackChanges() ) {

            if(settings.type == 'image') {
              module.setup.image();
            }
            if(settings.type == 'fixed') {
              module.setup.fixed();
            }

            if(settings.observeChanges) {
              module.observeChanges();
            }
            module.bind.events();
          }

          module.save.position();
          if( !module.is.visible() ) {
            module.error(error.visible, $module);
          }

          if(settings.initialCheck) {
            module.checkVisibility();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.debug('Storing instance', module);
          $module
            .data(moduleNamespace, module)
          ;
          instance = module;
        },

        destroy: function() {
          module.verbose('Destroying previous module');
          if(observer) {
            observer.disconnect();
          }
          $window
            .off('load'   + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $context
            .off('scrollchange' + eventNamespace, module.event.scrollchange)
          ;
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.verbose('DOM tree modified, updating visibility calculations');
              module.timer = setTimeout(function() {
                module.verbose('DOM tree modified, updating sticky menu');
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function() {
            module.verbose('Binding visibility events to scroll and resize');
            if(settings.refreshOnLoad) {
              $window
                .on('load'   + eventNamespace, module.event.load)
              ;
            }
            $window
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $context
              .off('scroll'      + eventNamespace)
              .on('scroll'       + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
          }
        },

        event: {
          resize: function() {
            module.debug('Window resized');
            if(settings.refreshOnResize) {
              requestAnimationFrame(module.refresh);
            }
          },
          load: function() {
            module.debug('Page finished loading');
            requestAnimationFrame(module.refresh);
          },
          // publishes scrollchange event on one scroll
          scroll: function() {
            if(settings.throttle) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
              }, settings.throttle);
            }
            else {
              requestAnimationFrame(function() {
                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
              });
            }
          },
          // subscribes to scrollchange
          scrollchange: function(event, scrollPosition) {
            module.checkVisibility(scrollPosition);
          },
        },

        precache: function(images, callback) {
          if (!(images instanceof Array)) {
            images = [images];
          }
          var
            imagesLength  = images.length,
            loadedCounter = 0,
            cache         = [],
            cacheImage    = document.createElement('img'),
            handleLoad    = function() {
              loadedCounter++;
              if (loadedCounter >= images.length) {
                if ($.isFunction(callback)) {
                  callback();
                }
              }
            }
          ;
          while (imagesLength--) {
            cacheImage         = document.createElement('img');
            cacheImage.onload  = handleLoad;
            cacheImage.onerror = handleLoad;
            cacheImage.src     = images[imagesLength];
            cache.push(cacheImage);
          }
        },

        enableCallbacks: function() {
          module.debug('Allowing callbacks to occur');
          disabled = false;
        },

        disableCallbacks: function() {
          module.debug('Disabling all callbacks temporarily');
          disabled = true;
        },

        should: {
          trackChanges: function() {
            if(methodInvoked) {
              module.debug('One time query, no need to bind events');
              return false;
            }
            module.debug('Callbacks being attached');
            return true;
          }
        },

        setup: {
          cache: function() {
            module.cache = {
              occurred : {},
              screen   : {},
              element  : {},
            };
          },
          image: function() {
            var
              src = $module.data(metadata.src)
            ;
            if(src) {
              module.verbose('Lazy loading image', src);
              settings.once           = true;
              settings.observeChanges = false;

              // show when top visible
              settings.onOnScreen = function() {
                module.debug('Image on screen', element);
                module.precache(src, function() {
                  module.set.image(src);
                });
              };
            }
          },
          fixed: function() {
            module.debug('Setting up fixed');
            settings.once           = false;
            settings.observeChanges = false;
            settings.initialCheck   = true;
            settings.refreshOnLoad  = true;
            if(!parameters.transition) {
              settings.transition = false;
            }
            module.create.placeholder();
            module.debug('Added placeholder', $placeholder);
            settings.onTopPassed = function() {
              module.debug('Element passed, adding fixed position', $module);
              module.show.placeholder();
              module.set.fixed();
              if(settings.transition) {
                if($.fn.transition !== undefined) {
                  $module.transition(settings.transition, settings.duration);
                }
              }
            };
            settings.onTopPassedReverse = function() {
              module.debug('Element returned to position, removing fixed', $module);
              module.hide.placeholder();
              module.remove.fixed();
            };
          }
        },

        create: {
          placeholder: function() {
            module.verbose('Creating fixed position placeholder');
            $placeholder = $module
              .clone(false)
              .css('display', 'none')
              .addClass(className.placeholder)
              .insertAfter($module)
            ;
          }
        },

        show: {
          placeholder: function() {
            module.verbose('Showing placeholder');
            $placeholder
              .css('display', 'block')
              .css('visibility', 'hidden')
            ;
          }
        },
        hide: {
          placeholder: function() {
            module.verbose('Hiding placeholder');
            $placeholder
              .css('display', 'none')
              .css('visibility', '')
            ;
          }
        },

        set: {
          fixed: function() {
            module.verbose('Setting element to fixed position');
            $module
              .addClass(className.fixed)
              .css({
                position : 'fixed',
                top      : settings.offset + 'px',
                left     : 'auto',
                zIndex   : '1'
              })
            ;
          },
          image: function(src) {
            $module
              .attr('src', src)
            ;
            if(settings.transition) {
              if( $.fn.transition !== undefined ) {
                $module.transition(settings.transition, settings.duration);
              }
              else {
                $module.fadeIn(settings.duration);
              }
            }
            else {
              $module.show();
            }
          }
        },

        is: {
          onScreen: function() {
            var
              calculations   = module.get.elementCalculations()
            ;
            return calculations.onScreen;
          },
          offScreen: function() {
            var
              calculations   = module.get.elementCalculations()
            ;
            return calculations.offScreen;
          },
          visible: function() {
            if(module.cache && module.cache.element) {
              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);
            }
            return false;
          }
        },

        refresh: function() {
          module.debug('Refreshing constants (width/height)');
          if(settings.type == 'fixed') {
            module.remove.fixed();
            module.remove.occurred();
          }
          module.reset();
          module.save.position();
          if(settings.checkOnRefresh) {
            module.checkVisibility();
          }
          settings.onRefresh.call(element);
        },

        reset: function() {
          module.verbose('Reseting all cached values');
          if( $.isPlainObject(module.cache) ) {
            module.cache.screen = {};
            module.cache.element = {};
          }
        },

        checkVisibility: function(scroll) {
          module.verbose('Checking visibility of element', module.cache.element);

          if( !disabled && module.is.visible() ) {

            // save scroll position
            module.save.scroll(scroll);

            // update calculations derived from scroll
            module.save.calculations();

            // percentage
            module.passed();

            // reverse (must be first)
            module.passingReverse();
            module.topVisibleReverse();
            module.bottomVisibleReverse();
            module.topPassedReverse();
            module.bottomPassedReverse();

            // one time
            module.onScreen();
            module.offScreen();
            module.passing();
            module.topVisible();
            module.bottomVisible();
            module.topPassed();
            module.bottomPassed();

            // on update callback
            if(settings.onUpdate) {
              settings.onUpdate.call(element, module.get.elementCalculations());
            }
          }
        },

        passed: function(amount, newCallback) {
          var
            calculations   = module.get.elementCalculations(),
            amountInPixels
          ;
          // assign callback
          if(amount && newCallback) {
            settings.onPassed[amount] = newCallback;
          }
          else if(amount !== undefined) {
            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);
          }
          else if(calculations.passing) {
            $.each(settings.onPassed, function(amount, callback) {
              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {
                module.execute(callback, amount);
              }
              else if(!settings.once) {
                module.remove.occurred(callback);
              }
            });
          }
        },

        onScreen: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onOnScreen,
            callbackName = 'onScreen'
          ;
          if(newCallback) {
            module.debug('Adding callback for onScreen', newCallback);
            settings.onOnScreen = newCallback;
          }
          if(calculations.onScreen) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return calculations.onOnScreen;
          }
        },

        offScreen: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onOffScreen,
            callbackName = 'offScreen'
          ;
          if(newCallback) {
            module.debug('Adding callback for offScreen', newCallback);
            settings.onOffScreen = newCallback;
          }
          if(calculations.offScreen) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return calculations.onOffScreen;
          }
        },

        passing: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassing,
            callbackName = 'passing'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing', newCallback);
            settings.onPassing = newCallback;
          }
          if(calculations.passing) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return calculations.passing;
          }
        },


        topVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisible,
            callbackName = 'topVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible', newCallback);
            settings.onTopVisible = newCallback;
          }
          if(calculations.topVisible) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.topVisible;
          }
        },

        bottomVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisible,
            callbackName = 'bottomVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible', newCallback);
            settings.onBottomVisible = newCallback;
          }
          if(calculations.bottomVisible) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.bottomVisible;
          }
        },

        topPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassed,
            callbackName = 'topPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed', newCallback);
            settings.onTopPassed = newCallback;
          }
          if(calculations.topPassed) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.topPassed;
          }
        },

        bottomPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassed,
            callbackName = 'bottomPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed', newCallback);
            settings.onBottomPassed = newCallback;
          }
          if(calculations.bottomPassed) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.bottomPassed;
          }
        },

        passingReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassingReverse,
            callbackName = 'passingReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing reverse', newCallback);
            settings.onPassingReverse = newCallback;
          }
          if(!calculations.passing) {
            if(module.get.occurred('passing')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return !calculations.passing;
          }
        },


        topVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisibleReverse,
            callbackName = 'topVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible reverse', newCallback);
            settings.onTopVisibleReverse = newCallback;
          }
          if(!calculations.topVisible) {
            if(module.get.occurred('topVisible')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.topVisible;
          }
        },

        bottomVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisibleReverse,
            callbackName = 'bottomVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible reverse', newCallback);
            settings.onBottomVisibleReverse = newCallback;
          }
          if(!calculations.bottomVisible) {
            if(module.get.occurred('bottomVisible')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.bottomVisible;
          }
        },

        topPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassedReverse,
            callbackName = 'topPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed reverse', newCallback);
            settings.onTopPassedReverse = newCallback;
          }
          if(!calculations.topPassed) {
            if(module.get.occurred('topPassed')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.onTopPassed;
          }
        },

        bottomPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassedReverse,
            callbackName = 'bottomPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed reverse', newCallback);
            settings.onBottomPassedReverse = newCallback;
          }
          if(!calculations.bottomPassed) {
            if(module.get.occurred('bottomPassed')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.bottomPassed;
          }
        },

        execute: function(callback, callbackName) {
          var
            calculations = module.get.elementCalculations(),
            screen       = module.get.screenCalculations()
          ;
          callback = callback || false;
          if(callback) {
            if(settings.continuous) {
              module.debug('Callback being called continuously', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
            else if(!module.get.occurred(callbackName)) {
              module.debug('Conditions met', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
          }
          module.save.occurred(callbackName);
        },

        remove: {
          fixed: function() {
            module.debug('Removing fixed position');
            $module
              .removeClass(className.fixed)
              .css({
                position : '',
                top      : '',
                left     : '',
                zIndex   : ''
              })
            ;
          },
          occurred: function(callback) {
            if(callback) {
              var
                occurred = module.cache.occurred
              ;
              if(occurred[callback] !== undefined && occurred[callback] === true) {
                module.debug('Callback can now be called again', callback);
                module.cache.occurred[callback] = false;
              }
            }
            else {
              module.cache.occurred = {};
            }
          }
        },

        save: {
          calculations: function() {
            module.verbose('Saving all calculations necessary to determine positioning');
            module.save.direction();
            module.save.screenCalculations();
            module.save.elementCalculations();
          },
          occurred: function(callback) {
            if(callback) {
              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {
                module.verbose('Saving callback occurred', callback);
                module.cache.occurred[callback] = true;
              }
            }
          },
          scroll: function(scrollPosition) {
            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;
            module.cache.scroll = scrollPosition;
          },
          direction: function() {
            var
              scroll     = module.get.scroll(),
              lastScroll = module.get.lastScroll(),
              direction
            ;
            if(scroll > lastScroll && lastScroll) {
              direction = 'down';
            }
            else if(scroll < lastScroll && lastScroll) {
              direction = 'up';
            }
            else {
              direction = 'static';
            }
            module.cache.direction = direction;
            return module.cache.direction;
          },
          elementPosition: function() {
            var
              element = module.cache.element,
              screen  = module.get.screenSize()
            ;
            module.verbose('Saving element position');
            // (quicker than $.extend)
            element.fits          = (element.height < screen.height);
            element.offset        = $module.offset();
            element.width         = $module.outerWidth();
            element.height        = $module.outerHeight();
            // store
            module.cache.element = element;
            return element;
          },
          elementCalculations: function() {
            var
              screen     = module.get.screenCalculations(),
              element    = module.get.elementPosition()
            ;
            // offset
            if(settings.includeMargin) {
              element.margin        = {};
              element.margin.top    = parseInt($module.css('margin-top'), 10);
              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);
              element.top    = element.offset.top - element.margin.top;
              element.bottom = element.offset.top + element.height + element.margin.bottom;
            }
            else {
              element.top    = element.offset.top;
              element.bottom = element.offset.top + element.height;
            }

            // visibility
            element.topVisible       = (screen.bottom >= element.top);
            element.topPassed        = (screen.top >= element.top);
            element.bottomVisible    = (screen.bottom >= element.bottom);
            element.bottomPassed     = (screen.top >= element.bottom);
            element.pixelsPassed     = 0;
            element.percentagePassed = 0;

            // meta calculations
            element.onScreen  = (element.topVisible && !element.bottomPassed);
            element.passing   = (element.topPassed && !element.bottomPassed);
            element.offScreen = (!element.onScreen);

            // passing calculations
            if(element.passing) {
              element.pixelsPassed     = (screen.top - element.top);
              element.percentagePassed = (screen.top - element.top) / element.height;
            }
            module.cache.element = element;
            module.verbose('Updated element calculations', element);
            return element;
          },
          screenCalculations: function() {
            var
              scroll = module.get.scroll()
            ;
            module.save.direction();
            module.cache.screen.top    = scroll;
            module.cache.screen.bottom = scroll + module.cache.screen.height;
            return module.cache.screen;
          },
          screenSize: function() {
            module.verbose('Saving window position');
            module.cache.screen = {
              height: $context.height()
            };
          },
          position: function() {
            module.save.screenSize();
            module.save.elementPosition();
          }
        },

        get: {
          pixelsPassed: function(amount) {
            var
              element = module.get.elementCalculations()
            ;
            if(amount.search('%') > -1) {
              return ( element.height * (parseInt(amount, 10) / 100) );
            }
            return parseInt(amount, 10);
          },
          occurred: function(callback) {
            return (module.cache.occurred !== undefined)
              ? module.cache.occurred[callback] || false
              : false
            ;
          },
          direction: function() {
            if(module.cache.direction === undefined) {
              module.save.direction();
            }
            return module.cache.direction;
          },
          elementPosition: function() {
            if(module.cache.element === undefined) {
              module.save.elementPosition();
            }
            return module.cache.element;
          },
          elementCalculations: function() {
            if(module.cache.element === undefined) {
              module.save.elementCalculations();
            }
            return module.cache.element;
          },
          screenCalculations: function() {
            if(module.cache.screen === undefined) {
              module.save.screenCalculations();
            }
            return module.cache.screen;
          },
          screenSize: function() {
            if(module.cache.screen === undefined) {
              module.save.screenSize();
            }
            return module.cache.screen;
          },
          scroll: function() {
            if(module.cache.scroll === undefined) {
              module.save.scroll();
            }
            return module.cache.scroll;
          },
          lastScroll: function() {
            if(module.cache.screen === undefined) {
              module.debug('First scroll event, no last scroll could be found');
              return false;
            }
            return module.cache.screen.top;
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        instance.save.scroll();
        instance.save.calculations();
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.visibility.settings = {

  name                   : 'Visibility',
  namespace              : 'visibility',

  debug                  : false,
  verbose                : false,
  performance            : true,

  // whether to use mutation observers to follow changes
  observeChanges         : true,

  // check position immediately on init
  initialCheck           : true,

  // whether to refresh calculations after all page images load
  refreshOnLoad          : true,

  // whether to refresh calculations after page resize event
  refreshOnResize        : true,

  // should call callbacks on refresh event (resize, etc)
  checkOnRefresh         : true,

  // callback should only occur one time
  once                   : true,

  // callback should fire continuously whe evaluates to true
  continuous             : false,

  // offset to use with scroll top
  offset                 : 0,

  // whether to include margin in elements position
  includeMargin          : false,

  // scroll context for visibility checks
  context                : window,

  // visibility check delay in ms (defaults to animationFrame)
  throttle               : false,

  // special visibility type (image, fixed)
  type                   : false,

  // image only animation settings
  transition             : 'fade in',
  duration               : 1000,

  // array of callbacks for percentage
  onPassed               : {},

  // standard callbacks
  onOnScreen             : false,
  onOffScreen            : false,
  onPassing              : false,
  onTopVisible           : false,
  onBottomVisible        : false,
  onTopPassed            : false,
  onBottomPassed         : false,

  // reverse callbacks
  onPassingReverse       : false,
  onTopVisibleReverse    : false,
  onBottomVisibleReverse : false,
  onTopPassedReverse     : false,
  onBottomPassedReverse  : false,

  // utility callbacks
  onUpdate               : false, // disabled by default for performance
  onRefresh              : function(){},

  metadata : {
    src: 'src'
  },

  className: {
    fixed       : 'fixed',
    placeholder : 'placeholder'
  },

  error : {
    method  : 'The method you called is not defined.',
    visible : 'Element is hidden, you must call refresh after element becomes visible'
  }

};

})( jQuery, window, document );
/*! Cola UI - 0.8.5
 * Copyright (c) 2002-2016 BSTEK Corp. All rights reserved.
 *
 * This file is dual-licensed under the AGPLv3 (http://www.gnu.org/licenses/agpl-3.0.html)
 * and BSDN commercial (http://www.bsdn.org/licenses) licenses.
 *
 * If you are unsure which license is appropriate for your use, please contact the sales department
 * at http://www.bstek.com/contact.
 */
(function() {
  var ALIAS_REGEXP, IGNORE_NODES, LinkedList, ON_NODE_REMOVED_KEY, Page, TYPE_SEVERITY, USER_DATA_KEY, VALIDATION_ERROR, VALIDATION_INFO, VALIDATION_NONE, VALIDATION_WARN, _$, _DOMNodeInsertedListener, _DOMNodeRemovedListener, _Entity, _EntityList, _ExpressionDataModel, _ExpressionScope, _RESERVE_NAMES, _SYS_PARAMS, _compileResourceUrl, _cssCache, _destroyDomBinding, _doRenderDomTemplate, _evalDataPath, _findRouter, _getData, _getEntityPath, _getHashPath, _getNodeDataId, _jsCache, _loadCss, _loadHtml, _loadJs, _matchValue, _nodesToBeRemove, _numberWords, _onHashChange, _onStateChange, _setValue, _switchRouter, _toJSON, _triggerWatcher, _unloadCss, _unwatch, _watch, alertException, appendChild, browser, buildContent, cola, colaEventRegistry, createContentPart, createNodeForAppend, currentRoutePath, currentRouter, defaultActionTimestamp, defaultDataTypes, definedSetting, digestExpression, doMergeDefinitions, doms, exceptionStack, getDefinition, hasDefinition, key, oldIE, originalAjax, os, resourceStore, routerRegistry, setAttrs, setting, splitExpression, sprintf, tagSplitter, trimPath, typeRegistry, uniqueIdSeed, value, xCreate,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.cola = cola = function() {
    var ref;
    return (ref = cola["_rootFunc"]) != null ? ref.apply(cola, arguments) : void 0;
  };

  cola.util = {};

  cola.constants = {
    VARIABLE_NAME_REGEXP: /^[_a-zA-Z][_a-zA-Z0-9]*$/g,
    VIEW_CLASS: "c-view",
    VIEW_PORT_CLASS: "c-viewport",
    IGNORE_DIRECTIVE: "c-ignore",
    COLLECTION_CURRENT_CLASS: "current",
    DEFAULT_PATH: "$root",
    REPEAT_INDEX: "$index",
    DOM_USER_DATA_KEY: "_d",
    DOM_BINDING_KEY: "_binding",
    DOM_INITIALIZER_KEY: "_initialize",
    REPEAT_TEMPLATE_KEY: "_template",
    REPEAT_TAIL_KEY: "_tail",
    DOM_ELEMENT_KEY: "_element",
    DOM_SKIP_CHILDREN: "_skipChildren",
    NOT_WHITE_REG: /\S+/g,
    CLASS_REG: /[\t\r\n\f]/g,
    WIDGET_DIMENSION_UNIT: "px",
    MESSAGE_REFRESH: 0,
    MESSAGE_PROPERTY_CHANGE: 1,
    MESSAGE_CURRENT_CHANGE: 10,
    MESSAGE_EDITING_STATE_CHANGE: 11,
    MESSAGE_VALIDATION_STATE_CHANGE: 15,
    MESSAGE_INSERT: 20,
    MESSAGE_REMOVE: 21,
    MESSAGE_LOADING_START: 30,
    MESSAGE_LOADING_END: 31
  };

  oldIE = !-[1,];

  $.xCreate = xCreate = function(template, context) {
    var $el, child, content, el, element, elements, l, len1, len2, len3, o, part, q, ref, tagName, templateProcessor;
    if (template instanceof Array) {
      elements = [];
      for (l = 0, len1 = template.length; l < len1; l++) {
        part = template[l];
        element = xCreate(part, context);
        if (element != null) {
          elements.push(element);
        }
      }
      return elements;
    }
    if (xCreate.templateProcessors.length) {
      ref = xCreate.templateProcessors;
      for (o = 0, len2 = ref.length; o < len2; o++) {
        templateProcessor = ref[o];
        element = templateProcessor(template);
        if (element != null) {
          return element;
        }
      }
    }
    if (typeof template === "string") {
      if (template.charAt(0) === '^') {
        template = {
          tagName: template.substring(1)
        };
      } else {
        return document.createTextNode(template);
      }
    }
    tagName = template.tagName || "DIV";
    tagName = tagName.toUpperCase();
    if (oldIE && tagName.toUpperCase() === "INPUT" && template.type) {
      el = document.createElement("<" + tagName + " type=\"" + template.type + "\"/>");
    } else {
      el = document.createElement(tagName);
    }
    $el = $(el);
    setAttrs(el, $el, template, context);
    content = template.content;
    if (content != null) {
      if (typeof content === "string") {
        if (content.charAt(0) === '^') {
          appendChild(el, document.createElement(content.substring(1)));
        } else {
          $el.text(content);
        }
      } else {
        if (content instanceof Array) {
          for (q = 0, len3 = content.length; q < len3; q++) {
            part = content[q];
            if (typeof part === "string") {
              if (part.charAt(0) === '^') {
                appendChild(el, document.createElement(part.substring(1)));
              } else {
                appendChild(el, document.createTextNode(part));
              }
            } else {
              child = xCreate(part, context);
              if (child != null) {
                appendChild(el, child);
              }
            }
          }
        } else if (content.nodeType) {
          appendChild(el, content);
        } else {
          child = xCreate(content, context);
          if (child != null) {
            appendChild(el, child);
          }
        }
      }
    } else if (template.html) {
      $el.html(template.html);
    }
    return el;
  };

  xCreate.templateProcessors = [];

  xCreate.attributeProcessor = {
    data: function($el, attrName, attrValue, context) {
      $el.data(attrValue);
    },
    style: function($el, attrName, attrValue, context) {
      if (typeof attrValue === "string") {
        $el.attr("style", attrValue);
      } else if (attrValue !== null) {
        $el.css(attrValue);
      }
    }
  };

  setAttrs = function(el, $el, attrs, context) {
    var attrName, attrValue, attributeProcessor;
    for (attrName in attrs) {
      attrValue = attrs[attrName];
      attributeProcessor = xCreate.attributeProcessor[attrName];
      if (attributeProcessor) {
        attributeProcessor($el, attrName, attrValue, context);
      } else {
        switch (attrName) {
          case "tagName":
          case "nodeName":
          case "content":
          case "html":
            continue;
          case "contextKey":
            if (context instanceof Object && attrValue && typeof attrValue === "string") {
              context[attrValue] = el;
            }
            break;
          case "data":
            if (context instanceof Object && attrValue && typeof attrValue === "string") {
              context[attrValue] = el;
            }
            break;
          case "classname":
            $el.attr("class", attrValue);
            break;
          default:
            if (typeof attrValue === "function") {
              $el.on(attrName, attrValue);
            } else {
              $el.attr(attrName, attrValue);
            }
        }
      }
    }
  };

  appendChild = function(parentEl, el) {
    var tbody;
    if (parentEl.nodeName === "TABLE" && el.nodeName === "TR") {
      tbody;
      if (parentEl && parentEl.tBodies[0]) {
        tbody = parentEl.tBodies[0];
      } else {
        tbody = parentEl.appendChild(document.createElement("tbody"));
      }
      parentEl = tbody;
    }
    return parentEl.appendChild(el);
  };

  createNodeForAppend = function(template, context) {
    var element, fragment, l, len1, result;
    result = xCreate(template, context);
    if (!result) {
      return null;
    }
    if (result instanceof Array) {
      fragment = document.createDocumentFragment();
      for (l = 0, len1 = result.length; l < len1; l++) {
        element = result[l];
        fragment.appendChild(element);
      }
      result = fragment;
    }
    return result;
  };

  $.fn.xAppend = function(template, context) {
    var result;
    result = createNodeForAppend(template, context);
    if (!result) {
      return null;
    }
    return this.append(result);
  };

  $.fn.xInsertBefore = function(template, context) {
    var result;
    result = createNodeForAppend(template, context);
    if (!result) {
      return null;
    }
    return this.before(result);
  };

  $.fn.xInsertAfter = function(template, context) {
    var result;
    result = createNodeForAppend(template, context);
    if (!result) {
      return null;
    }
    return this.after(result);
  };

  cola.util.KeyedArray = (function() {
    KeyedArray.prototype.size = 0;

    function KeyedArray() {
      this.elements = [];
      this.keys = [];
      this.keyMap = {};
    }

    KeyedArray.prototype.add = function(key, element) {
      var i;
      if (this.keyMap.hasOwnProperty(key)) {
        i = this.elements.indexOf(element);
        if (i > -1) {
          this.elements.splice(i, 1);
          this.keys.splice(i, 1);
        }
      }
      this.keyMap[key] = element;
      this.size = this.elements.push(element);
      this.keys.push(key);
      return this;
    };

    KeyedArray.prototype.remove = function(key) {
      var element, i;
      if (typeof key === "number") {
        i = key;
        key = this.keys[i];
        element = this.elements[i];
        this.elements.splice(i, 1);
        this.keys.splice(i, 1);
        this.size = this.elements.length;
        delete this.keyMap[key];
      } else {
        element = this.keyMap[key];
        delete this.keyMap[key];
        if (element) {
          i = this.keys.indexOf(key);
          if (i > -1) {
            this.elements.splice(i, 1);
            this.keys.splice(i, 1);
            this.size = this.elements.length;
          }
        }
      }
      return element;
    };

    KeyedArray.prototype.get = function(key) {
      if (typeof key === "number") {
        return this.elements[key];
      } else {
        return this.keyMap[key];
      }
    };

    KeyedArray.prototype.getIndex = function(key) {
      if (this.keyMap.hasOwnProperty(key)) {
        return this.keys.indexOf(key);
      }
      return -1;
    };

    KeyedArray.prototype.clear = function() {
      this.elements = [];
      this.keys = [];
      this.keyMap = {};
      this.size = 0;
    };

    KeyedArray.prototype.elements = function() {
      return this.elements;
    };

    KeyedArray.prototype.each = function(fn) {
      var element, i, keys, l, len1, ref;
      keys = this.keys;
      ref = this.elements;
      for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
        element = ref[i];
        if (fn.call(this, element, keys[i]) === false) {
          break;
        }
      }
    };

    return KeyedArray;

  })();

  cola.util.trim = function(text) {
    if (text != null) {
      return String.prototype.trim.call(text);
    } else {
      return "";
    }
  };

  cola.util.capitalize = function(text) {
    if (!text) {
      return text;
    }
    return text.charAt(0).toUpperCase() + text.slice(1);
  };

  cola.util.isSimpleValue = function(value) {
    var type;
    if (value === null || value === void 0) {
      return false;
    }
    type = typeof value;
    return type !== "object" && type !== "function" || type instanceof Date;
  };

  cola.util.each = function(array, fn) {
    var i, item, l, len1;
    for (i = l = 0, len1 = array.length; l < len1; i = ++l) {
      item = array[i];
      if (fn(item, i) === false) {
        break;
      }
    }
  };

  cola.util.concatUrl = function() {
    var changed, i, l, last, len1, part, parts;
    parts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    last = parts.length - 1;
    for (i = l = 0, len1 = parts.length; l < len1; i = ++l) {
      part = parts[i];
      changed = false;
      if (i > 0 && part.charCodeAt(0) === 47) {
        part = part.substring(1);
        changed = true;
      }
      if (i < last && part.charCodeAt(part.length - 1) === 47) {
        part = part.substring(0, part.length - 1);
        changed = true;
      }
      if (changed) {
        parts[i] = part;
      }
    }
    return parts.join("/");
  };

  cola.util.parseStyleLikeString = function(styleStr, headerProp) {
    var i, j, l, len1, part, parts, style, styleExpr, styleProp;
    if (!styleStr) {
      return false;
    }
    style = {};
    parts = styleStr.split(";");
    for (i = l = 0, len1 = parts.length; l < len1; i = ++l) {
      part = parts[i];
      j = part.indexOf(":");
      if (j > 0) {
        styleProp = this.trim(part.substring(0, j));
        styleExpr = this.trim(part.substring(j + 1));
        if (styleProp && styleExpr) {
          style[styleProp] = styleExpr;
        }
      } else {
        part = this.trim(part);
        if (!part) {
          continue;
        }
        if (i === 0 && headerProp) {
          style[headerProp] = part;
        } else {
          style[part] = true;
        }
      }
    }
    return style;
  };

  cola.util.parseFunctionArgs = function(func) {
    var arg, argStr, args, i, l, len1, rawArgs;
    argStr = func.toString().match(/\([^\(\)]*\)/)[0];
    rawArgs = argStr.substring(1, argStr.length - 1).split(",");
    args = [];
    for (i = l = 0, len1 = rawArgs.length; l < len1; i = ++l) {
      arg = rawArgs[i];
      arg = cola.util.trim(arg);
      if (arg) {
        args.push(arg);
      }
    }
    return args;
  };

  cola.util.parseListener = function(listener) {
    var argStr, args, argsMode;
    argsMode = 1;
    argStr = listener.toString().match(/\([^\(\)]*\)/)[0];
    args = argStr.substring(1, argStr.length - 1).split(",");
    if (args.length) {
      if (cola.util.trim(args[0]) === "arg") {
        argsMode = 2;
      }
    }
    listener._argsMode = argsMode;
    return argsMode;
  };

  cola.util.isCompatibleType = function(baseType, type) {
    if (type === baseType) {
      return true;
    }
    while (type.__super__) {
      type = type.__super__.constructor;
      if (type === baseType) {
        return true;
      }
    }
    return false;
  };

  cola.util.delay = function(owner, name, delay, fn) {
    cola.util.cancelDelay(owner, name);
    owner["_timer_" + name] = setTimeout(function() {
      fn.call(owner);
    }, delay);
  };

  cola.util.cancelDelay = function(owner, name) {
    var key, timerId;
    key = "_timer_" + name;
    timerId = owner[key];
    if (timerId) {
      delete owner[key];
      clearTimeout(timerId);
    }
  };

  cola.util.waitForAll = function(funcs, callback) {
    var completed, func, id, l, len1, procedures, subCallback, total;
    if (!funcs || !funcs.length) {
      cola.callback(callback, true);
    }
    completed = 0;
    total = funcs.length;
    procedures = {};
    for (l = 0, len1 = funcs.length; l < len1; l++) {
      func = funcs[l];
      id = cola.uniqueId();
      procedures[id] = true;
      subCallback = {
        id: id,
        complete: function(success) {
          var disabled;
          if (disabled) {
            return;
          }
          if (success) {
            if (procedures[this.id]) {
              delete procedures[this.id];
              completed++;
              if (completed === total) {
                cola.callback(callback, true);
                disabled = true;
              }
            }
          } else {
            cola.callback(callback, false);
            disabled = true;
          }
        }
      };
      subCallback.scope = subCallback;
      func(subCallback);
    }
  };

  cola.util.isSuperClass = function(superCls, cls) {
    var ref;
    if (!superCls) {
      return false;
    }
    while (cls) {
      if (cls.__super__ === superCls.prototype) {
        return true;
      }
      cls = (ref = cls.__super__) != null ? ref.constructor : void 0;
    }
    return false;
  };

  cola.version = "${version}";

  uniqueIdSeed = 1;

  cola.uniqueId = function() {
    return "_id" + (uniqueIdSeed++);
  };

  cola.sequenceNo = function() {
    return uniqueIdSeed++;
  };

  cola._EMPTY_FUNC = function() {};

  if (typeof window !== "undefined" && window !== null) {
    (function() {
      var s, theshold, ua;
      cola.browser = {};
      cola.os = {};
      cola.device = {};
      ua = window.navigator.userAgent.toLowerCase();
      if ((s = ua.match(/webkit\/([\d.]+)/))) {
        cola.browser.webkit = s[1] || -1;
        if ((s = ua.match(/chrome\/([\d.]+)/))) {
          cola.browser.chrome = parseFloat(s[1]) || -1;
        } else if ((s = ua.match(/version\/([\d.]+).*safari/))) {
          cola.browser.safari = parseFloat(s[1]) || -1;
        }
        if ((s = ua.match(/qqbrowser\/([\d.]+)/))) {
          cola.browser.qqbrowser = parseFloat(s[1]) || -1;
        }
      } else if ((s = ua.match(/msie ([\d.]+)/))) {
        cola.browser.ie = parseFloat(s[1]) || -1;
      } else if ((s = ua.match(/trident/))) {
        cola.browser.ie = 11;
      } else if ((s = ua.match(/firefox\/([\d.]+)/))) {
        cola.browser.mozilla = parseFloat(s[1]) || -1;
      } else if ((s = ua.match(/opera.([\d.]+)/))) {
        cola.browser.opera = parseFloat(s[1]) || -1;
      }
      if ((s = ua.match(/(iphone|ipad).*os\s([\d_]+)/))) {
        cola.os.ios = parseFloat(s[2]) || -1;
        cola.device.pad = s[1] === "ipad";
        cola.device.phone = !cola.device.pad;
      } else {
        if ((s = ua.match(/(android)\s+([\d.]+)/))) {
          cola.os.android = parseFloat(s[1]) || -1;
          if ((s = ua.match(/micromessenger\/([\d.]+)/))) {
            cola.browser.weixin = parseFloat(s[1]) || -1;
          }
        } else if ((s = ua.match(/(windows)[\D]*([\d]+)/))) {
          cola.os.windows = parseFloat(s[1]) || -1;
        }
      }
      cola.device.mobile = !!(("ontouchstart" in window) && ua.match(/(mobile)/));
      cola.device.desktop = !cola.device.mobile;
      if (cola.device.mobile && !cola.os.ios) {
        theshold = 768;
        if (cola.browser.qqbrowser) {
          cola.device.pad = (window.screen.width / 2) >= theshold || (window.screen.height / 2) >= theshold;
        } else {
          cola.device.pad = window.screen.width >= theshold || window.screen.height >= theshold;
        }
        cola.device.phone = !cola.device.pad;
      }
    })();
  }


  /*
  Event
   */

  colaEventRegistry = {
    ready: {},
    settingChange: {},
    exception: {},
    beforeRouterSwitch: {},
    routerSwitch: {}
  };

  cola.on = function(eventName, listener) {
    var alias, aliasMap, i, listenerRegistry, listeners;
    i = eventName.indexOf(":");
    if (i > 0) {
      alias = eventName.substring(i + 1);
      eventName = eventName.substring(0, i);
    }
    listenerRegistry = colaEventRegistry[eventName];
    if (!listenerRegistry) {
      throw new cola.Exception("Unrecognized event \"" + eventName + "\".");
    }
    if (typeof listener !== "function") {
      throw new cola.Exception("Invalid event listener.");
    }
    listeners = listenerRegistry.listeners;
    aliasMap = listenerRegistry.aliasMap;
    if (listeners) {
      if (alias && (aliasMap != null ? aliasMap[alias] : void 0) > -1) {
        cola.off(eventName + ":" + alias);
      }
      listeners.push(listener);
      i = listeners.length - 1;
    } else {
      listenerRegistry.listeners = listeners = [listener];
      i = 0;
    }
    if (alias) {
      if (!aliasMap) {
        listenerRegistry.aliasMap = aliasMap = {};
      }
      aliasMap[alias] = i;
    }
    return this;
  };

  cola.off = function(eventName, listener) {
    var alias, aliasMap, i, listenerRegistry, listeners;
    i = eventName.indexOf(":");
    if (i > 0) {
      alias = eventName.substring(i + 1);
      eventName = eventName.substring(0, i);
    }
    listenerRegistry = colaEventRegistry[eventName];
    if (!listenerRegistry) {
      return this;
    }
    listeners = listenerRegistry.listeners;
    if (!listeners || listeners.length === 0) {
      return this;
    }
    i = -1;
    if (alias) {
      aliasMap = listenerRegistry.aliasMap;
      i = aliasMap != null ? aliasMap[alias] : void 0;
      if (i > -1) {
        if (aliasMap != null) {
          delete aliasMap[alias];
        }
        listeners.splice(i, 1);
      }
    } else if (listener) {
      i = listeners.indexOf(listener);
      if (i > -1) {
        listeners.splice(i, 1);
        aliasMap = listenerRegistry.aliasMap;
        if (aliasMap) {
          for (alias in aliasMap) {
            if (aliasMap[alias] === listener) {
              delete aliasMap[alias];
              break;
            }
          }
        }
      }
    } else {
      delete listenerRegistry.listeners;
      delete listenerRegistry.aliasMap;
    }
    return this;
  };

  cola.getListeners = function(eventName) {
    var listener, ref;
    listener = (ref = colaEventRegistry[eventName]) != null ? ref.listeners : void 0;
    if (listener != null ? listener.length : void 0) {
      return listener;
    } else {
      return null;
    }
  };

  cola.fire = function(eventName, self, arg) {
    var argsMode, l, len1, listener, listeners, ref, retValue;
    if (arg == null) {
      arg = {};
    }
    listeners = (ref = colaEventRegistry[eventName]) != null ? ref.listeners : void 0;
    if (listeners) {
      for (l = 0, len1 = listeners.length; l < len1; l++) {
        listener = listeners[l];
        argsMode = listener._argsMode;
        if (!listener._argsMode) {
          argsMode = cola.util.parseListener(listener);
        }
        if (argsMode === 1) {
          retValue = listener.call(this, self, arg);
        } else {
          retValue = listener.call(this, arg, self);
        }
        if (retValue === false) {
          return false;
        }
      }
    }
    return true;
  };

  cola.ready = function(listener) {
    return this.on("ready", listener);
  };


  /*
  Setting
   */

  setting = {
    defaultCharset: "utf-8",
    defaultDateFormat: "yyyy-mm-dd"
  };

  cola.setting = function(key, value) {
    var k, v;
    if (typeof key === "string") {
      if (value !== void 0) {
        setting[key] = value;
        if (cola.getListeners("settingChange")) {
          cola.fire("settingChange", cola, {
            key: key
          });
        }
      } else {
        return setting[key];
      }
    } else if (typeof key === "object") {
      for (k in key) {
        v = key[k];
        setting[k] = v;
        if (cola.getListeners("settingChange")) {
          cola.fire("settingChange", cola, {
            key: k
          });
        }
      }
    }
    return this;
  };

  definedSetting = (typeof colaSetting !== "undefined" && colaSetting !== null) || (typeof global !== "undefined" && global !== null ? global.colaSetting : void 0);

  if (definedSetting) {
    for (key in definedSetting) {
      value = definedSetting[key];
      cola.setting(key, value);
    }
  }


  /*
  Exception
   */

  exceptionStack = [];

  alertException = function(ex) {
    var msg;
    if (ex instanceof cola.Exception || ex instanceof Error) {
      msg = ex.message;
    } else {
      msg = ex + "";
    }
    if (typeof alert === "function") {
      alert(msg);
    }
  };

  cola.Exception = (function() {
    function Exception(message3, error1) {
      this.message = message3;
      this.error = error1;
      if (this.error) {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.trace === "function") {
            console.trace(this.error);
          }
        }
      }
      exceptionStack.push(this);
      setTimeout((function(_this) {
        return function() {
          if (exceptionStack.indexOf(_this) > -1) {
            cola.Exception.processException(_this);
          }
        };
      })(this), 50);
    }

    Exception.processException = function(ex) {
      var ex2, scope;
      if (cola.Exception.ignoreAll) {
        return;
      }
      if (ex) {
        cola.Exception.removeException(ex);
      }
      if (ex instanceof cola.AbortException) {
        return;
      }
      if (cola.fire("exception", cola, {
        exception: ex
      }) === false) {
        return;
      }
      if (ex instanceof cola.RunnableException) {
        eval("var fn = function(){" + ex.script + "}");
        scope = typeof window !== "undefined" && window !== null ? window : this;
        fn.call(scope);
      } else {
        if (cola.Exception.ignoreAll) {
          return;
        }
        try {
          if (typeof document !== "undefined" && document !== null ? document.body : void 0) {
            if (ex.showException) {
              ex.showException();
            } else {
              cola.Exception.showException(ex);
            }
          } else {
            if (ex.safeShowException) {
              ex.safeShowException();
            } else {
              cola.Exception.safeShowException(ex);
            }
          }
        } catch (_error) {
          ex2 = _error;
          cola.Exception.removeException(ex2);
          if (ex2.safeShowException) {
            ex2.safeShowException();
          } else {
            cola.Exception.safeShowException(ex2);
          }
        }
      }
    };

    Exception.removeException = function(ex) {
      var i;
      i = exceptionStack.indexOf(ex);
      if (i > -1) {
        exceptionStack.splice(i, 1);
      }
    };

    Exception.safeShowException = function(exception) {
      alertException(exception);
    };

    Exception.showException = function(exception) {
      alertException(exception);
    };

    return Exception;

  })();

  cola.AbortException = (function(superClass) {
    extend(AbortException, superClass);

    function AbortException() {}

    return AbortException;

  })(cola.Exception);

  cola.RunnableException = (function(superClass) {
    extend(RunnableException, superClass);

    function RunnableException(script1) {
      this.script = script1;
      RunnableException.__super__.constructor.call(this, "[script]");
    }

    return RunnableException;

  })(cola.Exception);


  /*
  I18N
   */

  resourceStore = {};

  sprintf = function() {
    var i, l, len1, param, params, templ;
    templ = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = l = 0, len1 = params.length; l < len1; i = ++l) {
      param = params[i];
      templ = templ.replace(new RegExp("\\{" + i + "\\}", "g"), param);
    }
    return templ;
  };

  cola.resource = function() {
    var bundle, key, params, str, templ;
    key = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (typeof key === "string") {
      templ = resourceStore[key];
      if (templ != null) {
        if (params.length) {
          return sprintf.apply(this, [templ].concat(params));
        } else {
          return templ;
        }
      } else {
        return (params != null ? params[0] : void 0) || key;
      }
    } else {
      bundle = key;
      for (key in bundle) {
        str = bundle[key];
        resourceStore[key] = str;
      }
    }
  };

  cola.ResourceException = (function(superClass) {
    extend(ResourceException, superClass);

    function ResourceException() {
      var key, params;
      key = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      ResourceException.__super__.constructor.call(this, cola.resource.apply(cola, [key].concat(slice.call(params))));
    }

    return ResourceException;

  })(cola.Exception);


  /*
  Methods
   */

  cola.callback = function(callback, success, result) {
    var scope;
    if (!callback) {
      return;
    }
    if (typeof callback === "function") {
      if (success) {
        return callback.call(this, result);
      }
    } else {
      scope = callback.scope || this;
      if (callback.delay) {
        setTimeout(function() {
          callback.complete.call(scope, success, result);
        }, callback.delay);
      } else {
        return callback.complete.call(scope, success, result);
      }
    }
  };

  cola.resource({
    "cola.date.monthNames": "January,February,March,April,May,June,July,August,September,October,November,December",
    "cola.date.monthNamesShort": "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sept,Oct,Nov,Dec",
    "cola.date.dayNames": "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",
    "cola.date.dayNamesShort": "S,M,T,W,T,F,S",
    "cola.date.amDesignator": "AM",
    "cola.date.pmDesignator": "PM",
    "cola.validator.error.required": "Cannot be empty.",
    "cola.validator.error.length": "Length is not within the correct range.",
    "cola.validator.error.number": "Value is not within the correct range.",
    "cola.validator.error.email": "Email format is incorrect.",
    "cola.validator.error.url": "URL format is incorrect.",
    "cola.validator.error.regExp": "Format is incorrect.",
    "cola.messageBox.info.title": "Information",
    "cola.messageBox.warning.title": "Warning",
    "cola.messageBox.error.title": "Error",
    "cola.messageBox.question.title": "Confirm",
    "cola.message.approve": "Ok",
    "cola.message.deny": "Cancel"
  });

  _toJSON = function(data) {
    var p, rawData, v;
    if (data) {
      if (typeof data === "object") {
        if (data instanceof cola.Entity || data instanceof cola.EntityList) {
          data = data.toJSON();
        } else {
          rawData = data;
          data = {};
          for (p in rawData) {
            v = rawData[p];
            data[p] = _toJSON(v);
          }
        }
      } else if (typeof data === "function") {
        data = void 0;
      }
    }
    return data;
  };

  originalAjax = jQuery.ajax;

  $.ajax = function(url, settings) {
    var data, p, rawData, v;
    if (typeof url === "object" && !settings) {
      settings = url;
    }
    data = settings.data;
    if (data) {
      if (typeof data === "object") {
        if (data instanceof cola.Entity || data instanceof cola.EntityList) {
          data = data.toJSON();
        } else if (!(data instanceof FormData)) {
          rawData = data;
          data = {};
          for (p in rawData) {
            v = rawData[p];
            data[p] = _toJSON(v);
          }
        }
      } else if (typeof data === "function") {
        data = void 0;
      }
      settings.data = data;
    }
    return originalAjax.apply(this, [url, settings]);
  };

  tagSplitter = " ";

  doMergeDefinitions = function(definitions, mergeDefinitions, overwrite) {
    var definition, mergeDefinition, name, prop;
    if (definitions === mergeDefinitions) {
      return;
    }
    for (name in mergeDefinitions) {
      mergeDefinition = mergeDefinitions[name];
      if (definitions.$has(name)) {
        definition = definitions[name];
        if (definition && mergeDefinition) {
          for (prop in mergeDefinition) {
            if (overwrite || !definition.hasOwnProperty(prop)) {
              definition[prop] = mergeDefinition[prop];
            }
          }
        } else {
          definitions[name] = mergeDefinition;
        }
      } else {
        definitions[name] = mergeDefinition;
      }
    }
  };

  hasDefinition = function(name) {
    return this.hasOwnProperty(name.toLowerCase());
  };

  getDefinition = function(name) {
    return this[name.toLowerCase()];
  };

  cola.preprocessClass = function(classType) {
    var attributes, definition, events, name, realName, ref, superType;
    if (!(!classType.attributes._inited || !classType.events._inited)) {
      return;
    }
    superType = (ref = classType.__super__) != null ? ref.constructor : void 0;
    if (superType) {
      if (superType && (!superType.attributes._inited || !superType.events._inited)) {
        cola.preprocessClass(superType);
      }
      attributes = classType.attributes;
      if (!attributes._inited) {
        attributes._inited = true;
        for (name in attributes) {
          definition = attributes[name];
          realName = name.toLowerCase();
          if (name !== realName) {
            if (definition == null) {
              definition = {};
            }
            definition.name = name;
            attributes[realName] = definition;
            delete attributes[name];
          }
        }
        attributes.$has = hasDefinition;
        attributes.$get = getDefinition;
        doMergeDefinitions(attributes, superType.attributes, false);
      }
      events = classType.events;
      if (!events._inited) {
        events._inited = true;
        for (name in events) {
          definition = events[name];
          realName = name.toLowerCase();
          if (name !== realName) {
            events[realName] = definition;
            delete events[name];
          }
        }
        events.$has = hasDefinition;
        events.$get = getDefinition;
        doMergeDefinitions(events, superType.events, false);
      }
    }
  };

  cola.Element = (function() {
    Element.mixin = function(classType, mixin) {
      var attributes, events, member, mixInEvents, mixinAttributes, name;
      for (name in mixin) {
        member = mixin[name];
        if (name === "attributes") {
          mixinAttributes = member;
          if (mixinAttributes) {
            attributes = classType.attributes != null ? classType.attributes : classType.attributes = {};
            doMergeDefinitions(attributes, mixinAttributes, true);
          }
        } else if (name === "events") {
          mixInEvents = member;
          if (mixInEvents) {
            events = classType.events != null ? classType.events : classType.events = {};
            doMergeDefinitions(events, mixInEvents, true);
          }
        } else if (name === "constructor") {
          if (!classType._constructors) {
            classType._constructors = [member];
          } else {
            classType._constructors.push(member);
          }
        } else if (name === "destroy") {
          if (!classType._destructors) {
            classType._destructors = [member];
          } else {
            classType._destructors.push(member);
          }
        } else {
          classType.prototype[name] = member;
        }
      }
    };

    Element.attributes = {
      model: {
        readOnly: true,
        getter: function() {
          return this._scope;
        }
      },
      tag: {
        getter: function() {
          if (this._tag) {
            return this._tag.join(tagSplitter);
          } else {
            return null;
          }
        },
        setter: function(tag) {
          var l, len1, len2, o, ref, t, ts;
          if (this._tag) {
            ref = this._tag;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              t = ref[l];
              cola.tagManager.unreg(t, this);
            }
          }
          if (tag) {
            this._tag = ts = tag.split(tagSplitter);
            for (o = 0, len2 = ts.length; o < len2; o++) {
              t = ts[o];
              cola.tagManager.reg(t, this);
            }
          } else {
            this._tag = null;
          }
        }
      },
      userData: null
    };

    Element.events = {
      create: null,
      attributeChange: null,
      destroy: null
    };

    function Element(config) {
      var attr, attrConfig, attrConfigs, classType, constructor, l, len1, ref;
      classType = this.constructor;
      if (!classType.attributes._inited || !classType.events._inited) {
        cola.preprocessClass(classType);
      }
      this._constructing = true;
      this._scope = (config != null ? config.scope : void 0) || cola.currentScope;
      attrConfigs = classType.attributes;
      for (attr in attrConfigs) {
        attrConfig = attrConfigs[attr];
        if ((attrConfig != null ? attrConfig.defaultValue : void 0) !== void 0) {
          if (attrConfig.setter) {
            attrConfig.setter.call(this, attrConfig.defaultValue, attr);
          } else {
            this["_" + ((attrConfig != null ? attrConfig.name : void 0) || attr)] = attrConfig.defaultValue;
          }
        }
      }
      if (classType._constructors) {
        ref = classType._constructors;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          constructor = ref[l];
          constructor.call(this);
        }
      }
      if (config) {
        this.set(config, true);
      }
      delete this._constructing;
      this.fire("create", this);
    }

    Element.prototype.destroy = function() {
      var classType, destructor, elementAttrBinding, l, len1, p, ref, ref1;
      classType = this.constructor;
      if (classType._destructors) {
        ref = classType._destructors;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          destructor = ref[l];
          destructor.call(this);
        }
      }
      if (this._elementAttrBindings) {
        ref1 = this._elementAttrBindings;
        for (p in ref1) {
          elementAttrBinding = ref1[p];
          elementAttrBinding.destroy();
        }
      }
      this.fire("destroy", this);
      if (this._tag) {
        this._set("tag", null);
      }
    };

    Element.prototype.get = function(attr, ignoreError) {
      var l, len1, obj, path, paths;
      if (attr.indexOf(".") > -1) {
        paths = attr.split(".");
        obj = this;
        for (l = 0, len1 = paths.length; l < len1; l++) {
          path = paths[l];
          if (obj instanceof cola.Element) {
            obj = obj._get(path, ignoreError);
          } else if (typeof obj.get === "function") {
            obj = obj.get(path);
          } else {
            obj = obj[path];
          }
          if (obj == null) {
            break;
          }
        }
        return obj;
      } else {
        return this._get(attr, ignoreError);
      }
    };

    Element.prototype._get = function(attr, ignoreError) {
      var attrConfig;
      if (!this.constructor.attributes.$has(attr)) {
        if (ignoreError) {
          return;
        }
        throw new cola.Exception("Unrecognized Attribute \"" + attr + "\".");
      }
      attrConfig = this.constructor.attributes[attr.toLowerCase()];
      if (attrConfig != null ? attrConfig.getter : void 0) {
        return attrConfig.getter.call(this, attr);
      } else {
        return this["_" + attr];
      }
    };

    Element.prototype.set = function(attr, value, ignoreError) {
      var config, i, l, len1, obj, path, paths;
      if (typeof attr === "string") {
        if (attr.indexOf(".") > -1) {
          paths = attr.split(".");
          obj = this;
          for (i = l = 0, len1 = paths.length; l < len1; i = ++l) {
            path = paths[i];
            if (obj instanceof cola.Element) {
              obj = obj._get(path, ignoreError);
            } else {
              obj = obj[path];
            }
            if (obj == null) {
              break;
            }
            if (i >= (paths.length - 2)) {
              break;
            }
          }
          if ((obj == null) && !ignoreError) {
            throw new cola.Exception("Cannot set attribute \"" + (path.slice(0, i).join(".")) + "\" of undefined.");
          }
          if (obj instanceof cola.Element) {
            obj._set(paths[paths.length - 1], value, ignoreError);
          } else if (typeof obj.set === "function") {
            obj.set(paths[paths.length - 1], value);
          } else {
            obj[paths[paths.length - 1]] = value;
          }
        } else {
          this._set(attr, value, ignoreError);
        }
      } else {
        config = attr;
        ignoreError = value;
        for (attr in config) {
          this.set(attr, config[attr], ignoreError);
        }
      }
      return this;
    };

    Element.prototype._set = function(attr, value, ignoreError) {
      var action, attrConfig, eventName, expression, i, parts, ref, scope;
      if (typeof value === "string" && this._scope) {
        if (value.charCodeAt(0) === 123) {
          parts = cola._compileText(value);
          if ((parts != null ? parts.length : void 0) > 0) {
            value = parts[0];
          }
        }
      }
      if (this.constructor.attributes.$has(attr)) {
        attrConfig = this.constructor.attributes[attr.toLowerCase()];
        if (attrConfig) {
          if (attrConfig.readOnly) {
            if (ignoreError) {
              return;
            }
            throw new cola.Exception("Attribute \"" + attr + "\" is readonly.");
          }
          if (!this._constructing && attrConfig.readOnlyAfterCreate) {
            if (ignoreError) {
              return;
            }
            throw new cola.Exception("Attribute \"" + attr + "\" cannot be changed after create.");
          }
        }
      } else if (value) {
        eventName = attr;
        i = eventName.indexOf(":");
        if (i > 0) {
          eventName = eventName.substring(0, i);
        }
        if (this.constructor.events.$has(eventName)) {
          if (value instanceof cola.Expression) {
            expression = value;
            scope = this._scope;
            this.on(attr, function(self, arg) {
              expression.evaluate(scope, "never", {
                vars: {
                  self: self,
                  arg: arg
                }
              });
            }, ignoreError);
            return;
          } else if (typeof value === "function") {
            this.on(attr, value);
            return;
          } else if (typeof value === "string") {
            action = (ref = this._scope) != null ? ref.action(value) : void 0;
            if (action) {
              this.on(attr, action);
              return;
            }
          }
        }
        if (ignoreError) {
          return;
        }
        throw new cola.Exception("Unrecognized Attribute \"" + attr + "\".");
      }
      this._doSet(attr, attrConfig, value);
      if (this._eventRegistry) {
        if (this.getListeners("attributeChange")) {
          this.fire("attributeChange", this, {
            attribute: attr
          });
        }
      }
    };

    Element.prototype._doSet = function(attr, attrConfig, value) {
      var elementAttrBinding, elementAttrBindings, expression, scope;
      if (!this._duringBindingRefresh && this._elementAttrBindings) {
        elementAttrBinding = this._elementAttrBindings[attr];
        if (elementAttrBinding) {
          elementAttrBinding.destroy();
          delete this._elementAttrBindings[attr];
        }
      }
      if (value instanceof cola.Expression && cola.currentScope) {
        expression = value;
        scope = cola.currentScope;
        if (expression.isStatic) {
          value = expression.evaluate(scope, "never");
        } else {
          elementAttrBinding = new cola.ElementAttrBinding(this, attr, expression, scope);
          if (this._elementAttrBindings == null) {
            this._elementAttrBindings = {};
          }
          elementAttrBindings = this._elementAttrBindings;
          if (elementAttrBindings) {
            elementAttrBindings[attr] = elementAttrBinding;
          }
          value = elementAttrBinding.evaluate();
        }
      }
      if (attrConfig) {
        if (attrConfig.type === "boolean") {
          if ((value != null) && typeof value !== "boolean") {
            value = value === "true";
          }
        } else if (attrConfig.type === "number") {
          if ((value != null) && typeof value !== "number") {
            value = parseFloat(value) || 0;
          }
        }
        if (attrConfig["enum"] && attrConfig["enum"].indexOf(value) < 0) {
          throw new cola.Exception("The value \"" + value + "\" of attribute \"" + attr + "\" is out of range.");
        }
        if (attrConfig.setter) {
          attrConfig.setter.call(this, value, attr);
          return;
        }
      }
      this["_" + ((attrConfig != null ? attrConfig.name : void 0) || attr)] = value;
    };

    Element.prototype._on = function(eventName, listener, alias, once) {
      var aliasMap, eventConfig, i, listenerRegistry, listeners;
      eventName = eventName.toLowerCase();
      eventConfig = this.constructor.events[eventName];
      if (this._eventRegistry) {
        listenerRegistry = this._eventRegistry[eventName];
      } else {
        this._eventRegistry = {};
      }
      if (!listenerRegistry) {
        this._eventRegistry[eventName] = listenerRegistry = {};
      }
      if (once) {
        if (listenerRegistry.onceListeners == null) {
          listenerRegistry.onceListeners = [];
        }
        listenerRegistry.onceListeners.push(listener);
      }
      listeners = listenerRegistry.listeners;
      aliasMap = listenerRegistry.aliasMap;
      if (listeners) {
        if ((eventConfig != null ? eventConfig.singleListener : void 0) && listeners.length) {
          throw new cola.Exception("Multi listeners is not allowed for event \"" + eventName + "\".");
        }
        if (alias && (aliasMap != null ? aliasMap[alias] : void 0) > -1) {
          cola.off(eventName + ":" + alias);
        }
        listeners.push(listener);
        i = listeners.length - 1;
      } else {
        listenerRegistry.listeners = listeners = [listener];
        i = 0;
      }
      if (alias) {
        if (!aliasMap) {
          listenerRegistry.aliasMap = aliasMap = {};
        }
        aliasMap[alias] = i;
      }
    };

    Element.prototype.on = function(eventName, listener, once) {
      var alias, i;
      i = eventName.indexOf(":");
      if (i > 0) {
        alias = eventName.substring(i + 1);
        eventName = eventName.substring(0, i);
      }
      if (!this.constructor.events.$has(eventName)) {
        throw new cola.Exception("Unrecognized event \"" + eventName + "\".");
      }
      if (typeof listener !== "function") {
        throw new cola.Exception("Invalid event listener.");
      }
      this._on(eventName, listener, alias, once);
      return this;
    };

    Element.prototype.one = function(eventName, listener) {
      return this.on(eventName, listener, true);
    };

    Element.prototype._off = function(eventName, listener, alias) {
      var aliasMap, i, listenerRegistry, listeners, onceListeners;
      eventName = eventName.toLowerCase();
      listenerRegistry = this._eventRegistry[eventName];
      if (!listenerRegistry) {
        return this;
      }
      listeners = listenerRegistry.listeners;
      if (!(listeners && listeners.length)) {
        return this;
      }
      i = -1;
      if (alias || listener) {
        if (alias) {
          aliasMap = listenerRegistry.aliasMap;
          i = aliasMap != null ? aliasMap[alias] : void 0;
          if (i > -1) {
            if (aliasMap != null) {
              delete aliasMap[alias];
            }
            listener = listeners[i];
            listeners.splice(i, 1);
          }
        } else if (listener) {
          i = listeners.indexOf(listener);
          if (i > -1) {
            listeners.splice(i, 1);
            aliasMap = listenerRegistry.aliasMap;
            if (aliasMap) {
              for (alias in aliasMap) {
                if (aliasMap[alias] === listener) {
                  delete aliasMap[alias];
                  break;
                }
              }
            }
          }
        }
        if (listenerRegistry.onceListeners && listener) {
          onceListeners = listenerRegistry.onceListeners;
          i = onceListeners.indexOf(listener);
          if (i > -1) {
            onceListeners.splice(i, 1);
            if (!onceListeners.length) {
              delete listenerRegistry.onceListeners;
            }
          }
        }
      } else {
        delete listenerRegistry.listeners;
        delete listenerRegistry.aliasMap;
      }
    };

    Element.prototype.off = function(eventName, listener) {
      var alias, i;
      if (!this._eventRegistry) {
        return this;
      }
      i = eventName.indexOf(":");
      if (i > 0) {
        alias = eventName.substring(i + 1);
        eventName = eventName.substring(0, i);
      }
      this._off(eventName, listener, alias);
      return this;
    };

    Element.prototype.getListeners = function(eventName) {
      var ref, ref1;
      return (ref = this._eventRegistry) != null ? (ref1 = ref[eventName.toLowerCase()]) != null ? ref1.listeners : void 0 : void 0;
    };

    Element.prototype.fire = function(eventName, self, arg) {
      var argsMode, l, len1, len2, listener, listenerRegistry, listeners, o, oldScope, onceListeners, result, retValue;
      if (!this._eventRegistry) {
        return;
      }
      eventName = eventName.toLowerCase();
      result = void 0;
      listenerRegistry = this._eventRegistry[eventName];
      if (listenerRegistry) {
        listeners = listenerRegistry.listeners;
        if (listeners) {
          if (arg) {
            arg.model = this._scope;
          } else {
            arg = {
              model: this._scope
            };
          }
          oldScope = cola.currentScope;
          cola.currentScope = this._scope;
          try {
            for (l = 0, len1 = listeners.length; l < len1; l++) {
              listener = listeners[l];
              if (typeof listener === "function") {
                argsMode = listener._argsMode;
                if (!listener._argsMode) {
                  argsMode = cola.util.parseListener(listener);
                }
                if (argsMode === 1) {
                  retValue = listener.call(self, self, arg);
                } else {
                  retValue = listener.call(self, arg, self);
                }
              } else if (typeof listener === "string") {
                retValue = (function(_this) {
                  return function(self, arg) {
                    return eval(listener);
                  };
                })(this)(self, arg);
              }
              if (retValue !== void 0) {
                result = retValue;
              }
              if (retValue === false) {
                break;
              }
            }
          } finally {
            cola.currentScope = oldScope;
          }
          if (listenerRegistry.onceListeners) {
            onceListeners = listenerRegistry.onceListeners.slice();
            delete listenerRegistry.onceListeners;
            for (o = 0, len2 = onceListeners.length; o < len2; o++) {
              listener = onceListeners[o];
              this.off(eventName, listener);
            }
          }
        }
      }
      return result;
    };

    return Element;

  })();

  cola.Definition = (function(superClass) {
    extend(Definition, superClass);

    Definition.attributes = {
      name: {
        readOnlyAfterCreate: true
      }
    };

    function Definition(config) {
      var scope;
      if (config != null ? config.name : void 0) {
        this._name = config.name;
        delete config.name;
        scope = (config != null ? config.scope : void 0) || cola.currentScope;
        if (scope) {
          scope.data.regDefinition(this);
        }
      }
      Definition.__super__.constructor.call(this, config);
    }

    return Definition;

  })(cola.Element);


  /*
      Element Group
   */

  cola.Element.createGroup = function(elements, model) {
    var ele, l, len1, scope;
    if (model) {
      elements = [];
      for (l = 0, len1 = elements.length; l < len1; l++) {
        ele = elements[l];
        if (ele._scope && !ele._model) {
          scope = ele._scope;
          while (scope) {
            if (scope instanceof cola.Scope) {
              ele._model = scope;
              break;
            }
            scope = scope.parent;
          }
        }
        if (ele._model === model) {
          elements.push(ele);
        }
      }
    } else {
      elements = elements ? elements.slice(0) : [];
    }
    elements.set = function(attr, value) {
      var element, len2, o;
      for (o = 0, len2 = elements.length; o < len2; o++) {
        element = elements[o];
        element.set(attr, value);
      }
      return this;
    };
    elements.on = function(eventName, listener, once) {
      var element, len2, o;
      for (o = 0, len2 = elements.length; o < len2; o++) {
        element = elements[o];
        element.on(eventName, listener, once);
      }
      return this;
    };
    elements.off = function(eventName) {
      var element, len2, o;
      for (o = 0, len2 = elements.length; o < len2; o++) {
        element = elements[o];
        element.off(eventName);
      }
      return this;
    };
    return elements;
  };


  /*
      Tag Manager
   */

  cola.tagManager = {
    registry: {},
    reg: function(tag, element) {
      var elements;
      elements = this.registry[tag];
      if (elements) {
        elements.push(element);
      } else {
        this.registry[tag] = [element];
      }
    },
    unreg: function(tag, element) {
      var elements, i;
      if (element) {
        elements = this.registry[tag];
        if (elements) {
          i = elements.indexOf(element);
          if (i > -1) {
            if (i === 0 && elements.length === 1) {
              delete this.registry[tag];
            } else {
              elements.splice(i, 1);
            }
          }
        }
      } else {
        delete this.registry[tag];
      }
    },
    find: function(tag) {
      return this.registry[tag];
    }
  };

  cola.tag = function(tag) {
    var elements;
    elements = cola.tagManager.find(tag);
    return cola.Element.createGroup(elements);
  };


  /*
      Type Registry
   */

  typeRegistry = {};

  cola.registerType = function(namespace, typeName, constructor) {
    var holder;
    holder = typeRegistry[namespace] || (typeRegistry[namespace] = {});
    holder[typeName] = constructor;
  };

  cola.registerTypeResolver = function(namespace, typeResolver) {
    var holder;
    holder = typeRegistry[namespace] || (typeRegistry[namespace] = {});
    if (holder._resolvers == null) {
      holder._resolvers = [];
    }
    holder._resolvers.push(typeResolver);
  };

  cola.resolveType = function(namespace, config, baseType) {
    var constructor, holder, l, len1, ref, resolver;
    constructor = null;
    holder = typeRegistry[namespace];
    if (holder) {
      constructor = holder[(config != null ? config.$type : void 0) || "_default"];
      if (!constructor && holder._resolvers) {
        ref = holder._resolvers;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          resolver = ref[l];
          constructor = resolver(config);
          if (constructor) {
            if (baseType && !cola.util.isCompatibleType(baseType, constructor)) {
              throw new cola.Exception("Incompatiable class type.");
            }
            break;
          }
        }
      }
      return constructor;
    }
  };

  cola.create = function(namespace, config, baseType) {
    var constr;
    if (typeof config === "string") {
      config = {
        $type: config
      };
    }
    constr = cola.resolveType(namespace, config, baseType);
    return new constr(config);
  };

  if (XDate) {
    if (typeof $ === "function") {
      $(function() {
        var localeStrings;
        XDate.locales[''] = localeStrings = {};
        if (cola.resource("cola.date.monthNames")) {
          localeStrings.monthNames = cola.resource("cola.date.monthNames", 6).split(",");
        }
        if (cola.resource("cola.date.monthNamesShort")) {
          localeStrings.monthNamesShort = cola.resource("cola.date.monthNamesShort").split(",");
        }
        if (cola.resource("cola.date.dayNames")) {
          localeStrings.dayNames = cola.resource("cola.date.dayNames").split(",");
        }
        if (cola.resource("cola.date.dayNamesShort")) {
          localeStrings.dayNamesShort = cola.resource("cola.date.dayNamesShort").split(",");
        }
        if (cola.resource("cola.date.amDesignator")) {
          localeStrings.amDesignator = cola.resource("cola.date.amDesignator");
        }
        if (cola.resource("cola.date.pmDesignator")) {
          localeStrings.pmDesignator = cola.resource("cola.date.pmDesignator");
        }
      });
    }
    XDate.parsers.push(function(str) {
      var c, dateStr, digit, digits, format, hasText, i, inQuota, l, len1, len2, o, part, parts, pattern, patterns, shouldReturn, start;
      if (str.indexOf("||") < 0) {
        return;
      }
      parts = str.split("||");
      format = parts[0];
      dateStr = parts[1];
      parts = {
        y: {
          len: 0,
          value: 1900
        },
        M: {
          len: 0,
          value: 1
        },
        d: {
          len: 0,
          value: 1
        },
        h: {
          len: 0,
          value: 0
        },
        m: {
          len: 0,
          value: 0
        },
        s: {
          len: 0,
          value: 0
        }
      };
      patterns = [];
      hasText = false;
      inQuota = false;
      i = 0;
      while (i < format.length) {
        c = format.charAt(i);
        if (c === "\"") {
          hasText = true;
          if (inQuota === c) {
            inQuota = false;
          } else if (!inQuota) {
            inQuota = c;
          }
        } else if (!inQuota && parts[c]) {
          if (parts[c].len === 0) {
            patterns.push(c);
          }
          parts[c].len++;
        } else {
          hasText = true;
        }
        i++;
      }
      shouldReturn = false;
      if (!hasText) {
        if (dateStr.match(/^\d{2,14}$/)) {
          shouldReturn = true;
          start = 0;
          for (l = 0, len1 = patterns.length; l < len1; l++) {
            pattern = patterns[l];
            part = parts[pattern];
            if (part.len) {
              digit = dateStr.substring(start, start + part.len);
              part.value = parseInt(digit, 10);
              start += part.len;
            }
          }
        }
      } else {
        digits = dateStr.split(/\D+/);
        if (digits[digits.length - 1] === "") {
          digits.splice(digits.length - 1, 1);
        }
        if (digits[0] === "") {
          digits.splice(0, 1);
        }
        if (patterns.length === digits.length) {
          shouldReturn = true;
          for (i = o = 0, len2 = patterns.length; o < len2; i = ++o) {
            pattern = patterns[i];
            parts[pattern].value = parseInt(digits[i], 10);
          }
        }
      }
      if (shouldReturn) {
        return new XDate(parts.y.value, parts.M.value - 1, parts.d.value, parts.h.value, parts.m.value, parts.s.value);
      } else {

      }
    });
  }

  cola._compileText = function(text) {
    var expr, exprStr, p, parts, s;
    p = 0;
    s = 0;
    while ((s = text.indexOf("{{", p)) > -1) {
      exprStr = digestExpression(text, s + 2);
      if (exprStr) {
        if (s > p) {
          if (!parts) {
            parts = [];
          }
          parts.push(text.substring(p, s));
        }
        expr = cola._compileExpression(exprStr, exprStr.indexOf(" in ") > 0 ? "repeat" : void 0);
        if (!parts) {
          parts = [expr];
        } else {
          parts.push(expr);
        }
        p = s + exprStr.length + 4;
      } else {
        break;
      }
    }
    if (parts) {
      if (p < text.length - 1) {
        parts.push(text.substring(p));
      }
      return parts;
    } else {
      return null;
    }
  };

  digestExpression = function(text, p) {
    var c, endBracket, len, quota, s;
    s = p;
    len = text.length;
    endBracket = 0;
    while (p < len) {
      c = text.charCodeAt(p);
      if (c === 125 && !quota) {
        if (endBracket === 1) {
          return text.substring(s, p - 1);
        }
        endBracket++;
      } else {
        endBracket = 0;
        if (c === 39 || c === 34) {
          if (quota) {
            if (quota === c) {
              quota = false;
            }
          } else {
            quota = c;
          }
        }
      }
      p++;
    }
  };

  cola._compileExpression = function(exprStr, specialType) {
    var aliasName, exp, i;
    if (!exprStr) {
      return null;
    }
    if (specialType === "repeat") {
      i = exprStr.indexOf(" in ");
      if (i > 0) {
        aliasName = exprStr.substring(0, i);
        if (aliasName.match(cola.constants.VARIABLE_NAME_REGEXP)) {
          exprStr = exprStr.substring(i + 4);
          if (!exprStr) {
            return null;
          }
          exp = new cola.Expression(exprStr, true);
          exp.raw = aliasName + " in " + exp.raw;
          exp.repeat = true;
          exp.alias = aliasName;
        }
        if (!exp) {
          throw new cola.Exception("\"" + exprStr + "\" is not a valid expression.");
        }
      } else {
        exp = new cola.Expression(exprStr, true);
        exp.repeat = true;
        exp.alias = "item";
      }
    } else if (specialType === "alias") {
      i = exprStr.indexOf(" as ");
      if (i > 0) {
        aliasName = exprStr.substring(i + 4);
        if (aliasName && aliasName.match(cola.constants.VARIABLE_NAME_REGEXP)) {
          exprStr = exprStr.substring(0, i);
          if (!exprStr) {
            return null;
          }
          exp = new cola.Expression(exprStr, true);
          exp.raw = exp.raw + " as " + aliasName;
          exp.setAlias = true;
          exp.alias = aliasName;
        }
      }
      if (!exp) {
        throw new cola.Exception("\"" + exprStr + "\" should be a alias expression.");
      }
    } else {
      exp = new cola.Expression(exprStr, true);
    }
    return exp;
  };

  splitExpression = function(text, separator) {
    var c, i, len, p, part, parts, quota, separatorCharCode;
    separatorCharCode = separator.charCodeAt(0);
    parts = null;
    p = 0;
    i = 0;
    len = text.length;
    while (i < len) {
      c = text.charCodeAt(i);
      if (c === separatorCharCode && !quota) {
        part = text.substring(p, i);
        if (parts == null) {
          parts = [];
        }
        parts.push(cola.util.trim(part));
        p = i + 1;
      } else {
        if (c === 39 || c === 34) {
          if (quota) {
            if (quota === c) {
              quota = false;
            }
          } else {
            quota = c;
          }
        }
      }
      i++;
    }
    if (p < len) {
      part = text.substring(p);
      if (parts == null) {
        parts = [];
      }
      parts.push(cola.util.trim(part));
    }
    return parts;
  };

  cola.Expression = (function() {
    function Expression(exprStr) {
      var fc, i, j, l, last, len1, len2, o, oldParts, part, parts, path, ref, watchPathStr, watchPaths;
      this.raw = exprStr;
      i = exprStr.indexOf(" on ");
      if ((0 < i && i < (exprStr.length - 1))) {
        exprStr = exprStr.substring(0, i);
        watchPathStr = exprStr.substring(i + 4);
        watchPaths = [];
        ref = watchPathStr.split(",");
        for (l = 0, len1 = ref.length; l < len1; l++) {
          path = ref[l];
          path = cola.util.trim(path);
          if (!path) {
            continue;
          }
          if (path.indexOf(".") > 0) {
            parts = [];
            oldParts = path.split(".");
            last = oldParts.length - 1;
            for (j = o = 0, len2 = oldParts.length; o < len2; j = ++o) {
              part = oldParts[j];
              if (j < last && part.charCodeAt(0) !== 33) {
                part = "!" + part;
              }
              parts.push(part);
            }
            path = parts.join(".");
          }
          watchPaths.push(path);
        }
      }
      fc = exprStr.charCodeAt(0);
      if (fc === 61) {
        exprStr = exprStr.substring(1);
        this.isStatic = true;
      } else if (fc === 63) {
        exprStr = exprStr.substring(1);
        this.isDyna = true;
      }
      this.compile(exprStr);
      if (watchPaths) {
        this.paths = watchPaths;
      }
    }

    Expression.prototype.compile = function(exprStr) {
      var parts, pathParts, stringify, tree;
      stringify = function(node, parts, pathParts, close, context) {
        var argument, callee, element, i, l, len1, len2, o, path, ref, ref1, ref2, type;
        type = node.type;
        switch (type) {
          case "MemberExpression":
          case "Identifier":
          case "ThisExpression":
            if (type === "MemberExpression") {
              stringify(node.object, parts, pathParts, false, context);
              if (pathParts.length) {
                pathParts.push(node.property.name);
              } else {
                parts.push(".");
                parts.push(node.property.name);
              }
            } else {
              pathParts.push(node.name);
            }
            break;
          case "CallExpression":
            context.hasCallStatement = true;
            callee = node.callee;
            if (callee.type === "Identifier") {
              parts.push("scope.action(\"");
              parts.push(node.callee.name);
              parts.push("\")(");
            } else if (callee.type === "MemberExpression") {
              stringify(callee.object, parts, pathParts, true, context);
              parts.push(".");
              parts.push(callee.property.name);
              parts.push("(");
            } else {
              throw new cola.Exception("\"" + exprStr + "\" invalid callee.");
            }
            if ((ref = node["arguments"]) != null ? ref.length : void 0) {
              ref1 = node["arguments"];
              for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
                argument = ref1[i];
                if (i > 0) {
                  parts.push(",");
                }
                stringify(argument, parts, pathParts, true, context);
              }
            }
            parts.push(")");
            break;
          case "Literal":
            parts.push(node.raw);
            break;
          case "BinaryExpression":
          case "LogicalExpression":
            parts.push("(");
            stringify(node.left, parts, pathParts, true, context);
            parts.push(node.operator);
            stringify(node.right, parts, pathParts, true, context);
            parts.push(")");
            break;
          case "UnaryExpression":
            parts.push(node.operator);
            stringify(node.argument, parts, pathParts, true, context);
            break;
          case "ConditionalExpression":
            parts.push("(");
            stringify(node.test, parts, pathParts, true, context);
            parts.push("?");
            stringify(node.consequent, parts, pathParts, true, context);
            parts.push(":");
            stringify(node.alternate, parts, pathParts, true, context);
            parts.push(")");
            break;
          case "ArrayExpression":
            parts.push("[");
            ref2 = node.elements;
            for (i = o = 0, len2 = ref2.length; o < len2; i = ++o) {
              element = ref2[i];
              if (i > 0) {
                parts.push(",");
              }
              stringify(element, parts, pathParts, true, context);
            }
            parts.push("]");
        }
        if (close && pathParts.length) {
          path = pathParts.join(".");
          if (!context.paths) {
            context.paths = [path];
          } else {
            context.paths.push(path);
          }
          parts.push("_getData(scope,'");
          parts.push(path);
          parts.push("',loadMode,dataCtx)");
          pathParts.splice(0, pathParts.length);
        }
      };
      tree = jsep(exprStr);
      this.type = tree.type;
      parts = [];
      pathParts = [];
      stringify(tree, parts, pathParts, true, this);
      this.expression = parts.join("");
    };

    Expression.prototype.evaluate = function(scope, loadMode, dataCtx) {
      var retValue;
      retValue = eval(this.expression);
      if (retValue instanceof cola.Chain) {
        retValue = retValue._data;
      }
      if (retValue instanceof cola.Entity || retValue instanceof cola.EntityList) {
        if (dataCtx != null) {
          dataCtx.path = retValue.getPath();
        }
      }
      return retValue;
    };

    Expression.prototype.toString = function() {
      return this.expression;
    };

    return Expression;

  })();

  _getData = function(scope, path, loadMode, dataCtx) {
    var retValue;
    retValue = scope.get(path, loadMode, dataCtx);
    if (retValue === void 0 && (dataCtx != null ? dataCtx.vars : void 0)) {
      retValue = dataCtx.vars[path];
    }
    return retValue;
  };

  cola.registerTypeResolver("validator", function(config) {
    if (!(config && config.$type)) {
      return;
    }
    return cola[cola.util.capitalize(config.$type) + "Validator"];
  });

  cola.registerTypeResolver("validator", function(config) {
    if (typeof config === "function") {
      return cola.CustomValidator;
    }
  });

  cola.Validator = (function(superClass) {
    extend(Validator, superClass);

    function Validator() {
      return Validator.__super__.constructor.apply(this, arguments);
    }

    Validator.attributes = {
      message: null,
      messageType: {
        defaultValue: "error",
        "enum": ["error", "warning", "info"]
      },
      disabled: null,
      validateEmptyValue: null
    };

    Validator.prototype._getDefaultMessage = function(data) {
      return "\"" + data + "\" is not a valid value.";
    };

    Validator.prototype._parseValidResult = function(result, data) {
      var text;
      if (typeof result === "boolean") {
        if (result) {
          result = null;
        } else {
          text = this._message;
          if (text == null) {
            text = this._getDefaultMessage(data);
          }
          result = {
            type: this._messageType,
            text: text
          };
        }
      } else if (result && typeof result === "string") {
        result = {
          type: this._messageType,
          text: result
        };
      }
      return result;
    };

    Validator.prototype.validate = function(data) {
      var result;
      if (!this._validateEmptyValue) {
        if (!((data != null) && data !== "")) {
          return;
        }
      }
      result = this._validate(data);
      return this._parseValidResult(result, data);
    };

    return Validator;

  })(cola.Definition);

  cola.RequiredValidator = (function(superClass) {
    extend(RequiredValidator, superClass);

    function RequiredValidator() {
      return RequiredValidator.__super__.constructor.apply(this, arguments);
    }

    RequiredValidator.attributes = {
      validateEmptyValue: {
        defaultValue: true
      },
      trim: {
        defaultValue: true
      }
    };

    RequiredValidator.prototype._getDefaultMessage = function(data) {
      return cola.resource("cola.validator.error.required", data);
    };

    RequiredValidator.prototype._validate = function(data) {
      if (!(typeof data === "string")) {
        return data != null;
      }
      if (this._trim) {
        data = cola.util.trim(data);
      }
      return !!data;
    };

    return RequiredValidator;

  })(cola.Validator);

  cola.NumberValidator = (function(superClass) {
    extend(NumberValidator, superClass);

    function NumberValidator() {
      return NumberValidator.__super__.constructor.apply(this, arguments);
    }

    NumberValidator.attributes = {
      min: null,
      minInclude: {
        defaultValue: true
      },
      max: null,
      maxInclude: {
        defaultValue: true
      }
    };

    NumberValidator.prototype._getDefaultMessage = function(data) {
      return cola.resource("cola.validator.error.number", data);
    };

    NumberValidator.prototype._validate = function(data) {
      var result;
      result = true;
      if (this._min != null) {
        result = this._minInclude ? data >= this._min : data > this._min;
      }
      if (result && (this._max != null)) {
        result = this._maxInclude ? data <= this._max : data < this._max;
      }
      return result;
    };

    return NumberValidator;

  })(cola.Validator);

  cola.LengthValidator = (function(superClass) {
    extend(LengthValidator, superClass);

    function LengthValidator() {
      return LengthValidator.__super__.constructor.apply(this, arguments);
    }

    LengthValidator.attributes = {
      min: null,
      max: null
    };

    LengthValidator.prototype._getDefaultMessage = function(data) {
      return cola.resource("cola.validator.error.length", data);
    };

    LengthValidator.prototype._validate = function(data) {
      var len, result;
      if (typeof data === "string" || typeof data === "number") {
        result = true;
        len = (data + "").length;
        if (this._min != null) {
          result = len >= this._min;
        }
        if (result && (this._max != null)) {
          result = len <= this._max;
        }
        return result;
      }
      return true;
    };

    return LengthValidator;

  })(cola.Validator);

  cola.RegExpValidator = (function(superClass) {
    extend(RegExpValidator, superClass);

    function RegExpValidator() {
      return RegExpValidator.__super__.constructor.apply(this, arguments);
    }

    RegExpValidator.attributes = {
      regExp: null,
      mode: {
        defaultValue: "white",
        "enum": ["white", "black"]
      }
    };

    RegExpValidator.prototype._getDefaultMessage = function(data) {
      return cola.resource("cola.validator.error.regExp", data);
    };

    RegExpValidator.prototype._validate = function(data) {
      var regExp, result;
      regExp = this._regExp;
      if (regExp && typeof data === "string") {
        if (!regExp instanceof RegExp) {
          regExp = new RegExp(regExp);
        }
        result = true;
        result = !!data.match(regExp);
        if (this._mode === "black") {
          result = !result;
        }
        return result;
      }
      return true;
    };

    return RegExpValidator;

  })(cola.Validator);

  cola.EmailValidator = (function(superClass) {
    extend(EmailValidator, superClass);

    function EmailValidator() {
      return EmailValidator.__super__.constructor.apply(this, arguments);
    }

    EmailValidator.prototype._getDefaultMessage = function(data) {
      return cola.resource("cola.validator.error.email", data);
    };

    EmailValidator.prototype._validate = function(data) {
      if (typeof data === "string") {
        return !!data.match(/^([a-z0-9]*[-_\.]?[a-z0-9]+)*@([a-z0-9]*[-_]?[a-z0-9]+)+[\.][a-z]{2,3}([\.][a-z]{2})?$/i);
      }
      return true;
    };

    return EmailValidator;

  })(cola.Validator);

  cola.UrlValidator = (function(superClass) {
    extend(UrlValidator, superClass);

    function UrlValidator() {
      return UrlValidator.__super__.constructor.apply(this, arguments);
    }

    UrlValidator.prototype._getDefaultMessage = function(data) {
      return cola.resource("cola.validator.error.email", data);
    };

    UrlValidator.prototype._validate = function(data) {
      if (typeof data === "string") {
        return !!data.match(/^(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/i);
      }
      return true;
    };

    return UrlValidator;

  })(cola.Validator);

  cola.AsyncValidator = (function(superClass) {
    extend(AsyncValidator, superClass);

    function AsyncValidator() {
      return AsyncValidator.__super__.constructor.apply(this, arguments);
    }

    AsyncValidator.attributes = {
      async: {
        defaultValue: true
      }
    };

    AsyncValidator.prototype.validate = function(data, callback) {
      var result;
      if (!this._validateEmptyValue) {
        if (!((data != null) && data !== "")) {
          return;
        }
      }
      if (this._async) {
        result = this._validate(data, {
          complete: (function(_this) {
            return function(success, result) {
              if (success) {
                result = _this._parseValidResult(result);
              }
              cola.callback(callback, success, result);
            };
          })(this)
        });
      } else {
        result = this._validate(data);
        result = this._parseValidResult(result);
        cola.callback(callback, true, result);
      }
      return result;
    };

    return AsyncValidator;

  })(cola.Validator);

  cola.AjaxValidator = (function(superClass) {
    extend(AjaxValidator, superClass);

    function AjaxValidator() {
      return AjaxValidator.__super__.constructor.apply(this, arguments);
    }

    AjaxValidator.attributes = {
      url: null,
      method: null,
      ajaxOptions: null,
      data: null
    };

    AjaxValidator.prototype._validate = function(data, callback) {
      var ajaxOptions, invoker, options, p, realSendData, sendData, v;
      sendData = this._data;
      if ((sendData == null) || sendData === ":data") {
        sendData = data;
      } else if (typeof sendData === "object") {
        realSendData = {};
        for (p in sendData) {
          v = sendData[p];
          if (v === ":data") {
            v = data;
          }
          realSendData[p] = v;
        }
        sendData = realSendData;
      }
      options = {};
      ajaxOptions = this._ajaxOptions;
      if (ajaxOptions) {
        for (p in ajaxOptions) {
          v = ajaxOptions[p];
          options[p] = v;
        }
      }
      options.async = !!callback;
      options.url = this._url;
      options.data = sendData;
      options.method = this._method;
      invoker = new cola.AjaxServiceInvoker(this, options);
      if (callback) {
        return invoker.invokeAsync(callback);
      } else {
        return invoker.invokeSync();
      }
    };

    return AjaxValidator;

  })(cola.AsyncValidator);

  cola.CustomValidator = (function(superClass) {
    extend(CustomValidator, superClass);

    CustomValidator.attributes = {
      async: {
        defaultValue: false
      },
      validateEmptyValue: {
        defaultValue: true
      },
      func: null
    };

    function CustomValidator(config) {
      if (typeof config === "function") {
        CustomValidator.__super__.constructor.call(this);
        this.set({
          func: config,
          async: cola.util.parseFunctionArgs(config).length > 1
        });
      } else {
        CustomValidator.__super__.constructor.call(this, config);
      }
    }

    CustomValidator.prototype._validate = function(data, callback) {
      if (this._async && callback) {
        if (this._func) {
          this._func(data, callback);
        } else {
          cola.callback(callback, true);
        }
      } else {
        return typeof this._func === "function" ? this._func(data) : void 0;
      }
    };

    return CustomValidator;

  })(cola.AsyncValidator);

  cola.DataType = (function(superClass) {
    extend(DataType, superClass);

    function DataType() {
      return DataType.__super__.constructor.apply(this, arguments);
    }

    return DataType;

  })(cola.Definition);

  cola.BaseDataType = (function(superClass) {
    extend(BaseDataType, superClass);

    function BaseDataType() {
      return BaseDataType.__super__.constructor.apply(this, arguments);
    }

    return BaseDataType;

  })(cola.DataType);

  cola.StringDataType = (function(superClass) {
    extend(StringDataType, superClass);

    function StringDataType() {
      return StringDataType.__super__.constructor.apply(this, arguments);
    }

    StringDataType.prototype.toText = function(value) {
      if (value != null) {
        return value + "";
      } else {
        return "";
      }
    };

    StringDataType.prototype.parse = function(text) {
      return text;
    };

    return StringDataType;

  })(cola.BaseDataType);

  cola.NumberDataType = (function(superClass) {
    extend(NumberDataType, superClass);

    function NumberDataType() {
      return NumberDataType.__super__.constructor.apply(this, arguments);
    }

    NumberDataType.attributes = {
      isInteger: null
    };

    NumberDataType.prototype.parse = function(text) {
      var n;
      if (!text) {
        return 0;
      }
      if (typeof text === "number") {
        if (this._isInteger) {
          return Math.round(text);
        } else {
          return text;
        }
      }
      if (this._isInteger) {
        n = Math.round(parseInt(text, 10));
      } else {
        n = parseFloat(text, 10);
      }
      if (isNaN(n)) {
        return 0;
      } else {
        return n;
      }
    };

    return NumberDataType;

  })(cola.BaseDataType);

  cola.BooleanDataType = (function(superClass) {
    extend(BooleanDataType, superClass);

    function BooleanDataType() {
      return BooleanDataType.__super__.constructor.apply(this, arguments);
    }

    BooleanDataType.prototype.parse = function(text) {
      if (!text) {
        return false;
      }
      if (typeof text === "boolean") {
        return text;
      }
      if (["true", "on", "yes", "y", "1"].indexOf((text + "").toLowerCase()) > -1) {
        return true;
      }
      return false;
    };

    return BooleanDataType;

  })(cola.BaseDataType);

  cola.DateDataType = (function(superClass) {
    extend(DateDataType, superClass);

    function DateDataType() {
      return DateDataType.__super__.constructor.apply(this, arguments);
    }

    DateDataType.prototype.parse = function(text) {
      var xDate;
      if (!text) {
        return new Date(NaN);
      }
      xDate = new XDate(text);
      return xDate.toDate();
    };

    return DateDataType;

  })(cola.BaseDataType);

  cola.JSONDataType = (function(superClass) {
    extend(JSONDataType, superClass);

    function JSONDataType() {
      return JSONDataType.__super__.constructor.apply(this, arguments);
    }

    JSONDataType.prototype.toText = function(value) {
      return JSON.stringify(value);
    };

    JSONDataType.prototype.parse = function(text) {
      if (typeof text === "string") {
        return JSON.parse(text);
      } else {
        return text;
      }
    };

    return JSONDataType;

  })(cola.DataType);


  /*
  EntityDataType
   */

  cola.EntityDataType = (function(superClass) {
    extend(EntityDataType, superClass);

    EntityDataType.attributes = {
      properties: {
        setter: function(properties) {
          var config, l, len1, property, results, results1;
          this._properties.clear();
          if (properties instanceof Array) {
            results = [];
            for (l = 0, len1 = properties.length; l < len1; l++) {
              property = properties[l];
              results.push(this.addProperty(property));
            }
            return results;
          } else {
            results1 = [];
            for (property in properties) {
              config = properties[property];
              if (config) {
                if (!(config instanceof cola.Property)) {
                  config.property = property;
                }
                results1.push(this.addProperty(config));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          }
        }
      }
    };

    EntityDataType.events = {
      beforeCurrentChange: null,
      currentChange: null,
      beforeDataChange: null,
      dataChange: null,
      beforeEntityInsert: null,
      entityInsert: null,
      beforeEntityDelete: null,
      entityDelete: null
    };

    function EntityDataType(config) {
      this._properties = new cola.util.KeyedArray();
      EntityDataType.__super__.constructor.call(this, config);
    }

    EntityDataType.prototype.addProperty = function(property) {
      if (!(property instanceof cola.Property)) {
        if (typeof property === "string") {
          property = new cola.Property({
            property: property
          });
        } else {
          property = new cola.Property(property);
        }
      } else if (property._owner && property._owner !== this) {
        throw new cola.Exception("Property(" + property._property + ") is already belongs to anthor DataType.");
      }
      if (this._properties.get(property._property)) {
        this.removeProperty(property._property);
      }
      this._properties.add(property._property, property);
      property._owner = this;
      return property;
    };

    EntityDataType.prototype.removeProperty = function(property) {
      if (property instanceof cola.Property) {
        this._properties.remove(property._property);
      } else {
        property = this._properties.remove(property);
      }
      delete property._owner;
      return property;
    };

    EntityDataType.prototype.getProperty = function(path) {
      var i, part1, part2, prop;
      i = path.indexOf(".");
      if (i > 0) {
        part1 = path.substring(0, i);
        part2 = path.substring(i + 1);
        prop = this._getProperty(part1);
        if (prop != null ? prop._dataType : void 0) {
          return prop != null ? prop._dataType.getProperty(part2) : void 0;
        }
      } else {
        return this._getProperty(path);
      }
    };

    EntityDataType.prototype._getProperty = function(property) {
      return this._properties.get(property);
    };

    EntityDataType.prototype.getProperties = function() {
      return this._properties;
    };

    return EntityDataType;

  })(cola.DataType);

  cola.DataType.dataTypeSetter = function(dataType) {
    var name, scope;
    if (typeof dataType === "string") {
      name = dataType;
      scope = this._scope;
      if (scope) {
        dataType = scope.dataType(name);
      } else {
        dataType = cola.DataType.defaultDataTypes[name];
      }
      if (!dataType) {
        throw new cola.Exception("Unrecognized DataType \"" + name + "\".");
      }
    } else if ((dataType != null) && !(dataType instanceof cola.DataType)) {
      dataType = new cola.EntityDataType(dataType);
    }
    this._dataType = dataType || null;
  };

  cola.Property = (function(superClass) {
    extend(Property, superClass);

    function Property() {
      return Property.__super__.constructor.apply(this, arguments);
    }

    Property.attributes = {
      property: {
        readOnlyAfterCreate: true
      },
      name: {
        setter: function(name) {
          this._name = name;
          if (this._property == null) {
            this._property = name;
          }
        }
      },
      owner: {
        readOnly: true
      },
      caption: null,
      dataType: {
        setter: cola.DataType.dataTypeSetter
      },
      description: null,
      provider: {
        setter: function(provider) {
          if ((provider != null) && !(provider instanceof cola.Provider)) {
            provider = new cola.Provider(provider);
          }
          this._provider = provider;
        }
      },
      defaultValue: null,
      aggregated: {
        readOnlyAfterCreate: true
      },
      validators: {
        setter: function(validators) {
          var addValidator, l, len1, validator;
          addValidator = (function(_this) {
            return function(validator) {
              if (!(validator instanceof cola.Validator)) {
                validator = cola.create("validator", validator, cola.Validator);
              }
              _this._validators.push(validator);
            };
          })(this);
          delete this._validators;
          if (validators) {
            this._validators = [];
            if (typeof validators === "string") {
              validator = cola.create("validator", validators, cola.Validator);
              addValidator(validator);
            } else if (validators instanceof Array) {
              for (l = 0, len1 = validators.length; l < len1; l++) {
                validator = validators[l];
                addValidator(validator);
              }
            } else {
              addValidator(validators);
            }
          }
        }
      },
      rejectInvalidValue: null
    };

    Property.events = {
      beforeWrite: null,
      write: null,
      beforeLoad: null,
      loaded: null
    };

    return Property;

  })(cola.Definition);

  cola.DataType.jsonToEntity = function(json, dataType, aggregated, pageSize) {
    var entityList;
    if (aggregated === void 0) {
      if (json instanceof Array) {
        aggregated = true;
      } else if (typeof json === "object" && json.hasOwnProperty("$data")) {
        aggregated = json.$data instanceof Array;
      } else {
        aggregated = false;
      }
    }
    if (aggregated) {
      entityList = new cola.EntityList(null, dataType);
      if (pageSize) {
        entityList.pageSize = pageSize;
      }
      entityList.fillData(json);
      return entityList;
    } else {
      if (json instanceof Array) {
        throw new cola.Exception("Unmatched DataType. expect \"Object\" but \"Array\".");
      }
      return new cola.Entity(json, dataType);
    }
  };

  cola.DataType.jsonToData = function(json, dataType, aggregated, pageSize) {
    var result;
    if (dataType instanceof cola.StringDataType && typeof json !== "string" || dataType instanceof cola.BooleanDataType && typeof json !== "boolean" || dataType instanceof cola.NumberDataType && typeof json !== "number" || dataType instanceof cola.DateDataType && !(json instanceof Date)) {
      result = dataType.parse(json);
    } else if (dataType instanceof cola.EntityDataType) {
      result = cola.DataType.jsonToEntity(json, dataType, aggregated, pageSize);
    } else if (dataType && typeof json === "object") {
      result = dataType.parse(json);
    } else {
      result = json;
    }
    return result;
  };

  cola.DataType.defaultDataTypes = defaultDataTypes = {
    "string": new cola.StringDataType({
      name: "string"
    }),
    "int": new cola.NumberDataType({
      name: "int",
      isInteger: true
    }),
    "float": new cola.NumberDataType({
      name: "float"
    }),
    "boolean": new cola.BooleanDataType({
      name: "boolean"
    }),
    "date": new cola.DateDataType({
      name: "date"
    }),
    "json": new cola.JSONDataType({
      name: "json"
    }),
    "entity": new cola.EntityDataType({
      name: "entity"
    })
  };

  defaultDataTypes["number"] = defaultDataTypes["float"];

  _getEntityPath = function(markNoncurrent) {
    var lastEntity, parent, part, path, self;
    if (!markNoncurrent && this._pathCache) {
      return this._pathCache;
    }
    parent = this._parent;
    if (parent == null) {
      return;
    }
    path = [];
    self = this;
    while (parent != null) {
      if (parent instanceof _EntityList) {
        lastEntity = self;
      }
      part = self._parentProperty;
      if (part) {
        if (markNoncurrent && self instanceof _EntityList) {
          if (markNoncurrent === "always" || lastEntity && self.current !== lastEntity) {
            path.push("!" + part);
          } else {
            path.push(part);
          }
        } else {
          path.push(part);
        }
      }
      self = parent;
      parent = parent._parent;
    }
    path = path.reverse();
    if (!markNoncurrent) {
      this._pathCache = path;
    }
    return path;
  };

  _watch = function(path, watcher) {
    var holder;
    if (path instanceof Function) {
      watcher = path;
      path = "*";
    }
    if (this._watchers == null) {
      this._watchers = {};
    }
    holder = this._watchers[path];
    if (!holder) {
      this._watchers[path] = {
        path: path.split("."),
        watchers: [watcher]
      };
    } else {
      holder.watchers.push(watcher);
    }
  };

  _unwatch = function(path, watcher) {
    var holder, i, l, len1, ref, w, watchers;
    if (!this._watchers) {
      return;
    }
    if (path instanceof Function) {
      watcher = path;
      path = "*";
    }
    watchers = this._watchers;
    if (!watcher) {
      delete watchers[path];
    } else {
      holder = watchers[path];
      if (holder) {
        ref = holder.watchers;
        for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
          w = ref[i];
          if (w === watcher) {
            holder.watchers.splice(i, 1);
            break;
          }
        }
        if (!holder.watchers.length) {
          delete watchers[path];
        }
      }
    }
  };

  _triggerWatcher = function(path, type, arg) {
    var holder, i, l, len1, len2, o, p, pv, ref, ref1, s, shouldTrigger, watch;
    if (this._watchers) {
      ref = this._watchers;
      for (p in ref) {
        holder = ref[p];
        shouldTrigger = false;
        if (p === "**") {
          shouldTrigger = true;
        } else if (p === "*") {
          shouldTrigger = path.length < 2;
        } else {
          pv = holder.path;
          if (pv.length >= path.length) {
            shouldTrigger = true;
            for (i = l = 0, len1 = pv.length; l < len1; i = ++l) {
              s = pv[i];
              if (i === pv.length - 1) {
                if (s === "**") {
                  break;
                } else if (s === "*") {
                  shouldTrigger = i === path.length - 1;
                  break;
                }
              }
              if (s !== path[i]) {
                shouldTrigger = false;
                break;
              }
            }
          }
        }
        if (shouldTrigger) {
          ref1 = holder.watchers;
          for (o = 0, len2 = ref1.length; o < len2; o++) {
            watch = ref1[o];
            watch.call(this, path, type, arg);
          }
        }
      }
    }
    if (this._parent) {
      if (this._parentProperty) {
        path.unshift(this._parentProperty);
      }
      this._parent._triggerWatcher(path, type, arg);
    }
  };

  _matchValue = function(value, propFilter) {
    if (propFilter.strict) {
      if (!propFilter.caseSensitive && typeof propFilter.value === "string") {
        return (value + "").toLowerCase() === propFilter.value;
      } else {
        return value === propFilter.value;
      }
    } else {
      if (!propFilter.caseSensitive) {
        return (value + "").toLowerCase().indexOf(propFilter.value) > -1;
      } else {
        return (value + "").indexOf(propFilter.value) > -1;
      }
    }
  };

  cola._filterCollection = function(collection, criteria, caseSensitive, strict) {
    var filtered, prop, propFilter;
    if (!(collection && criteria)) {
      return collection;
    }
    if (cola.util.isSimpleValue(criteria)) {
      if (!caseSensitive) {
        criteria = (criteria + "").toLowerCase();
      }
      criteria = {
        "$": {
          value: criteria,
          caseSensitive: caseSensitive,
          strict: strict
        }
      };
    }
    if (typeof criteria === "object") {
      for (prop in criteria) {
        propFilter = criteria[prop];
        if (typeof propFilter === "string") {
          criteria[prop] = {
            value: propFilter.toLowerCase(),
            caseSensitive: caseSensitive,
            strict: strict
          };
        } else {
          if (propFilter.caseSensitive == null) {
            propFilter.caseSensitive = caseSensitive;
          }
          if (!propFilter.caseSensitive && typeof propFilter.value === "string") {
            propFilter.value = propFilter.value.toLowerCase();
          }
          if (propFilter.strict == null) {
            propFilter.strict = strict;
          }
          if (!propFilter.strict) {
            propFilter.value = propFilter.value ? propFilter.value + "" : "";
          }
        }
      }
      filtered = [];
      filtered.$origin = collection.$origin || collection;
      cola.each(collection, function(item) {
        var data, matches, p, v;
        matches = false;
        if (cola.util.isSimpleValue(item)) {
          if (criteria.$) {
            matches = _matchValue(v, criteria.$);
          }
        } else {
          for (prop in criteria) {
            propFilter = criteria[prop];
            if (prop === "$") {
              if (item instanceof cola.Entity) {
                data = item._data;
              } else {
                data = item;
              }
              for (p in data) {
                v = data[p];
                if (_matchValue(v, propFilter)) {
                  matches = true;
                  break;
                }
              }
              if (matches) {
                break;
              }
            } else if (item instanceof cola.Entity) {
              if (_matchValue(item.get(prop), propFilter)) {
                matches = true;
                break;
              }
            } else {
              if (_matchValue(item[prop], propFilter)) {
                matches = true;
                break;
              }
            }
          }
        }
        if (matches) {
          filtered.push(item);
        }
      });
      return filtered;
    } else if (typeof criteria === "function") {
      filtered = [];
      filtered.$origin = collection.$origin || collection;
      cola.each(collection, function(item) {
        if (criteria(item, caseSensitive, strict)) {
          filtered.push(item);
        }
      });
      return filtered;
    } else {
      return collection;
    }
  };

  cola._sortCollection = function(collection, comparator, caseSensitive) {
    var c, comparatorFunc, comparatorProps, l, len1, origin, part, prop, propDesc, ref;
    if (!collection) {
      return null;
    }
    if ((comparator == null) || comparator === "$none") {
      return collection;
    }
    if (collection instanceof cola.EntityList) {
      origin = collection;
      collection = collection.toArray();
      collection.$origin = origin;
    }
    if (comparator) {
      if (comparator === "$reverse") {
        return collection.reverse();
      } else if (typeof comparator === "string") {
        comparatorProps = [];
        ref = comparator.split(",");
        for (l = 0, len1 = ref.length; l < len1; l++) {
          part = ref[l];
          c = part.charCodeAt(0);
          propDesc = false;
          if (c === 43) {
            prop = part.substring(1);
          } else if (c === 45) {
            prop = part.substring(1);
            propDesc = true;
          } else {
            prop = part;
          }
          comparatorProps.push({
            prop: prop,
            desc: propDesc
          });
        }
        comparator = function(item1, item2) {
          var comparatorProp, len2, o, result, value1, value2;
          for (o = 0, len2 = comparatorProps.length; o < len2; o++) {
            comparatorProp = comparatorProps[o];
            value1 = null;
            value2 = null;
            prop = comparatorProp.prop;
            if (prop) {
              if (prop === "$random") {
                return Math.random() * 2 - 1;
              } else {
                if (item1 instanceof cola.Entity) {
                  value1 = item1.get(prop);
                } else if (cola.util.isSimpleValue(item1)) {
                  value1 = item1;
                } else {
                  value1 = item1[prop];
                }
                if (!caseSensitive && typeof value1 === "string") {
                  value1 = value1.toLowerCase();
                }
                if (item2 instanceof cola.Entity) {
                  value2 = item2.get(prop);
                } else if (cola.util.isSimpleValue(item2)) {
                  value2 = item2;
                } else {
                  value2 = item2[prop];
                }
                if (!caseSensitive && typeof value2 === "string") {
                  value2 = value2.toLowerCase();
                }
                result = 0;
                if (value1 == null) {
                  result = -1;
                } else if (value2 == null) {
                  result = 1;
                } else if (value1 > value2) {
                  result = 1;
                } else if (value1 < value2) {
                  result = -1;
                }
                if (result !== 0) {
                  if (comparatorProp.desc) {
                    return 0 - result;
                  } else {
                    return result;
                  }
                }
              }
            } else {
              result = 0;
              if (item1 == null) {
                result = -1;
              } else if (item2 == null) {
                result = 1;
              } else if (item1 > item2) {
                result = 1;
              } else if (item1 < item2) {
                result = -1;
              }
              if (result !== 0) {
                if (comparatorProp.desc) {
                  return 0 - result;
                } else {
                  return result;
                }
              }
            }
          }
          return 0;
        };
      }
    } else {
      comparator = function(item1, item2) {
        var result;
        result = 0;
        if (!caseSensitive) {
          if (typeof item1 === "string") {
            item1 = item1.toLowerCase();
          }
          if (typeof item2 === "string") {
            item2 = item2.toLowerCase();
          }
        }
        if (item1 == null) {
          result = -1;
        } else if (item2 == null) {
          result = 1;
        } else if (item1 > item2) {
          result = 1;
        } else if (item1 < item2) {
          result = -1;
        }
        return result;
      };
    }
    comparatorFunc = function(item1, item2) {
      return comparator(item1, item2);
    };
    return collection.sort(comparatorFunc);
  };

  cola.Entity = (function() {
    Entity.STATE_NONE = "none";

    Entity.STATE_NEW = "new";

    Entity.STATE_MODIFIED = "modified";

    Entity.STATE_DELETED = "deleted";

    Entity.prototype.state = Entity.STATE_NONE;

    Entity.prototype._disableObserverCount = 0;

    Entity.prototype._disableWriteObservers = 0;

    function Entity(data, dataType) {
      this.id = cola.uniqueId();
      this.timestamp = cola.sequenceNo();
      this.dataType = dataType;
      this._data = {};
      if (data != null) {
        this._disableWriteObservers++;
        this.set(data);
        this._disableWriteObservers--;
      }
    }

    Entity.prototype.hasValue = function(prop) {
      var ref;
      return this._data.hasOwnProperty(prop) || (((ref = this.dataType) != null ? ref.getProperty(prop) : void 0) != null);
    };

    Entity.prototype.get = function(prop, loadMode, context) {
      var callback;
      if (loadMode == null) {
        loadMode = "async";
      }
      if (loadMode && (typeof loadMode === "function" || typeof loadMode === "object")) {
        callback = loadMode;
        loadMode = "async";
      }
      if (prop.indexOf(".") > 0) {
        return _evalDataPath(this, prop, false, loadMode, callback, context);
      } else {
        return this._get(prop, loadMode, callback, context);
      }
    };

    Entity.prototype._get = function(prop, loadMode, callback, context) {
      var callbackProcessed, loadData, property, provider, providerInvoker, ref;
      loadData = function(provider) {
        var notifyArg, providerInvoker, retValue;
        retValue = void 0;
        providerInvoker = provider.getInvoker({
          data: this
        });
        if (loadMode === "sync") {
          retValue = providerInvoker.invokeSync();
          retValue = this._set(prop, retValue);
          if (retValue && (retValue instanceof cola.EntityList || retValue instanceof cola.Entity)) {
            retValue._providerInvoker = providerInvoker;
          }
        } else if (loadMode === "async") {
          if (context) {
            context.unloaded = true;
            if (context.providerInvokers == null) {
              context.providerInvokers = [];
            }
            context.providerInvokers.push(providerInvoker);
          }
          this._data[prop] = providerInvoker;
          notifyArg = {
            data: this,
            property: prop
          };
          this._notify(cola.constants.MESSAGE_LOADING_START, notifyArg);
          providerInvoker.invokeAsync({
            complete: (function(_this) {
              return function(success, result) {
                _this._notify(cola.constants.MESSAGE_LOADING_END, notifyArg);
                if (_this._data[prop] !== providerInvoker) {
                  success = false;
                }
                if (success) {
                  result = _this._set(prop, result);
                  retValue = result;
                  if (result && (result instanceof cola.EntityList || result instanceof cola.Entity)) {
                    result._providerInvoker = providerInvoker;
                  }
                } else {
                  _this._set(prop, null);
                }
                if (callback) {
                  cola.callback(callback, success, result);
                }
              };
            })(this)
          });
        } else {
          cola.callback(callback, true, void 0);
        }
        return retValue;
      };
      property = (ref = this.dataType) != null ? ref.getProperty(prop) : void 0;
      value = this._data[prop];
      if (value === void 0) {
        if (property) {
          provider = property.get("provider");
          if (context != null) {
            context.unloaded = true;
          }
          if (provider && provider._loadMode === "lazy") {
            value = loadData.call(this, provider);
            callbackProcessed = true;
          }
        }
      } else if (value instanceof cola.Provider) {
        value = loadData.call(this, value);
        callbackProcessed = true;
      } else if (value instanceof cola.AjaxServiceInvoker) {
        providerInvoker = value;
        if (loadMode === "sync") {
          value = providerInvoker.invokeSync();
          value = this._set(prop, value);
        } else if (loadMode === "async") {
          if (callback) {
            providerInvoker.callbacks.push(callback);
          }
          callbackProcessed = true;
          value = void 0;
        } else {
          value = void 0;
        }
        if (context) {
          context.unloaded = true;
          if (context.providerInvokers == null) {
            context.providerInvokers = [];
          }
          context.providerInvokers.push(providerInvoker);
        }
      }
      if (callback && !callbackProcessed) {
        cola.callback(callback, true, value);
      }
      return value;
    };

    Entity.prototype.set = function(prop, value, context) {
      var config;
      if (typeof prop === "string") {
        _setValue(this, prop, value, context);
      } else if (prop && (typeof prop === "object")) {
        config = prop;
        for (prop in config) {
          if (prop.charAt(0) === "$") {
            continue;
          }
          this.set(prop, config[prop]);
        }
      }
      return this;
    };

    Entity.prototype._jsonToEntity = function(value, dataType, aggregated, provider) {
      var result;
      result = cola.DataType.jsonToEntity(value, dataType, aggregated, provider != null ? provider._pageSize : void 0);
      if (result && provider) {
        result._providerInvoker = provider.getInvoker({
          data: this
        });
      }
      return result;
    };

    Entity.prototype._set = function(prop, value) {
      var actualType, changed, convert, dataType, expectedType, item, l, len1, len2, len3, matched, message, messages, o, oldValue, property, provider, q, ref, ref1, ref2, ref3, ref4, validator;
      oldValue = this._data[prop];
      property = (ref = this.dataType) != null ? ref.getProperty(prop) : void 0;
      if (value != null) {
        if (value instanceof cola.Provider) {
          changed = oldValue !== void 0;
        } else {
          if (property) {
            dataType = property._dataType;
            provider = property._provider;
          }
          if (dataType) {
            if (value != null) {
              if (dataType instanceof cola.StringDataType && typeof value !== "string" || dataType instanceof cola.BooleanDataType && typeof value !== "boolean" || dataType instanceof cola.NumberDataType && typeof value !== "number" || dataType instanceof cola.DateDataType && !(value instanceof Date)) {
                value = dataType.parse(value);
              } else if (dataType instanceof cola.EntityDataType) {
                matched = true;
                if (value instanceof _Entity) {
                  matched = value.dataType === dataType && !property._aggregated;
                } else if (value instanceof _EntityList) {
                  matched = value.dataType === dataType && property._aggregated;
                } else {
                  value = this._jsonToEntity(value, dataType, property._aggregated, provider);
                }
                if (!matched) {
                  expectedType = dataType.get("name");
                  actualType = ((ref1 = value.dataType) != null ? ref1.get("name") : void 0) || "undefined";
                  if (property._aggregated) {
                    expectedType = "[" + expectedType + "]";
                  }
                  if (value instanceof cola.EntityList) {
                    actualType = "[" + actualType + "]";
                  }
                  throw new cola.Exception("Unmatched DataType. expect \"" + expectedType + "\" but \"" + actualType + "\".");
                }
              } else {
                value = dataType.parse(value);
              }
            }
          } else if (typeof value === "object" && (value != null)) {
            if (value instanceof Array) {
              convert = true;
              if (value.length > 0) {
                item = value[0];
                if (cola.util.isSimpleValue(item)) {
                  convert = false;
                }
              }
              if (convert) {
                value = this._jsonToEntity(value, null, true, provider);
              }
            } else if (value.hasOwnProperty("$data")) {
              value = this._jsonToEntity(value, null, true, provider);
            } else if (value instanceof Date) {

            } else {
              value = this._jsonToEntity(value, null, false, provider);
            }
          }
          changed = oldValue !== value;
        }
      } else {
        changed = oldValue !== value;
      }
      if (changed) {
        if (property) {
          if (property._validators && property._rejectInvalidValue) {
            messages = null;
            ref2 = property._validators;
            for (l = 0, len1 = ref2.length; l < len1; l++) {
              validator = ref2[l];
              if ((value != null) || validator instanceof cola.RequiredValidator) {
                if (!(validator._disabled && validator instanceof cola.AsyncValidator && validator.get("async"))) {
                  message = validator.validate(value);
                  if (message) {
                    if (messages == null) {
                      messages = [];
                    }
                    if (message instanceof Array) {
                      Array.prototype.push.apply(messages, message);
                    } else {
                      messages.push(message);
                    }
                  }
                }
              }
            }
            if (messages) {
              for (o = 0, len2 = messages.length; o < len2; o++) {
                message = messages[o];
                if (message === VALIDATION_ERROR) {
                  throw new cola.Exception(message.text);
                }
              }
            }
          }
        }
        if (this._disableWriteObservers === 0) {
          if ((oldValue != null) && (oldValue instanceof _Entity || oldValue instanceof _EntityList)) {
            delete oldValue._parent;
            delete oldValue._parentProperty;
          }
          if (this.state === _Entity.STATE_NONE) {
            this.setState(_Entity.STATE_MODIFIED);
          }
        }
        this._data[prop] = value;
        if ((value != null) && (value instanceof _Entity || value instanceof _EntityList)) {
          if (value._parent && value._parent !== this) {
            throw new cola.Exception("Entity/EntityList is already belongs to another owner. \"" + prop + "\"");
          }
          value._parent = this;
          value._parentProperty = prop;
          value._setObserver(this._observer);
          value._onPathChange();
          this._mayHasSubEntity = true;
        }
        this.timestamp = cola.sequenceNo();
        if (this._disableWriteObservers === 0) {
          this._notify(cola.constants.MESSAGE_PROPERTY_CHANGE, {
            entity: this,
            property: prop,
            value: value,
            oldValue: oldValue
          });
        }
        if (messages !== void 0) {
          if ((ref3 = this._messageHolder) != null) {
            ref3.clear(prop);
          }
          this.addMessage(prop, messages);
          if (value != null) {
            ref4 = property._validators;
            for (q = 0, len3 = ref4.length; q < len3; q++) {
              validator = ref4[q];
              if (!validator._disabled && validator instanceof cola.AsyncValidator && validator.get("async")) {
                validator.validate(value, (function(_this) {
                  return function(message) {
                    if (message) {
                      _this.addMessage(prop, message);
                    }
                  };
                })(this));
              }
            }
          }
        } else {
          this.validate(prop);
        }
      }
      return value;
    };

    Entity.prototype.remove = function() {
      if (this._parent) {
        if (this._parent instanceof _EntityList) {
          this._parent.remove(this);
        } else {
          this.setState(_Entity.STATE_DELETED);
          this._parent.set(this._parentProperty, null);
        }
      } else {
        this.setState(_Entity.STATE_DELETED);
      }
      return this;
    };

    Entity.prototype.createChild = function(prop, data) {
      var entityList, property, propertyDataType, provider, ref;
      if (data && data instanceof Array) {
        throw new cola.Exception("Unmatched DataType. expect \"Object\" but \"Array\".");
      }
      property = (ref = this.dataType) != null ? ref.getProperty(prop) : void 0;
      propertyDataType = property != null ? property._dataType : void 0;
      if (propertyDataType && !(propertyDataType instanceof cola.EntityDataType)) {
        throw new cola.Exception("Unmatched DataType. expect \"cola.EntityDataType\" but \"" + propertyDataType._name + "\".");
      }
      if (property != null ? property._aggregated : void 0) {
        entityList = this._get(prop, "never");
        if (entityList == null) {
          entityList = new cola.EntityList(null, propertyDataType);
          provider = property._provider;
          if (provider) {
            entityList.pageSize = provider._pageSize;
            entityList._providerInvoker = provider.getInvoker({
              data: this
            });
          }
          this._disableWriteObservers++;
          this._set(prop, entityList);
          this._disableWriteObservers--;
        }
        return entityList.insert(data);
      } else {
        return this._set(prop, data);
      }
    };

    Entity.prototype.createBrother = function(data) {
      var brother, parent;
      if (data && data instanceof Array) {
        throw new cola.Exception("Unmatched DataType. expect \"Object\" but \"Array\".");
      }
      brother = new _Entity(data, this.dataType);
      brother.setState(_Entity.STATE_NEW);
      parent = this._parent;
      if (parent && parent instanceof _EntityList) {
        parent.insert(brother);
      }
      return brother;
    };

    Entity.prototype.setState = function(state) {
      var oldState;
      if (this.state === state) {
        return this;
      }
      if (this.state === _Entity.STATE_NONE && state === _Entity.STATE_MODIFIED) {
        this._storeOldData();
      }
      oldState = this.state;
      this.state = state;
      this._notify(cola.constants.MESSAGE_EDITING_STATE_CHANGE, {
        entity: this,
        oldState: oldState,
        state: state
      });
      return this;
    };

    Entity.prototype._storeOldData = function() {
      var data, oldData, p;
      if (this._oldData) {
        return;
      }
      data = this._data;
      oldData = this._oldData = {};
      for (p in data) {
        value = data[p];
        if (value && (value instanceof _Entity || value instanceof _EntityList)) {
          continue;
        }
        oldData[p] = value;
      }
    };

    Entity.prototype.getOldValue = function(prop) {
      var ref;
      return (ref = this._oldData) != null ? ref[prop] : void 0;
    };

    Entity.prototype.reset = function(prop) {
      var data;
      if (prop) {
        this._set(prop, void 0);
        this.clearMessages(prop);
      } else {
        this.disableObservers();
        data = this._data;
        for (prop in data) {
          value = data[prop];
          if (value !== void 0) {
            delete data[prop];
          }
        }
        this.resetState();
        this.enableObservers();
        this._notify(cola.constants.MESSAGE_REFRESH, {
          data: this
        });
      }
      return this;
    };

    Entity.prototype.resetState = function() {
      delete this._oldData;
      this.clearMessages();
      this.setState(_Entity.STATE_NONE);
      return this;
    };

    Entity.prototype.getDataType = function(path) {
      var data, dataType, l, len1, part, parts, property;
      if (path) {
        dataType = this.dataType;
        if (dataType) {
          parts = path.split(".");
          for (l = 0, len1 = parts.length; l < len1; l++) {
            part = parts[l];
            property = typeof dataType.getProperty === "function" ? dataType.getProperty(part) : void 0;
            if (property == null) {
              break;
            }
            dataType = property.get("dataType");
            if (dataType == null) {
              break;
            }
          }
        }
      } else {
        dataType = this.dataType;
      }
      if (dataType == null) {
        data = this.get(path);
        dataType = data != null ? data.dataType : void 0;
      }
      return dataType;
    };

    Entity.prototype.getPath = _getEntityPath;

    Entity.prototype.flush = function(property, loadMode) {
      var callback, oldLoadMode, propertyDef, provider;
      if (loadMode == null) {
        loadMode = "async";
      }
      propertyDef = this.dataType.getProperty(property);
      provider = propertyDef != null ? propertyDef._provider : void 0;
      if (!provider) {
        throw new cola.Exception("Provider undefined.");
      }
      this._set(property, void 0);
      if (loadMode && (typeof loadMode === "function" || typeof loadMode === "object")) {
        callback = loadMode;
        loadMode = "async";
      }
      oldLoadMode = provider._loadMode;
      provider._loadMode = "lazy";
      try {
        return this._get(property, loadMode, {
          complete: (function(_this) {
            return function(success, result) {
              cola.callback(callback, success, result);
            };
          })(this)
        });
      } finally {
        provider._loadMode = oldLoadMode;
      }
    };

    Entity.prototype._setObserver = function(observer) {
      var data, p;
      if (this._observer === observer) {
        return;
      }
      this._observer = observer;
      if (this._mayHasSubEntity) {
        data = this._data;
        for (p in data) {
          value = data[p];
          if (value && (value instanceof _Entity || value instanceof _EntityList)) {
            value._setObserver(observer);
          }
        }
      }
    };

    Entity.prototype.watch = _watch;

    Entity.prototype.unwatch = _unwatch;

    Entity.prototype._triggerWatcher = _triggerWatcher;

    Entity.prototype._onPathChange = function() {
      var data, p;
      delete this._pathCache;
      if (this._mayHasSubEntity) {
        data = this._data;
        for (p in data) {
          value = data[p];
          if (value && (value instanceof _Entity || value instanceof _EntityList)) {
            value._onPathChange();
          }
        }
      }
    };

    Entity.prototype.disableObservers = function() {
      if (this._disableObserverCount < 0) {
        this._disableObserverCount = 1;
      } else {
        this._disableObserverCount++;
      }
      return this;
    };

    Entity.prototype.enableObservers = function() {
      if (this._disableObserverCount < 1) {
        this._disableObserverCount = 0;
      } else {
        this._disableObserverCount--;
      }
      return this;
    };

    Entity.prototype.notifyObservers = function() {
      this._notify(cola.constants.MESSAGE_REFRESH, {
        data: this
      });
      return this;
    };

    Entity.prototype._notify = function(type, arg) {
      var path;
      if (this._disableObserverCount === 0) {
        delete arg.timestamp;
        path = this.getPath(true);
        if ((type === cola.constants.MESSAGE_PROPERTY_CHANGE || type === cola.constants.MESSAGE_VALIDATION_STATE_CHANGE || type === cola.constants.MESSAGE_LOADING_START || type === cola.constants.MESSAGE_LOADING_END) && arg.property) {
          if (path) {
            path = path.concat(arg.property);
          } else {
            path = [arg.property];
          }
        }
        this._doNotify(path, type, arg);
        if (type === cola.constants.MESSAGE_PROPERTY_CHANGE || type === cola.constants.MESSAGE_REFRESH) {
          this._triggerWatcher([arg.property || "*"], type, arg);
        }
      }
    };

    Entity.prototype._doNotify = function(path, type, arg) {
      var ref;
      if ((ref = this._observer) != null) {
        ref.onMessage(path, type, arg);
      }
    };

    Entity.prototype._validate = function(prop) {
      var data, l, len1, message, messageChanged, property, ref, validator;
      property = this.dataType.getProperty(prop);
      if (property) {
        if (property._validators) {
          data = this._data[prop];
          if (data && (data instanceof cola.Provider || data instanceof cola.AjaxServiceInvoker)) {
            return;
          }
          ref = property._validators;
          for (l = 0, len1 = ref.length; l < len1; l++) {
            validator = ref[l];
            if (!validator._disabled) {
              if (validator instanceof cola.AsyncValidator && validator.get("async")) {
                validator.validate(data, (function(_this) {
                  return function(message) {
                    if (message) {
                      _this.addMessage(prop, message);
                    }
                  };
                })(this));
              } else {
                message = validator.validate(data);
                if (message) {
                  this._addMessage(prop, message);
                  messageChanged = true;
                }
              }
            }
          }
        }
      }
      return messageChanged;
    };

    Entity.prototype.validate = function(prop) {
      var keyMessage, l, len1, oldKeyMessage, property, ref, ref1;
      if (this._messageHolder) {
        oldKeyMessage = this._messageHolder.getKeyMessage();
        this._messageHolder.clear(prop);
      }
      if (this.dataType) {
        if (prop) {
          this._validate(prop);
          this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
            entity: this,
            property: prop
          });
        } else {
          ref = this.dataType.getProperties().elements;
          for (l = 0, len1 = ref.length; l < len1; l++) {
            property = ref[l];
            this._validate(property._property);
            this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
              entity: this,
              property: property._property
            });
          }
        }
      }
      keyMessage = (ref1 = this._messageHolder) != null ? ref1.getKeyMessage() : void 0;
      if ((oldKeyMessage || keyMessage) && oldKeyMessage !== keyMessage) {
        this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
          entity: this
        });
      }
      return !((keyMessage != null ? keyMessage.type : void 0) === VALIDATION_ERROR);
    };

    Entity.prototype._addMessage = function(prop, message) {
      var l, len1, m, messageHolder, topKeyChanged;
      messageHolder = this._messageHolder;
      if (!messageHolder) {
        this._messageHolder = messageHolder = new _Entity.MessageHolder();
      }
      if (message instanceof Array) {
        for (l = 0, len1 = message.length; l < len1; l++) {
          m = message[l];
          if (messageHolder.add(prop, m)) {
            topKeyChanged = true;
          }
        }
      } else {
        if (messageHolder.add(prop, message)) {
          topKeyChanged = true;
        }
      }
      return topKeyChanged;
    };

    Entity.prototype.addMessage = function(prop, message) {
      var topKeyChanged;
      if (arguments.length === 1) {
        message = prop;
        prop = "$";
      }
      if (prop === "$") {
        this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
          entity: this
        });
      } else {
        topKeyChanged = this._addMessage(prop, message);
        this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
          entity: this,
          property: prop
        });
        if (topKeyChanged) {
          this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
            entity: this
          });
        }
      }
      return this;
    };

    Entity.prototype.getKeyMessage = function(prop) {
      var ref;
      return (ref = this._messageHolder) != null ? ref.getKeyMessage(prop) : void 0;
    };

    Entity.prototype.getMessages = function(prop) {
      var ref;
      return (ref = this._messageHolder) != null ? ref.getMessages(prop) : void 0;
    };

    Entity.prototype.clearMessages = function(prop) {
      var hasPropMessage, topKeyChanged;
      if (!this._messageHolder) {
        return this;
      }
      if (prop) {
        hasPropMessage = this._messageHolder.getKeyMessage(prop);
      }
      topKeyChanged = this._messageHolder.clear(prop);
      if (hasPropMessage) {
        this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
          entity: this,
          property: prop
        });
      }
      if (topKeyChanged) {
        this._notify(cola.constants.MESSAGE_VALIDATION_STATE_CHANGE, {
          entity: this
        });
      }
      return this;
    };

    Entity.prototype.findMessages = function(prop, type) {
      var ref;
      return (ref = this._messageHolder) != null ? ref.findMessages(prop, type) : void 0;
    };

    Entity.prototype.toJSON = function(options) {
      var data, json, oldData, prop, state;
      state = (options != null ? options.state : void 0) || false;
      oldData = (options != null ? options.oldData : void 0) || false;
      data = this._data;
      json = {};
      for (prop in data) {
        value = data[prop];
        if (value) {
          if (value instanceof cola.AjaxServiceInvoker) {
            continue;
          } else if (value instanceof _Entity || value instanceof _EntityList) {
            value = value.toJSON(options);
          }
        }
        json[prop] = value;
      }
      if (state) {
        json.$state = this.state;
      }
      if (oldData && this._oldData) {
        json.$oldData = this._oldData;
      }
      return json;
    };

    return Entity;

  })();

  LinkedList = (function() {
    function LinkedList() {}

    LinkedList.prototype._size = 0;

    LinkedList.prototype._insertElement = function(element, insertMode, refEntity) {
      var next, previous;
      if (!this._first) {
        this._first = this._last = element;
      } else {
        if (!insertMode || insertMode === "end") {
          element._previous = this._last;
          this._last._next = element;
          this._last = element;
        } else if (insertMode === "before") {
          previous = refEntity._previous;
          if (previous != null) {
            previous._next = element;
          }
          refEntity._previous = element;
          element._previous = previous;
          element._next = refEntity;
          if (this._first === refEntity) {
            this._first = element;
          }
        } else if (insertMode === "after") {
          next = refEntity._next;
          if (next != null) {
            next._previous = element;
          }
          refEntity._next = element;
          element._previous = refEntity;
          element._next = next;
          if (this._last === refEntity) {
            this._last = element;
          }
        } else if (insertMode === "begin") {
          element._next = this._first;
          this._first._previous = element;
          this._first = element;
        }
      }
      element._page = this;
      this._size++;
    };

    LinkedList.prototype._removeElement = function(element) {
      var next, previous;
      previous = element._previous;
      next = element._next;
      if (previous != null) {
        previous._next = next;
      }
      if (next != null) {
        next._previous = previous;
      }
      if (this._first === element) {
        this._first = next;
      }
      if (this._last === element) {
        this._last = previous;
      }
      this._size++;
    };

    LinkedList.prototype._clearElements = function() {
      this._first = this._last = null;
      this._size = 0;
    };

    return LinkedList;

  })();

  Page = (function(superClass) {
    extend(Page, superClass);

    Page.prototype.loaded = false;

    Page.prototype.entityCount = 0;

    function Page(entityList1, pageNo1) {
      this.entityList = entityList1;
      this.pageNo = pageNo1;
    }

    Page.prototype.initData = function(json) {
      var data, dataType, entity, entityList, l, len1, rawJson;
      rawJson = json;
      entityList = this.entityList;
      if (json.hasOwnProperty("$data")) {
        json = rawJson.$data;
      }
      if (!(json instanceof Array)) {
        throw new cola.Exception("Unmatched DataType. expect \"Array\" but \"Object\".");
      }
      dataType = entityList.dataType;
      for (l = 0, len1 = json.length; l < len1; l++) {
        data = json[l];
        entity = new _Entity(data, dataType);
        this._insertElement(entity);
      }
      if (rawJson.$entityCount != null) {
        entityList.totalEntityCount = rawJson.$entityCount;
      }
      if (entityList.totalEntityCount != null) {
        if (entityList.pageSize) {
          entityList.pageCount = parseInt((entityList.totalEntityCount + entityList.pageSize - 1) / entityList.pageSize);
        }
        entityList.pageCountDetermined = true;
      }
      entityList.entityCount += json.length;
      entityList.timestamp = cola.sequenceNo();
      entityList._notify(cola.constants.MESSAGE_REFRESH, {
        data: entityList
      });
    };

    Page.prototype._insertElement = function(entity, insertMode, refEntity) {
      var entityList;
      Page.__super__._insertElement.call(this, entity, insertMode, refEntity);
      entityList = this.entityList;
      entity._page = this;
      entity._parent = entityList;
      delete entity._parentProperty;
      if (!this.dontAutoSetCurrent && (entityList.current == null)) {
        if (entity.state !== _Entity.STATE_DELETED) {
          entityList.current = entity;
          entityList._setCurrentPage(entity._page);
        }
      }
      entity._setObserver(entityList._observer);
      entity._onPathChange();
      if (entity.state !== _Entity.STATE_DELETED) {
        this.entityCount++;
      }
    };

    Page.prototype._removeElement = function(entity) {
      Page.__super__._removeElement.call(this, entity);
      delete entity._page;
      delete entity._parent;
      entity._setObserver(null);
      entity._onPathChange();
      if (entity.state !== _Entity.STATE_DELETED) {
        this.entityCount--;
      }
    };

    Page.prototype._clearElements = function() {
      var entity;
      entity = this._first;
      while (entity) {
        delete entity._page;
        delete entity._parent;
        entity._setObserver(null);
        entity._onPathChange();
        entity = entity._next;
      }
      this.entityCount = 0;
      Page.__super__._clearElements.call(this);
    };

    Page.prototype.loadData = function(callback) {
      var providerInvoker, result;
      providerInvoker = this.entityList._providerInvoker;
      if (providerInvoker) {
        providerInvoker.pageSize = this.entityList.pageSize;
        providerInvoker.pageNo = this.pageNo;
        if (callback) {
          providerInvoker.invokeAsync({
            complete: (function(_this) {
              return function(success, result) {
                if (success) {
                  _this.initData(result);
                }
                return cola.callback(callback, success, result);
              };
            })(this)
          });
        } else {
          result = providerInvoker.invokeSync();
          this.initData(result);
        }
      }
    };

    return Page;

  })(LinkedList);

  cola.EntityList = (function(superClass) {
    extend(EntityList, superClass);

    EntityList.prototype.current = null;

    EntityList.prototype.entityCount = 0;

    EntityList.prototype.pageMode = "append";

    EntityList.prototype.pageSize = 0;

    EntityList.prototype.pageNo = 1;

    EntityList.prototype.pageCount = 1;

    EntityList.prototype._disableObserverCount = 0;

    function EntityList(array, dataType) {
      this.id = cola.uniqueId();
      this.timestamp = cola.sequenceNo();
      this.dataType = dataType;
      if (array) {
        this.fillData(array);
      }
    }

    EntityList.prototype.fillData = function(array) {
      var page;
      page = this._findPage(this.pageNo);
      if (page == null) {
        page = new Page(this, this.pageNo);
      }
      this._insertElement(page, "begin");
      page.initData(array);
    };

    EntityList.prototype._setObserver = function(observer) {
      var next, page;
      if (this._observer === observer) {
        return;
      }
      this._observer = observer;
      page = this._first;
      if (!page) {
        return;
      }
      next = page._first;
      while (page) {
        if (next) {
          next._setObserver(observer);
          next = next._next;
        } else {
          page = page._next;
          next = page != null ? page._first : void 0;
        }
      }
    };

    EntityList.prototype.watch = _watch;

    EntityList.prototype.unwatch = _unwatch;

    EntityList.prototype._triggerWatcher = _triggerWatcher;

    EntityList.prototype._setCurrentPage = function(page) {
      this._currentPage = page;
      this.pageNo = (page != null ? page.pageNo : void 0) || 1;
      this.timestamp = cola.sequenceNo();
    };

    EntityList.prototype._onPathChange = function() {
      var next, page;
      delete this._pathCache;
      page = this._first;
      if (!page) {
        return;
      }
      next = page._first;
      while (page) {
        if (next) {
          next._onPathChange();
          next = next._next;
        } else {
          page = page._next;
          next = page != null ? page._first : void 0;
        }
      }
    };

    EntityList.prototype._findPrevious = function(entity) {
      var page, previous;
      if (entity && entity._parent !== this) {
        return;
      }
      if (entity) {
        page = entity._page;
        previous = entity._previous;
      } else {
        page = this._last;
        previous = page._last;
      }
      while (page) {
        if (previous) {
          if (previous.state !== _Entity.STATE_DELETED) {
            return previous;
          } else {
            previous = previous._previous;
          }
        } else {
          page = page._previous;
          previous = page != null ? page._last : void 0;
        }
      }
    };

    EntityList.prototype._findNext = function(entity) {
      var next, page;
      if (entity && entity._parent !== this) {
        return;
      }
      if (entity) {
        page = entity._page;
        next = entity._next;
      } else {
        page = this._first;
        next = page._first;
      }
      while (page) {
        if (next) {
          if (next.state !== _Entity.STATE_DELETED) {
            return next;
          } else {
            next = next._next;
          }
        } else {
          page = page._next;
          next = page != null ? page._first : void 0;
        }
      }
    };

    EntityList.prototype._findPage = function(pageNo) {
      var page;
      if (pageNo < 1) {
        return null;
      }
      if (pageNo > this.pageCount) {
        if (this.pageCountDetermined || pageNo > (this.pageCount + 1)) {
          return null;
        }
      }
      page = this._currentPage || this._first;
      if (!page) {
        return null;
      }
      if (page.pageNo === pageNo) {
        return page;
      } else if (page.pageNo < pageNo) {
        page = page._next;
        while (page != null) {
          if (page.pageNo === pageNo) {
            return page;
          } else if (page.pageNo > pageNo) {
            break;
          }
          page = page._next;
        }
      } else {
        page = page._previous;
        while (page != null) {
          if (page.pageNo === pageNo) {
            return page;
          } else if (page.pageNo < pageNo) {
            break;
          }
          page = page._previous;
        }
      }
      return null;
    };

    EntityList.prototype._createPage = function(pageNo) {
      var insertMode, page, refPage;
      if (pageNo < 1) {
        return null;
      }
      if (pageNo > this.pageCount) {
        if (this.pageCountDetermined || pageNo > (this.pageCount + 1)) {
          return null;
        }
      }
      insertMode = "end";
      refPage = this._currentPage || this._first;
      if (refPage) {
        if (refPage.page === pageNo - 1) {
          insertMode = "after";
        } else if (refPage.page === pageNo + 1) {
          insertMode = "before";
        } else {
          page = this._last;
          while (page) {
            if (page.pageNo < pageNo) {
              refPage = page;
              insertMode = "after";
              break;
            }
            page = page._previous;
          }
        }
      }
      page = new Page(this, pageNo);
      this._insertElement(page, insertMode, refPage);
      return page;
    };

    EntityList.prototype.hasNextPage = function() {
      var pageNo;
      pageNo = this.pageNo + 1;
      return !this.pageCountDetermined || pageNo <= this.pageCount;
    };

    EntityList.prototype._loadPage = function(pageNo, setCurrent, loadMode) {
      var callback, entity, page;
      if (loadMode == null) {
        loadMode = "async";
      }
      if (loadMode && (typeof loadMode === "function" || typeof loadMode === "object")) {
        callback = loadMode;
        loadMode = "async";
      }
      page = this._findPage(pageNo);
      if (page !== this._currentPage) {
        if (page) {
          this._setCurrentPage(page);
          if (setCurrent) {
            entity = page._first;
            while (entity) {
              if (entity.state !== _Entity.STATE_DELETED) {
                this.setCurrent(entity);
                break;
              }
              entity = entity._next;
            }
          }
          cola.callback(callback, true);
        } else if (loadMode !== "never") {
          if (setCurrent) {
            this.setCurrent(null);
          }
          page = this._createPage(pageNo);
          if (page) {
            if (loadMode === "async") {
              page.loadData({
                complete: (function(_this) {
                  return function(success, result) {
                    if (success) {
                      _this._setCurrentPage(page);
                      if (page.entityCount && _this.pageCount < pageNo) {
                        _this.pageCount = pageNo;
                      }
                    }
                    cola.callback(callback, success, result);
                  };
                })(this)
              });
            } else {
              page.loadData();
              this._setCurrentPage(page);
              cola.callback(callback, true);
            }
          }
        }
      }
      return this;
    };

    EntityList.prototype.loadPage = function(pageNo, loadMode) {
      return this._loadPage(pageNo, false, loadMode);
    };

    EntityList.prototype.gotoPage = function(pageNo, loadMode) {
      if (pageNo < 1) {
        pageNo = 1;
      } else if (this.pageCountDetermined && pageNo > this.pageCount) {
        pageNo = this.pageCount;
      }
      return this._loadPage(pageNo, true, loadMode);
    };

    EntityList.prototype.firstPage = function(loadMode) {
      this.gotoPage(1, loadMode);
      return this;
    };

    EntityList.prototype.previousPage = function(loadMode) {
      var pageNo;
      pageNo = this.pageNo - 1;
      if (pageNo < 1) {
        pageNo = 1;
      }
      this.gotoPage(pageNo, loadMode);
      return this;
    };

    EntityList.prototype.nextPage = function(loadMode) {
      var pageNo;
      pageNo = this.pageNo + 1;
      if (this.pageCountDetermined && pageNo > this.pageCount) {
        pageNo = this.pageCount;
      }
      this.gotoPage(pageNo, loadMode);
      return this;
    };

    EntityList.prototype.lastPage = function(loadMode) {
      this.gotoPage(this.pageCount, loadMode);
      return this;
    };

    EntityList.prototype.insert = function(entity, insertMode, refEntity) {
      var page;
      if (insertMode === "before" || insertMode === "after") {
        if (refEntity && refEntity._parent !== this) {
          refEntity = null;
        }
        if (refEntity == null) {
          refEntity = this.current;
        }
        if (refEntity) {
          page = refEntity._page;
        }
      } else if (this.pageMode === "append") {
        if (insertMode === "end") {
          page = this._last;
        } else if (insertMode === "begin") {
          page = this._first;
        }
      }
      if (!page) {
        page = this._currentPage;
        if (!page) {
          this.gotoPage(1);
          page = this._currentPage;
        }
      }
      if (entity instanceof _Entity) {
        if (entity._parent && entity._parent !== this) {
          throw new cola.Exception("Entity is already belongs to another owner. \"" + (this._parentProperty || "Unknown") + "\".");
        }
      } else {
        entity = new _Entity(entity, this.dataType);
        entity.setState(_Entity.STATE_NEW);
      }
      page.dontAutoSetCurrent = true;
      page._insertElement(entity, insertMode, refEntity);
      page.dontAutoSetCurrent = false;
      if (entity.state !== _Entity.STATE_DELETED) {
        this.entityCount++;
      }
      this.timestamp = cola.sequenceNo();
      this._notify(cola.constants.MESSAGE_INSERT, {
        entityList: this,
        entity: entity,
        insertMode: insertMode,
        refEntity: refEntity
      });
      if (!this.current) {
        this.setCurrent(entity);
      }
      return entity;
    };

    EntityList.prototype.remove = function(entity, detach) {
      var changeCurrent, newCurrent, page;
      if (entity == null) {
        entity = this.current;
        if (entity == null) {
          return void 0;
        }
      }
      if (entity._parent !== this) {
        return void 0;
      }
      if (entity === this.current) {
        changeCurrent = true;
        newCurrent = this._findNext(entity);
        if (!newCurrent) {
          newCurrent = this._findPrevious(entity);
        }
      }
      page = entity._page;
      if (detach) {
        page._removeElement(entity);
        this.entityCount--;
      } else if (entity.state === _Entity.STATE_NEW) {
        entity.setState(_Entity.STATE_DELETED);
        page._removeElement(entity);
        this.entityCount--;
      } else if (entity.state !== _Entity.STATE_DELETED) {
        entity.setState(_Entity.STATE_DELETED);
        this.entityCount--;
      }
      this.timestamp = cola.sequenceNo();
      this._notify(cola.constants.MESSAGE_REMOVE, {
        entityList: this,
        entity: entity
      });
      if (changeCurrent) {
        this.setCurrent(newCurrent);
      }
      return entity;
    };

    EntityList.prototype.setCurrent = function(entity) {
      var oldCurrent;
      if (this.current === entity || (entity != null ? entity.state : void 0) === cola.Entity.STATE_DELETED) {
        return this;
      }
      if (entity && entity._parent !== this) {
        return this;
      }
      oldCurrent = this.current;
      if (oldCurrent) {
        oldCurrent._onPathChange();
      }
      this.current = entity;
      if (entity) {
        this._setCurrentPage(entity._page);
        entity._onPathChange();
      }
      this._notify(cola.constants.MESSAGE_CURRENT_CHANGE, {
        entityList: this,
        current: entity,
        oldCurrent: oldCurrent
      });
      return this;
    };

    EntityList.prototype.first = function() {
      var entity;
      entity = this._findNext();
      if (entity) {
        this.setCurrent(entity);
        return entity;
      } else {
        return this.current;
      }
    };

    EntityList.prototype.previous = function() {
      var entity;
      entity = this._findPrevious(this.current);
      if (entity) {
        this.setCurrent(entity);
        return entity;
      } else {
        return this.current;
      }
    };

    EntityList.prototype.next = function() {
      var entity;
      entity = this._findNext(this.current);
      if (entity) {
        this.setCurrent(entity);
        return entity;
      } else {
        return this.current;
      }
    };

    EntityList.prototype.last = function() {
      var entity;
      entity = this._findPrevious();
      if (entity) {
        this.setCurrent(entity);
        return entity;
      } else {
        return this.current;
      }
    };

    EntityList.prototype._reset = function() {
      var page;
      this.current = null;
      this.entityCount = 0;
      this.pageNo = 1;
      this.pageCount = 1;
      page = this._first;
      while (page) {
        page._clearElements();
        page = page._next;
      }
      this.timestamp = cola.sequenceNo();
      return this;
    };

    EntityList.prototype.disableObservers = function() {
      if (this._disableObserverCount < 0) {
        this._disableObserverCount = 1;
      } else {
        this._disableObserverCount++;
      }
      return this;
    };

    EntityList.prototype.enableObservers = function() {
      if (this._disableObserverCount < 1) {
        this._disableObserverCount = 0;
      } else {
        this._disableObserverCount--;
      }
      return this;
    };

    EntityList.prototype.notifyObservers = function() {
      this._notify(cola.constants.MESSAGE_REFRESH, {
        data: this
      });
      return this;
    };

    EntityList.prototype._notify = function(type, arg) {
      var ref;
      if (this._disableObserverCount === 0) {
        if ((ref = this._observer) != null) {
          ref.onMessage(this.getPath(true), type, arg);
        }
        if (type === cola.constants.MESSAGE_CURRENT_CHANGE || type === cola.constants.MESSAGE_INSERT || type === cola.constants.MESSAGE_REMOVE) {
          this._triggerWatcher(["*"], type, arg);
        }
      }
    };

    EntityList.prototype.flush = function(loadMode) {
      var callback, notifyArg, page;
      if (this._providerInvoker == null) {
        throw new cola.Exception("Provider undefined.");
      }
      if (loadMode && (typeof loadMode === "function" || typeof loadMode === "object")) {
        callback = loadMode;
        loadMode = "async";
      }
      this._reset();
      page = this._findPage(this.pageNo);
      if (!page) {
        this._createPage(this.pageNo);
      }
      if (loadMode === "async") {
        notifyArg = {
          data: this
        };
        this._notify(cola.constants.MESSAGE_LOADING_START, notifyArg);
        page.loadData({
          complete: (function(_this) {
            return function(success, result) {
              cola.callback(callback, success, result);
              return _this._notify(cola.constants.MESSAGE_LOADING_END, notifyArg);
            };
          })(this)
        });
      } else {
        page.loadData();
      }
      return this;
    };

    EntityList.prototype.each = function(fn, options) {
      var deleted, i, next, page, pageNo;
      page = this._first;
      if (!page) {
        return this;
      }
      if (options != null) {
        if (typeof options === "boolean") {
          deleted = options;
        } else {
          deleted = options.deleted;
          pageNo = options.pageNo;
          if (!pageNo && options.currentPage) {
            pageNo = this.pageNo;
          }
        }
      }
      if (pageNo > 1) {
        page = this._findPage(pageNo);
        if (!page) {
          return this;
        }
      }
      next = page._first;
      i = 0;
      while (page) {
        if (next) {
          if (deleted || next.state !== _Entity.STATE_DELETED) {
            if (fn.call(this, next, i++) === false) {
              break;
            }
          }
          next = next._next;
        } else if (page && !pageNo) {
          page = page._next;
          next = page != null ? page._first : void 0;
        } else {
          break;
        }
      }
      return this;
    };

    EntityList.prototype.getPath = _getEntityPath;

    EntityList.prototype.toJSON = function(options) {
      var array, deleted, next, page;
      deleted = options != null ? options.deleted : void 0;
      array = [];
      page = this._first;
      if (page) {
        next = page._first;
        while (page) {
          if (next) {
            if (deleted || next.state !== _Entity.STATE_DELETED) {
              array.push(next.toJSON(options));
            }
            next = next._next;
          } else {
            page = page._next;
            next = page != null ? page._first : void 0;
          }
        }
      }
      return array;
    };

    EntityList.prototype.toArray = function() {
      var array, next, page;
      array = [];
      page = this._first;
      if (page) {
        next = page._first;
        while (page) {
          if (next) {
            if (next.state !== _Entity.STATE_DELETED) {
              array.push(next);
            }
            next = next._next;
          } else {
            page = page._next;
            next = page != null ? page._first : void 0;
          }
        }
      }
      return array;
    };

    EntityList.prototype.filter = function(criteria) {
      return cola._filterCollection(this, criteria);
    };

    EntityList.prototype.where = function(criteria) {
      return cola._filterCollection(this, criteria, true, true);
    };

    EntityList.prototype.find = function(criteria) {
      var filtered, prop, propFilter, result;
      if (!criteria) {
        return null;
      }
      if (cola.util.isSimpleValue(criteria)) {
        criteria = {
          "$": {
            value: criteria,
            caseSensitive: true,
            strict: true
          }
        };
      }
      result = null;
      if (typeof criteria === "object") {
        for (prop in criteria) {
          propFilter = criteria[prop];
          if (typeof propFilter === "string") {
            criteria[prop] = {
              value: propFilter.toLowerCase(),
              caseSensitive: true,
              strict: true
            };
          } else {
            if (propFilter.caseSensitive == null) {
              propFilter.caseSensitive = true;
            }
            if (propFilter.strict == null) {
              propFilter.strict = true;
            }
          }
        }
        cola.each(this, function(item) {
          var data, matches, p, v;
          matches = false;
          if (cola.util.isSimpleValue(item)) {
            if (criteria.$) {
              matches = _matchValue(v, criteria.$);
            }
          } else {
            for (prop in criteria) {
              propFilter = criteria[prop];
              if (prop === "$") {
                if (item instanceof cola.Entity) {
                  data = item._data;
                } else {
                  data = item;
                }
                for (p in data) {
                  v = data[p];
                  if (_matchValue(v, propFilter)) {
                    matches = true;
                    break;
                  }
                }
                if (matches) {
                  break;
                }
              } else if (item instanceof cola.Entity) {
                if (_matchValue(item.get(prop), propFilter)) {
                  matches = true;
                  break;
                }
              } else {
                if (_matchValue(item[prop], propFilter)) {
                  matches = true;
                  break;
                }
              }
            }
          }
          if (matches) {
            result = item;
          }
        });
      } else if (typeof criteria === "function") {
        filtered = [];
        filtered.$origin = collection.$origin || collection;
        cola.each(collection, function(item) {
          if (criteria(item)) {
            result = item;
          }
        });
      }
      return result;
    };

    return EntityList;

  })(LinkedList);

  _Entity = cola.Entity;

  _EntityList = cola.EntityList;

  _Entity._evalDataPath = _evalDataPath = function(data, path, noEntityList, loadMode, callback, context) {
    var i, isLast, l, lastIndex, len1, part, parts, returnCurrent;
    if (path) {
      parts = path.split(".");
      lastIndex = parts.length - 1;
      for (i = l = 0, len1 = parts.length; l < len1; i = ++l) {
        part = parts[i];
        returnCurrent = false;
        if (i === 0 && data instanceof _EntityList) {
          if (part === "#") {
            data = data.current;
          } else {
            data = data[part];
          }
        } else {
          isLast = i === lastIndex;
          if (!noEntityList) {
            if (!isLast) {
              returnCurrent = true;
            }
            if (part.charCodeAt(part.length - 1) === 35) {
              returnCurrent = true;
              part = part.substring(0, part.length - 1);
            }
          }
          if (data instanceof _Entity) {
            if (typeof data._get === "function") {
              data = data._get(part, loadMode, callback, context);
            } else {

            }
            if (data && data instanceof _EntityList) {
              if (noEntityList || returnCurrent) {
                data = data.current;
              }
            }
          } else {
            data = data[part];
          }
        }
        if (data == null) {
          break;
        }
      }
    }
    return data;
  };

  _Entity._setValue = _setValue = function(entity, path, value, context) {
    var i, part1, part2;
    i = path.lastIndexOf(".");
    if (i > 0) {
      part1 = path.substring(0, i);
      part2 = path.substring(i + 1);
      entity = _evalDataPath(entity, part1, true, "never", context);
      if ((entity != null) && !(entity instanceof _EntityList)) {
        if (entity instanceof cola.AjaxServiceInvoker) {
          entity = void 0;
        } else if (typeof entity._set === "function") {
          entity._set(part2, value);
        } else {
          entity[part2] = value;
        }
      } else {
        throw new cola.Exception("Cannot set value to EntityList \"" + path + "\".");
      }
    } else if (typeof entity._set === "function") {
      entity._set(path, value);
    } else {
      entity[path] = value;
    }
  };

  _Entity._getEntityId = function(entity) {
    if (!entity) {
      return null;
    }
    if (entity instanceof cola.Entity) {
      return entity.id;
    } else if (typeof entity === "object") {
      if (entity._id == null) {
        entity._id = cola.uniqueId();
      }
      return entity._id;
    }
  };

  VALIDATION_NONE = "none";

  VALIDATION_INFO = "info";

  VALIDATION_WARN = "warning";

  VALIDATION_ERROR = "error";

  TYPE_SEVERITY = {
    VALIDATION_INFO: 1,
    VALIDATION_WARN: 2,
    VALIDATION_ERROR: 4
  };

  cola.Entity.MessageHolder = (function() {
    function MessageHolder() {
      this.keyMessage = {};
      this.propertyMessages = {};
    }

    MessageHolder.prototype.compare = function(message1, message2) {
      return (TYPE_SEVERITY[message1.type] || 0) - (TYPE_SEVERITY[message2.type] || 0);
    };

    MessageHolder.prototype.add = function(prop, message) {
      var isTopKey, keyMessage, messages, topKeyChanged;
      messages = this.propertyMessages[prop];
      if (!messages) {
        this.propertyMessages[prop] = [message];
      } else {
        messages.push(message);
      }
      isTopKey = prop === "$";
      if (keyMessage) {
        if (this.compare(message, keyMessage) > 0) {
          this.keyMessage[prop] = message;
          topKeyChanged = isTopKey;
        }
      } else {
        this.keyMessage[prop] = message;
        topKeyChanged = isTopKey;
      }
      if (!topKeyChanged && !isTopKey) {
        keyMessage = this.keyMessage["$"];
        if (keyMessage) {
          if (this.compare(message, keyMessage) > 0) {
            this.keyMessage["$"] = message;
            topKeyChanged = true;
          }
        } else {
          this.keyMessage["$"] = message;
          topKeyChanged = true;
        }
      }
      return topKeyChanged;
    };

    MessageHolder.prototype.clear = function(prop) {
      var keyMessage, l, len1, message, messages, p, ref, topKeyChanged;
      if (prop) {
        delete this.propertyMessages[prop];
        delete this.keyMessage[prop];
        ref = this.propertyMessages;
        for (p in ref) {
          messages = ref[p];
          for (l = 0, len1 = messages.length; l < len1; l++) {
            message = messages[l];
            if (!keyMessage) {
              keyMessage = message;
            } else if (this.compare(message, keyMessage) > 0) {
              keyMessage = message;
            } else {
              continue;
            }
            if (keyMessage.type === VALIDATION_ERROR) {
              break;
            }
          }
        }
        topKeyChanged = this.keyMessage["$"] !== keyMessage;
        if (topKeyChanged) {
          this.keyMessage["$"] = keyMessage;
        }
      } else {
        topKeyChanged = true;
        this.keyMessage = {};
        this.propertyMessages = {};
      }
      return topKeyChanged;
    };

    MessageHolder.prototype.getMessages = function(prop) {
      if (prop == null) {
        prop = "$";
      }
      return this.propertyMessages[prop];
    };

    MessageHolder.prototype.getKeyMessage = function(prop) {
      if (prop == null) {
        prop = "$";
      }
      return this.keyMessage[prop];
    };

    MessageHolder.prototype.findMessages = function(prop, type) {
      var l, len1, len2, m, messages, ms, o, p, ref;
      if (prop) {
        ms = this.propertyMessages[prop];
        if (type) {
          messages = [];
          for (l = 0, len1 = ms.length; l < len1; l++) {
            m = ms[l];
            if (m.type === type) {
              messages.push(m);
            }
          }
        } else {
          messages = ms;
        }
      } else {
        messages = [];
        ref = this.propertyMessages;
        for (p in ref) {
          ms = ref[p];
          for (o = 0, len2 = ms.length; o < len2; o++) {
            m = ms[o];
            if (!type || m.type === type) {
              messages.push(m);
            }
          }
        }
      }
      return messages;
    };

    return MessageHolder;

  })();


  /*
  Functions
   */

  cola.each = function(collection, fn, options) {
    if (collection instanceof cola.EntityList) {
      collection.each(fn, options);
    } else if (collection instanceof Array) {
      if (typeof collection.each === "function") {
        collection.each(fn);
      } else {
        cola.util.each(collection, fn);
      }
    }
  };

  if (typeof exports !== "undefined" && exports !== null) {
    cola = require("./entity");
    if (typeof module !== "undefined" && module !== null) {
      module.exports = cola;
    }
  } else {
    cola = this.cola;
  }


  /*
  Model and Scope
   */

  _RESERVE_NAMES = {
    self: null,
    arg: null
  };

  cola.model = function(name, model) {
    if (arguments.length === 2) {
      if (model) {
        if (cola.model.models[name]) {
          throw new cola.Exception("Duplicated model name \"" + name + "\".");
        }
        cola.model.models[name] = model;
      } else {
        model = cola.removeModel(name);
      }
      return model;
    } else {
      return cola.model.models[name];
    }
  };

  cola.model.models = {};

  cola.removeModel = function(name) {
    var model;
    model = cola.model.models[name];
    delete cola.model.models[name];
    return model;
  };

  cola.Scope = (function() {
    function Scope() {}

    Scope.prototype.get = function(path, loadMode, context) {
      return this.data.get(path, loadMode, context);
    };

    Scope.prototype.set = function(path, data, context) {
      this.data.set(path, data, context);
      return this;
    };

    Scope.prototype.describe = function(property, config) {
      return this.data.describe(property, config);
    };

    Scope.prototype.dataType = function(name) {
      var dataType, l, len1;
      if (typeof name === "string") {
        dataType = this.data.definition(name);
        if (dataType instanceof cola.DataType) {
          return dataType;
        } else {
          return null;
        }
      } else if (name) {
        if (name instanceof Array) {
          for (l = 0, len1 = name.length; l < len1; l++) {
            dataType = name[l];
            if (!(dataType instanceof cola.DataType)) {
              if (dataType.lazy !== false) {
                dataType = new cola.EntityDataType(dataType);
                if (dataType.name) {
                  this.data.regDefinition(dataType.name, dataType);
                }
              }
            }
          }
        } else {
          dataType = name;
          if (!(dataType instanceof cola.DataType)) {
            if (dataType.lazy !== false) {
              dataType = new cola.EntityDataType(dataType);
              if (dataType.name) {
                this.data.regDefinition(dataType.name, dataType);
              }
              return dataType;
            }
          }
        }
      }
    };

    Scope.prototype.definition = function(name) {
      return this.data.definition(name);
    };

    Scope.prototype.flush = function(name, loadMode) {
      this.data.flush(name, loadMode);
      return this;
    };

    Scope.prototype.disableObservers = function() {
      this.data.disableObservers();
      return this;
    };

    Scope.prototype.enableObservers = function() {
      this.data.enableObservers();
      return this;
    };

    Scope.prototype.notifyObservers = function() {
      this.data.notifyObservers();
      return this;
    };

    Scope.prototype.watch = function(path, fn) {
      var l, len1, p, processor;
      processor = {
        _processMessage: function(bindingPath, path, type, arg) {
          fn(path, type, arg);
        }
      };
      if (path instanceof Array) {
        for (l = 0, len1 = path.length; l < len1; l++) {
          p = path[l];
          this.data.bind(p, processor);
        }
      } else {
        this.data.bind(path, processor);
      }
      return this;
    };

    return Scope;

  })();

  cola.Model = (function(superClass) {
    extend(Model, superClass);

    function Model(name, parent) {
      var parentName;
      if (cola.currentScope == null) {
        cola.currentScope = this;
      }
      if (name instanceof cola.Scope) {
        parent = name;
        name = void 0;
      }
      if (name) {
        this.name = name;
        cola.model(name, this);
      }
      if (parent && typeof parent === "string") {
        parentName = parent;
        parent = cola.model(parentName);
      }
      if (parent) {
        this.parent = parent;
      }
      this.data = new cola.DataModel(this);
      this.action = function(name, action) {
        var a, config, fn, n, scope, store;
        store = this.action;
        if (arguments.length === 1) {
          if (typeof name === "string") {
            scope = this;
            while (store) {
              fn = store[name];
              if (fn) {
                return fn.action || fn;
              }
              scope = scope.parent;
              if (!scope) {
                break;
              }
              store = scope.action;
            }
            return cola.defaultAction[name];
          } else if (name && typeof name === "object") {
            config = name;
            for (n in config) {
              a = config[n];
              this.action(n, a);
            }
          }
          return null;
        } else {
          if (action) {
            store[name] = action;
          } else {
            delete store[name];
          }
          return this;
        }
      };
    }

    Model.prototype.destroy = function() {
      var base;
      if (this.name) {
        cola.removeModel(this.name);
      }
      if (typeof (base = this.data).destroy === "function") {
        base.destroy();
      }
    };

    return Model;

  })(cola.Scope);

  cola.SubScope = (function(superClass) {
    extend(SubScope, superClass);

    function SubScope() {
      return SubScope.__super__.constructor.apply(this, arguments);
    }

    SubScope.prototype.watchPath = function(path) {
      var l, len1, p, parent, paths;
      if (this._watchAllMessages || this._watchPath === path) {
        return;
      }
      this._unwatchPath();
      if (path) {
        this._watchPath = paths = [];
        parent = this.parent;
        if (path instanceof Array) {
          for (l = 0, len1 = path.length; l < len1; l++) {
            p = path[l];
            p = p + ".**";
            paths.push(p);
            if (parent != null) {
              parent.data.bind(p, this);
            }
          }
        } else {
          path = path + ".**";
          paths.push(path);
          if (parent != null) {
            parent.data.bind(path, this);
          }
        }
      } else {
        delete this._watchPath;
      }
    };

    SubScope.prototype._unwatchPath = function() {
      var l, len1, p, parent, path;
      if (!this._watchPath) {
        return;
      }
      path = this._watchPath;
      delete this._watchPath;
      parent = this.parent;
      if (parent) {
        if (path instanceof Array) {
          for (l = 0, len1 = path.length; l < len1; l++) {
            p = path[l];
            parent.data.unbind(p, this);
          }
        } else {
          parent.data.unbind(path, this);
        }
      }
    };

    SubScope.prototype.watchAllMessages = function() {
      var parent;
      if (this._watchAllMessages) {
        return;
      }
      this._watchAllMessages = true;
      this._unwatchPath();
      parent = this.parent;
      if (parent) {
        parent.data.bind("**", this);
        if (typeof parent.watchAllMessages === "function") {
          parent.watchAllMessages();
        }
      }
    };

    SubScope.prototype.destroy = function() {
      if (this.parent) {
        if (this._watchAllMessages) {
          this.parent.data.unbind("**", this);
        } else if (this._watchPath) {
          this._unwatchPath();
        }
      }
      SubScope.__super__.destroy.call(this);
    };

    return SubScope;

  })(cola.Scope);

  cola.AliasScope = (function(superClass) {
    extend(AliasScope, superClass);

    function AliasScope(parent1, expression) {
      var dataType;
      this.parent = parent1;
      if (expression && typeof expression.paths.length === 1 && !expression.hasCallStatement) {
        dataType = this.parent.data.getDataType(expression.paths[0]);
      }
      this.data = new cola.AliasDataModel(this, expression.alias, dataType);
      this.action = this.parent.action;
      this.expression = expression;
      if (!expression.paths && expression.hasCallStatement) {
        this.watchAllMessages();
      } else {
        this.watchPath(expression.paths);
      }
    }

    AliasScope.prototype.destroy = function() {
      AliasScope.__super__.destroy.call(this);
      this.data.destroy();
    };

    AliasScope.prototype.repeatNotification = true;

    AliasScope.prototype._processMessage = function(bindingPath, path, type, arg) {
      if (this.messageTimestamp >= arg.timestamp) {
        return;
      }
      this.data._processMessage(bindingPath, path, type, arg);
    };

    return AliasScope;

  })(cola.SubScope);

  cola.ItemScope = (function(superClass) {
    extend(ItemScope, superClass);

    function ItemScope(parent1, alias) {
      var ref;
      this.parent = parent1;
      this.data = new cola.ItemDataModel(this, alias, (ref = this.parent) != null ? ref.dataType : void 0);
      this.action = this.parent.action;
    }

    ItemScope.prototype.watchPath = function() {};

    ItemScope.prototype.watchAllMessages = function() {
      var ref;
      if ((ref = this.parent) != null) {
        if (typeof ref.watchAllMessages === "function") {
          ref.watchAllMessages();
        }
      }
    };

    ItemScope.prototype._processMessage = function(bindingPath, path, type, arg) {
      return this.data._processMessage(bindingPath, path, type, arg);
    };

    return ItemScope;

  })(cola.SubScope);

  cola.ItemsScope = (function(superClass) {
    extend(ItemsScope, superClass);

    function ItemsScope(parent, expression) {
      this.setParent(parent);
      this.setExpression(expression);
    }

    ItemsScope.prototype.setParent = function(parent) {
      if (this.parent) {
        if (this._watchAllMessages) {
          this.parent.data.unbind("**", this);
        } else if (this._watchPath) {
          this._unwatchPath();
        }
      }
      this.parent = parent;
      this.data = parent.data;
      this.action = parent.action;
      if (this._watchAllMessages) {
        parent.data.bind("**", this);
      } else if (this._watchPath) {
        this.watchPath(this._watchPath);
      }
    };

    ItemsScope.prototype.setExpression = function(expression) {
      var l, len1, path, paths, ref;
      this.expression = expression;
      if (expression) {
        this.alias = expression.alias;
        paths = [];
        ref = expression.paths;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          path = ref[l];
          paths.push(path.split("."));
        }
        this.expressionPath = paths;
        if (!expression.paths && expression.hasCallStatement) {
          this.watchAllMessages();
        } else {
          this.watchPath(expression.paths);
        }
      } else {
        this.alias = "item";
        this.expressionPath = [];
      }
      if (expression && typeof expression.paths.length === 1 && !expression.hasCallStatement) {
        this.dataType = this.parent.data.getDataType(expression.paths[0]);
      }
    };

    ItemsScope.prototype.setItems = function() {
      var items, originItems;
      items = arguments[0], originItems = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this._setItems.apply(this, [items].concat(slice.call(originItems)));
    };

    ItemsScope.prototype.retrieveItems = function(dataCtx) {
      var items;
      if (dataCtx == null) {
        dataCtx = {};
      }
      if (this._retrieveItems) {
        return this._retrieveItems(dataCtx);
      }
      if (this.expression) {
        items = this.expression.evaluate(this.parent, "async", dataCtx);
        this._setItems(items, dataCtx.originData);
      }
    };

    ItemsScope.prototype._setItems = function() {
      var it, items, l, len1, originItems, targetPath;
      items = arguments[0], originItems = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.items = items;
      if (originItems && originItems.length === 1) {
        if (originItems[0]) {
          this.originItems = originItems[0];
        }
      } else {
        this.originItems = originItems;
        this.originItems._multiItems = true;
      }
      if (!this.originItems && items instanceof Array) {
        this.originItems = items.$origin;
      }
      targetPath = null;
      if (originItems) {
        for (l = 0, len1 = originItems.length; l < len1; l++) {
          it = originItems[l];
          if (it && it instanceof cola.EntityList) {
            if (targetPath == null) {
              targetPath = [];
            }
            targetPath.push(it.getPath());
          }
        }
      }
      if (targetPath) {
        this.targetPath = targetPath.concat(this.expressionPath);
      } else {
        this.targetPath = this.expressionPath;
      }
    };

    ItemsScope.prototype.refreshItems = function(dataCtx) {
      this.retrieveItems(dataCtx);
      if (typeof this.onItemsRefresh === "function") {
        this.onItemsRefresh();
      }
    };

    ItemsScope.prototype.refreshItem = function(arg) {
      arg.itemsScope = this;
      if (typeof this.onItemRefresh === "function") {
        this.onItemRefresh(arg);
      }
    };

    ItemsScope.prototype.insertItem = function(arg) {
      arg.itemsScope = this;
      if (typeof this.onItemInsert === "function") {
        this.onItemInsert(arg);
      }
    };

    ItemsScope.prototype.removeItem = function(arg) {
      arg.itemsScope = this;
      if (typeof this.onItemRemove === "function") {
        this.onItemRemove(arg);
      }
    };

    ItemsScope.prototype.itemsLoadingStart = function(arg) {
      arg.itemsScope = this;
      return typeof this.onItemsLoadingStart === "function" ? this.onItemsLoadingStart(arg) : void 0;
    };

    ItemsScope.prototype.itemsLoadingEnd = function(arg) {
      arg.itemsScope = this;
      return typeof this.onItemsLoadingEnd === "function" ? this.onItemsLoadingEnd(arg) : void 0;
    };

    ItemsScope.prototype.changeCurrentItem = function(arg) {
      arg.itemsScope = this;
      if (typeof this.onCurrentItemChange === "function") {
        this.onCurrentItemChange(arg);
      }
    };

    ItemsScope.prototype.resetItemScopeMap = function() {
      this.itemScopeMap = {};
    };

    ItemsScope.prototype.getItemScope = function(item) {
      var itemId;
      itemId = cola.Entity._getEntityId(item);
      return this.itemScopeMap[itemId];
    };

    ItemsScope.prototype.regItemScope = function(itemId, itemScope) {
      this.itemScopeMap[itemId] = itemScope;
    };

    ItemsScope.prototype.unregItemScope = function(itemId) {
      delete this.itemScopeMap[itemId];
    };

    ItemsScope.prototype.findItemDomBinding = function(item) {
      var itemId, itemScopeMap, items, l, len1, matched, multiOriginItems, oi, originItems;
      itemScopeMap = this.itemScopeMap;
      items = this.items;
      originItems = this.originItems;
      multiOriginItems = originItems != null ? originItems._multiItems : void 0;
      if (items || originItems) {
        while (item) {
          if (item instanceof cola.Entity) {
            matched = item._parent === items;
            if (!matched && originItems) {
              if (multiOriginItems) {
                for (l = 0, len1 = originItems.length; l < len1; l++) {
                  oi = originItems[l];
                  if (item._parent === oi) {
                    matched = true;
                    break;
                  }
                }
              } else {
                matched = item._parent === originItems;
              }
            }
            if (matched) {
              itemId = cola.Entity._getEntityId(item);
              if (itemId) {
                return itemScopeMap[itemId];
              } else {
                return null;
              }
            }
          }
          item = item._parent;
        }
      }
      return null;
    };

    ItemsScope.prototype.isRootOfTarget = function(changedPath, targetPaths) {
      var i, isRoot, l, len1, len2, o, part, targetPart, targetPath;
      if (!targetPaths) {
        return false;
      }
      if (!changedPath) {
        return true;
      }
      for (l = 0, len1 = targetPaths.length; l < len1; l++) {
        targetPath = targetPaths[l];
        isRoot = true;
        for (i = o = 0, len2 = changedPath.length; o < len2; i = ++o) {
          part = changedPath[i];
          targetPart = targetPath[i];
          if (part !== targetPart) {
            if (targetPart === "**") {
              continue;
            } else if (targetPart === "*") {
              if (i === changedPath.length - 1) {
                continue;
              }
            }
            isRoot = false;
            break;
          }
        }
        if (isRoot) {
          return true;
        }
      }
      return false;
    };

    ItemsScope.prototype.repeatNotification = true;

    ItemsScope.prototype._processMessage = function(bindingPath, path, type, arg) {
      var allProcessed, id, itemScope, ref;
      if (this.messageTimestamp >= arg.timestamp) {
        return;
      }
      allProcessed = this.processItemsMessage(bindingPath, path, type, arg);
      if (allProcessed) {
        this.messageTimestamp = arg.timestamp;
      } else if (this.itemScopeMap) {
        itemScope = this.findItemDomBinding(arg.entity || arg.entityList);
        if (itemScope) {
          itemScope._processMessage(bindingPath, path, type, arg);
        } else {
          ref = this.itemScopeMap;
          for (id in ref) {
            itemScope = ref[id];
            itemScope._processMessage(bindingPath, path, type, arg);
          }
        }
      }
    };

    ItemsScope.prototype.isOriginItems = function(items) {
      var l, len1, originItems, ref;
      if (!this.originItems) {
        return false;
      }
      if (this.originItems === items) {
        return true;
      }
      if (this.originItems instanceof Array && this.originItems._multiItems) {
        ref = this.originItems;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          originItems = ref[l];
          if (originItems === items) {
            return true;
          }
        }
      }
      return false;
    };

    ItemsScope.prototype.processItemsMessage = function(bindingPath, path, type, arg) {
      var allProcessed, i, items, parent, ref, targetPath;
      targetPath = this.targetPath ? this.targetPath.concat(this.expressionPath) : this.expressionPath;
      if (type === cola.constants.MESSAGE_REFRESH) {
        if (this.isRootOfTarget(path, targetPath)) {
          this.refreshItems();
          allProcessed = true;
        }
      } else if (type === cola.constants.MESSAGE_PROPERTY_CHANGE) {
        if (this.isRootOfTarget(path, targetPath)) {
          this.refreshItems();
          allProcessed = true;
        } else {
          parent = (ref = arg.entity) != null ? ref._parent : void 0;
          if (parent === this.items || this.isOriginItems(arg.parent)) {
            this.refreshItem(arg);
          }
        }
      } else if (type === cola.constants.MESSAGE_CURRENT_CHANGE) {
        if (arg.entityList === this.items || this.isOriginItems(arg.entityList)) {
          if (typeof this.onCurrentItemChange === "function") {
            this.onCurrentItemChange(arg);
          }
        } else if (this.isRootOfTarget(path, targetPath)) {
          this.refreshItems();
          allProcessed = true;
        }
      } else if (type === cola.constants.MESSAGE_INSERT) {
        if (arg.entityList === this.items) {
          this.insertItem(arg);
          allProcessed = true;
        } else if (this.isOriginItems(arg.entityList)) {
          this.retrieveItems();
          this.insertItem(arg);
          allProcessed = true;
        }
      } else if (type === cola.constants.MESSAGE_REMOVE) {
        if (arg.entityList === this.items) {
          this.removeItem(arg);
          allProcessed = true;
        } else if (this.isOriginItems(arg.entityList)) {
          items = this.items;
          if (items instanceof Array) {
            i = items.indexOf(arg.entity);
            if (i > -1) {
              items.splice(i, 1);
            }
          }
          this.removeItem(arg);
          allProcessed = true;
        }
      } else if (type === cola.constants.MESSAGE_LOADING_START) {
        if (this.isRootOfTarget(path, targetPath)) {
          this.itemsLoadingStart(arg);
        }
      } else if (type === cola.constants.MESSAGE_LOADING_END) {
        if (this.isRootOfTarget(path, targetPath)) {
          this.itemsLoadingEnd(arg);
        }
      }
      return allProcessed;
    };

    return ItemsScope;

  })(cola.SubScope);


  /*
  DataModel
   */

  cola.AbstractDataModel = (function() {
    AbstractDataModel.prototype.disableObserverCount = 0;

    function AbstractDataModel(model1) {
      this.model = model1;
    }

    AbstractDataModel.prototype.get = function(path, loadMode, context) {
      var aliasData, aliasHolder, callback, firstPart, i, prop, ref, ref1, rootData;
      if (!path) {
        return this._getRootData() || ((ref = this.model.parent) != null ? ref.get() : void 0);
      }
      if (this._aliasMap) {
        i = path.indexOf('.');
        firstPart = i > 0 ? path.substring(0, i) : path;
        aliasHolder = this._aliasMap[firstPart];
        if (aliasHolder) {
          aliasData = aliasHolder.data;
          if (i > 0) {
            if (loadMode && (typeof loadMode === "function" || typeof loadMode === "object")) {
              loadMode = "async";
              callback = loadMode;
            }
            return cola.Entity._evalDataPath(aliasData, path.substring(i + 1), false, loadMode, callback, context);
          } else {
            return aliasData;
          }
        }
      }
      rootData = this._rootData;
      if (rootData != null) {
        if (this.model.parent) {
          i = path.indexOf('.');
          if (i > 0) {
            prop = path.substring(0, i);
          } else {
            prop = path;
          }
          if (rootData.hasValue(prop)) {
            return rootData.get(path, loadMode, context);
          } else {
            return this.model.parent.data.get(path, loadMode, context);
          }
        } else {
          return rootData.get(path, loadMode, context);
        }
      } else {
        return (ref1 = this.model.parent) != null ? ref1.data.get(path, loadMode, context) : void 0;
      }
    };

    AbstractDataModel.prototype.set = function(path, data, context) {
      var aliasHolder, firstPart, i, p, rootData;
      if (path) {
        rootData = this._getRootData();
        if (typeof path === "string") {
          i = path.indexOf('.');
          if (i > 0) {
            firstPart = path.substring(0, i);
            if (this._aliasMap) {
              aliasHolder = this._aliasMap[firstPart];
              if (aliasHolder) {
                if (aliasHolder.data) {
                  cola.Entity._setValue(aliasHolder.data, path.substring(i + 1), data, context);
                } else {
                  throw new cola.Exception("Cannot set value to \"" + path + "\"");
                }
                return this;
              }
            }
            if (this.model.parent) {
              if (rootData.hasValue(firstPart)) {
                rootData.set(path, data, context);
              } else {
                this.model.parent.data.set(path, data, context);
              }
            } else {
              rootData.set(path, data, context);
            }
          } else {
            this._set(path, data, context);
          }
        } else {
          data = path;
          for (p in data) {
            this.set(p, data[p], context);
          }
        }
      }
      return this;
    };

    AbstractDataModel.prototype._set = function(prop, data, context) {
      var aliasHolder, dataModel, hasValue, oldAliasData, oldAliasHolder, path, property, provider, ref, rootData, rootDataType;
      rootData = this._rootData;
      hasValue = rootData.hasValue(prop);
      if ((ref = this._aliasMap) != null ? ref[prop] : void 0) {
        oldAliasHolder = this._aliasMap[prop];
        if (oldAliasHolder.data !== data) {
          oldAliasData = oldAliasHolder.data;
          delete this._aliasMap[prop];
          this.unbind(oldAliasHolder.bindingPath, oldAliasHolder);
        }
      }
      if (data != null) {
        if (data.$provider || data.$dataType) {
          if (data.$provider) {
            provider = new cola.Provider(data.$provider);
          }
          rootDataType = rootData.dataType;
          property = rootDataType.getProperty(prop);
          if (property == null) {
            property = rootDataType.addProperty({
              property: prop
            });
          }
          if (provider) {
            property.set("provider", provider);
          }
          if (data.$dataType) {
            property.set("dataType", data.$dataType);
          }
        }
      }
      if (!provider || hasValue) {
        if (data && (data instanceof cola.Entity || data instanceof cola.EntityList) && data._parent && data !== rootData._data[prop]) {
          if (this._aliasMap == null) {
            this._aliasMap = {};
          }
          path = data.getPath("always");
          dataModel = this;
          this._aliasMap[prop] = aliasHolder = {
            data: data,
            path: path,
            bindingPath: path.slice(0).concat("**"),
            _processMessage: function(bindingPath, path, type, arg) {
              var relativePath;
              relativePath = path.slice(this.path.length);
              dataModel._onDataMessage([prop].concat(relativePath), type, arg);
            }
          };
          this.bind(aliasHolder.bindingPath, aliasHolder);
          this._onDataMessage([prop], cola.constants.MESSAGE_PROPERTY_CHANGE, {
            entity: rootData,
            property: prop,
            oldValue: oldAliasData,
            value: data
          });
        } else {
          rootData.set(prop, data, context);
        }
      }
    };

    AbstractDataModel.prototype.flush = function(name, loadMode) {
      var ref;
      if ((ref = this._rootData) != null) {
        ref.flush(name, loadMode);
      }
      return this;
    };

    AbstractDataModel.prototype.bind = function(path, processor) {
      if (!this.bindingRegistry) {
        this.bindingRegistry = {
          __path: "",
          __processorMap: {}
        };
      }
      if (typeof path === "string") {
        path = path.split(".");
      }
      if (path) {
        if (this._bind(path, processor, false)) {
          this._bind(path, processor, true);
        }
      }
      return this;
    };

    AbstractDataModel.prototype._bind = function(path, processor, nonCurrent) {
      var hasNonCurrent, l, len1, node, nodePath, part, subNode;
      node = this.bindingRegistry;
      if (path) {
        for (l = 0, len1 = path.length; l < len1; l++) {
          part = path[l];
          if (!nonCurrent && part.charCodeAt(0) === 33) {
            hasNonCurrent = true;
            part = part.substring(1);
          }
          subNode = node[part];
          if (subNode == null) {
            nodePath = !node.__path ? part : node.__path + "." + part;
            node[part] = subNode = {
              __path: nodePath,
              __processorMap: {}
            };
          }
          node = subNode;
        }
        if (processor.id == null) {
          processor.id = cola.uniqueId();
        }
        node.__processorMap[processor.id] = processor;
      }
      return hasNonCurrent;
    };

    AbstractDataModel.prototype.unbind = function(path, processor) {
      if (!this.bindingRegistry) {
        return;
      }
      if (typeof path === "string") {
        path = path.split(".");
      }
      if (path) {
        if (this._unbind(path, processor, false)) {
          this._unbind(path, processor, true);
        }
      }
      return this;
    };

    AbstractDataModel.prototype._unbind = function(path, processor, nonCurrent) {
      var hasNonCurrent, l, len1, node, part;
      node = this.bindingRegistry;
      for (l = 0, len1 = path.length; l < len1; l++) {
        part = path[l];
        if (!nonCurrent && part.charCodeAt(0) === 33) {
          hasNonCurrent = true;
          part = part.substring(1);
        }
        node = node[part];
        if (node == null) {
          break;
        }
      }
      if (node != null) {
        delete node.__processorMap[processor.id];
      }
      return hasNonCurrent;
    };

    AbstractDataModel.prototype.disableObservers = function() {
      if (this.disableObserverCount < 0) {
        this.disableObserverCount = 1;
      } else {
        this.disableObserverCount++;
      }
      return this;
    };

    AbstractDataModel.prototype.enableObservers = function() {
      if (this.disableObserverCount < 1) {
        this.disableObserverCount = 0;
      } else {
        this.disableObserverCount--;
      }
      return this;
    };

    AbstractDataModel.prototype.notifyObservers = function() {
      var ref;
      if ((ref = this._rootData) != null) {
        ref.notifyObservers();
      }
      return this;
    };

    AbstractDataModel.prototype._onDataMessage = function(path, type, arg) {
      var anyChildNode, anyPropNode, i, l, lastIndex, len1, node, oldScope, part;
      if (arg == null) {
        arg = {};
      }
      if (!this.bindingRegistry) {
        return;
      }
      if (this.disableObserverCount > 0) {
        return;
      }
      oldScope = cola.currentScope;
      cola.currentScope = this;
      try {
        if (arg.timestamp == null) {
          arg.timestamp = cola.sequenceNo();
        }
        if (path) {
          node = this.bindingRegistry;
          lastIndex = path.length - 1;
          for (i = l = 0, len1 = path.length; l < len1; i = ++l) {
            part = path[i];
            if (i === lastIndex) {
              anyPropNode = node["*"];
            }
            if (anyPropNode) {
              this._processDataMessage(anyPropNode, path, type, arg);
            }
            anyChildNode = node["**"];
            if (anyChildNode) {
              this._processDataMessage(anyChildNode, path, type, arg);
            }
            node = node[part];
            if (!node) {
              break;
            }
          }
        } else {
          node = this.bindingRegistry;
          anyPropNode = node["*"];
          if (anyPropNode) {
            this._processDataMessage(anyPropNode, null, type, arg);
          }
          anyChildNode = node["**"];
          if (anyChildNode) {
            this._processDataMessage(anyChildNode, null, type, arg);
          }
        }
        if (node) {
          this._processDataMessage(node, path, type, arg, true);
        }
      } finally {
        cola.currentScope = oldScope;
      }
    };

    AbstractDataModel.prototype._processDataMessage = function(node, path, type, arg, notifyChildren) {
      var id, notifyChildren2, part, processor, processorMap, subNode;
      processorMap = node.__processorMap;
      for (id in processorMap) {
        processor = processorMap[id];
        if (!processor.disabled && (!(processor.timestamp >= arg.timestamp) || processor.repeatNotification)) {
          processor.timestamp = arg.timestamp;
          processor._processMessage(node.__path, path, type, arg);
        }
      }
      if (notifyChildren) {
        notifyChildren2 = !((cola.constants.MESSAGE_EDITING_STATE_CHANGE <= type && type <= cola.constants.MESSAGE_VALIDATION_STATE_CHANGE)) && !((cola.constants.MESSAGE_LOADING_START <= type && type <= cola.constants.MESSAGE_LOADING_END));
        if (type === cola.constants.MESSAGE_CURRENT_CHANGE) {
          type = cola.constants.MESSAGE_REFRESH;
        }
        for (part in node) {
          subNode = node[part];
          if (subNode && (part === "**" || notifyChildren2) && part !== "__processorMap" && part !== "__path") {
            this._processDataMessage(subNode, path, type, arg, true);
          }
        }
      }
    };

    return AbstractDataModel;

  })();

  cola.DataModel = (function(superClass) {
    extend(DataModel, superClass);

    function DataModel() {
      return DataModel.__super__.constructor.apply(this, arguments);
    }

    DataModel.prototype._createRootData = function(rootDataType) {
      return new cola.Entity(null, rootDataType);
    };

    DataModel.prototype._getRootData = function() {
      var dataModel, rootData;
      if (this._rootData == null) {
        if (this._rootDataType == null) {
          this._rootDataType = new cola.EntityDataType();
        }
        this._rootData = rootData = this._createRootData(this._rootDataType);
        rootData.state = cola.Entity.STATE_NEW;
        dataModel = this;
        rootData._setObserver({
          onMessage: function(path, type, arg) {
            return dataModel._onDataMessage(path, type, arg);
          }
        });
      }
      return this._rootData;
    };

    DataModel.prototype.describe = function(property, config) {
      var dataType, propertyConfig, propertyDef, propertyName, ref;
      this._getRootData();
      if (typeof property === "string") {
        propertyDef = (ref = this._rootDataType) != null ? ref.getProperty(property) : void 0;
        if (config) {
          if (!propertyDef) {
            propertyDef = this._rootDataType.addProperty({
              property: property
            });
          }
          if (typeof config === "string") {
            dataType = this.definition(config);
            if (!dataType) {
              throw new cola.Exception("Unrecognized DataType \"" + config + "\".");
            }
            propertyDef.set("dataType", dataType);
          } else if (config instanceof cola.DataType) {
            propertyDef.set("dataType", config);
          } else {
            propertyDef.set(config);
          }
        }
      } else if (property) {
        config = property;
        for (propertyName in config) {
          propertyConfig = config[propertyName];
          this.describe(propertyName, propertyConfig);
        }
      }
    };

    DataModel.prototype.getProperty = function(path) {
      var ref;
      return (ref = this._rootDataType) != null ? ref.getProperty(path) : void 0;
    };

    DataModel.prototype.getDataType = function(path) {
      var dataType, property;
      property = this.getProperty(path);
      dataType = property != null ? property.get("dataType") : void 0;
      return dataType;
    };

    DataModel.prototype.definition = function(name) {
      var definition, ref;
      definition = (ref = this._definitionStore) != null ? ref[name] : void 0;
      if (definition) {
        if (!(definition instanceof cola.Definition)) {
          definition = new cola.EntityDataType(definition);
          this._definitionStore[name] = definition;
        }
      } else {
        definition = cola.DataType.defaultDataTypes[name];
      }
      return definition;
    };

    DataModel.prototype.regDefinition = function(name, definition) {
      var store;
      if (name instanceof cola.Definition) {
        definition = name;
        name = name._name;
      }
      if (!name) {
        throw new cola.Exception("Attribute \"name\" cannot be emtpy.");
      }
      if (definition._scope && definition._scope !== this.model) {
        throw new cola.Exception("DataType(" + definition._name + ") is already belongs to anthor Model.");
      }
      store = this._definitionStore;
      if (store == null) {
        this._definitionStore = store = {};
      } else if (store[name]) {
        throw new cola.Exception("Duplicated Definition name \"" + name + "\".");
      }
      store[name] = definition;
      return this;
    };

    DataModel.prototype.unregDefinition = function(name) {
      var definition;
      if (this._definitionStore) {
        definition = this._definitionStore[name];
        delete this._definitionStore[name];
      }
      return definition;
    };

    return DataModel;

  })(cola.AbstractDataModel);

  cola.AliasDataModel = (function(superClass) {
    extend(AliasDataModel, superClass);

    function AliasDataModel(model1, alias1, dataType1) {
      var parentModel;
      this.model = model1;
      this.alias = alias1;
      this.dataType = dataType1;
      parentModel = this.model.parent;
      while (parentModel) {
        if (parentModel.data) {
          this.parent = parentModel.data;
          break;
        }
        parentModel = parentModel.parent;
      }
    }

    AliasDataModel.prototype.getTargetData = function() {
      return this._targetData;
    };

    AliasDataModel.prototype.setTargetData = function(data, silence) {
      var oldData;
      oldData = this._targetData;
      if (oldData === data) {
        return;
      }
      this._targetData = data;
      if (data && (data instanceof cola.Entity || data instanceof cola.EntityList)) {
        this._targetPath = data.getPath();
      }
      if (!silence) {
        this._onDataMessage([this.alias], cola.constants.MESSAGE_PROPERTY_CHANGE, {
          entity: null,
          property: this.alias,
          value: data,
          oldValue: oldData
        });
      }
    };

    AliasDataModel.prototype.describe = function(property, config) {
      if (property === this.alias) {
        return AliasDataModel.__super__.describe.call(this, property, config);
      } else {
        return this.parent.describe(property, config);
      }
    };

    AliasDataModel.prototype.getDataType = function(path) {
      var dataType, i, property, ref;
      i = path.indexOf(".");
      if (i > 0) {
        if (path.substring(0, i) === this.alias) {
          if (this._rootDataType) {
            property = (ref = this._rootDataType) != null ? ref.getProperty(path.substring(i + 1)) : void 0;
            dataType = property != null ? property.get("dataType") : void 0;
          }
          return dataType;
        } else {
          return this.parent.getDataType(path);
        }
      } else if (path === this.alias) {
        return this.dataType;
      } else {
        return this.parent.getDataType(path);
      }
    };

    AliasDataModel.prototype.definition = function(name) {
      return this.parent.definition(name);
    };

    AliasDataModel.prototype.regDefinition = function(definition) {
      return this.parent.regDefinition(definition);
    };

    AliasDataModel.prototype.unregDefinition = function(definition) {
      return this.parent.unregDefinition(definition);
    };

    AliasDataModel.prototype._bind = function(path, processor, nonCurrent) {
      var hasNonCurrent, i;
      hasNonCurrent = AliasDataModel.__super__._bind.call(this, path, processor, nonCurrent);
      i = path.indexOf(".");
      if (i > 0) {
        if (path.substring(0, i) !== this.alias) {
          this.model.watchAllMessages();
        }
      } else if (path !== this.alias) {
        this.model.watchAllMessages();
      }
      return hasNonCurrent;
    };

    AliasDataModel.prototype._processMessage = function(bindingPath, path, type, arg) {
      var i, l, len1, matching, part, relativePath, targetPart, targetPath;
      this._onDataMessage(path, type, arg);
      targetPath = this._targetPath;
      if (targetPath != null ? targetPath.length : void 0) {
        matching = true;
        for (i = l = 0, len1 = targetPath.length; l < len1; i = ++l) {
          targetPart = targetPath[i];
          part = path[i];
          if (part && part.charCodeAt(0) === 33) {
            part = part.substring(1);
          }
          if (part !== targetPart) {
            matching = false;
            break;
          }
        }
        if (matching) {
          relativePath = path.slice(targetPath.length);
          this._onDataMessage([this.alias].concat(relativePath), type, arg);
        }
      }
    };

    AliasDataModel.prototype.get = function(path, loadMode, context) {
      var alias, aliasLen, c, targetData;
      alias = this.alias;
      aliasLen = alias.length;
      if (path.substring(0, aliasLen) === alias) {
        c = path.charCodeAt(aliasLen);
        if (c === 46) {
          if (path.indexOf(".") > 0) {
            targetData = this._targetData;
            if (targetData instanceof cola.Entity) {
              return targetData.get(path.substring(aliasLen + 1), loadMode, context);
            } else if (targetData && typeof targetData === "object") {
              return targetData[path.substring(aliasLen + 1)];
            }
          }
        } else if (isNaN(c)) {
          return this._targetData;
        }
      }
      return this.parent.get(path, loadMode, context);
    };

    AliasDataModel.prototype.set = function(path, data, context) {
      var alias, aliasLen, c, ref;
      alias = this.alias;
      aliasLen = alias.length;
      if (path.substring(0, aliasLen) === alias) {
        c = path.charCodeAt(aliasLen);
        if (c === 46) {
          if (path.indexOf(".") > 0) {
            if ((ref = this._targetData) != null) {
              ref.set(path.substring(aliasLen + 1), data, context);
            }
            return this;
          }
        } else if (isNaN(c)) {
          this.setTargetData(data);
          return this;
        }
      }
      this.parent.set(path, data, context);
      return this;
    };

    AliasDataModel.prototype.dataType = function(path) {
      return this.parent.dataType(path);
    };

    AliasDataModel.prototype.regDefinition = function(name, definition) {
      this.parent.regDefinition(name, definition);
      return this;
    };

    AliasDataModel.prototype.unregDefinition = function(name) {
      return this.parent.unregDefinition(name);
    };

    AliasDataModel.prototype.flush = function(path, loadMode) {
      var alias, c, ref, ref1;
      alias = this.alias;
      if (path.substring(0, alias.length) === alias) {
        c = path.charCodeAt(1);
        if (c === 46) {
          if ((ref = this._targetData) != null) {
            ref.flush(path.substring(alias.length + 1), loadMode);
          }
          return this;
        } else if (isNaN(c)) {
          if ((ref1 = this._targetData) != null) {
            ref1.flush(loadMode);
          }
          return this;
        }
      }
      this.parent.flush(path, loadMode);
      return this;
    };

    AliasDataModel.prototype.disableObservers = function() {
      this.parent.disableObservers();
      return this;
    };

    AliasDataModel.prototype.enableObservers = function() {
      this.parent.enableObservers();
      return this;
    };

    AliasDataModel.prototype.notifyObservers = function() {
      this.parent.notifyObservers();
      return this;
    };

    return AliasDataModel;

  })(cola.AbstractDataModel);

  cola.ItemDataModel = (function(superClass) {
    extend(ItemDataModel, superClass);

    function ItemDataModel() {
      return ItemDataModel.__super__.constructor.apply(this, arguments);
    }

    ItemDataModel.prototype.getIndex = function() {
      return this._index;
    };

    ItemDataModel.prototype.setIndex = function(index, silence) {
      this._index = index;
      if (!silence) {
        this._onDataMessage([cola.constants.REPEAT_INDEX], cola.constants.MESSAGE_PROPERTY_CHANGE, {
          entity: null,
          property: cola.constants.REPEAT_INDEX,
          value: index
        });
      }
    };

    ItemDataModel.prototype.get = function(path, loadMode, context) {
      if (path === cola.constants.REPEAT_INDEX) {
        return this.getIndex();
      } else {
        return ItemDataModel.__super__.get.call(this, path, loadMode, context);
      }
    };

    ItemDataModel.prototype.set = function(path, data, context) {
      if (path === cola.constants.REPEAT_INDEX) {
        this.setIndex(data);
      } else {
        ItemDataModel.__super__.set.call(this, path, data, context);
      }
    };

    return ItemDataModel;

  })(cola.AliasDataModel);


  /*
  Root Model
   */

  new cola.Model(cola.constants.DEFAULT_PATH);


  /*
  Function
   */

  cola.data = function(config) {
    var dataType, k, name, provider, v;
    if (!config) {
      return config;
    }
    if (config.provider) {
      provider = config.provider;
    } else {
      provider = {};
      for (k in config) {
        v = config[k];
        if (k !== "dataType") {
          provider[k] = v;
        }
      }
    }
    dataType = config.dataType;
    if (dataType) {
      if (typeof dataType === "string") {
        name = dataType;
        dataType = cola.currentScope.dataType(name);
        if (!dataType) {
          throw new cola.Exception("Unrecognized DataType \"" + name + "\".");
        }
      } else if (!(dataType instanceof cola.DataType)) {
        dataType = new cola.EntityDataType(dataType);
      }
    }
    return {
      $dataType: dataType,
      $provider: provider
    };
  };


  /*
  Element binding
   */

  cola.ElementAttrBinding = (function() {
    function ElementAttrBinding(element1, attr1, expression1, scope) {
      var l, len1, path, paths;
      this.element = element1;
      this.attr = attr1;
      this.expression = expression1;
      this.scope = scope;
      this.paths = paths = this.expression.paths;
      if (!paths && this.expression.hasCallStatement) {
        this.paths = paths = ["**"];
        this.watchingMoreMessage = this.expression.hasCallStatement;
      }
      if (paths) {
        for (l = 0, len1 = paths.length; l < len1; l++) {
          path = paths[l];
          scope.data.bind(path, this);
        }
      }
    }

    ElementAttrBinding.prototype.destroy = function() {
      var l, len1, path, paths;
      paths = this.paths;
      if (paths) {
        for (l = 0, len1 = paths.length; l < len1; l++) {
          path = paths[l];
          this.scope.data.unbind(path, this);
        }
      }
    };

    ElementAttrBinding.prototype._processMessage = function(bindingPath, path, type) {
      if ((cola.constants.MESSAGE_REFRESH <= type && type <= cola.constants.MESSAGE_CURRENT_CHANGE) || this.watchingMoreMessage) {
        this.refresh();
      }
    };

    ElementAttrBinding.prototype.evaluate = function(dataCtx) {
      if (dataCtx == null) {
        dataCtx = {};
      }
      return this.expression.evaluate(this.scope, "async", dataCtx);
    };

    ElementAttrBinding.prototype._refresh = function() {
      var element;
      value = this.evaluate(this.attr);
      element = this.element;
      element._duringBindingRefresh = true;
      try {
        element.set(this.attr, value);
      } finally {
        element._duringBindingRefresh = false;
      }
    };

    ElementAttrBinding.prototype.refresh = function() {
      if (!this._refresh) {
        return;
      }
      if (this.delay) {
        cola.util.delay(this, "refresh", 100, function() {
          this._refresh();
        });
      } else {
        this._refresh();
      }
    };

    return ElementAttrBinding;

  })();

  cola.submit = function(options, callback) {
    var data, filter, originalOptions, p, v;
    originalOptions = options;
    options = {};
    for (p in originalOptions) {
      v = originalOptions[p];
      options[p] = v;
    }
    data = options.data;
    if (data) {
      if (!(data instanceof cola.Entity || data instanceof cola.EntityList)) {
        throw new cola.Exception("Invalid submit data.");
      }
      if (this.dataFilter) {
        filter = cola.submit.filter[this.dataFilter];
        data = filter ? filter(data) : data;
      }
    }
    if (data || options.alwaysSubmit) {
      if (options.parameter) {
        options.data = {
          data: data,
          parameter: options.parameter
        };
      } else {
        options.data = data;
      }
      jQuery.post(options.url, options.data).done(function(result) {
        cola.callback(callback, true, result);
      }).fail(function(result) {
        cola.callback(callback, true, result);
      });
      return true;
    } else {
      return false;
    }
  };

  cola.submit.filter = {
    "dirty": function(data) {
      var filtered;
      if (data instanceof cola.EntityList) {
        filtered = [];
        data.each(function(entity) {
          if (entity.state !== cola.Entity.STATE_NONE) {
            filtered.push(entity);
          }
        });
      } else if (data.state !== cola.Entity.STATE_NONE) {
        filtered = data;
      }
      return filtered;
    },
    "child-dirty": function(data) {
      return data;
    },
    "dirty-tree": function(data) {
      return data;
    }
  };

  defaultActionTimestamp = 0;

  cola.defaultAction = function(name, fn) {
    var n;
    if (!name) {
      return;
    }
    if (typeof name === "string" && typeof fn === "function") {
      cola.defaultAction[name] = fn;
    } else if (typeof name === "object") {
      for (n in name) {
        if (name.hasOwnProperty(n)) {
          cola.defaultAction[n] = name[n];
        }
      }
    }
    defaultActionTimestamp = cola.uniqueId();
  };

  cola.Chain = (function() {
    function Chain(data) {
      var name;
      this._data = data;
      if (cola.Chain.prototype.timestamp !== defaultActionTimestamp) {
        cola.Chain.prototype.timestamp = defaultActionTimestamp;
        for (name in cola.defaultAction) {
          if (!cola.Chain.prototype[name] && cola.defaultAction.hasOwnProperty(name) && name !== "chain") {
            (function(name) {
              return cola.Chain.prototype[name] = function() {
                var args, ref;
                args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                this._data = (ref = cola.defaultAction)[name].apply(ref, [this._data].concat(slice.call(args)));
                return this;
              };
            })(name);
          }
        }
      }
    }

    return Chain;

  })();

  cola.defaultAction.chain = function(data) {
    return new cola.Chain(data);
  };

  cola.defaultAction["default"] = function(value, defaultValue) {
    if (defaultValue == null) {
      defaultValue = "";
    }
    return value || defaultValue;
  };

  cola.defaultAction["int"] = function(value) {
    return parseInt(value, 10) || 0;
  };

  cola.defaultAction["float"] = function(value) {
    return parseFloat(value) || 0;
  };

  cola.defaultAction["is"] = function(value) {
    return !!value;
  };

  cola.defaultAction["bool"] = cola.defaultAction.is;

  cola.defaultAction["not"] = function(value) {
    return !value;
  };

  cola.defaultAction.isEmpty = function(value) {
    if (value instanceof Array) {
      return value.length === 0;
    } else if (value instanceof cola.EntityList) {
      return value.entityCount === 0;
    } else if (typeof value === "string") {
      return value === "";
    } else {
      return !value;
    }
  };

  cola.defaultAction.isNotEmpty = function(value) {
    return !cola.defaultAction.isEmpty(value);
  };

  cola.defaultAction.len = function(value) {
    if (!value) {
      return 0;
    }
    if (value instanceof Array) {
      return value.length;
    }
    if (value instanceof cola.EntityList) {
      return value.entityCount;
    }
    return 0;
  };

  cola.defaultAction["upperCase"] = function(value) {
    return value != null ? value.toUpperCase() : void 0;
  };

  cola.defaultAction["lowerCase"] = function(value) {
    return value != null ? value.toLowerCase() : void 0;
  };

  cola.defaultAction["capitalize"] = function(value) {
    return cola.util.capitalize(value);
  };

  cola.defaultAction.resource = function() {
    var key, params;
    key = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return cola.resource.apply(cola, [key].concat(slice.call(params)));
  };

  _matchValue = function(value, propFilter) {
    if (propFilter.strict) {
      if (!propFilter.caseSensitive && typeof propFilter.value === "string") {
        return (value + "").toLowerCase() === propFilter.value;
      } else {
        return value === propFilter.value;
      }
    } else {
      if (!propFilter.caseSensitive) {
        return (value + "").toLowerCase().indexOf(propFilter.value) > -1;
      } else {
        return (value + "").indexOf(propFilter.value) > -1;
      }
    }
  };

  cola.defaultAction.filter = cola._filterCollection;

  cola.defaultAction.sort = cola._sortCollection;

  cola.defaultAction["top"] = function(collection, top) {
    var i, items;
    if (top == null) {
      top = 1;
    }
    if (!collection) {
      return null;
    }
    if (top < 0) {
      return collection;
    }
    items = [];
    items.$origin = collection.$origin || collection;
    i = 0;
    cola.each(collection, function(item) {
      i++;
      items.push(item);
      return i < top;
    });
    return items;
  };

  cola.defaultAction.formatDate = function(date, format) {
    if (date == null) {
      return "";
    }
    if (!(date instanceof XDate)) {
      date = new XDate(date);
    }
    return date.toString(format);
  };

  cola.defaultAction.formatNumber = function(number, format) {
    if (number == null) {
      return "";
    }
    if (isNaN(number)) {
      return number;
    }
    return formatNumber(format, number);
  };

  cola.defaultAction.format = function(value, format) {
    if (value instanceof Date) {
      return cola.defaultAction.formatDate(value, format);
    } else if (isFinite(value)) {
      return cola.defaultAction.formatNumber(value, format);
    } else if (value === null || value === void 0) {
      return "";
    } else {
      return value;
    }
  };

  _numberWords = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen"];

  cola.defaultAction.number2Word = function(number) {
    return _numberWords[number];
  };

  cola.AjaxServiceInvoker = (function() {
    function AjaxServiceInvoker(ajaxService1, invokerOptions1) {
      this.ajaxService = ajaxService1;
      this.invokerOptions = invokerOptions1;
      this.callbacks = [];
    }

    AjaxServiceInvoker.prototype.invokeCallback = function(success, result) {
      var callback, callbacks, l, len1;
      this.invoking = false;
      callbacks = this.callbacks;
      this.callbacks = [];
      for (l = 0, len1 = callbacks.length; l < len1; l++) {
        callback = callbacks[l];
        cola.callback(callback, success, result);
      }
    };

    AjaxServiceInvoker.prototype._internalInvoke = function(async) {
      var ajaxService, invokerOptions, options, p, retValue, v;
      if (async == null) {
        async = true;
      }
      ajaxService = this.ajaxService;
      invokerOptions = this.invokerOptions;
      retValue = void 0;
      options = {};
      for (p in invokerOptions) {
        v = invokerOptions[p];
        options[p] = v;
      }
      options.async = async;
      if (options.sendJson) {
        options.data = JSON.stringify(options.data);
      }
      if (ajaxService.getListeners("beforeSend")) {
        if (ajaxService.fire("beforeSend", ajaxService, {
          options: options
        }) === false) {
          return;
        }
      }
      if (this._beforeSend) {
        this._beforeSend(options);
      }
      jQuery.ajax(options).done((function(_this) {
        return function(result) {
          result = ajaxService.translateResult(result, options);
          _this.invokeCallback(true, result);
          if (ajaxService.getListeners("success")) {
            ajaxService.fire("success", ajaxService, {
              options: options,
              result: result
            });
          }
          if (ajaxService.getListeners("complete")) {
            ajaxService.fire("complete", ajaxService, {
              success: true,
              options: options,
              result: result
            });
          }
          retValue = result;
        };
      })(this)).fail((function(_this) {
        return function(xhr) {
          var error;
          error = xhr.responseJSON;
          _this.invokeCallback(false, error);
          ajaxService.fire("error", ajaxService, {
            options: options,
            xhr: xhr,
            error: error
          });
          ajaxService.fire("complete", ajaxService, {
            success: false,
            xhr: xhr,
            options: options,
            error: error
          });
        };
      })(this));
      return retValue;
    };

    AjaxServiceInvoker.prototype.invokeAsync = function(callback) {
      this.callbacks.push(callback);
      if (this.invoking) {
        return false;
      }
      this.invoking = true;
      this._internalInvoke();
      return true;
    };

    AjaxServiceInvoker.prototype.invokeSync = function(callback) {
      if (this.invoking) {
        throw new cola.Exception("Cannot perform synchronized request during an asynchronized request executing. [" + this.url + "]");
      }
      this.callbacks.push(callback);
      return this._internalInvoke(false);
    };

    return AjaxServiceInvoker;

  })();

  cola.AjaxService = (function(superClass) {
    extend(AjaxService, superClass);

    AjaxService.attributes = {
      url: null,
      method: null,
      parameter: null,
      ajaxOptions: null
    };

    AjaxService.events = {
      beforeSend: null,
      complete: null,
      success: null,
      error: null
    };

    function AjaxService(config) {
      if (typeof config === "string") {
        config = {
          url: config
        };
      }
      AjaxService.__super__.constructor.call(this, config);
    }

    AjaxService.prototype.getUrl = function() {
      return this._url;
    };

    AjaxService.prototype.getInvokerOptions = function(context) {
      var ajaxOptions, options, p, v;
      options = {};
      ajaxOptions = this._ajaxOptions;
      if (ajaxOptions) {
        for (p in ajaxOptions) {
          v = ajaxOptions[p];
          options[p] = v;
        }
      }
      options.url = this.getUrl(context);
      options.data = this._parameter;
      return options;
    };

    AjaxService.prototype.getInvoker = function(context) {
      return new cola.AjaxServiceInvoker(this, this.getInvokerOptions(context));
    };

    AjaxService.prototype.translateResult = function(result, invokerOptions) {
      return result;
    };

    return AjaxService;

  })(cola.Definition);

  cola.ProviderInvoker = (function(superClass) {
    extend(ProviderInvoker, superClass);

    function ProviderInvoker() {
      return ProviderInvoker.__super__.constructor.apply(this, arguments);
    }

    ProviderInvoker.prototype._replaceSysParams = function(options) {
      var changed, data, l, len1, match, matches, name, p, url, v;
      url = options.originUrl || options.url;
      matches = url.match(/{{\$[\w-]+}}/g);
      if (matches) {
        if (options.originUrl == null) {
          options.originUrl = url;
        }
        for (l = 0, len1 = matches.length; l < len1; l++) {
          match = matches[l];
          name = match.substring(2, match.length - 1);
          if (name) {
            url = url.replace(match, this[name] || "");
            options.url = url;
            changed = true;
          }
        }
      }
      data = options.originData || options.data;
      if (data) {
        for (p in data) {
          v = data[p];
          if (typeof v === "string") {
            if (v.charCodeAt(0) === 123 && v.match(/^{{\$[\w-]+}}$/)) {
              if (options.originData == null) {
                options.originData = $.extend(data, null);
              }
              data[p] = this[v.substring(2, v.length - 1)];
              changed = true;
            }
          }
        }
      }
      return changed;
    };

    ProviderInvoker.prototype.applyPagingParameters = function(options) {
      if (!this._replaceSysParams(options)) {
        if (options.data == null) {
          options.data = {};
        }
        if (cola.setting("pagingParamStyle") === "from") {
          options.data.from = this.from;
          options.data.limit = this.limit + (this.detectEnd ? 1 : 0);
        } else {
          options.data.pageSize = this.pageSize;
          options.data.pageNo = this.pageNo;
        }
      }
    };

    ProviderInvoker.prototype._beforeSend = function(options) {
      if (!this.pageNo >= 1) {
        this.pageNo = 1;
      }
      this.from = this.pageSize * (this.pageNo - 1);
      this.limit = this.pageSize;
      if (this.pageSize) {
        this.applyPagingParameters(options);
      }
    };

    return ProviderInvoker;

  })(cola.AjaxServiceInvoker);

  _SYS_PARAMS = ["$pageNo", "$pageSize", "$from", "$limit"];

  _ExpressionDataModel = (function(superClass) {
    extend(_ExpressionDataModel, superClass);

    function _ExpressionDataModel(model, entity1) {
      this.entity = entity1;
      _ExpressionDataModel.__super__.constructor.call(this, model);
    }

    _ExpressionDataModel.prototype.get = function(path, loadMode, context) {
      var ref;
      if (path.charCodeAt(0) === 64) {
        return this.entity.get(path.substring(1));
      } else {
        return (ref = this.model.parent) != null ? ref.data.get(path, loadMode, context) : void 0;
      }
    };

    _ExpressionDataModel.prototype.set = cola._EMPTY_FUNC;

    _ExpressionDataModel.prototype._processMessage = cola._EMPTY_FUNC;

    _ExpressionDataModel.prototype.getDataType = cola._EMPTY_FUNC;

    _ExpressionDataModel.prototype.getProperty = cola._EMPTY_FUNC;

    _ExpressionDataModel.prototype.flush = cola._EMPTY_FUNC;

    return _ExpressionDataModel;

  })(cola.AbstractDataModel);

  _ExpressionScope = (function(superClass) {
    extend(_ExpressionScope, superClass);

    function _ExpressionScope(parent1, entity1) {
      this.parent = parent1;
      this.entity = entity1;
      this.data = new _ExpressionDataModel(this, this.entity);
      this.action = this.parent.action;
    }

    return _ExpressionScope;

  })(cola.SubScope);

  cola.Provider = (function(superClass) {
    extend(Provider, superClass);

    function Provider() {
      return Provider.__super__.constructor.apply(this, arguments);
    }

    Provider.attributes = {
      loadMode: {
        defaultValue: "lazy"
      },
      pageSize: null,
      detectEnd: null
    };

    Provider.prototype.getUrl = function(context) {
      var l, len1, match, matches, url;
      url = this._url;
      matches = url.match(/{{.+}}/g);
      if (matches) {
        if (context.expressionScope == null) {
          context.expressionScope = new _ExpressionScope(this._scope, context.data);
        }
        for (l = 0, len1 = matches.length; l < len1; l++) {
          match = matches[l];
          url = url.replace(match, this._evalParamValue(match, context));
        }
      }
      return url;
    };

    Provider.prototype.getInvoker = function(context) {
      var provider;
      provider = new cola.ProviderInvoker(this, this.getInvokerOptions(context));
      provider.pageSize = this._pageSize;
      provider.detectEnd = this._detectEnd;
      return provider;
    };

    Provider.prototype._evalParamValue = function(expr, context) {
      var expression;
      if (expr.charCodeAt(0) === 123) {
        if (expr.match(/^{{.+}}$/)) {
          expression = expr.substring(2, expr.length - 2);
          if (_SYS_PARAMS.indexOf(expression) < 0) {
            expression = cola._compileExpression(expression);
            if (expression) {
              return expression.evaluate(context.expressionScope, "never");
            }
          }
        }
      }
      return expr;
    };

    Provider.prototype.getInvokerOptions = function(context) {
      var oldParameter, options, p, parameter, v;
      options = Provider.__super__.getInvokerOptions.call(this, context);
      parameter = options.data;
      if (parameter != null) {
        if (context.expressionScope == null) {
          context.expressionScope = new _ExpressionScope(this._scope, context.data);
        }
        if (typeof parameter === "string") {
          parameter = this._evalParamValue(parameter, context);
        } else {
          if (typeof parameter === "function") {
            parameter = parameter(this, context);
          }
          if (typeof parameter === "object") {
            oldParameter = parameter;
            parameter = {};
            for (p in oldParameter) {
              v = oldParameter[p];
              if (typeof v === "string") {
                v = this._evalParamValue(v, context);
              }
              parameter[p] = v;
            }
          }
        }
      }
      if (parameter == null) {
        parameter = {};
      } else if (!(parameter instanceof Object)) {
        parameter = {
          parameter: parameter
        };
      }
      options.data = parameter;
      return options;
    };

    Provider.prototype.translateResult = function(result, invokerOptions) {
      if (this._detectEnd && result instanceof Array) {
        if (result.length >= this._pageSize) {
          result = result.slice(0, this._pageSize);
        } else {
          result = {
            $entityCount: (invokerOptions.data.from || 0) + result.length,
            $data: result
          };
        }
      }
      return result;
    };

    return Provider;

  })(cola.AjaxService);

  _$ = $();

  _$.length = 1;

  this.$fly = function(dom) {
    _$[0] = dom;
    return _$;
  };

  cola.util.setText = function(dom, text) {
    if (text == null) {
      text = "";
    }
    if (cola.browser.mozilla) {
      dom.innerHTML = text.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/\n/g, "<br>");
    } else {
      dom.innerText = text;
    }
  };

  doms = {};

  cola.util.cacheDom = function(ele) {
    cola._ignoreNodeRemoved = true;
    if (!doms.hiddenDiv) {
      doms.hiddenDiv = $.xCreate({
        tagName: "div",
        id: "_hidden_div",
        style: {
          display: "none"
        }
      });
      doms.hiddenDiv.setAttribute(cola.constants.IGNORE_DIRECTIVE, "");
      document.body.appendChild(doms.hiddenDiv);
    }
    doms.hiddenDiv.appendChild(ele);
    cola._ignoreNodeRemoved = false;
  };

  USER_DATA_KEY = cola.constants.DOM_USER_DATA_KEY;

  cola.util.userDataStore = {};

  cola.util.userData = function(node, key, data) {
    var i, id, store, text, userData;
    if (node.nodeType === 3) {
      return;
    }
    userData = cola.util.userDataStore;
    if (node.nodeType === 8) {
      text = node.nodeValue;
      i = text.indexOf("|");
      if (i > -1) {
        id = text.substring(i + 1);
      }
    } else {
      id = node.getAttribute(USER_DATA_KEY);
    }
    if (arguments.length === 3) {
      if (!id) {
        id = cola.uniqueId();
        if (node.nodeType === 8) {
          if (i > -1) {
            node.nodeValue = text.substring(0, i + 1) + id;
          } else {
            node.nodeValue = text ? text + "|" + id : "|" + id;
          }
        } else {
          node.setAttribute(USER_DATA_KEY, id);
        }
        userData[id] = store = {};
      } else {
        store = userData[id];
        if (!store) {
          userData[id] = store = {};
        }
      }
      store[key] = data;
    } else if (arguments.length === 2) {
      if (typeof key === "string") {
        if (id) {
          store = userData[id];
          return store != null ? store[key] : void 0;
        }
      } else if (key && typeof key === "object") {
        id = cola.uniqueId();
        if (node.nodeType === 8) {
          if (i > -1) {
            node.nodeValue = text.substring(0, i + 1) + id;
          } else {
            node.nodeValue = text ? text + "|" + id : "|" + id;
          }
        } else {
          node.setAttribute(USER_DATA_KEY, id);
        }
        userData[id] = key;
      }
    } else if (arguments.length === 1) {
      if (id) {
        return userData[id];
      }
    }
  };

  cola.util.removeUserData = function(node, key) {
    var id, store;
    id = node.getAttribute(USER_DATA_KEY);
    if (id) {
      store = cola.util.userDataStore[id];
      if (store) {
        value = store[key];
        delete store[key];
      }
    }
    return value;
  };

  ON_NODE_REMOVED_KEY = "__onNodeRemoved";

  cola.detachNode = function(node) {
    if (!node.parentNode) {
      return;
    }
    cola._ignoreNodeRemoved = true;
    node.parentNode.removeChild(node);
    cola._ignoreNodeRemoved = false;
  };

  cola.util.onNodeDispose = function(node, listener) {
    var oldListener;
    oldListener = cola.util.userData(node, ON_NODE_REMOVED_KEY);
    if (oldListener) {
      if (oldListener instanceof Array) {
        oldListener.push(listener);
      } else {
        cola.util.userData(node, ON_NODE_REMOVED_KEY, [oldListener, listener]);
      }
    } else {
      cola.util.userData(node, ON_NODE_REMOVED_KEY, listener);
    }
  };

  _nodesToBeRemove = {};

  setInterval(function() {
    var changed, id, l, len1, listener, node, nodeRemovedListener, store;
    for (id in _nodesToBeRemove) {
      node = _nodesToBeRemove[id];
      store = cola.util.userDataStore[id];
      if (store) {
        changed = true;
        nodeRemovedListener = store[ON_NODE_REMOVED_KEY];
        if (nodeRemovedListener) {
          if (nodeRemovedListener instanceof Array) {
            for (l = 0, len1 = nodeRemovedListener.length; l < len1; l++) {
              listener = nodeRemovedListener[l];
              listener(node, store);
            }
          } else {
            nodeRemovedListener(node, store);
          }
        }
        delete cola.util.userDataStore[id];
      }
    }
    if (changed) {
      _nodesToBeRemove = {};
    }
  }, 10000);

  _getNodeDataId = function(node) {
    var i, id, text;
    if (node.nodeType === 3) {
      return;
    }
    if (node.nodeType === 8) {
      text = node.nodeValue;
      i = text.indexOf("|");
      if (i > -1) {
        id = text.substring(i + 1);
      }
    } else {
      id = node.getAttribute(USER_DATA_KEY);
    }
    return id;
  };

  _DOMNodeInsertedListener = function(evt) {
    var child, id, node;
    node = evt.target;
    if (!node) {
      return;
    }
    child = node.firstChild;
    while (child) {
      id = _getNodeDataId(child);
      if (id) {
        delete _nodesToBeRemove[id];
      }
      child = child.nextSibling;
    }
    id = _getNodeDataId(node);
    if (id) {
      delete _nodesToBeRemove[id];
    }
  };

  _DOMNodeRemovedListener = function(evt) {
    var child, id, node;
    if (cola._ignoreNodeRemoved || window.closed) {
      return;
    }
    node = evt.target;
    if (!node) {
      return;
    }
    child = node.firstChild;
    while (child) {
      id = _getNodeDataId(child);
      if (id) {
        _nodesToBeRemove[id] = child;
      }
      child = child.nextSibling;
    }
    id = _getNodeDataId(node);
    if (id) {
      _nodesToBeRemove[id] = node;
    }
  };

  document.addEventListener("DOMNodeInserted", _DOMNodeInsertedListener);

  document.addEventListener("DOMNodeRemoved", _DOMNodeRemovedListener);

  $fly(window).on("unload", function() {
    document.removeEventListener("DOMNodeInserted", _DOMNodeInsertedListener);
    document.removeEventListener("DOMNodeRemoved", _DOMNodeRemovedListener);
  });

  if (cola.device.mobile) {
    $fly(window).on("load", function() {
      FastClick.attach(document.body);
    });
  }

  if (cola.browser.webkit) {
    browser = "webkit";
    if (cola.browser.chrome) {
      browser += " chrome";
    } else if (cola.browser.safari) {
      browser += " safari";
    }
  } else if (cola.browser.ie) {
    browser = "ie";
  } else if (cola.browser.mozilla) {
    browser = "mozilla";
  } else {
    browser = "";
  }

  if (cola.os.android) {
    os = " android";
  } else if (cola.os.ios) {
    os = " ios";
  } else if (cola.os.windows) {
    os = " windows";
  } else {
    os = "";
  }

  if (cola.device.mobile) {
    os += " mobile";
  } else if (cola.device.desktop) {
    os += " desktop";
  }

  if (browser || os) {
    $fly(document.documentElement).addClass(browser + os);
  }

  if (cola.os.mobile) {
    $(function() {
      if (typeof FastClick !== "undefined" && FastClick !== null) {
        FastClick.attach(document.body);
      }
    });
  }

  cola.loadSubView = function(targetDom, context) {
    var cssUrl, cssUrls, failed, htmlUrl, jsUrl, jsUrls, l, len1, len2, len3, len4, loadingUrls, o, q, r, ref, ref1, resourceLoadCallback;
    loadingUrls = [];
    failed = false;
    resourceLoadCallback = function(success, result, url) {
      var error, errorMessage, i, initFunc, l, len1, ref;
      if (success) {
        if (!failed) {
          i = loadingUrls.indexOf(url);
          if (i > -1) {
            loadingUrls.splice(i, 1);
          }
          if (loadingUrls.length === 0) {
            $fly(targetDom).removeClass("loading");
            if (context.suspendedInitFuncs.length) {
              ref = context.suspendedInitFuncs;
              for (l = 0, len1 = ref.length; l < len1; l++) {
                initFunc = ref[l];
                initFunc(targetDom, context.model, context.param);
              }
            } else {
              cola(targetDom, context.model);
            }
            if (cola.getListeners("ready")) {
              cola.fire("ready", cola);
              cola.off("ready");
            }
            cola.callback(context.callback, true);
          }
        }
      } else {
        failed = true;
        error = result;
        if (cola.callback(context.callback, false, error) !== false) {
          if (error.xhr) {
            errorMessage = error.status + " " + error.statusText;
          } else {
            errorMessage = error.message;
          }
          throw new cola.Exception(("Failed to load resource from [" + url + "]. ") + errorMessage);
        }
      }
    };
    $fly(targetDom).addClass("loading");
    htmlUrl = context.htmlUrl;
    if (htmlUrl) {
      loadingUrls.push(htmlUrl);
    }
    if (context.jsUrl) {
      jsUrls = [];
      if (context.jsUrl instanceof Array) {
        ref = context.jsUrl;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          jsUrl = ref[l];
          jsUrl = _compileResourceUrl(jsUrl, htmlUrl, ".js");
          if (jsUrl) {
            loadingUrls.push(jsUrl);
            jsUrls.push(jsUrl);
          }
        }
      } else {
        jsUrl = _compileResourceUrl(context.jsUrl, htmlUrl, ".js");
        if (jsUrl) {
          loadingUrls.push(jsUrl);
          jsUrls.push(jsUrl);
        }
      }
    }
    if (context.cssUrl) {
      cssUrls = [];
      if (context.cssUrl instanceof Array) {
        ref1 = context.cssUrl;
        for (o = 0, len2 = ref1.length; o < len2; o++) {
          cssUrl = ref1[o];
          cssUrl = _compileResourceUrl(cssUrl, htmlUrl, ".css");
          if (cssUrl) {
            loadingUrls.push(cssUrl);
            cssUrls.push(cssUrl);
          }
        }
      } else {
        cssUrl = _compileResourceUrl(context.cssUrl, htmlUrl, ".css");
        if (cssUrl) {
          loadingUrls.push(cssUrl);
          cssUrls.push(cssUrl);
        }
      }
    }
    context.suspendedInitFuncs = [];
    if (htmlUrl) {
      _loadHtml(targetDom, htmlUrl, void 0, {
        complete: function(success, result) {
          return resourceLoadCallback(success, result, htmlUrl);
        }
      });
    }
    if (jsUrls) {
      for (q = 0, len3 = jsUrls.length; q < len3; q++) {
        jsUrl = jsUrls[q];
        _loadJs(context, jsUrl, {
          complete: function(success, result) {
            return resourceLoadCallback(success, result, jsUrl);
          }
        });
      }
    }
    if (cssUrls) {
      for (r = 0, len4 = cssUrls.length; r < len4; r++) {
        cssUrl = cssUrls[r];
        _loadCss(cssUrl, {
          complete: function(success, result) {
            return resourceLoadCallback(success, result, cssUrl);
          }
        });
      }
    }
  };

  cola.unloadSubView = function(targetDom, context) {
    var cssUrl, htmlUrl, l, len1, ref;
    $fly(targetDom).empty();
    htmlUrl = context.htmlUrl;
    if (context.cssUrl) {
      if (context.cssUrl instanceof Array) {
        ref = context.cssUrl;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          cssUrl = ref[l];
          cssUrl = _compileResourceUrl(cssUrl, htmlUrl, ".css");
          if (cssUrl) {
            _unloadCss(cssUrl);
          }
        }
      } else {
        cssUrl = _compileResourceUrl(context.cssUrl, htmlUrl, ".css");
        if (cssUrl) {
          _unloadCss(cssUrl);
        }
      }
    }
  };

  _compileResourceUrl = function(resUrl, htmlUrl, suffix) {
    var defaultRes, i;
    if (resUrl === "$") {
      defaultRes = true;
    } else if (resUrl.indexOf("$.") === 0) {
      defaultRes = true;
      suffix = resUrl.substring(2);
    }
    if (defaultRes) {
      resUrl = null;
      if (htmlUrl) {
        i = htmlUrl.indexOf("?");
        if (i > 0) {
          htmlUrl = htmlUrl.substring(0, i);
        }
        i = htmlUrl.lastIndexOf(".");
        resUrl = (i > 0 ? htmlUrl.substring(0, i) : htmlUrl) + suffix;
      }
    }
    return resUrl;
  };

  _loadHtml = function(targetDom, url, data, callback) {
    $(targetDom).load(url, data, function(response, status, xhr) {
      if (status === "error") {
        cola.callback(callback, false, {
          xhr: xhr,
          status: xhr.status,
          statusText: xhr.statusText
        });
      } else {
        cola.callback(callback, true);
      }
    });
  };

  _jsCache = {};

  _loadJs = function(context, url, callback) {
    var initFuncs;
    initFuncs = _jsCache[url];
    if (initFuncs) {
      Array.prototype.push.apply(context.suspendedInitFuncs, initFuncs);
      cola.callback(callback, true);
    } else {
      $.ajax(url, {
        dataType: "text",
        cache: true
      }).done(function(script) {
        var e, head, scriptElement;
        scriptElement = $.xCreate({
          tagName: "script",
          language: "javascript",
          type: "text/javascript",
          charset: cola.setting("defaultCharset")
        });
        scriptElement.text = script;
        cola._suspendedInitFuncs = context.suspendedInitFuncs;
        try {
          try {
            head = document.querySelector("head") || document.documentElement;
            head.appendChild(scriptElement);
          } finally {
            delete cola._suspendedInitFuncs;
            _jsCache[url] = context.suspendedInitFuncs;
          }
          cola.callback(callback, true);
        } catch (_error) {
          e = _error;
          cola.callback(callback, false, e);
        }
      }).fail(function(xhr) {
        cola.callback(callback, false, {
          xhr: xhr,
          status: xhr.status,
          statusText: xhr.statusText
        });
      });
    }
  };

  _cssCache = {};

  _loadCss = function(url, callback) {
    var head, linkElement;
    if (!_cssCache[url]) {
      linkElement = $.xCreate({
        tagName: "link",
        rel: "stylesheet",
        type: "text/css",
        charset: cola.setting("defaultCharset"),
        href: url
      });
      if (!(cola.os.android && cola.os.version < 4.4)) {
        $(linkElement).one("load", function() {
          cola.callback(callback, true);
        }).on("readystatechange", function(evt) {
          var ref;
          if (((ref = evt.target) != null ? ref.readyState : void 0) === "complete") {
            cola.callback(callback, true);
            $fly(this).off("readystatechange");
          }
        }).one("error", function() {
          cola.callback(callback, false);
        });
      }
      head = document.querySelector("head") || document.documentElement;
      head.appendChild(linkElement);
      _cssCache[url] = linkElement;
      if (cola.os.android && cola.os.version < 4.4) {
        cola.callback(callback, true);
      }
    } else {
      cola.callback(callback, true);
    }
  };

  _unloadCss = function(url) {
    if (_cssCache[url]) {
      $fly(_cssCache[url]).remove();
      delete _cssCache[url];
    }
  };

  routerRegistry = null;

  currentRoutePath = null;

  currentRouter = null;

  trimPath = function(path) {
    if (path) {
      if (path.charCodeAt(0) === 47) {
        path = path.substring(1);
      }
      if (path.charCodeAt(path.length - 1) === 47) {
        path = path.substring(0, path.length - 1);
      }
    }
    return path || "";
  };

  cola.route = function(path, router) {
    var hasVariable, i, l, len1, len2, name, nameParts, o, optional, part, parts, pathParts, ref, variable;
    if (routerRegistry == null) {
      routerRegistry = new cola.util.KeyedArray();
    }
    if (typeof router === "function") {
      router = {
        enter: router
      };
    }
    path = trimPath(path);
    router.path = path;
    if (!router.name) {
      name = path || cola.constants.DEFAULT_PATH;
      parts = name.split(/[\/\-]/);
      nameParts = [];
      for (i = l = 0, len1 = parts.length; l < len1; i = ++l) {
        part = parts[i];
        if (!part || part.charCodeAt(0) === 58) {
          continue;
        }
        nameParts.push(nameParts.length > 0 ? cola.util.capitalize(part) : part);
      }
      router.name = nameParts.join("");
    }
    router.pathParts = pathParts = [];
    if (path) {
      hasVariable = false;
      ref = path.split("/");
      for (o = 0, len2 = ref.length; o < len2; o++) {
        part = ref[o];
        if (part.charCodeAt(0) === 58) {
          optional = part.charCodeAt(part.length - 1) === 63;
          if (optional) {
            variable = part.substring(1, part.length - 1);
          } else {
            variable = part.substring(1);
          }
          hasVariable = true;
          pathParts.push({
            variable: variable,
            optional: optional
          });
        } else {
          pathParts.push(part);
        }
      }
      router.hasVariable = hasVariable;
    }
    routerRegistry.add(path, router);
    return router;
  };

  cola.getCurrentRoutePath = function() {
    return currentRoutePath;
  };

  cola.getCurrentRouter = function() {
    return currentRouter;
  };

  cola.setRoutePath = function(path, replace) {
    var pathRoot, realPath, routerMode;
    if (path && path.charCodeAt(0) === 35) {
      routerMode = "hash";
      path = path.substring(1);
    } else {
      routerMode = cola.setting("routerMode") || "hash";
    }
    if (routerMode === "hash") {
      if (path.charCodeAt(0) !== 47) {
        path = "/" + path;
      }
      if (window.location.hash !== path) {
        window.location.hash = path;
      }
    } else {
      pathRoot = cola.setting("routerContextPath");
      if (pathRoot && path.charCodeAt(0) === 47) {
        realPath = cola.util.concatUrl(pathRoot, path);
      } else {
        realPath = path;
      }
      if (replace) {
        window.history.replaceState(null, null, realPath);
      } else {
        window.history.pushState(null, null, realPath);
      }
      if (location.pathname !== realPath) {
        realPath = location.pathname + location.search + location.hash;
        if (pathRoot && realPath.indexOf(pathRoot) === 0) {
          path = realPath.substring(pathRoot.length);
        }
      }
      window.history.replaceState({
        path: path
      }, null, realPath);
      _onStateChange(path);
    }
  };

  _findRouter = function(path) {
    var defPart, defPathParts, gap, i, l, len1, len2, matching, o, param, pathParts, ref, router;
    if (!routerRegistry) {
      return null;
    }
    path || (path = trimPath(cola.setting("defaultRouterPath")));
    pathParts = path ? path.split(/[\/\?\#]/) : [];
    ref = routerRegistry.elements;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      router = ref[l];
      defPathParts = router.pathParts;
      gap = defPathParts.length - pathParts.length;
      if (!(gap === 0 || gap === 1 && defPathParts.length > 0 && defPathParts[defPathParts.length - 1].optional)) {
        continue;
      }
      matching = true;
      param = {};
      for (i = o = 0, len2 = defPathParts.length; o < len2; i = ++o) {
        defPart = defPathParts[i];
        if (typeof defPart === "string") {
          if (defPart !== pathParts[i]) {
            matching = false;
            break;
          }
        } else {
          if (i >= pathParts.length && !defPart.optional) {
            matching = false;
            break;
          }
          param[defPart.variable] = pathParts[i];
        }
      }
      if (matching) {
        break;
      }
    }
    if (matching) {
      router.param = param;
      return router;
    } else {
      return null;
    }
  };

  cola.createRouterModel = function(router) {
    var parentModel, parentModelName;
    if (router.parentModel instanceof cola.Scope) {
      parentModel = router.parentModel;
    } else {
      parentModelName = router.parentModel || cola.constants.DEFAULT_PATH;
      parentModel = cola.model(parentModelName);
    }
    if (!parentModel) {
      throw new cola.Exception("Parent Model \"" + parentModelName + "\" is undefined.");
    }
    return new cola.Model(router.name, parentModel);
  };

  _switchRouter = function(router, path) {
    var eventArg, model, oldModel, target;
    if (router.redirectTo) {
      cola.setRoutePath(router.redirectTo);
      return;
    }
    eventArg = {
      path: path,
      prev: currentRouter,
      next: router
    };
    if (cola.fire("beforeRouterSwitch", cola, eventArg) === false) {
      return;
    }
    if (currentRouter) {
      if (typeof currentRouter.leave === "function") {
        currentRouter.leave(currentRouter);
      }
      if (currentRouter.targetDom) {
        cola.unloadSubView(currentRouter.targetDom, {
          cssUrl: currentRouter.cssUrl
        });
        oldModel = cola.util.removeUserData(currentRouter.targetDom, "_model");
        if (oldModel != null) {
          oldModel.destroy();
        }
      }
    }
    if (router.templateUrl) {
      if (router.target) {
        if (router.target.nodeType) {
          target = router.target;
        } else {
          target = $(router.target)[0];
        }
      }
      if (!target) {
        target = document.getElementsByClassName(cola.constants.VIEW_PORT_CLASS)[0];
        if (!target) {
          target = document.getElementsByClassName(cola.constants.VIEW_CLASS)[0];
          if (!target) {
            target = document.body;
          }
        }
      }
      router.targetDom = target;
      $fly(target).empty();
    }
    currentRouter = router;
    if (router.templateUrl) {
      model = cola.createRouterModel(router);
      eventArg.nextModel = model;
      cola.util.userData(router.targetDom, "_model", model);
      cola.loadSubView(router.targetDom, {
        model: model,
        htmlUrl: router.templateUrl,
        jsUrl: router.jsUrl,
        cssUrl: router.cssUrl,
        data: router.data,
        param: router.param,
        callback: function() {
          if (typeof router.enter === "function") {
            router.enter(router, model);
          }
          if (router.title) {
            document.title = router.title;
          }
        }
      });
    } else {
      if (typeof router.enter === "function") {
        router.enter(router, null);
      }
      if (router.title) {
        document.title = router.title;
      }
    }
    cola.fire("routerSwitch", cola, eventArg);
  };

  _getHashPath = function() {
    var path;
    path = location.hash;
    if (path) {
      path = path.substring(1);
    }
    if ((path != null ? path.charCodeAt(0) : void 0) === 33) {
      path = path.substring(1);
    }
    path = trimPath(path);
    return path || "";
  };

  _onHashChange = function() {
    var path, router;
    if ((cola.setting("routerMode") || "hash") !== "hash") {
      return;
    }
    path = _getHashPath();
    if (path === currentRoutePath) {
      return;
    }
    currentRoutePath = path;
    router = _findRouter(path);
    if (router) {
      _switchRouter(router, path);
    }
  };

  _onStateChange = function(path) {
    var i, router;
    if (cola.setting("routerMode") !== "state") {
      return;
    }
    path = trimPath(path);
    i = path.indexOf("#");
    if (i > -1) {
      path = path.substring(i + 1);
    } else {
      i = path.indexOf("?");
      if (i > -1) {
        path = path.substring(0, i);
      }
    }
    if (path === currentRoutePath) {
      return;
    }
    currentRoutePath = path;
    router = _findRouter(path);
    if (router) {
      _switchRouter(router, path);
    }
  };

  $(function() {
    setTimeout(function() {
      var path, router;
      $fly(window).on("hashchange", _onHashChange).on("popstate", function() {
        var state;
        if (!location.hash) {
          state = window.history.state;
          _onStateChange((state != null ? state.path : void 0) || "");
        }
      });
      $(document.body).delegate("a.state", "click", function() {
        var href;
        href = this.getAttribute("href");
        if (href) {
          cola.setRoutePath(href);
        }
        return false;
      });
      path = _getHashPath();
      if (path) {
        router = _findRouter(path);
        if (router) {
          _switchRouter(router, path);
        }
      } else {
        path = trimPath(cola.setting("defaultRouterPath"));
        router = _findRouter(path);
        if (router) {
          cola.setRoutePath(path + location.search, true);
        }
      }
    }, 0);
  });


  /*
  BindingFeature
   */

  cola._BindingFeature = (function() {
    function _BindingFeature() {}

    _BindingFeature.prototype.init = function() {};

    return _BindingFeature;

  })();

  cola._ExpressionFeature = (function(superClass) {
    extend(_ExpressionFeature, superClass);

    function _ExpressionFeature(expression1) {
      this.expression = expression1;
      if (this.expression) {
        this.isStatic = this.expression.isStatic;
        this.isDyna = this.expression.isDyna;
        this.paths = this.expression.paths;
        if (!this.paths && this.expression.hasCallStatement) {
          this.paths = ["**"];
          if (!this.isStatic) {
            this.delay = true;
          }
        }
        this.watchingMoreMessage = this.expression.hasCallStatement;
      }
    }

    _ExpressionFeature.prototype.evaluate = function(domBinding, dynaExpressionOnly, dataCtx, loadMode) {
      var l, len1, len2, o, path, paths, ref, ref1, result;
      if (loadMode == null) {
        loadMode = "async";
      }
      if (dynaExpressionOnly) {
        result = (ref = this.dynaExpression) != null ? ref.evaluate(domBinding.scope, loadMode, dataCtx) : void 0;
      } else {
        result = this.expression.evaluate(domBinding.scope, loadMode, dataCtx);
        if (this.isDyna && result !== this.dynaExpressionStr) {
          this.dynaExpressionStr = result;
          if (!this.ignoreBind && this.dynaPaths) {
            ref1 = this.dynaPaths;
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              path = ref1[l];
              domBinding.unbind(path, this);
            }
          }
          if (typeof result === "string") {
            this.dynaExpression = cola._compileExpression(result);
            if (this.dynaExpression) {
              if (!this.ignoreBind) {
                paths = this.dynaExpression.paths;
                if (paths) {
                  for (o = 0, len2 = paths.length; o < len2; o++) {
                    path = paths[o];
                    if (this.paths.indexOf(path) < 0) {
                      if (!this.dynaPaths) {
                        this.dynaPaths = [path];
                      } else {
                        this.dynaPaths.push(path);
                      }
                      domBinding.bind(path, this);
                    }
                  }
                }
              }
              result = this.dynaExpression.evaluate(domBinding.scope, loadMode, dataCtx);
            }
          }
        }
      }
      return result;
    };

    _ExpressionFeature.prototype.refresh = function(domBinding, force, dynaExpressionOnly, dataCtx) {
      if (dataCtx == null) {
        dataCtx = {};
      }
      if (!this._refresh) {
        return;
      }
      if (this.delay && !force) {
        cola.util.delay(domBinding, "refresh", 100, (function(_this) {
          return function() {
            _this._refresh(domBinding, dynaExpressionOnly, dataCtx);
            if (_this.isStatic && !dataCtx.unloaded) {
              _this.disabled = true;
            }
          };
        })(this));
      } else {
        this._refresh(domBinding, dynaExpressionOnly, dataCtx);
        if (this.isStatic && !dataCtx.unloaded) {
          this.disabled = true;
        }
      }
    };

    return _ExpressionFeature;

  })(cola._BindingFeature);

  cola._WatchFeature = (function(superClass) {
    extend(_WatchFeature, superClass);

    function _WatchFeature(action1, paths1) {
      this.action = action1;
      this.paths = paths1;
      this.watchingMoreMessage = true;
    }

    _WatchFeature.prototype._processMessage = function(domBinding, bindingPath) {
      var ref;
      if (!this.isDyna || ((ref = this.dynaPaths) != null ? ref.indexOf(bindingPath) : void 0) >= 0) {
        this.refresh(domBinding);
      }
    };

    _WatchFeature.prototype.refresh = function(domBinding) {
      var action;
      action = domBinding.scope.action(this.action);
      if (!action) {
        throw new cola.Exception("No action named \"" + this.action + "\" found.");
      }
      action(domBinding.dom, domBinding.scope);
    };

    return _WatchFeature;

  })(cola._BindingFeature);

  cola._EventFeature = (function(superClass) {
    extend(_EventFeature, superClass);

    _EventFeature.prototype.ignoreBind = true;

    function _EventFeature(expression1, event) {
      this.expression = expression1;
      this.event = event;
    }

    _EventFeature.prototype.init = function(domBinding) {
      domBinding.$dom.on(this.event, (function(_this) {
        return function() {
          var oldScope;
          oldScope = cola.currentScope;
          cola.currentScope = domBinding.scope;
          try {
            return _this.evaluate(domBinding, false, null, "never");
          } finally {
            cola.currentScope = oldScope;
          }
        };
      })(this));
    };

    return _EventFeature;

  })(cola._ExpressionFeature);

  cola._AliasFeature = (function(superClass) {
    extend(_AliasFeature, superClass);

    function _AliasFeature(expression) {
      _AliasFeature.__super__.constructor.call(this, expression);
      this.alias = expression.alias;
    }

    _AliasFeature.prototype.init = function(domBinding) {
      domBinding.scope = new cola.AliasScope(domBinding.scope, this.expression);
      domBinding.subScopeCreated = true;
    };

    _AliasFeature.prototype._processMessage = function(domBinding, bindingPath, path, type, arg) {
      var ref;
      if ((cola.constants.MESSAGE_REFRESH <= type && type <= cola.constants.MESSAGE_CURRENT_CHANGE) || this.watchingMoreMessage) {
        this.refresh(domBinding, false, ((ref = this.dynaPaths) != null ? ref.indexOf(bindingPath) : void 0) >= 0);
      }
    };

    _AliasFeature.prototype._refresh = function(domBinding, dynaExpressionOnly, dataCtx) {
      var data;
      data = this.evaluate(domBinding, dynaExpressionOnly, dataCtx);
      domBinding.scope.data.setTargetData(data);
    };

    return _AliasFeature;

  })(cola._ExpressionFeature);

  cola._RepeatFeature = (function(superClass) {
    extend(_RepeatFeature, superClass);

    function _RepeatFeature(expression) {
      _RepeatFeature.__super__.constructor.call(this, expression);
      this.alias = expression.alias;
    }

    _RepeatFeature.prototype.init = function(domBinding) {
      var scope;
      domBinding.scope = scope = new cola.ItemsScope(domBinding.scope, this.isDyna ? null : this.expression);
      scope.onItemsRefresh = (function(_this) {
        return function() {
          _this.onItemsRefresh(domBinding);
        };
      })(this);
      scope.onCurrentItemChange = function(arg) {
        var currentItemDom, currentItemDomBinding, itemId;
        if (domBinding.currentItemDom) {
          $fly(domBinding.currentItemDom).removeClass(cola.constants.COLLECTION_CURRENT_CLASS);
        }
        if (arg.current && domBinding.itemDomBindingMap) {
          itemId = cola.Entity._getEntityId(arg.current);
          if (itemId) {
            currentItemDomBinding = domBinding.itemDomBindingMap[itemId];
            if (currentItemDomBinding) {
              currentItemDom = currentItemDomBinding.dom;
              $fly(currentItemDom).addClass(cola.constants.COLLECTION_CURRENT_CLASS);
            } else {
              this.onItemsRefresh(domBinding);
              return;
            }
          }
        }
        domBinding.currentItemDom = currentItemDom;
      };
      scope.onItemInsert = (function(_this) {
        return function(arg) {
          var entity, headDom, i, iScope, id, index, insertMode, itemDom, itemsScope, ref, refDom, refEntityId, refItemScope, tailDom, templateDom;
          headDom = domBinding.dom;
          tailDom = cola.util.userData(headDom, cola.constants.REPEAT_TAIL_KEY);
          templateDom = cola.util.userData(headDom, cola.constants.REPEAT_TEMPLATE_KEY);
          entity = arg.entity;
          itemsScope = arg.itemsScope;
          insertMode = arg.insertMode;
          if (!insertMode || insertMode === "end") {
            index = arg.entityList.entityCount;
          } else if (insertMode === "begin") {
            index = 1;
          } else if (insertMode === "before") {
            refItemScope = itemsScope.getItemScope(arg.refEntity);
            index = refItemScope != null ? refItemScope.data.getIndex() : void 0;
          } else if (insertMode === "after") {
            refItemScope = itemsScope.getItemScope(arg.refEntity);
            index = (refItemScope != null ? refItemScope.data.getIndex() : void 0) + 1;
          }
          itemDom = _this.createNewItem(domBinding, templateDom, domBinding.scope, entity, index);
          if (!insertMode || insertMode === "end") {
            $fly(tailDom).before(itemDom);
          } else {
            if (insertMode === "begin") {
              $fly(headDom).after(itemDom);
            } else if (domBinding.itemDomBindingMap) {
              refEntityId = cola.Entity._getEntityId(arg.refEntity);
              if (refEntityId) {
                refDom = domBinding.itemDomBindingMap[refEntityId] != null;
                if (refDom) {
                  if (insertMode === "before") {
                    $fly(refDom).before(itemDom);
                  } else {
                    $fly(refDom).after(itemDom);
                  }
                }
              }
            }
            ref = itemsScope.itemScopeMap;
            for (id in ref) {
              iScope = ref[id];
              i = iScope.data.getIndex();
              if (i >= index && iScope.data.getTargetData() !== entity) {
                iScope.data.setIndex(i + 1);
              }
            }
          }
        };
      })(this);
      scope.onItemRemove = function(arg) {
        var entity, i, iScope, id, index, itemDomBinding, itemId, itemScope, itemsScope, ref;
        entity = arg.entity;
        itemsScope = arg.itemsScope;
        itemId = cola.Entity._getEntityId(entity);
        if (itemId) {
          itemScope = itemsScope.getItemScope(entity);
          itemDomBinding = domBinding.itemDomBindingMap[itemId];
          if (itemDomBinding) {
            itemsScope.unregItemScope(itemId);
            itemDomBinding.remove();
            if (itemDomBinding.dom === domBinding.currentItemDom) {
              delete domBinding.currentItemDom;
            }
          }
          if (itemScope) {
            index = itemScope.data.getIndex();
            if (index < arg.entityList.entityCount) {
              ref = itemsScope.itemScopeMap;
              for (id in ref) {
                iScope = ref[id];
                i = iScope.data.getIndex();
                if (i > index) {
                  iScope.data.setIndex(i - 1);
                }
              }
            }
          }
        }
      };
      domBinding.subScopeCreated = true;
    };

    _RepeatFeature.prototype._processMessage = function(domBinding, bindingPath, path, type, arg) {
      if ((cola.constants.MESSAGE_REFRESH <= type && type <= cola.constants.MESSAGE_CURRENT_CHANGE) || this.watchingMoreMessage) {
        this.refresh(domBinding);
      }
    };

    _RepeatFeature.prototype._refresh = function(domBinding, dynaExpressionOnly, dataCtx) {
      if (this.isDyna && !dynaExpressionOnly) {
        this.evaluate(domBinding, dynaExpressionOnly, dataCtx);
        domBinding.scope.setExpression(this.dynaExpression);
      }
      domBinding.scope.refreshItems(dataCtx);
    };

    _RepeatFeature.prototype.onItemsRefresh = function(domBinding) {
      var currentDom, documentFragment, headDom, itemDom, items, originItems, scope, tailDom, templateDom;
      scope = domBinding.scope;
      items = scope.items;
      originItems = scope.originData;
      if (items && !(items instanceof cola.EntityList) && !(items instanceof Array)) {
        throw new cola.Exception("Expression \"" + this.expression + "\" must bind to EntityList or Array.");
      }
      if (items !== domBinding.items || (items && items.timestamp !== domBinding.timestamp)) {
        domBinding.items = items;
        domBinding.timestamp = (items != null ? items.timestamp : void 0) || 0;
        headDom = domBinding.dom;
        tailDom = cola.util.userData(headDom, cola.constants.REPEAT_TAIL_KEY);
        templateDom = cola.util.userData(headDom, cola.constants.REPEAT_TEMPLATE_KEY);
        if (!tailDom) {
          tailDom = document.createComment("Repeat Tail ");
          $fly(headDom).after(tailDom);
          cola.util.userData(headDom, cola.constants.REPEAT_TAIL_KEY, tailDom);
        }
        currentDom = headDom;
        documentFragment = null;
        if (items) {
          domBinding.itemDomBindingMap = {};
          scope.resetItemScopeMap();
          if (domBinding.currentItemDom) {
            $fly(domBinding.currentItemDom).removeClass(cola.constants.COLLECTION_CURRENT_CLASS);
          }
          cola.each(items, (function(_this) {
            return function(item, i) {
              var itemDom, itemDomBinding, itemId, itemScope;
              if (item == null) {
                return;
              }
              itemDom = currentDom.nextSibling;
              if (itemDom === tailDom) {
                itemDom = null;
              }
              if (itemDom) {
                itemDomBinding = cola.util.userData(itemDom, cola.constants.DOM_BINDING_KEY);
                itemScope = itemDomBinding.scope;
                if (typeof item === "object") {
                  itemId = cola.Entity._getEntityId(item);
                } else {
                  itemId = cola.uniqueId();
                }
                scope.regItemScope(itemId, itemScope);
                itemDomBinding.itemId = itemId;
                domBinding.itemDomBindingMap[itemId] = itemDomBinding;
                itemScope.data.setTargetData(item);
                itemScope.data.setIndex(i + 1);
              } else {
                itemDom = _this.createNewItem(domBinding, templateDom, scope, item, i + 1);
                if (documentFragment == null) {
                  documentFragment = document.createDocumentFragment();
                }
                documentFragment.appendChild(itemDom);
                $fly(tailDom).before(itemDom);
              }
              if (item === (items.current || (originItems != null ? originItems.current : void 0))) {
                $fly(itemDom).addClass(cola.constants.COLLECTION_CURRENT_CLASS);
                domBinding.currentItemDom = itemDom;
              }
              currentDom = itemDom;
            };
          })(this));
        }
        if (!documentFragment) {
          itemDom = currentDom.nextSibling;
          while (itemDom && itemDom !== tailDom) {
            currentDom = itemDom;
            itemDom = currentDom.nextSibling;
            $fly(currentDom).remove();
          }
        } else {
          $fly(tailDom).before(documentFragment);
        }
      }
    };

    _RepeatFeature.prototype.createNewItem = function(repeatDomBinding, templateDom, scope, item, index) {
      var domBinding, itemDom, itemId, itemScope, templateDomBinding;
      itemScope = new cola.ItemScope(scope, this.alias);
      itemScope.data.setTargetData(item, true);
      itemScope.data.setIndex(index, true);
      itemDom = templateDom.cloneNode(true);
      this.deepCloneNodeData(itemDom, itemScope, false);
      templateDomBinding = cola.util.userData(templateDom, cola.constants.DOM_BINDING_KEY);
      domBinding = templateDomBinding.clone(itemDom, itemScope);
      this.refreshItemDomBinding(itemDom, itemScope);
      if (typeof item === "object") {
        itemId = cola.Entity._getEntityId(item);
      } else {
        itemId = cola.uniqueId();
      }
      scope.regItemScope(itemId, itemScope);
      domBinding.itemId = itemId;
      repeatDomBinding.itemDomBindingMap[itemId] = domBinding;
      return itemDom;
    };

    _RepeatFeature.prototype.deepCloneNodeData = function(node, scope, cloneDomBinding) {
      var child, clonedStore, k, store, v;
      store = cola.util.userData(node);
      if (store) {
        clonedStore = {};
        for (k in store) {
          v = store[k];
          if (k === cola.constants.DOM_BINDING_KEY) {
            if (cloneDomBinding) {
              v = v.clone(node, scope);
            }
          } else if (k.substring(0, 2) === "__") {
            continue;
          }
          clonedStore[k] = v;
        }
        cola.util.userData(node, clonedStore);
      }
      child = node.firstChild;
      while (child) {
        if (child.nodeType !== 3 && !(typeof child.hasAttribute === "function" ? child.hasAttribute(cola.constants.IGNORE_DIRECTIVE) : void 0)) {
          this.deepCloneNodeData(child, scope, true);
        }
        child = child.nextSibling;
      }
    };

    _RepeatFeature.prototype.refreshItemDomBinding = function(dom, itemScope) {
      var child, currentDom, domBinding, initializer, initializers, l, len1;
      domBinding = cola.util.userData(dom, cola.constants.DOM_BINDING_KEY);
      if (domBinding) {
        domBinding.refresh();
        itemScope = domBinding.subScope || domBinding.scope;
        if (domBinding instanceof cola._RepeatDomBinding) {
          currentDom = cola.util.userData(domBinding.dom, cola.constants.REPEAT_TAIL_KEY);
        }
      }
      child = dom.firstChild;
      while (child) {
        if (child.nodeType !== 3 && !(typeof child.hasAttribute === "function" ? child.hasAttribute(cola.constants.IGNORE_DIRECTIVE) : void 0)) {
          child = this.refreshItemDomBinding(child, itemScope);
        }
        child = child.nextSibling;
      }
      initializers = cola.util.userData(dom, cola.constants.DOM_INITIALIZER_KEY);
      if (initializers) {
        for (l = 0, len1 = initializers.length; l < len1; l++) {
          initializer = initializers[l];
          initializer(itemScope, dom);
        }
        cola.util.removeUserData(dom, cola.constants.DOM_INITIALIZER_KEY);
      }
      return currentDom || dom;
    };

    return _RepeatFeature;

  })(cola._ExpressionFeature);

  cola._DomFeature = (function(superClass) {
    extend(_DomFeature, superClass);

    function _DomFeature() {
      return _DomFeature.__super__.constructor.apply(this, arguments);
    }

    _DomFeature.prototype.writeBack = function(domBinding, value) {
      var paths;
      paths = this.isDyna ? this.dynaPaths : this.paths;
      if (paths && paths.length === 1) {
        this.ignoreMessage = true;
        domBinding.scope.set(paths[0], value);
        this.ignoreMessage = false;
      }
    };

    _DomFeature.prototype._processMessage = function(domBinding, bindingPath, path, type, arg) {
      var ref;
      if ((cola.constants.MESSAGE_REFRESH <= type && type <= cola.constants.MESSAGE_CURRENT_CHANGE) || this.watchingMoreMessage) {
        this.refresh(domBinding, false, ((ref = this.dynaPaths) != null ? ref.indexOf(bindingPath) : void 0) >= 0);
      }
    };

    _DomFeature.prototype._refresh = function(domBinding, dynaExpressionOnly, dataCtx) {
      if (this.ignoreMessage) {
        return;
      }
      value = this.evaluate(domBinding, dynaExpressionOnly, dataCtx);
      this._doRender(domBinding, value);
    };

    return _DomFeature;

  })(cola._ExpressionFeature);

  cola._DomAttrFeature = (function(superClass) {
    extend(_DomAttrFeature, superClass);

    function _DomAttrFeature(expression, attr1) {
      this.attr = attr1;
      _DomAttrFeature.__super__.constructor.call(this, expression);
    }

    _DomAttrFeature.prototype._doRender = function(domBinding, value) {
      var attr, defaultDateFormat;
      if (value instanceof Date) {
        defaultDateFormat = cola.setting("defaultDateFormat");
        if (defaultDateFormat) {
          value = cola.defaultAction.formatDate(value, defaultDateFormat);
        }
      }
      attr = this.attr;
      if (attr === "text") {
        cola.util.setText(domBinding.dom, value != null ? value : "");
      } else if (attr === "html") {
        domBinding.$dom.html(value != null ? value : "");
      } else {
        domBinding.$dom.attr(attr, value != null ? value : "");
      }
    };

    return _DomAttrFeature;

  })(cola._DomFeature);

  cola._DomStylePropFeature = (function(superClass) {
    extend(_DomStylePropFeature, superClass);

    function _DomStylePropFeature(expression, prop1) {
      this.prop = prop1;
      _DomStylePropFeature.__super__.constructor.call(this, expression);
    }

    _DomStylePropFeature.prototype._doRender = function(domBinding, value) {
      domBinding.$dom.css(this.prop, value);
    };

    return _DomStylePropFeature;

  })(cola._DomFeature);

  cola._DomClassFeature = (function(superClass) {
    extend(_DomClassFeature, superClass);

    function _DomClassFeature(expression) {
      _DomClassFeature.__super__.constructor.call(this, expression);
    }

    _DomClassFeature.prototype._doRender = function(domBinding, value) {
      if (this._lastClassName) {
        domBinding.$dom.removeClass(this._lastClassName);
      }
      if (value) {
        domBinding.$dom.addClass(value);
        this._lastClassName = value;
      }
    };

    return _DomClassFeature;

  })(cola._DomFeature);

  cola._DomToggleClassFeature = (function(superClass) {
    extend(_DomToggleClassFeature, superClass);

    function _DomToggleClassFeature(expression, className1) {
      this.className = className1;
      _DomToggleClassFeature.__super__.constructor.call(this, expression);
    }

    _DomToggleClassFeature.prototype._doRender = function(domBinding, value) {
      domBinding.$dom[value ? "addClass" : "removeClass"](this.className);
    };

    return _DomToggleClassFeature;

  })(cola._DomFeature);

  cola._TextBoxFeature = (function(superClass) {
    extend(_TextBoxFeature, superClass);

    function _TextBoxFeature() {
      return _TextBoxFeature.__super__.constructor.apply(this, arguments);
    }

    _TextBoxFeature.prototype.init = function(domBinding) {
      var feature;
      feature = this;
      domBinding.$dom.on("input", function() {
        feature.writeBack(domBinding, this.value);
      });
      _TextBoxFeature.__super__.init.call(this);
    };

    _TextBoxFeature.prototype._doRender = function(domBinding, value) {
      domBinding.dom.value = value || "";
    };

    return _TextBoxFeature;

  })(cola._DomFeature);

  cola._CheckboxFeature = (function(superClass) {
    extend(_CheckboxFeature, superClass);

    function _CheckboxFeature() {
      return _CheckboxFeature.__super__.constructor.apply(this, arguments);
    }

    _CheckboxFeature.prototype.init = function(domBinding) {
      var feature;
      feature = this;
      domBinding.$dom.on("click", function() {
        feature.writeBack(domBinding, this.checked);
      });
      _CheckboxFeature.__super__.init.call(this);
    };

    _CheckboxFeature.prototype._doRender = function(domBinding, value) {
      var checked;
      checked = cola.DataType.defaultDataTypes.boolean.parse(value);
      domBinding.dom.checked = checked;
    };

    return _CheckboxFeature;

  })(cola._DomFeature);

  cola._RadioFeature = (function(superClass) {
    extend(_RadioFeature, superClass);

    function _RadioFeature() {
      return _RadioFeature.__super__.constructor.apply(this, arguments);
    }

    _RadioFeature.prototype.init = function(domBinding) {
      domBinding.$dom.on("click", function() {
        var checked;
        checked = this.checked;
        if (checked) {
          this.writeBack(domBinding, checked);
        }
      });
      _RadioFeature.__super__.init.call(this);
    };

    _RadioFeature.prototype._doRender = function(domBinding, value) {
      domBinding.dom.checked = value === domBinding.dom.value;
    };

    return _RadioFeature;

  })(cola._DomFeature);

  cola._SelectFeature = (function(superClass) {
    extend(_SelectFeature, superClass);

    function _SelectFeature() {
      return _SelectFeature.__super__.constructor.apply(this, arguments);
    }

    _SelectFeature.prototype.init = function(domBinding) {
      var feature;
      feature = this;
      domBinding.$dom.on("change", function() {
        value = this.options[this.selectedIndex];
        feature.writeBack(domBinding, value != null ? value.value : void 0);
      });
      _SelectFeature.__super__.init.call(this);
    };

    _SelectFeature.prototype._doRender = function(domBinding, value) {
      domBinding.dom.value = value;
    };

    return _SelectFeature;

  })(cola._DomFeature);

  cola._DisplayFeature = (function(superClass) {
    extend(_DisplayFeature, superClass);

    function _DisplayFeature() {
      return _DisplayFeature.__super__.constructor.apply(this, arguments);
    }

    _DisplayFeature.prototype._doRender = function(domBinding, value) {
      domBinding.dom.style.display = value ? "" : "none";
    };

    return _DisplayFeature;

  })(cola._DomFeature);

  cola._SelectOptionsFeature = (function(superClass) {
    extend(_SelectOptionsFeature, superClass);

    function _SelectOptionsFeature() {
      return _SelectOptionsFeature.__super__.constructor.apply(this, arguments);
    }

    _SelectOptionsFeature.prototype._doRender = function(domBinding, optionValues) {
      var options;
      if (!(optionValues instanceof Array || optionValues instanceof cola.EntityList)) {
        return;
      }
      options = domBinding.dom.options;
      if (optionValues instanceof cola.EntityList) {
        options.length = optionValues.entityCount;
      } else {
        options.length = optionValues.length;
      }
      cola.each(optionValues, function(optionValue, i) {
        var option;
        option = options[i];
        if (cola.util.isSimpleValue(optionValue)) {
          $fly(option).removeAttr("value").text(optionValue);
        } else if (optionValue instanceof cola.Entity) {
          $fly(option).attr("value", optionValue.get("value") || optionValue.get("key")).text(optionValue.get("text") || optionValue.get("name"));
        } else {
          $fly(option).attr("value", optionValue.value || optionValue.key).text(optionValue.text || optionValue.name);
        }
      });
    };

    return _SelectOptionsFeature;

  })(cola._DomFeature);

  _destroyDomBinding = function(node, data) {
    var domBinding;
    domBinding = data[cola.constants.DOM_BINDING_KEY];
    if (domBinding != null) {
      domBinding.destroy();
    }
  };

  cola._DomBinding = (function() {
    function _DomBinding(dom, scope1, features) {
      var f, l, len1;
      this.scope = scope1;
      this.dom = dom;
      this.$dom = $(dom);
      if (features) {
        for (l = 0, len1 = features.length; l < len1; l++) {
          f = features[l];
          this.addFeature(f);
        }
      }
      cola.util.userData(dom, cola.constants.DOM_BINDING_KEY, this);
      cola.util.onNodeDispose(dom, _destroyDomBinding);
    }

    _DomBinding.prototype.destroy = function() {
      var _features;
      _features = this.features;
      if (_features) {
        while (_features.length) {
          this.unbindFeature(_features[_features.length - 1]);
        }
      }
      delete this.dom;
      delete this.$dom;
    };

    _DomBinding.prototype.addFeature = function(feature) {
      if (feature.id == null) {
        feature.id = cola.uniqueId();
      }
      if (typeof feature.init === "function") {
        feature.init(this);
      }
      if (!this.features) {
        this.features = [feature];
      } else {
        this.features.push(feature);
      }
      if (!feature.ignoreBind) {
        this.bindFeature(feature);
      }
    };

    _DomBinding.prototype.removeFeature = function(feature) {
      var _features, i;
      _features = this.features;
      if (_features) {
        i = _features.indexOf(feature);
        if (i > -1) {
          _features.splice(i, 1);
        }
        if (!feature.ignoreBind) {
          this.unbindFeature(feature);
        }
      }
    };

    _DomBinding.prototype.bindFeature = function(feature) {
      var l, len1, path, paths;
      if (!feature._processMessage) {
        return;
      }
      paths = feature.paths;
      if (paths) {
        for (l = 0, len1 = paths.length; l < len1; l++) {
          path = paths[l];
          this.bind(path, feature);
        }
      }
    };

    _DomBinding.prototype.unbindFeature = function(feature) {
      var l, len1, path, paths;
      if (!feature._processMessage) {
        return;
      }
      paths = feature.paths;
      if (paths) {
        for (l = 0, len1 = paths.length; l < len1; l++) {
          path = paths[l];
          this.unbind(path, feature);
        }
      }
    };

    _DomBinding.prototype.bind = function(path, feature) {
      var holder, pipe;
      pipe = {
        path: path,
        _processMessage: (function(_this) {
          return function(bindingPath, path, type, arg) {
            if (!feature.disabled) {
              feature._processMessage(_this, bindingPath, path, type, arg);
              if (feature.disabled) {
                pipe.disabled = true;
              }
            } else {
              pipe.disabled = true;
            }
          };
        })(this)
      };
      this.scope.data.bind(path, pipe);
      holder = this[feature.id];
      if (!holder) {
        this[feature.id] = [pipe];
      } else {
        holder.push(pipe);
      }
    };

    _DomBinding.prototype.unbind = function(path, feature) {
      var holder, i, l, len1, p;
      holder = this[feature.id];
      for (i = l = 0, len1 = holder.length; l < len1; i = ++l) {
        p = holder[i];
        if (p.path === path) {
          holder.splice(i, 1);
          break;
        }
      }
      if (!holder.length) {
        delete this[feature.id];
      }
      this.scope.data.unbind(path, pipe);
    };

    _DomBinding.prototype.refresh = function(force) {
      var f, l, len1, ref;
      if (this.features) {
        ref = this.features;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          f = ref[l];
          f.refresh(this, force);
        }
      }
    };

    _DomBinding.prototype.clone = function(dom, scope) {
      return new this.constructor(dom, scope, this.features, true);
    };

    return _DomBinding;

  })();

  cola._AliasDomBinding = (function(superClass) {
    extend(_AliasDomBinding, superClass);

    function _AliasDomBinding() {
      return _AliasDomBinding.__super__.constructor.apply(this, arguments);
    }

    _AliasDomBinding.prototype.destroy = function() {
      _AliasDomBinding.__super__.destroy.call(this);
      if (this.subScopeCreated) {
        this.scope.destroy();
      }
    };

    return _AliasDomBinding;

  })(cola._DomBinding);

  cola._RepeatDomBinding = (function(superClass) {
    extend(_RepeatDomBinding, superClass);

    function _RepeatDomBinding(dom, scope, feature, clone) {
      var f, headerNode, l, len1, repeatItemDomBinding;
      if (clone) {
        _RepeatDomBinding.__super__.constructor.call(this, dom, scope, feature);
      } else {
        this.scope = scope;
        headerNode = document.createComment("Repeat Head ");
        cola._ignoreNodeRemoved = true;
        dom.parentNode.replaceChild(headerNode, dom);
        cola.util.cacheDom(dom);
        cola._ignoreNodeRemoved = false;
        this.dom = headerNode;
        cola.util.userData(headerNode, cola.constants.DOM_BINDING_KEY, this);
        cola.util.userData(headerNode, cola.constants.REPEAT_TEMPLATE_KEY, dom);
        cola.util.onNodeDispose(headerNode, _destroyDomBinding);
        repeatItemDomBinding = new cola._RepeatItemDomBinding(dom, null);
        repeatItemDomBinding.repeatDomBinding = this;
        repeatItemDomBinding.isTemplate = true;
        if (feature) {
          if (feature instanceof Array) {
            for (l = 0, len1 = feature.length; l < len1; l++) {
              f = feature[l];
              if (f instanceof cola._RepeatFeature) {
                this.addFeature(f);
              } else {
                repeatItemDomBinding.addFeature(f);
              }
            }
          } else {
            if (feature instanceof cola._RepeatFeature) {
              this.addFeature(feature);
            } else {
              repeatItemDomBinding.addFeature(feature);
            }
          }
        }
      }
    }

    _RepeatDomBinding.prototype.destroy = function() {
      _RepeatDomBinding.__super__.destroy.call(this);
      if (this.subScopeCreated) {
        this.scope.destroy();
      }
      delete this.currentItemDom;
    };

    return _RepeatDomBinding;

  })(cola._DomBinding);

  cola._RepeatItemDomBinding = (function(superClass) {
    extend(_RepeatItemDomBinding, superClass);

    function _RepeatItemDomBinding() {
      return _RepeatItemDomBinding.__super__.constructor.apply(this, arguments);
    }

    _RepeatItemDomBinding.prototype.destroy = function() {
      var ref;
      _RepeatItemDomBinding.__super__.destroy.call(this);
      if (!this.isTemplate) {
        if ((ref = this.repeatDomBinding.itemDomBindingMap) != null) {
          delete ref[this.itemId];
        }
      }
    };

    _RepeatItemDomBinding.prototype.clone = function(dom, scope) {
      var cloned;
      cloned = _RepeatItemDomBinding.__super__.clone.call(this, dom, scope);
      cloned.repeatDomBinding = this.repeatDomBinding;
      return cloned;
    };

    _RepeatItemDomBinding.prototype.bind = function(path, feature) {
      if (this.isTemplate) {
        return;
      }
      return _RepeatItemDomBinding.__super__.bind.call(this, path, feature);
    };

    _RepeatItemDomBinding.prototype.bindFeature = function(feature) {
      if (this.isTemplate) {
        return;
      }
      return _RepeatItemDomBinding.__super__.bindFeature.call(this, feature);
    };

    _RepeatItemDomBinding.prototype.processDataMessage = function(path, type, arg) {
      if (!this.isTemplate) {
        this.scope.data._processMessage("**", path, type, arg);
      }
    };

    _RepeatItemDomBinding.prototype.refresh = function() {
      if (this.isTemplate) {
        return;
      }
      return _RepeatItemDomBinding.__super__.refresh.call(this);
    };

    _RepeatItemDomBinding.prototype.remove = function() {
      if (!this.isTemplate) {
        this.$dom.remove();
      }
    };

    return _RepeatItemDomBinding;

  })(cola._AliasDomBinding);

  IGNORE_NODES = ["SCRIPT", "STYLE", "META", "TEMPLATE"];

  ALIAS_REGEXP = new RegExp("\\$default", "g");

  cola._mainInitFuncs = [];

  cola._rootFunc = function() {
    var arg, fn, init, l, len1, model, modelName, targetDom;
    fn = null;
    targetDom = null;
    modelName = null;
    for (l = 0, len1 = arguments.length; l < len1; l++) {
      arg = arguments[l];
      if (typeof arg === "function") {
        fn = arg;
      } else if (typeof arg === "string") {
        modelName = arg;
      } else if (arg instanceof cola.Scope) {
        model = arg;
      } else if ((arg != null ? arg.nodeType : void 0) || typeof arg === "object" && arg.length > 0) {
        targetDom = arg;
      }
    }
    init = function(dom, model, param) {
      var len2, o, oldScope, viewDoms;
      oldScope = cola.currentScope;
      cola.currentScope = model;
      try {
        if (typeof fn === "function") {
          fn(model, param);
        }
        if (!dom) {
          viewDoms = document.getElementsByClassName(cola.constants.VIEW_CLASS);
          if (viewDoms != null ? viewDoms.length : void 0) {
            dom = viewDoms;
          }
        }
        if (dom == null) {
          dom = document.body;
        }
        if (dom.length) {
          doms = dom;
          for (o = 0, len2 = doms.length; o < len2; o++) {
            dom = doms[o];
            cola._renderDomTemplate(dom, model);
          }
        } else {
          cola._renderDomTemplate(dom, model);
        }
      } finally {
        cola.currentScope = oldScope;
      }
    };
    if (cola._suspendedInitFuncs) {
      cola._suspendedInitFuncs.push(init);
    } else {
      if (!model) {
        if (modelName == null) {
          modelName = cola.constants.DEFAULT_PATH;
        }
        model = cola.model(modelName);
        if (model == null) {
          model = new cola.Model(modelName);
        }
      }
      if (cola._mainInitFuncs) {
        cola._mainInitFuncs.push({
          targetDom: targetDom,
          model: model,
          init: init
        });
      } else {
        init(targetDom, model);
      }
    }
    return cola;
  };

  $(function() {
    var initFunc, initFuncs, l, len1;
    initFuncs = cola._mainInitFuncs;
    delete cola._mainInitFuncs;
    for (l = 0, len1 = initFuncs.length; l < len1; l++) {
      initFunc = initFuncs[l];
      initFunc.init(initFunc.targetDom, initFunc.model);
    }
    if (cola.getListeners("ready")) {
      cola.fire("ready", cola);
      cola.off("ready");
    }
  });

  cola._userDomCompiler = {
    $: []
  };

  cola.xRender = function(template, model, context) {
    var child, div, documentFragment, dom, l, len1, len2, len3, next, node, o, oldScope, processor, q, ref, ref1;
    if (!template) {
      return;
    }
    oldScope = cola.currentScope;
    model = model || oldScope;
    if (template.nodeType) {
      dom = template;
    } else if (typeof template === "string") {
      documentFragment = document.createDocumentFragment();
      div = document.createElement("div");
      div.innerHTML = template;
      child = div.firstChild;
      while (child) {
        next = child.nextSibling;
        documentFragment.appendChild(child);
        child = next;
      }
    } else {
      cola.currentScope = model;
      try {
        if (context == null) {
          context = {};
        }
        if (template instanceof Array) {
          documentFragment = document.createDocumentFragment();
          for (l = 0, len1 = template.length; l < len1; l++) {
            node = template[l];
            child = null;
            ref = cola.xRender.nodeProcessors;
            for (o = 0, len2 = ref.length; o < len2; o++) {
              processor = ref[o];
              child = processor(node, context);
              if (child) {
                break;
              }
            }
            if (child == null) {
              child = $.xCreate(node, context);
            }
            if (child) {
              documentFragment.appendChild(child);
            }
          }
        } else {
          ref1 = cola.xRender.nodeProcessors;
          for (q = 0, len3 = ref1.length; q < len3; q++) {
            processor = ref1[q];
            dom = processor(template, context);
            if (dom) {
              break;
            }
          }
          if (!dom) {
            dom = $.xCreate(template, context);
          }
        }
      } finally {
        cola.currentScope = oldScope;
      }
    }
    if (dom) {
      cola._renderDomTemplate(dom, model, context);
    } else if (documentFragment) {
      cola._renderDomTemplate(documentFragment, model, context);
      if (documentFragment.firstChild === documentFragment.lastChild) {
        dom = documentFragment.firstChild;
      } else {
        dom = documentFragment;
      }
    }
    return dom;
  };

  cola.xRender.nodeProcessors = [];

  cola._renderDomTemplate = function(dom, scope, context) {
    if (context == null) {
      context = {};
    }
    _doRenderDomTemplate(dom, scope, context);
  };

  _doRenderDomTemplate = function(dom, scope, context) {
    var attr, attrName, attrValue, bindingExpr, bindingType, builder, child, childContext, customDomCompiler, defaultPath, domBinding, f, feature, features, initializer, initializers, k, l, len1, len2, len3, len4, len5, len6, o, parts, q, r, ref, ref1, removeAttr, removeAttrs, result, tailDom, u, v, x;
    if (dom.nodeType === 8) {
      return dom;
    }
    if (dom.nodeType === 1 && (dom.hasAttribute(cola.constants.IGNORE_DIRECTIVE) || dom.className.indexOf(cola.constants.IGNORE_DIRECTIVE) >= 0)) {
      return dom;
    }
    if (IGNORE_NODES.indexOf(dom.nodeName) > -1) {
      return dom;
    }
    if (dom.nodeType === 3) {
      bindingExpr = dom.nodeValue;
      parts = cola._compileText(bindingExpr);
      if (parts != null ? parts.length : void 0) {
        buildContent(parts, dom, scope);
      }
      return dom;
    } else if (dom.nodeType === 11) {
      child = dom.firstChild;
      while (child) {
        child = _doRenderDomTemplate(child, scope, context);
        child = child.nextSibling;
      }
      return dom;
    }
    initializers = null;
    features = null;
    removeAttrs = null;
    bindingExpr = dom.getAttribute("c-repeat");
    if (bindingExpr) {
      bindingExpr = bindingExpr.replace(ALIAS_REGEXP, context.defaultPath);
      bindingType = "repeat";
      feature = cola._domFeatureBuilder[bindingType](bindingExpr, bindingType, dom);
      if (features == null) {
        features = [];
      }
      features.push(feature);
      dom.removeAttribute("c-repeat");
    } else {
      bindingExpr = dom.getAttribute("c-alias");
      if (bindingExpr) {
        bindingExpr = bindingExpr.replace(ALIAS_REGEXP, context.defaultPath);
        bindingType = "alias";
        feature = cola._domFeatureBuilder[bindingType](bindingExpr, bindingType, dom);
        if (features == null) {
          features = [];
        }
        features.push(feature);
        dom.removeAttribute("c-alias");
      }
    }
    ref = cola._userDomCompiler.$;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      customDomCompiler = ref[l];
      result = customDomCompiler(scope, dom, null, context);
      if (result) {
        if (result instanceof cola._BindingFeature) {
          features.push(result);
        }
        if (typeof result === "function") {
          if (initializers == null) {
            initializers = [];
          }
          initializers.push(result);
        }
      }
    }
    ref1 = dom.attributes;
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      attr = ref1[o];
      attrName = attr.name;
      if (attrName.substring(0, 2) === "c-") {
        if (removeAttrs == null) {
          removeAttrs = [];
        }
        removeAttrs.push(attrName);
        attrValue = attr.value;
        if (attrValue && context.defaultPath) {
          attrValue = attrValue.replace(ALIAS_REGEXP, context.defaultPath);
        }
        if (attrValue) {
          attrName = attrName.substring(2);
          customDomCompiler = cola._userDomCompiler[attrName];
          if (customDomCompiler) {
            result = customDomCompiler(scope, dom, attr, context);
            if (result) {
              if (result instanceof cola._BindingFeature) {
                features.push(result);
              } else if (result instanceof Array) {
                for (q = 0, len3 = result.length; q < len3; q++) {
                  f = result[q];
                  features.push(f);
                }
              } else if (typeof result === "function") {
                if (initializers == null) {
                  initializers = [];
                }
                initializers.push(result);
              }
            }
          } else {
            if (attrName.indexOf("on") === 0) {
              feature = cola._domFeatureBuilder.event(attrValue, attrName, dom);
            } else {
              builder = cola._domFeatureBuilder[attrName];
              feature = (builder || cola._domFeatureBuilder["$"]).call(cola._domFeatureBuilder, attrValue, attrName, dom);
            }
            if (feature) {
              if (features == null) {
                features = [];
              }
              if (feature instanceof cola._BindingFeature) {
                features.push(feature);
              } else if (feature instanceof Array) {
                for (r = 0, len4 = feature.length; r < len4; r++) {
                  f = feature[r];
                  features.push(f);
                }
              }
            }
          }
        }
      }
    }
    if (removeAttrs) {
      for (u = 0, len5 = removeAttrs.length; u < len5; u++) {
        removeAttr = removeAttrs[u];
        dom.removeAttribute(removeAttr);
      }
    }
    if (features != null ? features.length : void 0) {
      domBinding = cola._domBindingBuilder[bindingType || "$"](dom, scope, features);
      if (scope.data.alias) {
        defaultPath = scope.data.alias;
      }
    }
    if (!cola.util.userData(dom, cola.constants.DOM_SKIP_CHILDREN)) {
      childContext = {};
      for (k in context) {
        v = context[k];
        childContext[k] = v;
      }
      childContext.inRepeatTemplate = context.inRepeatTemplate || bindingType === "repeat";
      if (defaultPath) {
        childContext.defaultPath = defaultPath;
      }
      child = dom.firstChild;
      while (child) {
        child = _doRenderDomTemplate(child, scope, childContext);
        child = child.nextSibling;
      }
    } else {
      cola.util.removeUserData(dom, cola.constants.DOM_SKIP_CHILDREN);
    }
    if (initializers) {
      if (context.inRepeatTemplate || bindingType === "repeat") {
        cola.util.userData(dom, cola.constants.DOM_INITIALIZER_KEY, initializers);
      } else {
        for (x = 0, len6 = initializers.length; x < len6; x++) {
          initializer = initializers[x];
          initializer(scope, dom);
        }
      }
    }
    if (features != null ? features.length : void 0) {
      if (!context.inRepeatTemplate) {
        domBinding.refresh(true);
      }
      if (domBinding instanceof cola._RepeatDomBinding) {
        tailDom = cola.util.userData(domBinding.dom, cola.constants.REPEAT_TAIL_KEY);
        dom = tailDom || domBinding.dom;
      }
    }
    return dom;
  };

  createContentPart = function(part, scope) {
    var domBinding, expression, feature, textNode;
    if (part instanceof cola.Expression) {
      expression = part;
      textNode = document.createElement("span");
      feature = new cola._DomAttrFeature(expression, "text");
      domBinding = new cola._DomBinding(textNode, scope, feature);
      domBinding.refresh();
    } else {
      textNode = document.createTextNode(part);
    }
    return textNode;
  };

  buildContent = function(parts, dom, scope) {
    var childNode, l, len1, part, partNode;
    if (parts.length === 1) {
      childNode = createContentPart(parts[0], scope);
    } else {
      childNode = document.createDocumentFragment();
      for (l = 0, len1 = parts.length; l < len1; l++) {
        part = parts[l];
        partNode = createContentPart(part, scope);
        childNode.appendChild(partNode);
      }
    }
    dom.parentNode.replaceChild(childNode, dom);
  };

  cola._domBindingBuilder = {
    $: function(dom, scope, features) {
      return new cola._DomBinding(dom, scope, features);
    },
    repeat: function(dom, scope, features) {
      var domBinding;
      domBinding = new cola._RepeatDomBinding(dom, scope, features);
      scope = domBinding.scope;
      return domBinding;
    },
    alias: function(dom, scope, features) {
      var domBinding;
      domBinding = new cola._AliasDomBinding(dom, scope, features);
      scope = domBinding.scope;
      return domBinding;
    }
  };

  cola._domFeatureBuilder = {
    $: function(attrValue, attrName, dom) {
      var expression, feature;
      expression = cola._compileExpression(attrValue);
      if (expression) {
        if (attrName === "display") {
          feature = new cola._DisplayFeature(expression);
        } else if (attrName === "options" && dom.nodeName === "SELECT") {
          feature = new cola._SelectOptionsFeature(expression);
        } else {
          feature = new cola._DomAttrFeature(expression, attrName);
        }
      }
      return feature;
    },
    repeat: function(attrValue) {
      var expression;
      expression = cola._compileExpression(attrValue, "repeat");
      if (expression) {
        return new cola._RepeatFeature(expression);
      } else {

      }
    },
    alias: function(attrValue) {
      var expression;
      expression = cola._compileExpression(attrValue, "alias");
      if (expression) {
        return new cola._AliasFeature(expression);
      } else {

      }
    },
    bind: function(attrValue, attrName, dom) {
      var expression, feature, nodeName, type;
      expression = cola._compileExpression(attrValue);
      nodeName = dom.nodeName;
      if (nodeName === "INPUT") {
        type = dom.type;
        if (type === "checkbox") {
          feature = new cola._CheckboxFeature(expression);
        } else if (type === "radio") {
          feature = new cola._RadioFeature(expression);
        } else {
          feature = new cola._TextBoxFeature(expression);
        }
      } else if (nodeName === "SELECT") {
        feature = new cola._SelectFeature(expression);
      } else if (nodeName === "TEXTAREA") {
        feature = new cola._TextBoxFeature(expression);
      } else {
        feature = new cola._DomAttrFeature(expression, "text");
      }
      return feature;
    },
    style: function(attrValue) {
      var expression, feature, features, style, styleExpr, styleProp;
      if (!attrValue) {
        return false;
      }
      style = cola.util.parseStyleLikeString(attrValue);
      features = [];
      for (styleProp in style) {
        styleExpr = style[styleProp];
        expression = cola._compileExpression(styleExpr);
        if (expression) {
          feature = new cola._DomStylePropFeature(expression, styleProp);
          features.push(feature);
        }
      }
      return features;
    },
    classname: function(attrValue) {
      var classConfig, classExpr, className, expression, feature, features;
      if (!attrValue) {
        return false;
      }
      features = [];
      try {
        expression = cola._compileExpression(attrValue);
        if (expression) {
          feature = new cola._DomClassFeature(expression);
          features.push(feature);
        }
      } catch (_error) {
        classConfig = cola.util.parseStyleLikeString(attrValue);
        for (className in classConfig) {
          classExpr = classConfig[className];
          expression = cola._compileExpression(classExpr);
          if (expression) {
            feature = new cola._DomToggleClassFeature(expression, className);
            features.push(feature);
          }
        }
      }
      return features;
    },
    "class": function() {
      return this.classname.apply(this, arguments);
    },
    resource: function(attrValue, attrName, dom) {
      attrValue = cola.util.trim(attrValue);
      if (attrValue) {
        $fly(dom).text(cola.resource(attrValue));
      }
    },
    watch: function(attrValue) {
      var action, feature, i, l, len1, path, pathStr, paths, ref;
      i = attrValue.indexOf(" on ");
      if (i > 0) {
        action = attrValue.substring(0, i);
        pathStr = attrValue.substring(i + 4);
        if (pathStr) {
          paths = [];
          ref = pathStr.split(",");
          for (l = 0, len1 = ref.length; l < len1; l++) {
            path = ref[l];
            path = cola.util.trim(path);
            if (path) {
              paths.push(path);
            }
          }
          if (paths.length) {
            feature = new cola._WatchFeature(action, paths);
          }
        }
      }
      if (!feature) {
        throw new cola.Exception("\"" + expr + "\" is not a valid watch expression.");
      }
      return feature;
    },
    event: function(attrValue, attrName) {
      var expression, feature;
      expression = cola._compileExpression(attrValue);
      if (expression) {
        feature = new cola._EventFeature(expression, attrName.substring(2));
      }
      return feature;
    }
  };

}).call(this);

/*! Cola UI - 0.8.5
 * Copyright (c) 2002-2016 BSTEK Corp. All rights reserved.
 *
 * This file is dual-licensed under the AGPLv3 (http://www.gnu.org/licenses/agpl-3.0.html)
 * and BSDN commercial (http://www.bsdn.org/licenses) licenses.
 *
 * If you are unsure which license is appropriate for your use, please contact the sales department
 * at http://www.bstek.com/contact.
 */
(function() {
  var ACTIVE_PINCH_REG, ACTIVE_ROTATE_REG, ALIAS_REGEXP, BLANK_PATH, DEFAULT_DATE_DISPLAY_FORMAT, DEFAULT_DATE_INPUT_FORMAT, DEFAULT_TIME_DISPLAY_FORMAT, DEFAULT_TIME_INPUT_FORMAT, DropBox, LIST_SIZE_PREFIXS, PAN_VERTICAL_events, SAFE_PULL_EFFECT, SAFE_SLIDE_EFFECT, SLIDE_ANIMATION_SPEED, SWIPE_VERTICAL_events, TEMP_TEMPLATE, WIDGET_TAGS_REGISTRY, _columnsSetter, _compileWidgetAttribute, _compileWidgetDom, _createGroupArray, _destroyRenderableElement, _extendWidget, _findWidgetConfig, _getEntityId, _pageCodeMap, _pagesItems, _removeTranslateStyle, containerEmptyChildren, currentDate, currentHours, currentMinutes, currentMonth, currentSeconds, currentYear, dateTimeSlotConfigs, dateTypeConfig, dropdownDialogMargin, emptyRadioGroupItems, isIE11, now, oldErrorTemplate, slotAttributeGetter, slotAttributeSetter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (function() {
    var escape, isStyleFuncSupported;
    escape = function(text) {
      return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };
    isStyleFuncSupported = !!CSSStyleDeclaration.prototype.getPropertyValue;
    if (!isStyleFuncSupported) {
      CSSStyleDeclaration.prototype.getPropertyValue = function(a) {
        return this.getAttribute(a);
      };
      CSSStyleDeclaration.prototype.setProperty = function(styleName, value, priority) {
        var rule;
        this.setAttribute(styleName, value);
        priority = typeof priority !== 'undefined' ? priority : '';
        if (priority !== '') {
          rule = new RegExp(escape(styleName) + '\\s*:\\s*' + escape(value)(+'(\\s*;)?', 'gmi'));
          return this.cssText = this.cssText.replace(rule, styleName + ': ' + value + ' !' + priority + ';');
        }
      };
      CSSStyleDeclaration.prototype.removeProperty = function(a) {
        return this.removeAttribute(a);
      };
      return CSSStyleDeclaration.prototype.getPropertyPriority = function(styleName) {
        var rule;
        rule = new RegExp(escape(styleName) + '\\s*:\\s*[^\\s]*\\s*!important(\\s*;)?', 'gmi');
        if (rule.test(this.cssText)) {
          return 'important';
        } else {
          return '';
        }
      };
    }
  })();

  cola.util.addClass = function(dom, value, continuous) {
    var className;
    if (!continuous) {
      $(dom).addClass(value);
      return cola.util;
    }
    if (dom.nodeType === 1) {
      className = dom.className ? (" " + dom.className + " ").replace(cola.constants.CLASS_REG, " ") : " ";
      if (className.indexOf(" " + value + " ") < 0) {
        className += value + " ";
        dom.className = $.trim(className);
      }
    }
    return cola.util;
  };

  cola.util.removeClass = function(dom, value, continuous) {
    var className;
    if (!continuous) {
      $(dom).removeClass(value);
      return cola.util;
    }
    if (dom.nodeType === 1) {
      className = dom.className ? (" " + dom.className + " ").replace(cola.constants.CLASS_REG, " ") : " ";
      if (className.indexOf(" " + value + " ") >= 0) {
        className = className.replace(" " + value + " ", " ");
        dom.className = $.trim(className);
      }
    }
    return cola.util;
  };

  cola.util.toggleClass = function(dom, value, stateVal, continuous) {
    if (!continuous) {
      $(dom).toggleClass(value, !!stateVal);
      return;
    }
    if (dom.nodeType === 1) {
      if (!!stateVal) {
        this._addClass(dom, value, true);
      } else {
        this._removeClass(dom, value, true);
      }
    }
    return cola.util;
  };

  cola.util.hasClass = function(dom, className) {
    var domClassName, l, len1, name, names;
    names = className.split(/\s+/g);
    domClassName = dom.className ? (" " + dom.className + " ").replace(cola.constants.CLASS_REG, " ") : " ";
    for (l = 0, len1 = names.length; l < len1; l++) {
      name = names[l];
      if (domClassName.indexOf(" " + name + " ") < 0) {
        return false;
      }
    }
    return true;
  };

  cola.util.style = function(dom, styleName, value, priority) {
    var style;
    style = dom.style;
    if (typeof styleName !== 'undefined') {
      if (typeof value !== 'undefined') {
        priority = typeof priority !== 'undefined' ? priority : '';
        return style.setProperty(styleName, value, priority);
      } else {
        return style.getPropertyValue(styleName);
      }
    } else {
      return style;
    }
  };

  cola.util.getTextChildData = function(dom) {
    var child;
    child = dom.firstChild;
    while (child) {
      if (child.nodeType === 3) {
        return child.textContent;
      }
      child = child.nextSibling;
    }
    return null;
  };

  cola.util.eachNodeChild = function(node, fn) {
    var child;
    if (!node || !fn) {
      return cola.util;
    }
    child = node.firstChild;
    while (child) {
      if (fn(child) === false) {
        break;
      }
      child = child.nextSibling;
    }
    return cola.util;
  };

  cola.util.hasContent = function(dom) {
    var child;
    child = dom.firstChild;
    while (child) {
      if (child.nodeType === 3 || child.nodeType === 1) {
        return true;
      }
      child = child.nextSibling;
    }
    return false;
  };

  cola.util.getScrollerRender = function(element) {
    var helperElem, perspectiveProperty, transformProperty;
    helperElem = document.createElement("div");
    perspectiveProperty = cola.Fx.perspectiveProperty;
    transformProperty = cola.Fx.transformProperty;
    if (helperElem.style[perspectiveProperty] !== void 0) {
      return function(left, top, zoom) {
        element.style[transformProperty] = 'translate3d(' + (-left) + 'px,' + (-top) + 'px,0) scale(' + zoom + ')';
      };
    } else if (helperElem.style[transformProperty] !== void 0) {
      return function(left, top, zoom) {
        element.style[transformProperty] = 'translate(' + (-left) + 'px,' + (-top) + 'px) scale(' + zoom + ')';
      };
    } else {
      return function(left, top, zoom) {
        element.style.marginLeft = left ? (-left / zoom) + 'px' : '';
        element.style.marginTop = top ? (-top / zoom) + 'px' : '';
        element.style.zoom = zoom || '';
      };
    }
  };

  cola.util.getType = (function() {
    var classToType, l, len1, name, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (l = 0, len1 = ref.length; l < len1; l++) {
      name = ref[l];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  cola.util.typeOf = function(obj, type) {
    return cola.util.getType(obj) === type;
  };

  cola.util.getDomRect = function(dom) {
    var rect;
    rect = dom.getBoundingClientRect();
    if (isNaN(rect.height)) {
      rect.height = rect.bottom - rect.top;
    }
    if (isNaN(rect.width)) {
      rect.width = rect.right - rect.left;
    }
    return rect;
  };

  (function() {
    var cancelTranslateElement, cssPrefix, docStyle, engine, getTranslate, helperElem, perspectiveProperty, transformProperty, transformStyleName, transitionEndProperty, transitionProperty, transitionStyleName, translate3d, translateElement, vendorPrefix;
    docStyle = window.document.documentElement.style;
    translate3d = false;
    if (window.opera && Object.prototype.toString.call(opera) === '[object Opera]') {
      engine = 'presto';
    } else if ('MozAppearance' in docStyle) {
      engine = 'gecko';
    } else if ('WebkitAppearance' in docStyle) {
      engine = 'webkit';
    } else if (typeof navigator.cpuClass === 'string') {
      engine = 'trident';
    }
    vendorPrefix = {
      trident: 'ms',
      gecko: 'Moz',
      webkit: 'Webkit',
      presto: 'O'
    }[engine];
    cssPrefix = {
      trident: '-ms-',
      gecko: '-moz-',
      webkit: '-webkit-',
      presto: '-o-'
    }[engine];
    helperElem = document.createElement("div");
    perspectiveProperty = vendorPrefix + "Perspective";
    transformProperty = vendorPrefix + "Transform";
    transformStyleName = cssPrefix + "transform";
    transitionProperty = vendorPrefix + "Transition";
    transitionStyleName = cssPrefix + "transition";
    transitionEndProperty = vendorPrefix.toLowerCase() + "TransitionEnd";
    if (helperElem.style[perspectiveProperty] !== void 0) {
      translate3d = true;
    }
    getTranslate = function(element) {
      var matches, result, transform;
      result = {
        left: 0,
        top: 0
      };
      if (element === null || element.style === null) {
        return result;
      }
      transform = element.style[transformProperty];
      matches = /translate\(\s*(-?\d+(\.?\d+?)?)px,\s*(-?\d+(\.\d+)?)px\)\s*translateZ\(0px\)/g.exec(transform);
      if (matches) {
        result.left = +matches[1];
        result.top = +matches[3];
      }
      return result;
    };
    cancelTranslateElement = function(element) {
      var transformValue;
      if (element === null || element.style === null) {
        return;
      }
      transformValue = element.style[transformProperty];
      if (transformValue) {
        transformValue = transformValue.replace(/translate\(\s*(-?\d+(\.?\d+?)?)px,\s*(-?\d+(\.\d+)?)px\)\s*translateZ\(0px\)/g, "");
        return element.style[transformProperty] = transformValue;
      }
    };
    translateElement = function(element, x, y) {
      var translate, value;
      if (x === null && y === null) {
        return;
      }
      if (element === null || element.style === null) {
        return;
      }
      if (!element.style[transformProperty] && x === 0 && y === 0) {
        return;
      }
      if (x === null || y === null) {
        translate = getTranslate(element);
        if (x == null) {
          x = translate.left;
        }
        if (y == null) {
          y = translate.top;
        }
      }
      cancelTranslateElement(element);
      value = ' translate(' + (x ? x + 'px' : '0px') + ',' + (y ? y + 'px' : '0px') + ')';
      if (translate3d) {
        value += ' translateZ(0px)';
      }
      element.style[transformProperty] += value;
      return element;
    };
    return cola.Fx = {
      transitionEndProperty: transitionEndProperty,
      translate3d: translate3d,
      transformProperty: transformProperty,
      transformStyleName: transformStyleName,
      transitionProperty: transitionProperty,
      transitionStyleName: transitionStyleName,
      perspectiveProperty: perspectiveProperty,
      getElementTranslate: getTranslate,
      translateElement: translateElement,
      cancelTranslateElement: cancelTranslateElement
    };
  })();

  $.xCreate.templateProcessors.push(function(template) {
    var dom;
    if (template instanceof cola.Widget) {
      dom = template.getDom();
      dom.setAttribute(cola.constants.IGNORE_DIRECTIVE, "");
      return dom;
    }
  });

  cola.xRender.nodeProcessors.push(function(node, context) {
    var dom, widget;
    if (node instanceof cola.Widget) {
      widget = node;
    } else if (node.$type) {
      widget = cola.widget(node, context.namespace);
    }
    if (widget) {
      dom = widget.getDom();
      dom.setAttribute(cola.constants.IGNORE_DIRECTIVE, "");
    }
    return dom;
  });

  cola.Model.prototype.widgetConfig = function(id, config) {
    var k, ref, v;
    if (arguments.length === 1) {
      if (typeof id === "string") {
        return (ref = this._widgetConfig) != null ? ref[id] : void 0;
      } else {
        config = id;
        for (k in config) {
          v = config[k];
          this.widgetConfig(k, v);
        }
      }
    } else {
      if (this._widgetConfig == null) {
        this._widgetConfig = {};
      }
      this._widgetConfig[id] = config;
    }
  };

  ALIAS_REGEXP = new RegExp("\\$default", "g");

  _findWidgetConfig = function(scope, name) {
    var ref, widgetConfig;
    while (scope) {
      widgetConfig = (ref = scope._widgetConfig) != null ? ref[name] : void 0;
      if (widgetConfig) {
        break;
      }
      scope = scope.parent;
    }
    return widgetConfig;
  };

  _compileWidgetDom = function(dom, widgetType) {
    var attr, attrName, config, l, len1, len2, n, prop, ref, removeAttrs;
    if (!widgetType.attributes._inited || !widgetType.events._inited) {
      cola.preprocessClass(widgetType);
    }
    config = {
      $constr: widgetType
    };
    removeAttrs = null;
    ref = dom.attributes;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      attr = ref[l];
      attrName = attr.name;
      if (attrName.indexOf("c-") === 0) {
        prop = attrName.slice(2);
        if (widgetType.attributes.$has(prop) || widgetType.events.$has(prop)) {
          config[prop] = cola._compileExpression(attr.value);
          if (removeAttrs == null) {
            removeAttrs = [];
          }
          removeAttrs.push(attrName);
        }
      } else {
        prop = attrName;
        if (widgetType.attributes.$has(prop) || widgetType.events.$has(prop)) {
          config[prop] = attr.value;
        }
      }
    }
    if (removeAttrs) {
      for (n = 0, len2 = removeAttrs.length; n < len2; n++) {
        attr = removeAttrs[n];
        dom.removeAttribute(attr);
      }
    }
    return config;
  };

  _compileWidgetAttribute = function(scope, dom, context) {
    var config, importConfig, importName, importNames, ip, iv, l, len1, p, v, widgetConfigStr;
    widgetConfigStr = dom.getAttribute("c-widget");
    if (widgetConfigStr) {
      dom.removeAttribute("c-widget");
      if (context.defaultPath) {
        widgetConfigStr = widgetConfigStr.replace(ALIAS_REGEXP, context.defaultPath);
      }
      config = cola.util.parseStyleLikeString(widgetConfigStr, "$type");
      if (config) {
        importNames = null;
        for (p in config) {
          v = config[p];
          importName = null;
          if (p.charCodeAt(0) === 35) {
            importName = p.substring(1);
          } else if (p === "$type" && typeof v === "string" && v.charCodeAt(0) === 35) {
            importName = v.substring(1);
          }
          if (importName) {
            delete config[p];
            if (importNames == null) {
              importNames = [];
            }
            importNames.push(importName);
          }
        }
        if (importNames) {
          for (l = 0, len1 = importNames.length; l < len1; l++) {
            importName = importNames[l];
            importConfig = _findWidgetConfig(scope, importName);
            if (importConfig) {
              for (ip in importConfig) {
                iv = importConfig[ip];
                config[ip] = iv;
              }
            }
          }
        }
      }
    }
    return config;
  };

  cola._userDomCompiler.$.push(function(scope, dom, attr, context) {
    var config, constr, jsonConfig, k, parentWidget, ref, tagName, v, widgetType;
    if (cola.util.userData(dom, cola.constants.DOM_ELEMENT_KEY)) {
      return null;
    }
    if (dom.nodeType !== 1) {
      return null;
    }
    if (dom.id) {
      jsonConfig = _findWidgetConfig(scope, dom.id);
    }
    parentWidget = context.parentWidget;
    tagName = dom.tagName;
    widgetType = parentWidget != null ? (ref = parentWidget.childTagNames) != null ? ref[tagName] : void 0 : void 0;
    if (widgetType == null) {
      widgetType = WIDGET_TAGS_REGISTRY[tagName];
    }
    if (widgetType) {
      config = _compileWidgetDom(dom, widgetType);
    } else {
      config = _compileWidgetAttribute(scope, dom, context);
    }
    if (!(config || jsonConfig)) {
      return null;
    }
    if (config == null) {
      config = {};
    }
    if (jsonConfig) {
      for (k in jsonConfig) {
        v = jsonConfig[k];
        if (!config.hasOwnProperty(k)) {
          config[k] = v;
        }
      }
    }
    if (typeof config === "string") {
      config = {
        $type: config
      };
    }
    if (config.$constr instanceof Function) {
      constr = config.$constr;
    } else {
      constr = cola.resolveType((parentWidget != null ? parentWidget.CHILDREN_TYPE_NAMESPACE : void 0) || "widget", config, cola.Widget);
    }
    config.$constr = context.parentWidget = constr;
    if (cola.util.isCompatibleType(cola.AbstractLayer, constr) && config.lazyRender) {
      cola.util.userData(dom, cola.constants.DOM_SKIP_CHILDREN, true);
    }
    return function(scope, dom) {
      var oldScope, widget;
      context.parentWidget = parentWidget;
      config.dom = dom;
      oldScope = cola.currentScope;
      cola.currentScope = scope;
      try {
        widget = cola.widget(config);
        return widget;
      } finally {
        cola.currentScope = oldScope;
      }
    };
  });

  cola.registerTypeResolver("widget", function(config) {
    if (!config) {
      return;
    }
    if (config.$constructor && cola.util.isSuperClass(cola.Widget, config.$constructor)) {
      return config.$constructor;
    }
    if (config.$type) {
      return cola[cola.util.capitalize(config.$type)];
    }
  });

  cola.registerType("widget", "_default", cola.Widget);

  cola.widget = function(config, namespace) {
    var c, constr, e, ele, group, l, len1, len2, n, widget;
    if (!config) {
      return null;
    }
    if (typeof config === "string") {
      ele = window[config];
      if (!ele) {
        return null;
      }
      if (ele.nodeType) {
        widget = cola.util.userData(ele, cola.constants.DOM_ELEMENT_KEY);
        if (widget instanceof cola.Widget) {
          return widget;
        } else {
          return null;
        }
      } else {
        group = [];
        for (l = 0, len1 = ele.length; l < len1; l++) {
          e = ele[l];
          widget = cola.util.userData(e, cola.constants.DOM_ELEMENT_KEY);
          if (widget instanceof cola.Widget) {
            group.push(widget);
          }
        }
        if (group.length) {
          return cola.Element.createGroup(group);
        } else {
          return null;
        }
      }
    } else {
      if (config instanceof Array) {
        group = [];
        for (n = 0, len2 = config.length; n < len2; n++) {
          c = config[n];
          group.push(cola.widget(c));
        }
        return cola.Element.createGroup(group);
      } else if (config.nodeType === 1) {
        widget = cola.util.userData(config, cola.constants.DOM_ELEMENT_KEY);
        if (widget instanceof cola.Widget) {
          return widget;
        } else {
          return null;
        }
      } else {
        constr = config.$constr || cola.resolveType(namespace || "widget", config, cola.Widget);
        return new constr(config);
      }
    }
  };

  cola.findWidget = function(dom, type) {
    var widget;
    if (type && typeof type === "string") {
      type = cola.resolveType("widget", {
        $type: type
      });
      if (!type) {
        return null;
      }
    }
    while (dom) {
      widget = cola.util.userData(dom, cola.constants.DOM_ELEMENT_KEY);
      if (widget) {
        if (!type || widget instanceof type) {
          return widget;
        }
      }
      dom = dom.parentNode;
    }
    return null;
  };


  /*
  User Widget
   */

  WIDGET_TAGS_REGISTRY = {};

  _extendWidget = function(superCls, definition) {
    var cls, def, prop, ref, template;
    cls = function(config) {
      if (!cls.attributes._inited || !cls.events._inited) {
        cola.preprocessClass(cls);
      }
      if (definition.create) {
        this.on("create", definition.create);
      }
      if (definition.destroy) {
        this.on("destroy", definition.destroy);
      }
      if (definition.initDom) {
        this.on("initDom", (function(_this) {
          return function(self, arg) {
            return _this.initDom(arg.dom);
          };
        })(this));
      }
      if (definition.refreshDom) {
        this.on("refreshDom", (function(_this) {
          return function(self, arg) {
            return _this.refreshDom(arg.dom);
          };
        })(this));
      }
      this.on("attributeChange", (function(_this) {
        return function(self, arg) {
          var attr;
          attr = arg.attribute;
          if (typeof attr === "string" && _this.constructor.attributes.$has(attr)) {
            _this._widgetModel.data._onDataMessage(attr.split("."), cola.constants.MESSAGE_PROPERTY_CHANGE, {});
          }
        };
      })(this));
      this._widgetModel = new cola.WidgetModel(this, (config != null ? config.scope : void 0) || cola.currentScope);
      cls.__super__.constructor.call(this, config);
    };
    extend(cls, superCls);
    cls.tagName = ((ref = definition.tagName) != null ? ref.toUpperCase() : void 0) || "";
    if (definition.parentWidget) {
      cls.parentWidget = definition.parentWidget;
    }
    cls.attributes = definition.attributes || {};
    cls.attributes.widgetModel = {
      readOnly: true,
      getter: function() {
        return this._widgetModel;
      }
    };
    cls.attributes.template = {
      readOnlyAfterCreate: true
    };
    if (definition.events) {
      cls.events = definition.events;
    }
    template = definition.template;
    if (template) {
      cls.attributes.template = {
        defaultValue: template
      };
    }
    cls.prototype._createDom = function() {
      var dom;
      if (this._template) {
        dom = cola.xRender(this._template || {}, this._widgetModel);
        this._domCreated = true;
        return dom;
      } else {
        return superCls.prototype._createDom.apply(this);
      }
    };
    cls.prototype._initDom = function(dom) {
      var attr, attrName, cssName, l, len1, ref1, templateDom;
      superCls.prototype._initDom.call(this, dom);
      if (this._template && !this._domCreated) {
        templateDom = this.xRender(this._template);
        if (templateDom) {
          ref1 = dom.attributes;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            attr = ref1[l];
            attrName = attr.name;
            if (!attrName === "style") {
              if (!dom.hasAttribute(attrName)) {
                dom.setAttribute(attrName, attr.value);
              }
            }
          }
          for (cssName in templateDom.style) {
            if (dom.style[cssName] === "") {
              dom.style[cssName] = templateDom.style[cssName];
            }
          }
          while (templateDom.firstChild) {
            dom.appendChild(templateDom.firstChild);
          }
        }
      }
    };
    cls.prototype.xRender = function(template) {
      return cola.xRender(template, this._widgetModel);
    };
    for (prop in definition) {
      def = definition[prop];
      if (definition.hasOwnProperty(prop) && typeof def === "function") {
        cls.prototype[prop] = def;
      }
    }
    return cls;
  };

  cola.defineWidget = function(type, definition) {
    var childTagNames, ref, tagName;
    if (!cola.util.isSuperClass(cola.Widget, type)) {
      definition = type;
      type = cola.TemplateWidget;
    }
    if (definition) {
      type = _extendWidget(type, definition);
    }
    tagName = (ref = type.tagName) != null ? ref.toUpperCase() : void 0;
    if (tagName && type.parentWidget) {
      childTagNames = type.parentWidget.childTagNames;
      if (!childTagNames) {
        type.parentWidget.childTagNames = childTagNames = {};
      }
      if (childTagNames[tagName]) {
        throw new cola.Exception("Tag name \"" + tagName + "\" is already registered in \"" + type.parentWidget.tagName + "\".");
      }
      childTagNames[tagName] = type;
    } else if (tagName) {
      if (WIDGET_TAGS_REGISTRY[tagName]) {
        throw new cola.Exception("Tag name \"" + tagName + "\" is already registered.");
      }
      WIDGET_TAGS_REGISTRY[tagName] = type;
    }
    return type;
  };

  cola.registerWidget = cola.defineWidget;


  /*
  Template
   */

  TEMP_TEMPLATE = null;

  cola.TemplateSupport = {
    destroy: function() {
      var name;
      if (this._templates) {
        for (name in this._templates) {
          delete this._templates[name];
        }
      }
    },
    _parseTemplates: function() {
      var child;
      if (!this._dom) {
        return;
      }
      child = this._dom.firstChild;
      while (child) {
        if (child.nodeName === "TEMPLATE") {
          this._regTemplate(child);
        }
        child = child.nextSibling;
      }
      this._regDefaultTempaltes();
    },
    _trimTemplate: function(dom) {
      var child, next;
      child = dom.firstChild;
      while (child) {
        next = child.nextSibling;
        if (child.nodeType === 3) {
          if ($.trim(child.nodeValue) === "") {
            dom.removeChild(child);
          }
        }
        child = next;
      }
    },
    _regTemplate: function(name, template) {
      if (arguments.length === 1) {
        template = name;
        if (template.nodeType) {
          name = template.getAttribute("name");
        } else {
          name = template.name;
        }
      }
      if (this._templates == null) {
        this._templates = {};
      }
      this._templates[name || "default"] = template;
    },
    _regDefaultTempaltes: function() {
      var name, ref, ref1, template;
      ref = this.constructor.TEMPLATES;
      for (name in ref) {
        template = ref[name];
        if (((ref1 = this._templates) != null ? ref1.hasOwnProperty(name) : void 0) || !template) {
          continue;
        }
        this._regTemplate(name, template);
      }
    },
    _getTemplate: function(name, defaultName) {
      var c, child, html, k, ref, template, templs, widgetConfigs;
      if (name == null) {
        name = "default";
      }
      if (!this._templates) {
        return null;
      }
      template = this._templates[name];
      if (!template && defaultName) {
        name = defaultName;
        template = this._templates[name];
      }
      if (template && !template._trimed) {
        if (template.nodeType) {
          if (template.nodeName === "TEMPLATE") {
            if (!template.firstChild) {
              html = template.innerHTML;
              if (html) {
                if (TEMP_TEMPLATE == null) {
                  TEMP_TEMPLATE = document.createElement("div");
                }
                template = TEMP_TEMPLATE;
                template.innerHTML = html;
              }
            }
            this._trimTemplate(template);
            if (template.firstChild === template.lastChild) {
              template = template.firstChild;
            } else {
              templs = [];
              child = template.firstChild;
              while (child) {
                templs.push(child);
                child = child.nextSibling;
              }
              template = templs;
            }
          }
          this._templates[name] = template;
        } else {
          if (this._doms == null) {
            this._doms = {};
          }
          template = $.xCreate(template, this._doms);
          if (this._doms.widgetConfigs) {
            if (this._templateContext == null) {
              this._templateContext = {};
            }
            if (this._templateContext.widgetConfigs) {
              widgetConfigs = this._templateContext.widgetConfigs;
              ref = this._doms.widgetConfigs;
              for (k in ref) {
                c = ref[k];
                widgetConfigs[k] = c;
              }
            } else {
              this._templateContext.widgetConfigs = this._doms.widgetConfigs;
            }
          }
          this._templates[name] = template;
        }
        template._trimed = true;
      }
      return template;
    },
    _cloneTemplate: function(template, supportMultiNodes) {
      var fragment, l, len1, templ;
      if (template instanceof Array) {
        if (supportMultiNodes && template.length > 1) {
          fragment = document.createDocumentFragment();
          for (l = 0, len1 = template.length; l < len1; l++) {
            templ = template[l];
            fragment.appendChild(templ.cloneNode(true));
          }
          return fragment;
        } else {
          return template[0].cloneNode(true);
        }
      } else {
        return template.cloneNode(true);
      }
    }
  };

  cola.DataWidgetMixin = {
    _bindSetter: function(bindStr) {
      var bindInfo, bindProcessor, expression, i, l, len1, len2, n, p, path, paths, ref;
      if (this._bind === bindStr) {
        return;
      }
      if (this._bindInfo) {
        bindInfo = this._bindInfo;
        if (this._watchingPaths) {
          ref = this._watchingPaths;
          for (l = 0, len1 = ref.length; l < len1; l++) {
            path = ref[l];
            this._scope.data.unbind(path.join("."), this._bindProcessor);
          }
        }
        delete this._bindInfo;
      }
      this._bind = bindStr;
      if (bindStr && this._scope) {
        this._bindInfo = bindInfo = {};
        bindInfo.expression = expression = cola._compileExpression(bindStr);
        if (expression.repeat || expression.setAlias) {
          throw new cola.Exception("Expression \"" + bindStr + "\" must be a simple expression.");
        }
        if ((expression.type === "MemberExpression" || expression.type === "Identifier") && !expression.hasCallStatement && !expression.convertors) {
          bindInfo.isWriteable = true;
          i = bindStr.lastIndexOf(".");
          if (i > 0) {
            bindInfo.entityPath = bindStr.substring(0, i);
            bindInfo.property = bindStr.substring(i + 1);
          } else {
            bindInfo.entityPath = null;
            bindInfo.property = bindStr;
          }
        }
        if (!this._bindProcessor) {
          this._bindProcessor = bindProcessor = {
            _processMessage: (function(_this) {
              return function(bindingPath, path, type, arg) {
                if (_this._filterDataMessage) {
                  if (!_this._filterDataMessage(path, type, arg)) {
                    return;
                  }
                } else {
                  if (!((cola.constants.MESSAGE_REFRESH <= type && type <= cola.constants.MESSAGE_CURRENT_CHANGE) || _this._watchingMoreMessage)) {
                    return;
                  }
                }
                if (_this._bindInfo.watchingMoreMessage) {
                  cola.util.delay(_this, "processMessage", 100, function() {
                    if (this._processDataMessage) {
                      this._processDataMessage(this._bindInfo.watchingPaths[0], cola.constants.MESSAGE_REFRESH, {});
                    } else {
                      this._refreshBindingValue();
                    }
                  });
                } else {
                  if (_this._processDataMessage) {
                    _this._processDataMessage(path, type, arg);
                  } else {
                    _this._refreshBindingValue();
                  }
                }
              };
            })(this)
          };
        }
        paths = expression.paths;
        if (!paths && expression.hasCallStatement) {
          paths = ["**"];
          bindInfo.watchingMoreMessage = expression.hasCallStatement || expression.convertors;
        }
        if (paths) {
          this._watchingPaths = paths;
          for (i = n = 0, len2 = paths.length; n < len2; i = ++n) {
            p = paths[i];
            this._scope.data.bind(p, bindProcessor);
            paths[i] = p.split(".");
          }
          if (this._processDataMessage) {
            this._processDataMessage(null, cola.constants.MESSAGE_REFRESH, {});
          } else {
            this._refreshBindingValue();
          }
        }
      }
    },
    destroy: function() {
      var l, len1, path, ref;
      if (this._watchingPaths) {
        ref = this._watchingPaths;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          path = ref[l];
          this._scope.data.unbind(path.join("."), this._bindProcessor);
        }
      }
    },
    readBindingValue: function(dataCtx) {
      var ref;
      if (!((ref = this._bindInfo) != null ? ref.expression : void 0)) {
        return;
      }
      if (dataCtx == null) {
        dataCtx = {};
      }
      return this._bindInfo.expression.evaluate(this._scope, "async", dataCtx);
    },
    writeBindingValue: function(value) {
      var ref;
      if (!((ref = this._bindInfo) != null ? ref.expression : void 0)) {
        return;
      }
      if (!this._bindInfo.isWriteable) {
        throw new cola.Exception("Expression \"" + this._bind + "\" is not writable.");
      }
      this._scope.set(this._bind, value);
    },
    getBindingProperty: function() {
      var ref;
      if (!(((ref = this._bindInfo) != null ? ref.expression : void 0) && this._bindInfo.isWriteable)) {
        return;
      }
      return this._scope.data.getProperty(this._bind);
    },
    getBindingDataType: function() {
      var ref;
      if (!(((ref = this._bindInfo) != null ? ref.expression : void 0) && this._bindInfo.isWriteable)) {
        return;
      }
      return this._scope.data.getDataType(this._bind);
    },
    _isRootOfTarget: function(changedPath, targetPath) {
      var i, isRoot, l, len1, len2, len3, n, o, part, targetPaths;
      if (!changedPath || !targetPath) {
        return true;
      }
      if (targetPath instanceof Array) {
        targetPaths = targetPath;
        for (l = 0, len1 = targetPaths.length; l < len1; l++) {
          targetPath = targetPaths[l];
          isRoot = true;
          for (i = n = 0, len2 = changedPath.length; n < len2; i = ++n) {
            part = changedPath[i];
            if (part !== targetPath[i]) {
              isRoot = false;
              break;
            }
          }
          if (isRoot) {
            return true;
          }
        }
        return false;
      } else {
        for (i = o = 0, len3 = changedPath.length; o < len3; i = ++o) {
          part = changedPath[i];
          if (part !== targetPath[i]) {
            return false;
          }
        }
        return true;
      }
    }
  };

  cola.DataItemsWidgetMixin = {
    _alias: "item",
    _bindSetter: function(bindStr) {
      var expression;
      if (this._bind === bindStr) {
        return;
      }
      this._bind = bindStr;
      this._itemsRetrieved = false;
      delete this._simpleBindPath;
      if (bindStr) {
        expression = cola._compileExpression(bindStr, "repeat");
        if (!expression.repeat) {
          throw new cola.Exception("Expression \"" + bindStr + "\" must be a repeat expression.");
        }
        this._alias = expression.alias;
        if ((expression.type === "MemberExpression" || expression.type === "Identifier") && !expression.hasCallStatement && !expression.convertors) {
          this._simpleBindPath = expression.paths[0];
        }
      }
      this._itemsScope.setExpression(expression);
    },
    constructor: function() {
      var itemsScope;
      this._itemsScope = itemsScope = new cola.ItemsScope(this._scope);
      itemsScope.onItemsRefresh = (function(_this) {
        return function(arg) {
          return _this._onItemsRefresh(arg);
        };
      })(this);
      itemsScope.onItemRefresh = (function(_this) {
        return function(arg) {
          return _this._onItemRefresh(arg);
        };
      })(this);
      itemsScope.onItemInsert = (function(_this) {
        return function(arg) {
          return _this._onItemInsert(arg);
        };
      })(this);
      itemsScope.onItemRemove = (function(_this) {
        return function(arg) {
          return _this._onItemRemove(arg);
        };
      })(this);
      itemsScope.onItemsLoadingStart = (function(_this) {
        return function(arg) {
          return typeof _this._onItemsLoadingStart === "function" ? _this._onItemsLoadingStart(arg) : void 0;
        };
      })(this);
      itemsScope.onItemsLoadingEnd = (function(_this) {
        return function(arg) {
          return typeof _this._onItemsLoadingEnd === "function" ? _this._onItemsLoadingEnd(arg) : void 0;
        };
      })(this);
      if (this._onCurrentItemChange) {
        return itemsScope.onCurrentItemChange = (function(_this) {
          return function(arg) {
            return _this._onCurrentItemChange(arg);
          };
        })(this);
      }
    },
    _getItems: function() {
      if (!this._itemsRetrieved) {
        this._itemsRetrieved = true;
        this._itemsScope.retrieveItems();
      }
      return {
        items: this._itemsScope.items,
        originItems: this._itemsScope.originItems
      };
    },
    _getBindDataType: function() {
      var dataType, item, items;
      items = this._getItems().originItems;
      if (items) {
        if (items instanceof cola.EntityList) {
          dataType = items.dataType;
        } else if (items instanceof Array && items.length) {
          item = items[0];
          if (item && item instanceof cola.Entity) {
            dataType = item.dataType;
          }
        }
      } else if (this._simpleBindPath) {
        dataType = this._scope.data.getDataType(this._simpleBindPath);
      }
      return dataType;
    }
  };

  cola.semantic = {

    /*
    	fixVisibilityOnUpdate和fixVisibilityOnRefresh方法用于修正SemanticUI中visibility的一处计算错误。
       当我们尝试利用visibility处理非body的滚动时，SemanticUI中的一处对jQuery.offset()的误用导致获得对象偏移量总是相对于document的，而非实际滚动的容器。
       使用时，将fixVisibilityOnUpdate和fixVisibilityOnRefresh方法分别定义为visibility的onUpdate和onRefresh监听器。
     */
    fixVisibilityOnUpdate: function(calculations) {
      if (this._offset == null) {
        this._offset = {
          left: this.offsetLeft,
          top: this.offsetTop
        };
      }
      calculations.offset = this._offset;
    },
    fixVisibilityOnRefresh: function() {
      this._offset = {
        left: this.offsetLeft,
        top: this.offsetTop
      };
    }
  };

  ACTIVE_PINCH_REG = /^pinch/i;

  ACTIVE_ROTATE_REG = /^rotate/i;

  PAN_VERTICAL_events = ["panUp", "panDown"];

  SWIPE_VERTICAL_events = ["swipeUp", "swipeDown"];


  /*
      ClassName池对象
      用于刷新组件时频繁的编辑class name提高性能
   */

  cola.ClassNamePool = (function() {
    function ClassNamePool(domClass, semanticList) {
      if (semanticList == null) {
        semanticList = [];
      }
      this.elements = [];
      domClass = domClass ? (" " + domClass + " ").replace(cola.constants.CLASS_REG, " ") : " ";
      semanticList.forEach((function(_this) {
        return function(name) {
          var klass;
          klass = " " + name + " ";
          if (domClass.indexOf(klass) > -1) {
            domClass = domClass.replace(klass, " ");
            _this.add(name);
          }
        };
      })(this));
      $.trim(domClass).split(" ").forEach((function(_this) {
        return function(klass) {
          _this.add(klass);
        };
      })(this));
    }

    ClassNamePool.prototype.add = function(className) {
      var index;
      if (!className) {
        return;
      }
      index = this.elements.indexOf(className);
      if (index > -1) {
        return;
      }
      return this.elements.push(className);
    };

    ClassNamePool.prototype.remove = function(className) {
      var i;
      i = this.elements.indexOf(className);
      if (i > -1) {
        this.elements.splice(i, 1);
      }
      return this;
    };

    ClassNamePool.prototype.destroy = function() {
      return delete this["elements"];
    };

    ClassNamePool.prototype.join = function() {
      return this.elements.join(" ");
    };

    ClassNamePool.prototype.toggle = function(className, status) {
      if (!!status) {
        this.add(className);
      } else {
        this.remove(className);
      }
    };

    return ClassNamePool;

  })();

  _destroyRenderableElement = function(node, data) {
    var element;
    element = data[cola.constants.DOM_ELEMENT_KEY];
    if (!(typeof element === "function" ? element(_destroyed) : void 0)) {
      element._domRemoved = true;
      element.destroy();
    }
  };


  /*
      可渲染元素
   */

  cola.RenderableElement = (function(superClass) {
    extend(RenderableElement, superClass);

    RenderableElement.events = {
      initDom: null,
      refreshDom: null
    };

    function RenderableElement(config) {
      var dom;
      if (config) {
        dom = config.dom;
        if (dom) {
          delete config.dom;
        }
      }
      if (this._doms == null) {
        this._doms = {};
      }
      RenderableElement.__super__.constructor.call(this, config);
      if (dom) {
        this._setDom(dom, true);
      }
    }

    RenderableElement.prototype._initDom = function(dom) {};

    RenderableElement.prototype._parseDom = function(dom) {};

    RenderableElement.prototype._setDom = function(dom, parseChild) {
      var arg;
      if (!dom) {
        return;
      }
      this._dom = dom;
      cola.util.userData(dom, cola.constants.DOM_ELEMENT_KEY, this);
      cola.util.onNodeDispose(dom, _destroyRenderableElement);
      if (parseChild) {
        this._parseDom(dom);
      }
      this._initDom(dom);
      arg = {
        dom: dom
      };
      this.fire("initDom", this, arg);
      this._refreshDom();
      this._rendered = true;
    };

    RenderableElement.prototype._createDom = function() {
      var className, dom;
      dom = document.createElement(this.constructor.tagName || "div");
      className = this.constructor.CLASS_NAME || "";
      dom.className = "ui " + className;
      return dom;
    };

    RenderableElement.prototype._doSet = function(attr, attrConfig, value) {
      if ((attrConfig != null ? attrConfig.refreshDom : void 0) && this._dom) {
        cola.util.delay(this, "refreshDom", 50, this._refreshDom);
      }
      return RenderableElement.__super__._doSet.call(this, attr, attrConfig, value);
    };

    RenderableElement.prototype._doRefreshDom = function() {
      var className, l, len1, name, names;
      cola.util.cancelDelay(this, "_refreshDom");
      if (!this._dom) {
        return;
      }
      this._classNamePool.add("ui");
      className = this.constructor.CLASS_NAME;
      if (className) {
        names = $.trim(className).split(" ");
        for (l = 0, len1 = names.length; l < len1; l++) {
          name = names[l];
          this._classNamePool.add(name);
        }
      }
      this._resetDimension();
    };

    RenderableElement.prototype._refreshDom = function() {
      var newClassName;
      if (!(this._dom || !this._destroyed)) {
        return;
      }
      this._classNamePool = new cola.ClassNamePool(this._dom.className, this.constructor.SEMANTIC_CLASS);
      this._doRefreshDom();
      newClassName = $.trim(this._classNamePool.join());
      this._dom.className = newClassName;
      this._classNamePool.destroy();
      delete this["_classNamePool"];
    };

    RenderableElement.prototype._resetDimension = function() {};

    RenderableElement.prototype.getDom = function() {
      var dom;
      if (this._destroyed) {
        return null;
      }
      if (!this._dom) {
        dom = this._createDom();
        this._setDom(dom);
      }
      return this._dom;
    };

    RenderableElement.prototype.get$Dom = function() {
      if (this._destroyed) {
        return null;
      }
      if (this._$dom == null) {
        this._$dom = $(this.getDom());
      }
      return this._$dom;
    };

    RenderableElement.prototype.refresh = function() {
      var arg;
      if (!this._dom) {
        return this;
      }
      this._refreshDom();
      arg = {
        dom: this._dom
      };
      this.fire("refreshDom", this, arg);
      return this;
    };

    RenderableElement.prototype.appendTo = function(parentNode) {
      if (parentNode && this.getDom()) {
        $(parentNode).append(this._dom);
      }
      return this;
    };

    RenderableElement.prototype.remove = function() {
      this.get$Dom().remove();
      return this;
    };

    RenderableElement.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      cola.util.cancelDelay(this, "refreshDom");
      if (this._dom) {
        if (!this._domRemoved) {
          this.remove();
        }
        delete this._dom;
        delete this._$dom;
      }
      RenderableElement.__super__.destroy.call(this);
      this._destroyed = true;
    };

    RenderableElement.prototype.addClass = function(value, continuous) {
      if (continuous) {
        cola.util.addClass(this._dom, value, true);
      } else {
        this.get$Dom().addClass(value);
      }
      return this;
    };

    RenderableElement.prototype.removeClass = function(value, continuous) {
      if (continuous) {
        cola.util.removeClass(this._dom, value, true);
      } else {
        this.get$Dom().removeClass(value);
      }
      return this;
    };

    RenderableElement.prototype.toggleClass = function(value, state, continuous) {
      if (continuous) {
        cola.util.toggleClass(this._dom, value, state, true);
      } else {
        this.get$Dom().toggleClass(value, state);
      }
      return this;
    };

    RenderableElement.prototype.hasClass = function(value, continuous) {
      if (continuous) {
        return cola.util.hasClass(this._dom, value, true);
      } else {
        return this.get$Dom().hasClass(value);
      }
    };

    return RenderableElement;

  })(cola.Element);


  /*
  Dorado 基础组件
   */

  cola.Widget = (function(superClass) {
    extend(Widget, superClass);

    function Widget() {
      return Widget.__super__.constructor.apply(this, arguments);
    }

    Widget.CLASS_NAME = "control";

    Widget.SEMANTIC_CLASS = ["left floated", "right floated"];

    Widget.attributes = {
      display: {
        defaultValue: true,
        refreshDom: true,
        type: "boolean"
      },
      float: {
        refreshDom: true,
        "enum": ["left", "right", ""],
        defaultValue: "",
        setter: function(value) {
          var oldValue;
          oldValue = this["_float"];
          if (this._dom && oldValue && oldValue !== value) {
            cola.util.removeClass(this._dom, oldValue + " floated", true);
          }
          this["_float"] = value;
        }
      },
      "class": {
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this["_class"];
          if (oldValue && this._dom && oldValue !== value) {
            this.get$Dom().removeClass(oldValue);
          }
          this["_class"] = value;
        }
      },
      popup: null,
      dimmer: {
        setter: function(value) {
          var k, v;
          if (this._dimmer == null) {
            this._dimmer = {};
          }
          for (k in value) {
            v = value[k];
            this._dimmer[k] = v;
          }
        }
      },
      height: {
        refreshDom: true
      },
      width: {
        refreshDom: true
      }
    };

    Widget.events = {
      click: {
        $event: "click"
      },
      dblClick: {
        $event: "dblclick"
      },
      mouseDown: {
        $event: "mousedown"
      },
      mouseUp: {
        $event: "mouseup"
      },
      tap: {
        hammerEvent: "tap"
      },
      press: {
        hammerEvent: "press"
      },
      panStart: {
        hammerEvent: "panstart"
      },
      panMove: {
        hammerEvent: "panmove"
      },
      panEnd: {
        hammerEvent: "panend"
      },
      panCancel: {
        hammerEvent: "pancancel"
      },
      panLeft: {
        hammerEvent: "panleft"
      },
      panRight: {
        hammerEvent: "panright"
      },
      panUp: {
        hammerEvent: "panup"
      },
      panDown: {
        hammerEvent: "pandown"
      },
      pinchStart: {
        hammerEvent: "pinchstart"
      },
      pinchMove: {
        hammerEvent: "pinchmove"
      },
      pinchEnd: {
        hammerEvent: "pinchend"
      },
      pinchCancel: {
        hammerEvent: "pinchcancel"
      },
      pinchIn: {
        hammerEvent: "pinchin"
      },
      pinchOut: {
        hammerEvent: "pinchout"
      },
      rotateStart: {
        hammerEvent: "rotatestart"
      },
      rotateMove: {
        hammerEvent: "rotatemove"
      },
      rotateEnd: {
        hammerEvent: "rotateend"
      },
      rotateCancel: {
        hammerEvent: "rotatecancel"
      },
      swipeLeft: {
        hammerEvent: "swipeleft"
      },
      swipeRight: {
        hammerEvent: "swiperight"
      },
      swipeUp: {
        hammerEvent: "swipeup"
      },
      swipeDown: {
        hammerEvent: "swipedown"
      }
    };

    Widget.prototype._initDom = function(dom) {
      var popup, popupOptions;
      Widget.__super__._initDom.call(this, dom);
      popup = this._popup;
      if (popup) {
        popupOptions = {};
        if (typeof popup === "string" || (popup.constructor === Object.prototype.constructor && popup.tagName) || popup.nodeType === 1) {
          popupOptions.html = cola.xRender(popup);
        } else if (popup.constructor === Object.prototype.constructor) {
          popupOptions = popup;
          if (popupOptions.content) {
            popupOptions.html = cola.xRender(popupOptions.content);
          } else if (popupOptions.html) {
            popupOptions.html = cola.xRender(popupOptions.html);
          }
        }
        return $(dom).popup(popupOptions);
      }
    };

    Widget.prototype._setDom = function(dom, parseChild) {
      var eventName;
      if (!dom) {
        return;
      }
      Widget.__super__._setDom.call(this, dom, parseChild);
      for (eventName in this.constructor.events) {
        if (this.getListeners(eventName)) {
          this._bindEvent(eventName);
        }
      }
    };

    Widget.prototype._on = function(eventName, listener, alias) {
      Widget.__super__._on.call(this, eventName, listener, alias);
      if (this._dom) {
        this._bindEvent(eventName);
      }
      return this;
    };

    Widget.prototype.fire = function(eventName, self, arg) {
      var eventConfig;
      if (!this._eventRegistry) {
        return;
      }
      eventConfig = this.constructor.events.$get(eventName);
      if (this.constructor.attributes.hasOwnProperty("disabled") && this.get("disabled") && eventConfig && (eventConfig.$event || eventConfig.hammerEvent)) {
        return;
      }
      if (!this["_hasFireTapEvent"]) {
        this["_hasFireTapEvent"] = eventName === "tap";
      }
      if (eventName === "click" && this["_hasFireTapEvent"]) {
        return;
      }
      return Widget.__super__.fire.call(this, eventName, self, arg);
    };

    Widget.prototype._doRefreshDom = function() {
      var l, len1, name, ref;
      if (!this._dom) {
        return;
      }
      Widget.__super__._doRefreshDom.call(this);
      if (this._float) {
        this._classNamePool.add(this._float + " floated");
      }
      this._classNamePool.toggle("display-none", !!!this._display);
      if (!this._rendered && this._class) {
        ref = this._class.split(" ");
        for (l = 0, len1 = ref.length; l < len1; l++) {
          name = ref[l];
          this._classNamePool.add(name);
        }
      }
    };

    Widget.prototype._bindEvent = function(eventName) {
      var $dom, eventConfig;
      if (!this._dom) {
        return;
      }
      if (this._bindedEvents == null) {
        this._bindedEvents = {};
      }
      if (this._bindedEvents[eventName]) {
        return;
      }
      $dom = this.get$Dom();
      eventConfig = this.constructor.events.$get(eventName);
      if (eventConfig != null ? eventConfig.$event : void 0) {
        $dom.on(eventConfig.$event, (function(_this) {
          return function(evt) {
            var arg;
            arg = {
              dom: _this._dom,
              event: evt
            };
            return _this.fire(eventName, _this, arg);
          };
        })(this));
        this._bindedEvents[eventName] = true;
        return;
      }
      if (eventConfig != null ? eventConfig.hammerEvent : void 0) {
        if (this._hammer == null) {
          this._hammer = new Hammer(this._dom, {});
        }
        if (ACTIVE_PINCH_REG.test(eventName)) {
          this._hammer.get("pinch").set({
            enable: true
          });
        }
        if (ACTIVE_ROTATE_REG.test(eventName)) {
          this._hammer.get("rotate").set({
            enable: true
          });
        }
        if (PAN_VERTICAL_events.indexOf(eventName) >= 0) {
          this._hammer.get("pan").set({
            direction: Hammer.DIRECTION_ALL
          });
        }
        if (SWIPE_VERTICAL_events.indexOf(eventName) >= 0) {
          this._hammer.get("swipe").set({
            direction: Hammer.DIRECTION_ALL
          });
        }
        this._hammer.on(eventConfig.hammerEvent, (function(_this) {
          return function(evt) {
            var arg;
            arg = {
              dom: _this._dom,
              event: evt,
              eventName: eventName
            };
            return _this.fire(eventName, _this, arg);
          };
        })(this));
        this._bindedEvents[eventName] = true;
        return;
      }
    };

    Widget.prototype._resetDimension = function() {
      var $dom, height, unit, width;
      $dom = this.get$Dom();
      unit = cola.constants.WIDGET_DIMENSION_UNIT;
      height = this.get("height");
      if (isFinite(height)) {
        height = "" + (parseInt(height)) + unit;
      }
      if (height) {
        $dom.css("height", height);
      }
      width = this.get("width");
      if (isFinite(width)) {
        width = "" + (parseInt(width)) + unit;
      }
      if (width) {
        $dom.css("width", width);
      }
    };

    Widget.prototype.showDimmer = function(options) {
      var $dom, content, dimmer, dimmerContent, k, v;
      if (options == null) {
        options = {};
      }
      if (!this._dom) {
        return this;
      }
      content = options.content;
      if (!content && this._dimmer) {
        content = this._dimmer.content;
      }
      if (content) {
        if (typeof content === "string") {
          dimmerContent = $.xCreate({
            tagName: "div",
            content: content
          });
        } else if (content.constructor === Object.prototype.constructor && content.tagName) {
          dimmerContent = $.xCreate(content);
        } else if (content.nodeType === 1) {
          dimmerContent = content;
        }
      }
      if (this._dimmer == null) {
        this._dimmer = {};
      }
      for (k in options) {
        v = options[k];
        if (k !== "content") {
          this._dimmer[k] = v;
        }
      }
      $dom = this.get$Dom();
      dimmer = $dom.dimmer("get dimmer");
      if (dimmerContent) {
        if (dimmer) {
          $(dimmer).empty();
        } else {
          $dom.dimmer("create");
        }
        $dom.dimmer("add content", dimmerContent);
      }
      $dom.dimmer(this._dimmer);
      $dom.dimmer("show");
      return this;
    };

    Widget.prototype.hideDimmer = function() {
      if (!this._dom) {
        return this;
      }
      this.get$Dom().dimmer("hide");
      return this;
    };

    Widget.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      if (this._dom) {
        delete this._hammer;
        delete this._bindedEvents;
        delete this._parent;
        delete this._doms;
      }
      Widget.__super__.destroy.call(this);
      this._destroyed = true;
    };

    return Widget;

  })(cola.RenderableElement);

  cola.floatWidget = {
    _zIndex: 1100,
    zIndex: function() {
      return ++cola.floatWidget._zIndex;
    }
  };

  cola.WidgetDataModel = (function(superClass) {
    extend(WidgetDataModel, superClass);

    function WidgetDataModel(model, widget1) {
      this.widget = widget1;
      WidgetDataModel.__super__.constructor.call(this, model);
    }

    WidgetDataModel.prototype.get = function(path, loadMode, context) {
      var ref;
      if (path.charCodeAt(0) === 64) {
        return this.widget.get(path.substring(1));
      } else {
        return (ref = this.model.parent) != null ? ref.data.get(path, loadMode, context) : void 0;
      }
    };

    WidgetDataModel.prototype.set = function(path, value) {
      var ref;
      if (path.charCodeAt(0) === 64) {
        this.widget.set(path.substring(1), value);
        this._onDataMessage(path.split("."), cola.constants.MESSAGE_PROPERTY_CHANGE, {});
      } else {
        if ((ref = this.model.parent) != null) {
          ref.data.set(path, value);
        }
      }
    };

    WidgetDataModel.prototype._processMessage = function(bindingPath, path, type, arg) {
      this._onDataMessage(path, type, arg);
    };

    WidgetDataModel.prototype.getDataType = function(path) {
      var ref;
      if (path.charCodeAt(0) === 64) {
        return null;
      } else {
        return (ref = this.model.parent) != null ? ref.data.getDataType(path) : void 0;
      }
    };

    WidgetDataModel.prototype.getProperty = function(path) {
      var ref;
      if (path.charCodeAt(0) === 64) {
        return null;
      } else {
        return (ref = this.model.parent) != null ? ref.data.getDataType(path) : void 0;
      }
    };

    WidgetDataModel.prototype.flush = function(name, loadMode) {
      var ref;
      if (path.charCodeAt(0) !== 64) {
        if ((ref = this.model.parent) != null) {
          ref.data.getDataType(name, loadMode);
        }
      }
      return this;
    };

    return WidgetDataModel;

  })(cola.AbstractDataModel);

  cola.WidgetModel = (function(superClass) {
    extend(WidgetModel, superClass);

    function WidgetModel(widget1, parent1) {
      var ref, widget;
      this.widget = widget1;
      this.parent = parent1;
      widget = this.widget;
      this.data = new cola.WidgetDataModel(this, widget);
      if ((ref = this.parent) != null) {
        ref.data.bind("**", this);
      }
      this.action = function(name) {
        var method;
        method = widget[name];
        if (method instanceof Function) {
          return function() {
            return method.apply(widget, arguments);
          };
        }
        return cola.defaultAction[name];
      };
    }

    WidgetModel.prototype._processMessage = function(bindingPath, path, type, arg) {
      if (this.messageTimestamp >= arg.timestamp) {
        return;
      }
      return this.data._processMessage(bindingPath, path, type, arg);
    };

    return WidgetModel;

  })(cola.SubScope);

  cola.TemplateWidget = (function(superClass) {
    extend(TemplateWidget, superClass);

    function TemplateWidget() {
      return TemplateWidget.__super__.constructor.apply(this, arguments);
    }

    return TemplateWidget;

  })(cola.Widget);

  containerEmptyChildren = [];

  cola.AbstractContainer = (function(superClass) {
    extend(AbstractContainer, superClass);

    function AbstractContainer() {
      return AbstractContainer.__super__.constructor.apply(this, arguments);
    }

    AbstractContainer.attributes = {
      content: {
        setter: function(value) {
          this._setContent(value, "content");
          return this;
        }
      }
    };

    AbstractContainer.prototype._initDom = function(dom) {
      var el, l, len1, ref;
      if (this._content) {
        ref = this._content;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          el = ref[l];
          this._render(el, "content");
        }
      }
    };

    AbstractContainer.prototype._parseDom = function(dom) {
      var child, widget;
      if (this._content == null) {
        this._content = [];
      }
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          widget = cola.widget(child);
          if (widget) {
            this._content.push(widget);
          }
        }
        child = child.nextSibling;
      }
    };

    AbstractContainer.prototype.getContentContainer = function() {
      return this.getDom();
    };

    AbstractContainer.prototype._clearContent = function(target) {
      var el, l, len1, old;
      old = this["_" + target];
      if (old) {
        for (l = 0, len1 = old.length; l < len1; l++) {
          el = old[l];
          if (el instanceof cola.widget) {
            el.destroy();
          }
        }
        this["_" + target] = [];
      }
      if (this._doms == null) {
        this._doms = {};
      }
      if (this._doms[target]) {
        $(this._doms[target]).empty();
      }
    };

    AbstractContainer.prototype._setContent = function(value, target) {
      var el, l, len1, result;
      this._clearContent(target);
      if (value instanceof Array) {
        for (l = 0, len1 = value.length; l < len1; l++) {
          el = value[l];
          result = cola.xRender(el, this._scope);
          if (result) {
            this._addContentElement(result, target);
          }
        }
      } else {
        result = cola.xRender(value, this._scope);
        if (result) {
          this._addContentElement(result, target);
        }
      }
    };

    AbstractContainer.prototype._makeContentDom = function(target) {
      if (this._doms == null) {
        this._doms = {};
      }
      this._doms[target] = this._dom;
      return this._dom;
    };

    AbstractContainer.prototype._addContentElement = function(element, target) {
      var dom, name, targetList;
      name = "_" + target;
      if (this[name] == null) {
        this[name] = [];
      }
      targetList = this[name];
      dom = null;
      if (element instanceof cola.Widget) {
        targetList.push(element);
        if (this._dom) {
          dom = element.getDom();
        }
      } else if (element.nodeType) {
        targetList.push(element);
        dom = element;
      }
      if (dom && this._dom) {
        this._render(dom, target);
      }
    };

    AbstractContainer.prototype._render = function(node, target) {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      if (!this._doms[target]) {
        this._makeContentDom(target);
      }
      dom = node;
      if (node instanceof cola.Widget) {
        dom = node.getDom();
      }
      if (dom.parentNode !== this._doms[target]) {
        this._doms[target].appendChild(dom);
      }
    };

    AbstractContainer.prototype.destroy = function() {
      var child, l, len1, ref;
      if (this._destroyed) {
        return;
      }
      if (this._content) {
        ref = this._content;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          child = ref[l];
          if (typeof child.destroy === "function") {
            child.destroy();
          }
        }
        delete this._content;
      }
      AbstractContainer.__super__.destroy.call(this);
      return this;
    };

    return AbstractContainer;

  })(cola.Widget);

  cola.Link = (function(superClass) {
    extend(Link, superClass);

    function Link() {
      return Link.__super__.constructor.apply(this, arguments);
    }

    Link.tagName = "a";

    Link.attributes = {
      href: {
        refreshDom: true
      },
      target: {
        refreshDom: true
      }
    };

    Link.prototype._setDom = function(dom, parseChild) {
      var href, target;
      if (parseChild) {
        if (!this._href) {
          href = dom.getAttribute("href");
          if (href) {
            this._href = href;
          }
        }
        if (!this._target) {
          target = dom.getAttribute("target");
          if (target) {
            this._target = target;
          }
        }
      }
      return Link.__super__._setDom.call(this, dom, parseChild);
    };

    Link.prototype._doRefreshDom = function() {
      var $dom;
      if (!this._dom) {
        return;
      }
      Link.__super__._doRefreshDom.call(this);
      $dom = this.get$Dom();
      if (this._href) {
        $dom.attr("href", this._href);
      } else {
        $dom.removeAttr("href");
      }
      return $dom.attr("target", this._target || "");
    };

    return Link;

  })(cola.AbstractContainer);


  /*
      按钮的抽象类
   */

  cola.AbstractButton = (function(superClass) {
    extend(AbstractButton, superClass);

    function AbstractButton() {
      return AbstractButton.__super__.constructor.apply(this, arguments);
    }

    AbstractButton.attributes = {
      size: {
        "enum": ["mini", "tiny", "small", "medium", "large", "big", "huge", "massive"],
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this._size;
          if (oldValue && oldValue !== value && this._dom) {
            this.removeClass(oldValue);
          }
          this._size = value;
        }
      },
      color: {
        refreshDom: true,
        "enum": ["red", "orange", "yellow", "olive", "green", "teal", "blue", "violet", "purple", "pink", "brown", "grey", "black"],
        setter: function(value) {
          var oldValue;
          oldValue = this._color;
          if (oldValue && oldValue !== value && this._dom) {
            this.removeClass(oldValue);
          }
          this._color = value;
        }
      },
      attached: {
        refreshDom: true,
        defaultValue: "",
        "enum": ["left", "right", "top", "bottom", ""],
        setter: function(value) {
          var oldValue;
          oldValue = this._attached;
          if (oldValue && oldValue !== value && this._dom) {
            this.removeClass(oldValue + " attached", true);
          }
          this._attached = value;
        }
      }
    };

    AbstractButton.prototype._doRefreshDom = function() {
      var attached, color, size;
      if (!this._dom) {
        return;
      }
      AbstractButton.__super__._doRefreshDom.call(this);
      size = this.get("size");
      if (size) {
        this._classNamePool.add(size);
      }
      color = this.get("color");
      if (color) {
        this._classNamePool.add(color);
      }
      attached = this.get("attached");
      if (attached) {
        this._classNamePool.add(attached + " attached");
      }
    };

    return AbstractButton;

  })(cola.Widget);

  cola.Button = (function(superClass) {
    extend(Button, superClass);

    function Button() {
      return Button.__super__.constructor.apply(this, arguments);
    }

    Button.tagName = "c-button";

    Button.SEMANTIC_CLASS = ["left floated", "right floated", "top attached", "bottom attached", "left attached", "right attached"];

    Button.CLASS_NAME = "button";

    Button.attributes = {
      caption: {
        refreshDom: true
      },
      icon: {
        refreshDom: true,
        setter: function(value) {
          var oldValue, ref;
          oldValue = this._icon;
          this._icon = value;
          if (oldValue && oldValue !== value && this._dom && ((ref = this._doms) != null ? ref.iconDom : void 0)) {
            $fly(this._doms.iconDom).removeClass(oldValue);
          }
        }
      },
      iconPosition: {
        refreshDom: true,
        defaultValue: "left",
        "enum": ["left", "right"]
      },
      focusable: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      disabled: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      states: {
        refreshDom: true,
        defaultValue: "",
        "enum": ["loading", "active", ""],
        setter: function(value) {
          var oldValue;
          oldValue = this._states;
          if (oldValue && oldValue !== value && this._dom) {
            $fly(this._dom).removeClass(oldValue);
          }
          this._states = value;
        }
      }
    };

    Button.prototype._parseDom = function(dom) {
      var child, text;
      if (!this._caption) {
        child = dom.firstChild;
        while (child) {
          if (child.nodeType === 3) {
            text = child.textContent;
            if (text) {
              this._caption = text;
              child.textContent = "";
              break;
            }
          }
          child = child.nextSibling;
        }
      }
    };

    Button.prototype._refreshIcon = function() {
      var $dom, base, caption, icon, iconDom, iconPosition;
      if (!this._dom) {
        return;
      }
      $dom = this.get$Dom();
      this._classNamePool.remove("right");
      this._classNamePool.remove("left");
      this._classNamePool.remove("labeled");
      this._classNamePool.remove("icon");
      icon = this.get("icon");
      iconPosition = this.get("iconPosition");
      caption = this.get("caption");
      if (icon) {
        if (caption) {
          if (iconPosition === "right") {
            this._classNamePool.add("right");
          } else {

          }
        }
        this._classNamePool.add("icon");
        if ((base = this._doms).iconDom == null) {
          base.iconDom = document.createElement("i");
        }
        iconDom = this._doms.iconDom;
        $fly(iconDom).addClass(icon + " icon");
        if (iconDom.parentNode !== this._dom) {
          $dom.append(iconDom);
        }
      } else if (this._doms.iconDom) {
        $fly(this._doms.iconDom).remove();
      }
    };

    Button.prototype._doRefreshDom = function() {
      var $dom, caption, captionDom, classNamePool, states;
      if (!this._dom) {
        return;
      }
      Button.__super__._doRefreshDom.call(this);
      $dom = this.get$Dom();
      classNamePool = this._classNamePool;
      caption = this._caption;
      captionDom = this._doms.captionDom;
      if (caption) {
        if (!captionDom) {
          captionDom = document.createElement("span");
          this._doms.captionDom = captionDom;
        }
        $fly(captionDom).text(caption);
        if (captionDom.parentNode !== this._dom) {
          $dom.append(captionDom);
        }
      } else {
        if (captionDom) {
          $fly(captionDom).remove();
        }
      }
      if (this.get("focusable")) {
        $dom.attr("tabindex", "0");
      } else {
        $dom.removeAttr("tabindex");
      }
      this._refreshIcon();
      states = this._states;
      if (states) {
        classNamePool.add(states);
      }
      classNamePool.toggle("disabled", this._disabled);
    };

    return Button;

  })(cola.AbstractButton);

  cola.registerWidget(cola.Button);

  cola.buttonGroup = {};

  cola.buttonGroup.Separator = (function(superClass) {
    extend(Separator, superClass);

    function Separator() {
      return Separator.__super__.constructor.apply(this, arguments);
    }

    Separator.tagName = "c-separator";

    Separator.parentWidget = cola.ButtonGroup;

    Separator.SEMANTIC_CLASS = [];

    Separator.CLASS_NAME = "or";

    Separator.attributes = {
      text: {
        defaultValue: "or",
        refreshDom: true
      }
    };

    Separator.prototype._parseDom = function(dom) {
      var text;
      if (!dom) {
        return;
      }
      if (!this._text) {
        text = this._dom.getAttribute("data-text");
        if (text) {
          this._text = text;
        }
      }
    };

    Separator.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Separator.__super__._doRefreshDom.call(this);
      if (this._dom) {
        this.get$Dom().attr("data-text", this._text);
      }
      return this;
    };

    return Separator;

  })(cola.Widget);

  cola.buttonGroup.emptyItems = [];

  cola.ButtonGroup = (function(superClass) {
    extend(ButtonGroup, superClass);

    function ButtonGroup() {
      return ButtonGroup.__super__.constructor.apply(this, arguments);
    }

    ButtonGroup.tagName = "c-buttonGroup";

    ButtonGroup.SEMANTIC_CLASS = ["left floated", "right floated", "top attached", "bottom attached", "left attached", "right attached"];

    ButtonGroup.CHILDREN_TYPE_NAMESPACE = "button-group";

    ButtonGroup.CLASS_NAME = "buttons";

    ButtonGroup.attributes = {
      fluid: {
        type: "boolean",
        refreshDom: true,
        attrName: "c-fuild",
        defaultValue: false
      },
      mutuallyExclusive: {
        type: "boolean",
        refreshDom: true,
        defaultValue: true
      },
      items: {
        setter: function(value) {
          var item, l, len1;
          this.clear();
          if (value instanceof Array) {
            for (l = 0, len1 = value.length; l < len1; l++) {
              item = value[l];
              this.addItem(item);
            }
          }
        }
      }
    };

    ButtonGroup.prototype._setDom = function(dom, parseChild) {
      var activeExclusive, item, itemDom, l, len1, ref, ref1;
      ButtonGroup.__super__._setDom.call(this, dom, parseChild);
      if ((ref = this._items) != null ? ref.length : void 0) {
        ref1 = this._items;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          item = ref1[l];
          itemDom = item.getDom();
          if (itemDom.parentNode !== dom) {
            item.appendTo(this._dom);
          }
        }
      }
      activeExclusive = (function(_this) {
        return function(targetDom) {
          var targetBtn;
          if (!_this._mutuallyExclusive) {
            return;
          }
          if (cola.util.hasClass(targetDom, "disabled") || cola.util.hasClass(targetDom, "loading") || cola.util.hasClass(targetDom, "active")) {
            return;
          }
          $(">.ui.button.active", _this._dom).each(function(index, itemDom) {
            var button;
            if (itemDom !== targetDom) {
              button = cola.widget(itemDom);
              if (button) {
                button.set("states", "");
              } else {
                $(itemDom).removeClass("active");
              }
            }
          });
          targetBtn = cola.widget(targetDom);
          if (targetBtn) {
            targetBtn.set("states", "active");
          } else {
            $fly(targetDom).addClass("active");
          }
        };
      })(this);
      return this.get$Dom().delegate(">.ui.button", "click", function(event) {
        return activeExclusive(this, event);
      });
    };

    ButtonGroup.prototype._parseDom = function(dom) {
      var child, widget;
      if (!dom) {
        return;
      }
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          widget = cola.widget(child);
          if (widget) {
            if (widget instanceof cola.Button || widget instanceof cola.buttonGroup.Separator) {
              this.addItem(widget);
            }
          }
        }
        child = child.nextSibling;
      }
    };

    ButtonGroup.prototype._resetFluid = function() {
      var $dom, attrName, fluid, item, items, l, len1, newFluid, oldFluid;
      if (!this._dom) {
        return;
      }
      $dom = this.get$Dom();
      attrName = this.constructor.attributes.fluid.attrName;
      oldFluid = $dom.attr(attrName);
      newFluid = 0;
      items = this._items || [];
      for (l = 0, len1 = items.length; l < len1; l++) {
        item = items[l];
        if (item instanceof cola.Button) {
          newFluid++;
        }
      }
      if (newFluid !== oldFluid) {
        if (oldFluid) {
          this._classNamePool.remove("" + oldFluid);
        }
      }
      fluid = this.get("fluid");
      if (!!fluid) {
        this._classNamePool.add("" + newFluid);
        this._classNamePool.add("fluid");
        $dom.attr(attrName, newFluid);
      }
    };

    ButtonGroup.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      ButtonGroup.__super__._doRefreshDom.call(this);
      this._resetFluid();
    };

    ButtonGroup.prototype.addItem = function(item) {
      var itemDom, itemObj;
      if (this._destroyed) {
        return this;
      }
      if (this._items == null) {
        this._items = [];
      }
      itemObj = null;
      if (item instanceof cola.Widget) {
        itemObj = item;
      } else if (item.$type) {
        if (item.$type === "Separator" || item.$type === "-") {
          delete item["$type"];
          itemObj = new cola.buttonGroup.Separator(item);
        } else {
          itemObj = cola.widget(item);
        }
      } else if (typeof item === "string") {
        itemObj = new cola.buttonGroup.Separator({
          text: item
        });
      }
      if (itemObj) {
        this._items.push(itemObj);
        if (this._dom) {
          itemDom = itemObj.getDom();
          if (itemDom.parentNode !== this._dom) {
            this.get$Dom().append(itemDom);
            cola.util.delay(this, "refreshDom", 50, this._refreshDom);
          }
        }
      }
      return this;
    };

    ButtonGroup.prototype.add = function() {
      var arg, l, len1;
      for (l = 0, len1 = arguments.length; l < len1; l++) {
        arg = arguments[l];
        this.addItem(arg);
      }
      return this;
    };

    ButtonGroup.prototype.removeItem = function(item) {
      var index;
      if (!this._items) {
        return this;
      }
      index = this._items.indexOf(item);
      if (index > -1) {
        this._items.splice(index, 1);
        item.remove();
        cola.util.delay(this, "refreshDom", 50, this._refreshDom);
      }
      return this;
    };

    ButtonGroup.prototype.destroy = function() {
      var item, l, len1, ref;
      if (this._destroyed) {
        return;
      }
      if (this._items) {
        ref = this._items;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          item = ref[l];
          item.destroy();
        }
        delete this._items;
      }
      ButtonGroup.__super__.destroy.call(this);
    };

    ButtonGroup.prototype.clear = function() {
      var item, l, len1, ref, ref1;
      if ((ref = this._items) != null ? ref.length : void 0) {
        ref1 = this._items;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          item = ref1[l];
          item.destroy();
        }
        this._items = [];
        cola.util.delay(this, "refreshDom", 50, this._refreshDom);
      }
    };

    ButtonGroup.prototype.getItem = function(index) {
      var ref;
      return (ref = this._items) != null ? ref[index] : void 0;
    };

    ButtonGroup.prototype.getItems = function() {
      return this._items || cola.buttonGroup.emptyItems;
    };

    return ButtonGroup;

  })(cola.AbstractButton);

  cola.registerWidget(cola.ButtonGroup);

  cola.registerType("button-group", "_default", cola.Button);

  cola.registerType("button-group", "Separator", cola.buttonGroup.Separator);

  cola.registerTypeResolver("button-group", function(config) {
    return cola.resolveType("widget", config);
  });

  if (cola.slotPicker == null) {
    cola.slotPicker = {};
  }

  cola.slotPicker.ZyngaScroller = (function(superClass) {
    extend(ZyngaScroller, superClass);

    ZyngaScroller.events = {
      scrolled: null
    };

    function ZyngaScroller(container, options) {
      var self;
      self = this;
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.container = container;
      if ($fly(container).css("position") === "static") {
        $fly(container).css("position", "relative");
      }
      self.container.style.overflowX = "hidden";
      self.container.style.overflowY = "hidden";
      self.content = $fly(container).children(":first")[0];
      self.render = options.render;
      options.scrollingX = false;
      options.scrollingY = true;
      options.scrollingComplete = function() {
        return cola.util.delay(self, "scrolled", 50, self._scrolled);
      };
      self.scroller = new Scroller(function(left, top, zoom) {
        self.render(left, top, zoom);
        cola.util.delay(self, "scrolled", 50, self._scrolled);
        self._scrolling(left, top, zoom);
      }, options);
      this._bindEvents();
    }

    ZyngaScroller.prototype.scrollSize = function(dir, container, content) {
      var result, translate;
      translate = cola.Fx.getElementTranslate(content);
      cola.Fx.cancelTranslateElement(content);
      if (dir === "h") {
        result = Math.max(container.scrollWidth, content.clientWidth);
      } else {
        result = Math.max(container.scrollHeight, content.clientHeight);
      }
      cola.Fx.translateElement(content, translate.left, translate.top);
      return result;
    };

    ZyngaScroller.prototype.update = function() {
      var content, scrollHeight, scrollLeft, scrollTop, scrollWidth, viewHeight, viewWidth;
      if (!this._contentInited) {
        content = this.content = this.container.children[0];
        this._contentInited = !!this.content;
      }
      if (!this.content) {
        return;
      }
      viewWidth = this.container.clientWidth;
      viewHeight = this.container.clientHeight;
      scrollWidth = this.scrollSize("h", this.container, this.content);
      scrollHeight = this.scrollSize("v", this.container, this.content);
      this.scroller.options.scrollingX = false;
      this.scroller.options.scrollingY = true;
      this.scrollHeight = scrollHeight;
      this.scroller.setDimensions(viewWidth, viewHeight, scrollWidth, scrollHeight);
      if (this.snapHeight || this.snapWidth) {
        this.scroller.setSnapSize(this.snapWidth || 100, this.snapHeight || 100);
      }
      scrollTop = this.defaultScrollTop;
      scrollLeft = this.defaultScrollLeft;
      if (scrollTop !== void 0 || scrollLeft !== void 0) {
        this.scroller.scrollTo(scrollLeft, scrollTop, false);
        this.defaultScrollTop = void 0;
        this.defaultScrollLeft = void 0;
      }
      return this;
    };

    ZyngaScroller.prototype._scrolled = function() {
      var oldValue, top, value;
      value = this.getValues();
      oldValue = this._scrollTop;
      if (oldValue === value.top) {
        return;
      }
      top = Math.round(value.top / 60) * 60;
      this._scrollTop = top;
      this.scrollTo(value.left, top, true);
      this.fire("scrolled", this, {
        left: value,
        top: top
      });
    };

    ZyngaScroller.prototype._scrolling = function() {};

    ZyngaScroller.prototype._bindEvents = function() {
      var handleEnd, handleMouseWheel, handleMove, handleStart, self;
      self = this;
      handleStart = this._handleStart = function() {
        var event;
        event = window.event;
        if (event.target.tagName.match(/input|select/i)) {
          event.stopPropagation();
          return;
        }
        if (cola.os.mobile) {
          self.scroller.doTouchStart(event.touches, event.timeStamp);
        } else {
          self.scroller.doTouchStart([
            {
              pageX: event.pageX,
              pageY: event.pageY
            }
          ], event.timeStamp);
        }
        self._touchStart = true;
        event.preventDefault();
      };
      handleMove = this._handleMove = function() {
        var event;
        event = window.event;
        if (!self._touchStart) {
          return;
        }
        if (cola.os.mobile) {
          self.scroller.doTouchMove(event.touches, event.timeStamp);
        } else {
          self.scroller.doTouchMove([
            {
              pageX: event.pageX,
              pageY: event.pageY
            }
          ], event.timeStamp);
        }
      };
      handleEnd = this._handleEnd = function() {
        var event;
        if (!self._touchStart) {
          return;
        }
        event = window.event;
        self.scroller.doTouchEnd(event.timeStamp);
        self._touchStart = false;
      };
      handleMouseWheel = this._handleMouseWheel = function(event) {
        self.scroller.scrollBy(0, event.wheelDelta, true);
      };
      self.container.addEventListener("mousewheel", handleMouseWheel);
      if (cola.os.mobile) {
        $(self.container).on("touchstart", handleStart).on("touchmove", handleMove).on("touchend", handleEnd);
      } else {
        $(self.container).on("mousedown", handleStart).on("mousemove", handleMove).on("mouseup", handleEnd);
      }
      return this;
    };

    ZyngaScroller.prototype.scrollTo = function(left, top, animate) {
      this.scroller.scrollTo(left, top, animate);
    };

    ZyngaScroller.prototype.scrollBy = function(left, top) {
      this.scroller.scrollBy(left, top, animate);
    };

    ZyngaScroller.prototype.getValues = function() {
      return this.scroller.getValues();
    };

    ZyngaScroller.prototype.destroy = function() {
      cola.util.cancelDelay(this, "scrolled");
      if (cola.os.mobile) {
        $(this.container).off("touchstart", this._handleStart).off("touchmove", this._handleMove).off("touchend", this._handleEnd);
      } else {
        $(this.container).off("mousedown", this._handleStart).off("mousemove", this._handleMove).off("mouseup", this._handleEnd);
      }
      delete this.container;
      delete this.content;
    };

    return ZyngaScroller;

  })(cola.Element);

  cola.AbstractSlotList = (function(superClass) {
    extend(AbstractSlotList, superClass);

    function AbstractSlotList() {
      return AbstractSlotList.__super__.constructor.apply(this, arguments);
    }

    return AbstractSlotList;

  })(cola.RenderableElement);

  cola.SlotList = (function(superClass) {
    extend(SlotList, superClass);

    function SlotList() {
      return SlotList.__super__.constructor.apply(this, arguments);
    }

    SlotList.CLASS_NAME = "list";

    SlotList.attributes = {
      viewItemCount: {
        type: "number",
        refreshDom: true,
        defalutValue: 3
      },
      items: {
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this._items;
          this._oldItems = oldValue || [];
          this._items = value;
          if (this._dom) {
            return this._itemChanged = true;
          }
        }
      },
      value: {
        getter: function() {
          var currentIndex, items;
          items = this.doGetItems();
          currentIndex = this._currentIndex || 0;
          if (items && currentIndex !== void 0) {
            return items[currentIndex];
          }
          return void 0;
        },
        setter: function(value) {
          var items, newIndex, oldIndex;
          items = this.doGetItems();
          oldIndex = this._currentIndex;
          newIndex = items.indexOf(value);
          if (newIndex === oldIndex) {
            return;
          }
          this._currentIndex = items.indexOf(value);
          if (this._dom) {
            return this.syncScroll();
          }
        }
      },
      defaultValue: null,
      currentIndex: {
        type: "number",
        refreshDom: true,
        defaultValue: 0
      },
      formatter: null
    };

    SlotList.events = {
      valueChange: null
    };

    SlotList.prototype.doTouchStart = function(touches, timeStamp) {
      var ref;
      cola.slotPicker._activePicker = this;
      if ((ref = this._scroller) != null) {
        ref.doTouchMove(touches, timeStamp);
      }
    };

    SlotList.prototype.doTouchMove = function(touches, timeStamp) {
      var ref;
      if ((ref = this._scroller) != null) {
        ref.doTouchMove(touches, timeStamp);
      }
    };

    SlotList.prototype.doTouchEnd = function(timeStamp) {
      var ref;
      if ((ref = this._scroller) != null) {
        ref.doTouchEnd(timeStamp);
      }
      cola.slotPicker._activePicker = null;
    };

    SlotList.prototype.syncScroll = function() {
      var doms, item, value;
      if (!this._zyngaScroller) {
        return;
      }
      doms = this._doms;
      value = this.get("value");
      if (value !== void 0) {
        item = $fly(doms.body).find(" > .slot-item")[this._currentIndex];
        if (item) {
          this._disableScrollEvent = true;
          this._zyngaScroller.scrollTo(0, item.offsetTop - 60, false);
          return this._disableScrollEvent = false;
        }
      }
    };

    SlotList.prototype._createDom = function() {
      var dom, doms, dummyItemCount, formatter, i, itemDom, items, list, viewItemCount;
      list = this;
      if (this._doms == null) {
        this._doms = {};
      }
      doms = this._doms;
      dom = $.xCreate({
        "class": this.constructor.CLASS_NAME,
        content: [
          {
            "class": "items-wrap",
            contextKey: "body"
          }
        ]
      }, this._doms);
      viewItemCount = this._viewItemCount || 3;
      dummyItemCount = Math.floor(viewItemCount / 2);
      i = 0;
      while (i < dummyItemCount) {
        itemDom = document.createElement("div");
        itemDom.className = "dummy-item";
        doms.body.appendChild(itemDom);
        i++;
      }
      items = list.doGetItems();
      formatter = this._formatter || function(index, value) {
        return value;
      };
      i = 0;
      while (i < items.length) {
        itemDom = document.createElement("div");
        itemDom.className = "slot-item";
        itemDom.innerHTML = formatter(i, items[i]);
        doms.body.appendChild(itemDom);
        i++;
      }
      i = 0;
      while (i < dummyItemCount) {
        itemDom = document.createElement("div");
        itemDom.className = "dummy-item";
        doms.body.appendChild(itemDom);
        i++;
      }
      return dom;
    };

    SlotList.prototype._initDom = function(dom) {
      var defaultValue, index, item, items, list, position, scrollTop;
      list = this;
      items = this.doGetItems();
      defaultValue = this._defaultValue;
      scrollTop = 0;
      if (defaultValue !== void 0) {
        index = this._currentIndex = items.indexOf(defaultValue);
        item = $fly(this._doms.body).find(" > *")[index];
        position = $fly(item).position();
        scrollTop = position.top;
      }
      list._zyngaScroller = new cola.slotPicker.ZyngaScroller(dom, {
        render: cola.util.getScrollerRender(this._doms.body)
      });
      list._zyngaScroller.on("scrolled", function(self, arg) {
        var itemIndex, value;
        itemIndex = Math.round(arg.top / 60);
        position = itemIndex * 60;
        if (position === arg.top) {
          list._currentIndex = Math.abs(itemIndex);
          value = list.get("value");
          return list.fire("valueChange", list, {
            currentIndex: Math.abs(itemIndex),
            value: value
          });
        }
      });
    };

    SlotList.prototype._updateScroller = function() {
      var dom, doms, rect;
      if (this._scroller) {
        rect = this._dom.getBoundingClientRect();
        dom = this._dom;
        doms = this._doms;
        this._scroller.setPosition(rect.left + dom.clientLeft, rect.top + dom.clientTop);
        return this._scroller.setDimensions(dom.clientWidth, dom.clientHeight, doms.body.offsetWidth, doms.body.offsetHeight);
      }
    };

    SlotList.prototype._refreshItemDoms = function() {
      var doms, dummyItemCount, finalLength, formatter, i, insertSize, itemDom, items, nodeLength, refDom, removeSize, viewItemCount;
      items = this.doGetItems();
      doms = this._doms;
      viewItemCount = this._viewItemCount || 3;
      dummyItemCount = Math.floor(viewItemCount / 2);
      formatter = this._formatter || function(index, value) {
        return value;
      };
      nodeLength = doms.body.children.length;
      finalLength = items.length + dummyItemCount * 2;
      if (finalLength > nodeLength) {
        refDom = doms.body.children[nodeLength - dummyItemCount];
        insertSize = finalLength - nodeLength;
        i = 0;
        while (i < insertSize) {
          itemDom = document.createElement("div");
          itemDom.className = "slot-item";
          doms.body.insertBefore(itemDom, refDom);
          i++;
        }
      } else if (finalLength < nodeLength) {
        removeSize = nodeLength - finalLength;
        i = 0;
        while (i < removeSize) {
          $fly(doms.body.children[finalLength - dummyItemCount]).remove();
          i++;
        }
      }
      i = 0;
      while (i < items.length) {
        itemDom = doms.body.children[i + 1];
        itemDom.className = "slot-item";
        itemDom.innerHTML = formatter(i, items[i]);
        i++;
      }
      return this._itemChanged = false;
    };

    SlotList.prototype._doRefreshDom = function() {
      var list;
      if (!this._dom) {
        return;
      }
      list = this;
      this._refreshItemDoms();
      if (list._zyngaScroller) {
        list._zyngaScroller.update();
        return list.syncScroll();
      }
    };

    SlotList.prototype.doGetItems = function() {
      return this._items || [];
    };

    return SlotList;

  })(cola.AbstractSlotList);

  cola.RangeSlotList = (function(superClass) {
    extend(RangeSlotList, superClass);

    function RangeSlotList() {
      return RangeSlotList.__super__.constructor.apply(this, arguments);
    }

    RangeSlotList.attributes = {
      range: {
        refreshDom: true,
        setter: function(value) {
          this._oldItems = this.doGetItems();
          this._range = value;
          if (this._dom) {
            this._itemChanged = true;
          }
          return this;
        }
      },
      step: {
        defaultValue: 1
      }
    };

    RangeSlotList.prototype.doGetItems = function() {
      var i, itemCount, items, range, start, step;
      range = this._range;
      items = [];
      if (range && range.length === 2) {
        start = range[0];
        step = this._step;
        itemCount = (range[1] - start) / step + 1;
        i = 0;
        while (i < itemCount) {
          items.push(start + i * step);
          i++;
        }
      }
      return items;
    };

    return RangeSlotList;

  })(cola.SlotList);

  cola.MultiSlotPicker = (function(superClass) {
    extend(MultiSlotPicker, superClass);

    MultiSlotPicker.CLASS_NAME = "multi-slot-picker";

    MultiSlotPicker.slotConfigs = [];

    MultiSlotPicker.attributes = {
      height: null
    };

    MultiSlotPicker.prototype._createDom = function() {
      var dom, domContext, doms, i, itemDom, items, j, list, picker, slotConfig, slotConfigs, slotDom, slotLists, slotName;
      picker = this;
      doms = {};
      dom = $.xCreate({
        "class": this.constructor.CLASS_NAME,
        content: [
          {
            "class": "body",
            contextKey: "body"
          }
        ]
      }, doms);
      picker._doms = doms;
      picker._slotListMap = {};
      slotConfigs = picker.slotConfigs;
      items = [];
      slotLists = [];
      i = 0;
      j = slotConfigs.length;
      while (i < j) {
        slotConfig = slotConfigs[i];
        slotName = slotConfig.name;
        domContext = {};
        itemDom = $.xCreate({
          "class": "slot-picker",
          style: {
            webkitBoxFlex: 1
          },
          content: [
            {
              content: slotConfig.unit || "",
              "class": "unit"
            }, {
              "class": "slot",
              contextKey: "slot",
              content: [
                {
                  "class": "mask",
                  content: {
                    "class": "bar"
                  }
                }
              ]
            }
          ]
        }, domContext);
        slotDom = domContext.slot;
        if (slotConfig.$type === "Range") {
          list = new cola.RangeSlotList({
            range: slotConfig.range,
            formatter: slotConfig.formatter,
            defaultValue: slotConfig.defaultValue,
            valueChange: function(self, arg) {
              var value;
              value = arg.value;
              return picker.setSlotValue(self._slotIndex, value);
            }
          });
        } else {
          list = new cola.SlotList({
            items: slotConfig.items,
            formatter: slotConfig.formatter,
            defaultValue: slotConfig.defaultValue,
            valueChange: function(self, arg) {
              var value;
              value = arg.value;
              return picker.setSlotValue(self._slotIndex, value);
            }
          });
        }
        list._slotIndex = i;
        picker._slotListMap[slotName] = list;
        list.appendTo(slotDom);
        doms.body.appendChild(itemDom);
        slotLists.push(list);
        items.push(slotDom);
        i++;
      }
      picker._slotLists = slotLists;
      picker._items = items;
      return dom;
    };

    function MultiSlotPicker(config) {
      if (this.slotConfigs) {
        this.initSlotConfigs();
      }
      MultiSlotPicker.__super__.constructor.call(this, config);
    }

    MultiSlotPicker.prototype.initSlotConfigs = function() {
      var config, i, j, name, slotConfigs, slotMap, values;
      slotConfigs = this.slotConfigs;
      slotMap = this._slotMap = {};
      values = this._values = [];
      i = 0;
      j = slotConfigs.length;
      while (i < j) {
        config = slotConfigs[i];
        name = config.name;
        config["class"] = config.className || "slot";
        config.range = config.range || [null, null];
        slotMap[name] = config;
        values[i] = config.defaultValue;
        i++;
      }
    };

    MultiSlotPicker.prototype.getSlotValue = function(slotIndex) {
      if (typeof slotIndex === "string") {
        slotIndex = this.getSlotIndexByName(slotIndex);
      }
      return this._values[slotIndex];
    };

    MultiSlotPicker.prototype.setSlotValue = function(slotIndex, value) {
      var config, maxValue, minValue, picker, range;
      picker = this;
      if (typeof slotIndex === "string") {
        slotIndex = picker.getSlotIndexByName(slotIndex);
      }
      if (slotIndex < 0) {
        return;
      }
      if (value !== null) {
        config = picker.slotConfigs[slotIndex];
        range = config.range || [];
        minValue = range[0];
        maxValue = range[1];
        value = parseInt(value, 10);
        if (isNaN(value)) {
          value = config.defaultValue || 0;
        }
        if (maxValue !== null && value > maxValue) {
          value = maxValue;
        } else if (minValue !== null && value < minValue) {
          value = minValue;
        }
      }
      this._values[slotIndex] = value;
      if (this._dom && this._slotLists) {
        return this._slotLists[slotIndex].set("value", value);
      }
    };

    MultiSlotPicker.prototype.getSlotText = function(slotIndex) {
      var config, i, negative, num, picker, text;
      picker = this;
      if (typeof slotIndex === "string") {
        slotIndex = picker.getSlotIndexByName(slotIndex);
      }
      if (slotIndex < 0) {
        return "";
      }
      config = picker.slotConfigs[slotIndex];
      text = picker.getSlotValue(slotIndex);
      if (text === null) {
        if (config.digit > 0) {
          text = '';
          i = 0;
          while (i < config.digit) {
            text += "&nbsp;";
            i++;
          }
        } else {
          text = "&nbsp;";
        }
      } else {
        num = text;
        negative = num < 0;
        text = Math.abs(num) + "";
        if (config.digit > 0 && text.length < config.digit) {
          i = text.length;
          while (i <= config.digit - 1) {
            text = '0' + text;
            i++;
          }
        }
        text = (negative != null ? negative : {
          '-': ''
        }) + text;
      }
      return text;
    };

    MultiSlotPicker.prototype.getText = function() {
      var config, i, picker, slotConfigs, text;
      picker = this;
      slotConfigs = picker.slotConfigs;
      text = "";
      i = 0;
      while (i < slotConfigs.length) {
        config = slotConfigs[i];
        text += config.prefix || "";
        text += picker.getSlotText(i);
        text += config.suffix || "";
        i++;
      }
      return text;
    };

    MultiSlotPicker.prototype.getSlotIndexByName = function(name) {
      var config;
      if (!this._slotMap) {
        this.initSlotConfigs();
      }
      config = this._slotMap[name];
      if (config) {
        return this.slotConfigs.indexOf(config);
      } else {
        return -1;
      }
    };

    MultiSlotPicker.prototype.doOnResize = function() {
      var columnCount, dom, flex, flexes, i, index, item, items, l, lastWidth, len1, picker, results, totalFlex, unitWidth, viewWidth, width;
      picker = this;
      items = picker._items || [];
      dom = picker._dom;
      flexes = [];
      for (index = l = 0, len1 = items.length; l < len1; index = ++l) {
        item = items[index];
        width = picker.slotConfigs[index].width || 90;
        flexes.push(width);
      }
      viewWidth = dom.clientWidth;
      columnCount = flexes.length;
      totalFlex = 0;
      i = 0;
      while (i < columnCount) {
        flex = flexes[i];
        totalFlex += parseInt(flex, 10) || 90;
        i++;
      }
      unitWidth = viewWidth / totalFlex;
      lastWidth = 0;
      i = 0;
      results = [];
      while (i < columnCount) {
        if (i !== columnCount - 1) {
          $fly(items[i]).css({
            width: Math.floor(unitWidth * flexes[i])
          });
          lastWidth += Math.floor(unitWidth * flexes[i]);
        } else {
          $fly(items[i]).css({
            width: viewWidth - lastWidth
          });
        }
        results.push(i++);
      }
      return results;
    };

    MultiSlotPicker.prototype.updateItems = function() {
      var l, len1, list, ref;
      ref = this._slotLists;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        list = ref[l];
        list.refresh();
      }
      return this;
    };

    return MultiSlotPicker;

  })(cola.AbstractSlotList);

  now = new Date();

  currentYear = now.getFullYear();

  currentMonth = now.getMonth() + 1;

  currentDate = now.getDate();

  currentHours = now.getHours();

  currentMinutes = now.getMinutes();

  currentSeconds = now.getSeconds();

  dateTimeSlotConfigs = {
    year: {
      $type: "Range",
      name: "year",
      range: [currentYear - 50, currentYear + 50],
      defaultValue: currentYear,
      unit: "年",
      width: 120
    },
    month: {
      $type: "Range",
      name: "month",
      range: [1, 12],
      defaultValue: currentMonth,
      unit: "月",
      width: 90
    },
    date: {
      $type: "Range",
      name: "date",
      range: [1, 31],
      defaultValue: currentDate,
      unit: "日",
      width: 90
    },
    hours: {
      $type: "Range",
      name: "hours",
      range: [0, 23],
      defaultValue: currentHours,
      unit: "时",
      width: 90
    },
    minutes: {
      $type: "Range",
      name: "minutes",
      range: [0, 59],
      defaultValue: 0,
      unit: "分",
      width: 90
    },
    seconds: {
      $type: "Range",
      name: "seconds",
      range: [0, 59],
      defaultValue: 0,
      unit: "秒",
      width: 90
    }
  };

  slotAttributeGetter = function(attr) {
    return this.getSlotValue(attr);
  };

  slotAttributeSetter = function(value, attr) {
    return this.setSlotValue(attr, value);
  };

  dateTypeConfig = {
    year: [dateTimeSlotConfigs.year],
    month: [dateTimeSlotConfigs.year, dateTimeSlotConfigs.month],
    date: [dateTimeSlotConfigs.year, dateTimeSlotConfigs.month, dateTimeSlotConfigs.date],
    time: [dateTimeSlotConfigs.hours, dateTimeSlotConfigs.minutes, dateTimeSlotConfigs.seconds],
    dateTime: [dateTimeSlotConfigs.year, dateTimeSlotConfigs.month, dateTimeSlotConfigs.date, dateTimeSlotConfigs.hours, dateTimeSlotConfigs.minutes, dateTimeSlotConfigs.seconds],
    hours: [dateTimeSlotConfigs.hours],
    minutes: [dateTimeSlotConfigs.hours, dateTimeSlotConfigs.minutes],
    dateHours: [dateTimeSlotConfigs.year, dateTimeSlotConfigs.month, dateTimeSlotConfigs.date, dateTimeSlotConfigs.hours],
    dateMinutes: [dateTimeSlotConfigs.year, dateTimeSlotConfigs.month, dateTimeSlotConfigs.date, dateTimeSlotConfigs.hours, dateTimeSlotConfigs.minutes]
  };

  if (cola.mobile == null) {
    cola.mobile = {};
  }

  cola.mobile.DateTimePicker = (function(superClass) {
    extend(DateTimePicker, superClass);

    function DateTimePicker() {
      return DateTimePicker.__super__.constructor.apply(this, arguments);
    }

    DateTimePicker.CLASS_NAME = "multi-slot-picker";

    DateTimePicker.slotConfigs = [];

    DateTimePicker.attributes = {
      type: {
        "enum": ["year", "month", "date", "time", "datetime", "hours", "minutes", "dateHours", "dateMinutes"],
        defaultValue: "date"
      },
      year: {
        getter: slotAttributeGetter,
        setter: slotAttributeSetter
      },
      month: {
        getter: slotAttributeGetter,
        setter: slotAttributeSetter
      },
      date: {
        getter: slotAttributeGetter,
        setter: slotAttributeSetter
      },
      hours: {
        getter: slotAttributeGetter,
        setter: slotAttributeSetter
      },
      minutes: {
        getter: slotAttributeGetter,
        setter: slotAttributeSetter
      },
      seconds: {
        getter: slotAttributeGetter,
        setter: slotAttributeSetter
      },
      value: {
        getter: function() {
          var date, hours, minutes, month, seconds, year;
          year = this.getSlotValue("year") || 1980;
          month = (this.getSlotValue("month") - 1) || 0;
          date = this.getSlotValue("date") || 1;
          hours = this.getSlotValue("hours") || 0;
          minutes = this.getSlotValue("minutes") || 0;
          seconds = this.getSlotValue("seconds") || 0;
          return new Date(year, month, date, hours, minutes, seconds);
        },
        setter: function(d) {
          var date, hours, minutes, month, seconds, year;
          year = 0;
          month = 1;
          date = 1;
          hours = 0;
          minutes = 1;
          seconds = 1;
          if (d) {
            year = d.getFullYear();
            month = d.getMonth() + 1;
            date = d.getDate();
            hours = d.getHours();
            minutes = d.getMinutes();
            seconds = d.getSeconds();
          }
          this.setSlotValue("year", year);
          this.setSlotValue("month", month);
          this.setSlotValue("date", date);
          this.setSlotValue("hours", hours);
          this.setSlotValue("minutes", minutes);
          return this.setSlotValue("seconds", seconds);
        }
      }
    };

    DateTimePicker.prototype._createDom = function() {
      var configs, dayCount, dom, month, picker, type, year;
      picker = this;
      type = picker._type;
      configs = dateTypeConfig[type];
      picker.slotConfigs = configs;
      picker.initSlotConfigs();
      dom = DateTimePicker.__super__._createDom.call(this);
      if (picker._slotMap["date"]) {
        year = picker.getSlotValue("year");
        month = picker.getSlotValue("month");
        dayCount = XDate.getDaysInMonth(year, month - 1);
        picker.refreshSlotList("date", {
          range: [1, dayCount]
        });
      }
      return dom;
    };

    DateTimePicker.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      DateTimePicker.__super__._doRefreshDom.call(this);
      this._classNamePool.add("multi-slot-picker");
    };

    DateTimePicker.prototype.refreshSlotList = function(slotName, value) {
      var picker, slotList;
      picker = this;
      slotList = picker._slotListMap[slotName];
      if (slotList && value !== void 0) {
        slotList.set(value);
      }
      return this;
    };

    DateTimePicker.prototype.setSlotValue = function(slotIndex, value) {
      var config, date, dateSlotIndex, dayCount, month, newDate, picker, slotName, year;
      picker = this;
      if (value === null) {
        DateTimePicker.__super__.setSlotValue.call(this, slotIndex, value);
        return;
      }
      if (typeof slotIndex === "number") {
        config = picker.slotConfigs[slotIndex];
        if (config) {
          slotName = config.name;
        }
      } else {
        slotName = slotIndex;
        slotIndex = picker.getSlotIndexByName(slotName);
      }
      if (!slotName || !picker._slotMap[slotName]) {
        return;
      }
      if (!picker._slotMap["date"]) {
        DateTimePicker.__super__.setSlotValue.call(this, slotIndex, value);
        return;
      }
      dateSlotIndex = picker.getSlotIndexByName("date");
      date = picker._values[dateSlotIndex];
      newDate = 0;
      year = slotIndex === 0 ? value : picker._values[0];
      month = slotIndex === 1 ? value : picker._values[1];
      dayCount = XDate.getDaysInMonth(year, month - 1);
      if (slotName === "year" || slotName === "month") {
        picker.refreshSlotList("date", {
          range: [1, dayCount]
        });
      }
      if (date >= 28 && date > dayCount) {
        newDate = dayCount;
      }
      if (newDate) {
        if (slotName === "year" || slotName === "month") {
          picker.setSlotValue("date", newDate);
          picker._slotListMap[slotName]._value = newDate;
          picker.refreshSlotList("date");
          return DateTimePicker.__super__.setSlotValue.call(this, slotIndex, value);
        } else {
          return DateTimePicker.__super__.setSlotValue.call(this, slotIndex, newDate);
        }
      } else {
        return DateTimePicker.__super__.setSlotValue.call(this, slotIndex, value);
      }
    };

    return DateTimePicker;

  })(cola.MultiSlotPicker);

  cola.mobile.showDateTimePicker = function(options) {
    var actionDom, layerDom, picker, timerLayer;
    timerLayer = cola.mobile._cacheDateTimer;
    if (timerLayer) {
      if (options.type !== timerLayer._picker.get("type")) {
        timerLayer.destroy();
        cola.mobile._cacheDateTimer = null;
        timerLayer = null;
      }
    }
    if (!timerLayer) {
      picker = new cola.mobile.DateTimePicker({
        type: options.type || "date"
      });
      timerLayer = new cola.Layer({
        animation: "slide up",
        vertical: true,
        horizontal: true,
        "class": "date-timer"
      });
      timerLayer._picker = picker;
      layerDom = timerLayer.getDom();
      layerDom.appendChild(picker.getDom());
      actionDom = $.xCreate({
        "class": "actions ui two fluid bottom attached buttons",
        content: [
          {
            "class": "ui button",
            content: cola.resource("cola.message.deny"),
            click: function() {
              cola.commonDimmer.hide();
              return timerLayer.hide();
            }
          }, {
            "class": "ui positive button",
            content: cola.resource("cola.message.approve"),
            click: function() {
              cola.commonDimmer.hide();
              timerLayer.hide();
              if (typeof timerLayer._hideCallback === "function") {
                timerLayer._hideCallback(picker);
              }
              return delete timerLayer._hideCallback;
            }
          }
        ]
      });
      layerDom.appendChild(actionDom);
      $fly(layerDom).css("top", "auto");
      window.document.body.appendChild(layerDom);
      cola.mobile._cacheDateTimer = timerLayer;
    }
    timerLayer = cola.mobile._cacheDateTimer;
    if (options == null) {
      options = {};
    }
    if (options.onHide) {
      timerLayer._hideCallback = options.onHide;
      delete options.onHide;
    }
    cola.commonDimmer.show();
    timerLayer.show(function() {
      timerLayer._picker.set(options);
      return timerLayer._picker.updateItems();
    });
    return timerLayer._picker;
  };

  (function() {
    var DateHelper, getCellPosition, getDateTableState;
    getCellPosition = function(event) {
      var column, element, row, tagName;
      element = event.srcElement || event.target;
      row = -1;
      column = -1;
      while (element && element !== element.ownerDocument.body) {
        tagName = element.tagName.toLowerCase();
        if (tagName === "td") {
          row = element.parentNode.rowIndex;
          column = element.cellIndex;
          break;
        }
        element = element.parentNode;
      }
      if (element !== element.ownerDocument.body) {
        return {
          row: row,
          column: column,
          element: element
        };
      }
      return null;
    };
    if (cola.calendar == null) {
      cola.calendar = {};
    }
    cola.calendar.getCellPosition = getCellPosition;
    cola.calendar.DateGrid = (function(superClass) {
      extend(DateGrid, superClass);

      function DateGrid() {
        return DateGrid.__super__.constructor.apply(this, arguments);
      }

      DateGrid.attributes = {
        calendar: null,
        columnCount: {
          type: "number",
          defaultValue: 1
        },
        rowCount: {
          type: "number",
          defaultValue: 1
        },
        cellClassName: null,
        selectedCellClassName: "",
        rowClassName: null,
        tableClassName: null
      };

      DateGrid.events = {
        cellClick: null,
        refreshCellDom: null
      };

      DateGrid.prototype._createDom = function() {
        var columnCount, dom, i, j, picker, rowCount, td, tr;
        picker = this;
        columnCount = this._columnCount;
        rowCount = this._rowCount;
        if (this._doms == null) {
          this._doms = {};
        }
        dom = $.xCreate({
          tagName: "table",
          cellSpacing: 0,
          "class": (picker._className || "") + " " + (picker._tableClassName || ""),
          content: {
            tagName: "tbody",
            contextKey: "body"
          }
        }, this._doms);
        i = 0;
        while (i < rowCount) {
          tr = document.createElement("tr");
          j = 0;
          while (j < columnCount) {
            td = document.createElement("td");
            if (this._cellClassName) {
              td.className = this._cellClassName;
            }
            this.doRenderCell(td, i, j);
            tr.appendChild(td);
            j++;
          }
          if (this._rowClassName) {
            tr.className = this._rowClassName;
          }
          this._doms.body.appendChild(tr);
          i++;
        }
        $fly(dom).on("click", function(event) {
          var position;
          position = getCellPosition(event);
          if (position && position.element) {
            if (position.row >= picker._rowCount) {
              return;
            }
            return picker.fire("cellClick", picker, position);
          }
        });
        return dom;
      };

      DateGrid.prototype.doFireRefreshEvent = function(eventArg) {
        this.fire("refreshCellDom", this, eventArg);
        return this;
      };

      DateGrid.prototype.refreshGrid = function() {
        var cell, columnCount, dom, eventArg, i, j, lastSelectedCell, picker, rowCount, rows;
        picker = this;
        dom = this._doms.body;
        columnCount = this._columnCount;
        rowCount = this._rowCount;
        lastSelectedCell = this._lastSelectedCell;
        if (lastSelectedCell) {
          $fly(lastSelectedCell).removeClass(this._selectedCellClassName || "selected");
          this._lastSelectedCell = null;
        }
        i = 0;
        while (i < rowCount) {
          rows = dom.rows[i];
          j = 0;
          while (j < columnCount) {
            cell = rows.cells[j];
            if (picker._cellClassName) {
              cell.className = picker._cellClassName;
            }
            eventArg = {
              cell: cell,
              row: i,
              column: j
            };
            this.doFireRefreshEvent(eventArg);
            if (eventArg.processDefault !== false) {
              this.doRefreshCell(cell, i, j);
            }
            j++;
          }
          i++;
        }
        return this;
      };

      DateGrid.prototype.setSelectionCell = function(row, column) {
        var cell, lastSelectedCell, picker, tbody;
        picker = this;
        lastSelectedCell = this._lastSelectedCell;
        row = null;
        column = null;
        if (!this._dom) {
          this._selectionPosition = {
            row: row,
            column: column
          };
          return this;
        }
        if (lastSelectedCell) {
          $fly(lastSelectedCell).removeClass(this._selectedCellClassName || "selected");
          this._lastSelectedCell = null;
        }
        tbody = picker._doms.body;
        if (tbody.rows[row]) {
          cell = tbody.rows[row].cells[column];
        }
        if (!cell) {
          return this;
        }
        $fly(cell).addClass(this._selectedCellClassName || "selected");
        this._lastSelectedCell = cell;
        return this;
      };

      DateGrid.prototype.getYMForState = function(cellState) {
        var month, year;
        month = this._month;
        year = this._year;
        if (cellState.type === "prev-month") {
          year = month === 0 ? year - 1 : year;
          month = month === 0 ? 11 : month - 1;
        } else if (cellState.type === "next-month") {
          year = month === 11 ? year + 1 : year;
          month = month === 11 ? 0 : month + 1;
        }
        return {
          year: year,
          month: month
        };
      };

      DateGrid.prototype.doFireRefreshEvent = function(eventArg) {
        var cellState, column, row, ym;
        row = eventArg.row;
        column = eventArg.column;
        if (this._state && this._year && this._month) {
          cellState = this._state[row * 7 + column];
          ym = this.getYMForState(cellState);
          eventArg.date = new Date(ym.year, ym.month, cellState.text);
        }
        this.fire("refreshCellDom", this, eventArg);
        return this;
      };

      DateGrid.prototype.doRenderCell = function(cell, row, column) {
        var label;
        label = document.createElement("div");
        label.className = "label";
        cell.appendChild(label);
      };

      DateGrid.prototype.getDateCellDom = function(date) {
        var value;
        value = new XDate(date).toString("yyyy-M-d");
        return $(this._dom).find("td[cell-date='" + value + "']");
      };

      DateGrid.prototype.doRefreshCell = function(cell, row, column) {
        var cellState, state, ym;
        state = this._state;
        if (!state) {
          return;
        }
        cellState = state[row * 7 + column];
        $fly(cell).removeClass("prev-month next-month").addClass(cellState.type).find(".label").html(cellState.text);
        ym = this.getYMForState(cellState);
        $fly(cell).attr("cell-date", ym.year + "-" + (ym.month + 1) + "-" + cellState.text);
        if (cellState.type === "normal") {
          if (this._year === this._calendar._year && this._month === this._calendar._month && cellState.text === this._calendar._monthDate) {
            $fly(cell).addClass("selected");
            return this._lastSelectedCell = cell;
          }
        }
      };

      DateGrid.prototype.setState = function(year, month) {
        var oldMonth, oldYear;
        oldYear = this._year;
        oldMonth = this._month;
        if (oldYear !== year || oldMonth !== month) {
          this._year = year;
          this._month = month;
          this._state = getDateTableState(new Date(year, month, 1));
          this.refreshGrid();
        }
        return this.onCalDateChange();
      };

      DateGrid.prototype.onCalDateChange = function() {
        var cell, column, date, delta, firstDayPosition, month, monthDate, row, state, tbody, year;
        if (!this._dom) {
          return this;
        }
        date = this._calendar._date;
        year = this._year;
        month = this._month;
        if (date && year === date.getFullYear() && month === date.getMonth() && date.getDate()) {
          monthDate = date.getDate();
          state = this._state;
          firstDayPosition = state.firstDayPosition;
          delta = monthDate + firstDayPosition - 1;
          column = delta % 7;
          row = Math.floor(delta / 7);
          tbody = this._doms.body;
          cell = tbody.rows[row].cells[column];
          if (this._lastSelectedCell) {
            $fly(this._lastSelectedCell).removeClass("selected");
          }
          if (cell) {
            $fly(cell).addClass("selected");
          }
          this._lastSelectedCell = cell;
        } else {
          if (this._lastSelectedCell) {
            $fly(this._lastSelectedCell).removeClass("selected");
          }
          this._lastSelectedCell = null;
        }
        return this;
      };

      return DateGrid;

    })(cola.RenderableElement);
    cola.calendar.SwipePicker = (function(superClass) {
      extend(SwipePicker, superClass);

      function SwipePicker() {
        return SwipePicker.__super__.constructor.apply(this, arguments);
      }

      SwipePicker.CLASS_NAME = "ui swipe-picker";

      SwipePicker.attributes = {
        calendar: null
      };

      SwipePicker.events = {
        change: null,
        monthChange: null
      };

      SwipePicker.prototype.createDateTable = function(dom) {
        var calendar, dateTable;
        calendar = this._calendar;
        dateTable = new cola.calendar.DateGrid({
          rowCount: 6,
          columnCount: 7,
          calendar: calendar,
          tableClassName: "date-table",
          refreshCellDom: function(self, arg) {
            return calendar.doFireCellRefresh(arg);
          },
          cellClick: function(self, arg) {
            var cellState, element, state;
            element = arg.element;
            state = self._state;
            if (!element) {
              return;
            }
            cellState = state[arg.row * 7 + arg.column];
            if (cellState.type === "prev-month") {
              calendar.prevMonth();
            } else if (cellState.type === "next-month") {
              calendar.nextMonth();
            }
            calendar.setDate(cellState.text);
            calendar.fire("change", calendar, {
              date: calendar._date
            });
            return calendar.fire("cellClick", calendar, {
              date: calendar._date,
              element: element
            });
          }
        });
        dateTable.appendTo(dom);
        return dateTable;
      };

      SwipePicker.prototype.doOnSwipeNext = function() {
        this._calendar.nextMonth();
        return this;
      };

      SwipePicker.prototype.doOnSwipePrev = function() {
        this._calendar.prevMonth();
        return this;
      };

      SwipePicker.prototype.setState = function(year, month) {
        var nextM, nextY, prevM, prevY, ref;
        this._current.setState(year, month);
        prevY = month === 0 ? year - 1 : year;
        prevM = month === 0 ? 11 : month - 1;
        this._prev.setState(prevY, prevM);
        nextY = month === 11 ? year + 1 : year;
        nextM = month === 11 ? 0 : month + 1;
        this._next.setState(nextY, nextM);
        if ((ref = this._calendar) != null) {
          ref.fire("monthChange", this._calendar, {
            year: year,
            month: month
          });
        }
        return this;
      };

      SwipePicker.prototype.setDate = function() {
        if (!this._dom) {
          return this;
        }
        this._current.onCalDateChange();
        this._prev.onCalDateChange();
        this._next.onCalDateChange();
        return this;
      };

      SwipePicker.prototype._createDom = function() {
        var dom, picker, setType, stackDom;
        dom = document.createElement("div");
        picker = this;
        dom.className = "date-table-wrapper";
        setType = function(type) {
          picker["_" + type] = this;
        };
        this._stack = new cola.Stack({
          change: (function(_this) {
            return function(self, arg) {
              var cDom;
              cDom = _this._current.getDom();
              if (arg.prev === cDom.parentNode) {
                return _this.doNext();
              } else {
                return _this.doPrev();
              }
            };
          })(this)
        });
        stackDom = this._stack.getDom();
        dom.appendChild(stackDom);
        this._current = this.createDateTable(this._stack._currentItem);
        this._current.setType = setType;
        this._current.setType("current");
        this._next = this.createDateTable(this._stack._nextItem);
        this._next.setType = setType;
        this._next.setType("next");
        this._prev = this.createDateTable(this._stack._prevItem);
        this._prev.setType = setType;
        this._prev.setType("prev");
        return dom;
      };

      SwipePicker.prototype.doNext = function() {
        var current, next, picker, prev;
        picker = this;
        current = picker._current;
        prev = picker._prev;
        next = picker._next;
        current.setType("prev");
        next.setType("current");
        prev.setType("next");
        return this.fire("change", this, {
          target: "next"
        });
      };

      SwipePicker.prototype.doPrev = function() {
        var current, next, picker, prev;
        picker = this;
        current = picker._current;
        prev = picker._prev;
        next = picker._next;
        current.setType("next");
        next.setType("prev");
        prev.setType("current");
        return this.fire("change", this, {
          target: "prev"
        });
      };

      SwipePicker.prototype.next = function(callback) {
        this._stack.next();
        if (typeof callback === "function") {
          callback();
        }
        return this;
      };

      SwipePicker.prototype.prev = function(callback) {
        this._stack.prev();
        if (typeof callback === "function") {
          callback();
        }
        return this;
      };

      SwipePicker.prototype.getDateCellDom = function(date) {
        return this._current.getDateCellDom(date);
      };

      return SwipePicker;

    })(cola.RenderableElement);
    DateHelper = {
      getDayCountOfMonth: function(year, month) {
        if (month === 3 || month === 5 || month === 8 || month === 10) {
          return 30;
        }
        if (month === 1) {
          if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
            return 29;
          } else {
            return 28;
          }
        }
        return 31;
      },
      getFirstDayOfMonth: function(date) {
        var temp;
        temp = new Date(date.getTime());
        temp.setDate(1);
        return temp.getDay();
      },
      getWeekNumber: function(date) {
        var d;
        d = new Date(+date);
        d.setHours(0, 0, 0);
        d.setDate(d.getDate() + 4 - (d.getDay() || 7));
        return Math.ceil((((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7) + 1) / 7);
      }
    };
    getDateTableState = function(date) {
      var cell, cells, count, day, firstDayPosition, i, j, lastM, lastMonthDay, maxDay;
      day = date.getDay();
      maxDay = DateHelper.getDayCountOfMonth(date.getFullYear(), date.getMonth());
      lastM = date.getMonth() === 0 ? 11 : date.getMonth() - 1;
      lastMonthDay = DateHelper.getDayCountOfMonth(date.getFullYear(), lastM);
      day = day === 0 ? 7 : day;
      cells = [];
      count = 1;
      firstDayPosition = null;
      i = 0;
      while (i < 6) {
        j = 0;
        while (j < 7) {
          cell = {
            row: i,
            column: j,
            type: "normal"
          };
          if (i === 0) {
            if (j >= day) {
              cell.text = count++;
              if (count === 2) {
                firstDayPosition = i * 7 + j;
              }
            } else {
              cell.text = lastMonthDay - (day - j % 7) + 1;
              cell.type = "prev-month";
            }
          } else {
            if (count <= maxDay) {
              cell.text = count++;
              if (count === 2) {
                firstDayPosition = i * 7 + j;
              }
            } else {
              cell.text = count++ - maxDay;
              cell.type = "next-month";
            }
          }
          cells.push(cell);
          j++;
        }
        i++;
      }
      cells.firstDayPosition = firstDayPosition;
      return cells;
    };
    cola.getDateTableState = getDateTableState;
    return cola.Calendar = (function(superClass) {
      extend(Calendar, superClass);

      function Calendar() {
        return Calendar.__super__.constructor.apply(this, arguments);
      }

      Calendar.CLASS_NAME = "calendar";

      Calendar.attributes = {
        date: {
          getter: function() {
            return this._date || new Date();
          }
        }
      };

      Calendar.events = {
        refreshCellDom: null,
        change: null,
        monthChange: null,
        cellClick: null
      };

      Calendar.prototype.doFireCellRefresh = function(arg) {
        return this.fire("refreshCellDom", this, arg);
      };

      Calendar.prototype.bindButtonsEvent = function() {
        var cal, doms, picker;
        cal = this;
        doms = this._doms;
        picker = this._datePicker;
        $fly(doms.prevMonthButton).on("click", function() {
          return picker.prev();
        });
        $fly(doms.nextMonthButton).on("click", function() {
          return picker.next();
        });
        $fly(doms.prevYearButton).on("click", function() {
          return cal.prevYear();
        });
        return $fly(doms.nextYearButton).on("click", function() {
          return cal.nextYear();
        });
      };

      Calendar.prototype._initDom = function(dom) {
        var allWeeks, cDom, cal, picker, weeks;
        allWeeks = cola.resource("cola.date.dayNamesShort");
        weeks = allWeeks.split(",");
        cal = this;
        if (this._doms == null) {
          this._doms = {};
        }
        cDom = $.xCreate({
          tagName: "div",
          content: [
            {
              tagName: "div",
              "class": "header",
              contextKey: "header",
              content: [
                {
                  tagName: "div",
                  "class": "month",
                  content: [
                    {
                      tagName: "span",
                      "class": "button prev",
                      contextKey: "prevMonthButton"
                    }, {
                      tagName: "span",
                      "class": "button next",
                      contextKey: "nextMonthButton"
                    }, {
                      tagName: "div",
                      "class": "label",
                      contextKey: "monthLabel"
                    }
                  ]
                }, {
                  tagName: "div",
                  "class": "year",
                  content: [
                    {
                      tagName: "span",
                      "class": "button prev",
                      contextKey: "prevYearButton"
                    }, {
                      tagName: "span",
                      "class": "button next",
                      contextKey: "nextYearButton"
                    }, {
                      tagName: "div",
                      "class": "label",
                      contextKey: "yearLabel"
                    }
                  ]
                }
              ]
            }, {
              tagName: "table",
              cellPadding: 0,
              cellSpacing: 0,
              border: 0,
              "class": "date-header",
              contextKey: "dateHeader",
              content: [
                {
                  tagName: "tr",
                  "class": "header",
                  content: [
                    {
                      tagName: "td",
                      content: weeks[0]
                    }, {
                      tagName: "td",
                      content: weeks[1]
                    }, {
                      tagName: "td",
                      content: weeks[2]
                    }, {
                      tagName: "td",
                      content: weeks[3]
                    }, {
                      tagName: "td",
                      content: weeks[4]
                    }, {
                      tagName: "td",
                      content: weeks[5]
                    }, {
                      tagName: "td",
                      content: weeks[6]
                    }
                  ]
                }
              ]
            }
          ]
        }, this._doms);
        picker = cal._datePicker = new cola.calendar.SwipePicker({
          className: "date-table-wrapper",
          calendar: cal,
          change: function(self, arg) {
            if (arg.target === "next") {
              return cal.nextMonth();
            } else {
              return cal.prevMonth();
            }
          }
        });
        picker.appendTo(cDom);
        this._doms.dateTableWrapper = picker._dom;
        cal.bindButtonsEvent();
        return $(dom).append(cDom);
      };

      Calendar.prototype.setState = function(year, month) {
        var doms;
        doms = this._doms;
        this._year = year;
        this._month = month;
        $fly(doms.monthLabel).html(month + 1 || "");
        $fly(doms.yearLabel).html(year || "");
        return this._datePicker.setState(year, month);
      };

      Calendar.prototype.setDate = function(date) {
        this._date = new Date(this._year, this._month, date);
        this._monthDate = date;
        this._datePicker.setDate(date);
        return this;
      };

      Calendar.prototype.prevMonth = function() {
        var month, newMonth, newYear, year;
        year = this._year;
        month = this._month;
        if (year !== void 0 && month !== void 0) {
          newYear = month === 0 ? year - 1 : year;
          newMonth = month === 0 ? 11 : month - 1;
          this.setState(newYear, newMonth);
        }
        return this;
      };

      Calendar.prototype.nextMonth = function() {
        var month, newMonth, newYear, year;
        year = this._year;
        month = this._month;
        if (year !== void 0 && month !== void 0) {
          newYear = month === 11 ? year + 1 : year;
          newMonth = month === 11 ? 0 : month + 1;
          this.setState(newYear, newMonth);
        }
        return this;
      };

      Calendar.prototype.prevYear = function() {
        var month, year;
        year = this._year;
        month = this._month;
        if (year !== void 0 && month !== void 0) {
          this.setState(year - 1, month);
        }
        return this;
      };

      Calendar.prototype.setYear = function(newYear) {
        var month, year;
        year = this._year;
        month = this._month;
        if (year !== void 0 && month !== void 0) {
          return this.setState(newYear, month);
        }
      };

      Calendar.prototype.nextYear = function() {
        var month, year;
        year = this._year;
        month = this._month;
        if (year !== void 0 && month !== void 0) {
          this.setState(year + 1, month);
        }
        return this;
      };

      Calendar.prototype._doRefreshDom = function() {
        var date;
        if (!this._dom) {
          return;
        }
        Calendar.__super__._doRefreshDom.call(this);
        date = this.get("date");
        if (date) {
          this.setState(date.getFullYear(), date.getMonth());
          return this.setDate(date.getDate());
        }
      };

      Calendar.prototype.getDateCellDom = function(date) {
        return this._datePicker.getDateCellDom(date);
      };

      return Calendar;

    })(cola.Widget);
  })();

  cola.Divider = (function(superClass) {
    extend(Divider, superClass);

    function Divider() {
      return Divider.__super__.constructor.apply(this, arguments);
    }

    Divider.tagName = "c-divider";

    Divider.CLASS_NAME = "divider";

    Divider.attributes = {
      direction: {
        "enum": ["vertical", "horizontal", ""],
        defaultValue: "",
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this._direction;
          this._direction = value;
          if (this._dom && oldValue && oldValue !== value) {
            this.removeClass(oldValue);
          }
        }
      }
    };

    Divider.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Divider.__super__._doRefreshDom.call(this);
      if (this._direction) {
        this._classNamePool.add(this._direction);
      }
    };

    return Divider;

  })(cola.AbstractContainer);

  cola.registerWidget(cola.Divider);

  BLANK_PATH = "about:blank";

  cola.IFrame = (function(superClass) {
    extend(IFrame, superClass);

    function IFrame() {
      return IFrame.__super__.constructor.apply(this, arguments);
    }

    IFrame.tagName = "c-iframe";

    IFrame.CLASS_NAME = "iframe";

    IFrame.attributes = {
      path: {
        defaultValue: BLANK_PATH,
        setter: function(value) {
          var oldValue;
          oldValue = this._path;
          this._path = value;
          if (oldValue === value || !this._dom) {
            return;
          }
          this._loaded = false;
          this._replaceUrl(this._path);
        }
      },
      loadingText: null
    };

    IFrame.events = {
      load: null
    };

    IFrame.prototype._initDom = function(dom) {
      var $dom, frame, frameDoms;
      frame = this;
      frameDoms = this._doms;
      $dom = $(dom);
      $dom.addClass("loading").empty().append($.xCreate([
        {
          tagName: "div",
          "class": "ui active inverted dimmer",
          content: {
            tagName: "div",
            "class": "ui medium text loader",
            content: this._loadingText || "",
            contextKey: "loader"
          },
          contextKey: "dimmer"
        }, {
          tagName: "iframe",
          contextKey: "iframe",
          frameBorder: 0
        }
      ], frameDoms));
      $(frameDoms.iframe).load(function() {
        frame.fire("load", this, {});
        frame._loaded = true;
        return $(frameDoms.dimmer).removeClass("active");
      }).attr("src", this._path);
    };

    IFrame.prototype.getLoaderContainer = function() {
      if (!this._dom) {
        this.getDom();
      }
      return this._doms.dimmer;
    };

    IFrame.prototype.getContentWindow = function() {
      var contentWindow, e;
      if (this._doms == null) {
        this._doms = {};
      }
      try {
        if (this._doms.iframe) {
          contentWindow = this._doms.iframe.contentWindow;
        }
      } catch (_error) {
        e = _error;
      }
      return contentWindow;
    };

    IFrame.prototype.open = function(path, callback) {
      if (callback) {
        this.one("load", function() {
          return cola.callback(callback, true);
        });
      }
      this.set("path", path);
    };

    IFrame.prototype.reload = function(callback) {
      if (callback) {
        this.one("load", function() {
          return cola.callback(callback, true);
        });
      }
      this._replaceUrl(this._path);
      return this;
    };

    IFrame.prototype._replaceUrl = function(url) {
      var contentWindow;
      if (this._doms) {
        $fly(this._doms.dimmer).addClass("active");
      }
      contentWindow = this.getContentWindow();
      if (contentWindow) {
        contentWindow.location.replace(url);
      } else {
        $fly(this._doms.iframe).prop("src", url);
      }
      return this;
    };

    return IFrame;

  })(cola.Widget);

  cola.registerWidget(cola.IFrame);

  cola.SubView = (function(superClass) {
    extend(SubView, superClass);

    function SubView() {
      return SubView.__super__.constructor.apply(this, arguments);
    }

    SubView.tagName = "c-subView";

    SubView.CLASS_NAME = "sub-view";

    SubView.attributes = {
      loading: null,
      url: {
        readOnlyAfterCreate: true
      },
      jsUrl: {
        readOnlyAfterCreate: true
      },
      cssUrl: {
        readOnlyAfterCreate: true
      },
      parentModel: null,
      modelName: null,
      model: {
        readOnly: true,
        getter: function() {
          if (this._dom) {
            return cola.util.userData(this._dom, "_model");
          } else {
            return null;
          }
        }
      },
      param: {
        readOnlyAfterCreate: true
      },
      showLoadingContent: null,
      showDimmer: {
        defaultValue: false
      }
    };

    SubView.events = {
      load: null,
      loadError: null,
      unload: null
    };

    SubView.prototype._initDom = function(dom) {
      var $dom;
      $dom = $fly(dom);
      if ($dom.find(">.content").length === 0) {
        $dom.xAppend({
          "class": "content"
        });
      }
      if (this._url) {
        this.load({
          url: this._url,
          jsUrl: this._jsUrl,
          cssUrl: this._cssUrl,
          param: this._param
        });
      }
    };

    SubView.prototype.load = function(options, callback) {
      var $content, $dimmer, $dom, dom, model, parentModel, parentModelName;
      dom = this._dom;
      this.unload();
      this._parentModel = options.parentModel;
      this._modelName = options.modelName;
      this._url = options.url;
      this._jsUrl = options.jsUrl;
      this._cssUrl = options.cssUrl;
      this._param = options.param;
      if (this._parentModel instanceof cola.Scope) {
        parentModel = this._parentModel;
      } else {
        parentModelName = this._parentModel || cola.constants.DEFAULT_PATH;
        parentModel = cola.model(parentModelName);
      }
      if (this._modelName) {
        model = new cola.Model(this._modelName, parentModel || this._scope);
      } else {
        model = new cola.Model(parentModel || this._scope);
      }
      cola.util.userData(dom, "_model", model);
      this._loading = true;
      $dom = $(this._dom);
      $content = $dom.find(">.content");
      if (!this._showLoadingContent) {
        $content.css("visibility", "hidden");
      }
      if (this._showDimmer) {
        $dimmer = $dom.find(">.ui.dimmer");
        if ($dimmer.length === 0) {
          $dom.xAppend({
            "class": "ui inverted dimmer",
            content: {
              "class": "ui loader"
            }
          });
          $dimmer = $dom.find(">.ui.dimmer");
        }
        $dimmer.addClass("active");
      }
      cola.loadSubView($content[0], {
        model: model,
        htmlUrl: this._url,
        jsUrl: this._jsUrl,
        cssUrl: this._cssUrl,
        param: this._param,
        callback: {
          complete: (function(_this) {
            return function(success, result) {
              if (!_this._showLoadingContent) {
                $dom.find(">.content").css("visibility", "");
              }
              if (_this._showDimmer) {
                $dom.find(">.ui.dimmer").removeClass("active");
              }
              _this._loading = false;
              if (success) {
                _this.fire("load", _this);
              } else {
                _this.fire("loadError", _this, {
                  error: result
                });
              }
              cola.callback(callback, success, result);
            };
          })(this)
        }
      });
    };

    SubView.prototype.loadIfNecessary = function(options, callback) {
      if (this._url === options.url) {
        cola.callback(callback, true);
      } else {
        this.load(options, callback);
      }
    };

    SubView.prototype.unload = function() {
      var dom, model;
      if (!this._dom) {
        return;
      }
      cola.unloadSubView($fly(this._dom).find(">.content")[0], {
        cssUrl: this._cssUrl
      });
      delete this._url;
      delete this._jsUrl;
      delete this._cssUrl;
      delete this._param;
      dom = this._dom;
      model = cola.util.userData(dom, "_model");
      if (model != null) {
        model.destroy();
      }
      cola.util.removeUserData(dom, "_model");
      this.fire("unload", this);
    };

    return SubView;

  })(cola.Widget);

  cola.registerWidget(cola.SubView);

  cola.Image = (function(superClass) {
    extend(Image, superClass);

    function Image() {
      return Image.__super__.constructor.apply(this, arguments);
    }

    Image.tagName = "img";

    Image.CLASS_NAME = "image";

    Image.attributes = {
      src: {
        refreshDom: true
      },
      size: {
        "enum": ["mini", "tiny", "small", "medium", "large", "big", "huge", "massive"],
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this["_size"];
          if (oldValue && oldValue !== value && this._dom) {
            this.get$Dom().removeClass(oldValue);
          }
          this["_size"] = value;
        }
      },
      disabled: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      }
    };

    Image.prototype._parseDom = function(dom) {
      var src;
      if (!dom) {
        return;
      }
      if (!this._src) {
        src = dom.getAttribute("src");
        if (src) {
          return this._src = src;
        }
      }
    };

    Image.prototype._doRefreshDom = function() {
      var $dom, classNamePool, size;
      if (!this._dom) {
        return;
      }
      Image.__super__._doRefreshDom.call(this);
      $dom = this.get$Dom();
      classNamePool = this._classNamePool;
      size = this.get("size");
      if (size) {
        classNamePool.add(size);
      }
      $dom.attr("src", this._src);
      classNamePool.toggle("disabled", this._disabled);
    };

    return Image;

  })(cola.Widget);

  cola.Avatar = (function(superClass) {
    extend(Avatar, superClass);

    function Avatar() {
      return Avatar.__super__.constructor.apply(this, arguments);
    }

    Avatar.CLASS_NAME = "avatar image";

    return Avatar;

  })(cola.Image);

  cola.Label = (function(superClass) {
    extend(Label, superClass);

    function Label() {
      return Label.__super__.constructor.apply(this, arguments);
    }

    Label.tagName = "c-label";

    Label.SEMANTIC_CLASS = ["left floated", "right floated", "left top attached", "right top attached", "right bottom attached", "left bottom attached", "top attached", "bottom attached", "left ribbon", "right ribbon", "center aligned"];

    Label.CLASS_NAME = "label";

    Label.attributes = {
      size: {
        "enum": ["mini", "tiny", "small", "medium", "large", "big", "huge", "massive"],
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this._size;
          if (oldValue && oldValue !== value && this._dom) {
            this.removeClass(oldValue);
          }
          this._size = value;
        }
      },
      text: {
        refreshDom: true
      },
      icon: {
        refreshDom: true,
        setter: function(value) {
          var oldValue, ref;
          oldValue = this._icon;
          this._icon = value;
          if (oldValue !== value && this._dom && ((ref = this._doms) != null ? ref.iconDom : void 0)) {
            $fly(this._doms.iconDom).removeClass(oldValue);
          }
        }
      },
      iconPosition: {
        refreshDom: true,
        defaultValue: "left",
        "enum": ["left", "right"]
      },
      horizontal: {
        type: "boolean",
        defaultValue: false,
        refreshDom: true
      },
      color: {
        refreshDom: true,
        "enum": ["black", "yellow", "green", "blue", "orange", "purple", "red", "pink", "teal"],
        setter: function(value) {
          var oldValue;
          oldValue = this._color;
          if (oldValue && oldValue !== value && this._dom) {
            this.removeClass(oldValue);
          }
          this._color = value;
        }
      },
      attached: {
        refreshDom: true,
        defaultValue: "",
        "enum": ["left top", "left bottom", "right top", "right bottom", "top", "bottom", ""],
        setter: function(value) {
          var oldValue;
          oldValue = this._attached;
          if (oldValue && this._dom) {
            this.removeClass(oldValue + " attached", true);
          }
          this._attached = value;
        }
      }
    };

    Label.prototype._parseDom = function(dom) {
      var text;
      if (!dom) {
        return;
      }
      if (!this._text) {
        text = cola.util.getTextChildData(dom);
        if (text) {
          this._text = text;
        }
      }
      return this.get$Dom().empty();
    };

    Label.prototype._refreshIcon = function() {
      var base, icon, iconDom, iconPosition;
      if (!this._dom) {
        return;
      }
      if (this._doms == null) {
        this._doms = {};
      }
      icon = this._icon;
      iconPosition = this._iconPosition;
      if (icon) {
        if ((base = this._doms).iconDom == null) {
          base.iconDom = document.createElement("i");
        }
        iconDom = this._doms.iconDom;
        $(iconDom).addClass(icon + " icon");
        if (iconPosition === "left" && this._doms.textDom) {
          $(this._doms.textDom).before(iconDom);
        } else {
          this._dom.appendChild(iconDom);
        }
      } else if (this._doms.iconDom) {
        cola.detachNode(this._doms.iconDom);
      }
    };

    Label.prototype._doRefreshDom = function() {
      var attached, classNamePool, color, size, text, textDom;
      if (!this._dom) {
        return;
      }
      Label.__super__._doRefreshDom.call(this);
      classNamePool = this._classNamePool;
      text = this._text || "";
      textDom = this._doms.textDom;
      if (text) {
        if (!textDom) {
          textDom = document.createElement("span");
          this._doms.textDom = textDom;
        }
        $fly(textDom).text(text);
        this._dom.appendChild(textDom);
      } else {
        if (textDom) {
          cola.detachNode(textDom);
        }
      }
      size = this.get("size");
      if (size) {
        classNamePool.add(size);
      }
      color = this.get("color");
      if (color) {
        classNamePool.add(color);
      }
      this._refreshIcon();
      attached = this.get("attached");
      if (attached) {
        classNamePool.add(attached + " attached");
      }
    };

    return Label;

  })(cola.Widget);

  cola.registerWidget(cola.Label);

  cola.ImageLabel = (function(superClass) {
    extend(ImageLabel, superClass);

    function ImageLabel() {
      return ImageLabel.__super__.constructor.apply(this, arguments);
    }

    ImageLabel.tagName = "c-imageLabel";

    ImageLabel.CLASS_NAME = "image label";

    ImageLabel.attributes = {
      image: null,
      iconPosition: {
        refreshDom: true,
        defaultValue: "right",
        "enum": ["left", "right"]
      },
      detail: null
    };

    ImageLabel.prototype._doRefreshDom = function() {
      var detailDom;
      if (!this._dom) {
        return;
      }
      ImageLabel.__super__._doRefreshDom.call(this);
      if (this._doms == null) {
        this._doms = {};
      }
      if (this._image) {
        if (!this._doms.image) {
          this._doms.image = $.xCreate({
            tagName: "img",
            src: this._image
          });
        }
        if (this._doms.image.parentNode !== this._dom) {
          this.get$Dom().prepend(this._doms.image);
        }
        $fly(this._doms.image).attr("src", this._image);
      } else {
        if (this._doms.image) {
          cola.detachNode(this._doms.image);
        }
      }
      detailDom = $(".detail", this._dom);
      if (this._detail) {
        if (detailDom.length > 0) {
          return detailDom.text(this._detail);
        } else {
          detailDom = $.xCreate({
            tagName: "div",
            "class": "detail",
            content: this._detail
          });
          return this._dom.appendChild(detailDom);
        }
      } else {
        return detailDom.remove();
      }
    };

    return ImageLabel;

  })(cola.Label);

  cola.registerWidget(cola.ImageLabel);

  cola.PointingLabel = (function(superClass) {
    extend(PointingLabel, superClass);

    function PointingLabel() {
      return PointingLabel.__super__.constructor.apply(this, arguments);
    }

    PointingLabel.tagName = "c-pointingLabel";

    PointingLabel.CLASS_NAME = "pointing label";

    PointingLabel.attributes = {
      pointing: {
        refreshDom: true,
        defaultValue: "top",
        "enum": ["left", "right", "top", "bottom"],
        setter: function(value) {
          var oldValue;
          oldValue = this._pointing;
          if (oldValue && this._dom) {
            this.removeClass(oldValue);
          }
          this._pointing = value;
        }
      }
    };

    PointingLabel.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      PointingLabel.__super__._doRefreshDom.call(this);
      if (this._pointing) {
        return this._classNamePool.add(this._pointing);
      }
    };

    return PointingLabel;

  })(cola.Label);

  cola.registerWidget(cola.PointingLabel);

  cola.Tag = (function(superClass) {
    extend(Tag, superClass);

    function Tag() {
      return Tag.__super__.constructor.apply(this, arguments);
    }

    Tag.tagName = "c-tag";

    Tag.CLASS_NAME = "tag label";

    return Tag;

  })(cola.Label);

  cola.registerWidget(cola.Tag);

  cola.Corner = (function(superClass) {
    extend(Corner, superClass);

    function Corner() {
      return Corner.__super__.constructor.apply(this, arguments);
    }

    Corner.tagName = "c-corner";

    Corner.CLASS_NAME = "corner label";

    Corner.attributes = {
      position: {
        "enum": ["left", "right"],
        defaultValue: "right",
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this._position;
          if (oldValue && oldValue !== value && this._dom) {
            this.removeClass(oldValue);
          }
          this._position = value;
        }
      }
    };

    Corner.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Corner.__super__._doRefreshDom.call(this);
      return this._classNamePool.add(this._position);
    };

    return Corner;

  })(cola.Label);

  cola.registerWidget(cola.Corner);

  cola.Ribbon = (function(superClass) {
    extend(Ribbon, superClass);

    function Ribbon() {
      return Ribbon.__super__.constructor.apply(this, arguments);
    }

    Ribbon.tagName = "c-ribbon";

    Ribbon.CLASS_NAME = "ribbon label";

    Ribbon.attributes = {
      position: {
        "enum": ["left", "right"],
        defaultValue: "left",
        setter: function(value) {
          var oldValue;
          oldValue = this._position;
          if (oldValue === value) {
            return;
          }
          if (oldValue === "right" && this._dom) {
            this.removeClass("right ribbon", true);
            this.addClass("ribbon");
          }
          this._position = value;
        }
      }
    };

    Ribbon.prototype._doRefreshDom = function() {
      var position;
      if (!this._dom) {
        return;
      }
      Ribbon.__super__._doRefreshDom.call(this);
      position = this._position;
      if (position === "right") {
        this._classNamePool.remove("ribbon");
        return this._classNamePool.add("right ribbon");
      }
    };

    return Ribbon;

  })(cola.Label);

  cola.registerWidget(cola.Ribbon);

  (function() {
    var createMessageBoxDom, messageBox;
    cola.commonDimmer = {
      show: function() {
        var _dimmerDom;
        _dimmerDom = cola.commonDimmer._dom;
        if (!_dimmerDom) {
          _dimmerDom = $.xCreate({
            tagName: "Div",
            "class": "ui dimmer sys-dimmer",
            contextKey: "dimmer"
          });
          window.document.body.appendChild(_dimmerDom);
          cola.commonDimmer._dom = _dimmerDom;
        }
        $(_dimmerDom).addClass("active");
      },
      hide: function() {
        return $(cola.commonDimmer._dom).removeClass("active");
      }
    };
    messageBox = {
      settings: {
        info: {
          title: "Information",
          i18n: "cola.messageBox.info.title",
          icon: "blue info icon"
        },
        warning: {
          title: "Warning",
          icon: "yellow warning sign icon",
          i18n: "cola.messageBox.warning.title"
        },
        error: {
          title: "Error",
          icon: "red warning sign icon",
          i18n: "cola.messageBox.error.title"
        },
        question: {
          title: "Question",
          icon: "black help circle icon",
          i18n: "cola.messageBox.question.title"
        }
      },
      "class": "standard",
      dialogMode: true,
      level: {
        WARNING: "warning",
        ERROR: "error",
        INFO: "info",
        QUESTION: "question"
      },
      _getAnimation: function() {
        if (messageBox.dialogMode) {
          return "scale";
        } else {
          return "slide up";
        }
      },
      _executeCallback: function(name) {
        var _eventName;
        _eventName = "_on" + name;
        if (!messageBox[_eventName]) {
          return;
        }
        setTimeout(function() {
          var config;
          config = messageBox[_eventName];
          if (typeof config === "function") {
            config.apply(null, []);
          }
          return messageBox[_eventName] = null;
        }, 0);
      },
      _doShow: function() {
        var $dom, animation, css, height, pHeight, pWidth, width;
        animation = messageBox._getAnimation();
        css = {
          zIndex: cola.floatWidget.zIndex()
        };
        $dom = $(messageBox._dom);
        if (messageBox.dialogMode) {
          width = $dom.width();
          height = $dom.height();
          pWidth = $(window).width();
          pHeight = $(window).height();
          css.left = (pWidth - width) / 2;
          css.top = (pHeight - height) / 2;
        }
        $dom.css(css);
        $dom.transition(animation);
        return cola.commonDimmer.show();
      },
      _doApprove: function() {
        messageBox._executeCallback("Approve");
        messageBox._doHide();
      },
      _doDeny: function() {
        messageBox._executeCallback("Deny");
        messageBox._doHide();
      },
      _doHide: function() {
        $(messageBox._dom).transition(messageBox._settings.animation);
        cola.commonDimmer.hide();
        messageBox._executeCallback("Hide");
      },
      getDom: function() {
        if (!messageBox._dom) {
          createMessageBoxDom();
        }
        return messageBox._dom;
      },
      show: function(options) {
        var $dom, className, dom, doms, isAlert, level, oldClassName, settings;
        dom = messageBox.getDom();
        settings = messageBox.settings;
        level = options.level || messageBox.level.INFO;
        $dom = $(dom);
        if (options.title == null) {
          options.title = cola.resource(settings[level].i18n);
        }
        if (options.icon == null) {
          options.icon = settings[level].icon;
        }
        messageBox._onDeny = options.onDeny;
        messageBox._onApprove = options.onApprove;
        messageBox._onHide = options.onHide;
        $dom.removeClass("warning error info question").addClass(level);
        oldClassName = $dom.attr("_class");
        className = options["class"] || messageBox["class"];
        if (oldClassName !== className) {
          if (oldClassName) {
            $dom.removeClass(oldClassName);
          }
          $dom.addClass(className).attr("_class", className);
        }
        doms = messageBox._doms;
        isAlert = options.mode === "alert";
        $(doms.actions).toggleClass("hidden", isAlert);
        $(doms.close).toggleClass("hidden", !isAlert);
        $(doms.description).html(options.content);
        $(doms.title).text(options.title);
        doms.icon.className = options.icon;
        messageBox._doShow();
        return this;
      }
    };
    ({
      _getClassName: function() {
        if (messageBox.dialogMode) {
          return "desktop";
        } else {
          return "mobile layer";
        }
      }
    });
    createMessageBoxDom = function() {
      var actionsDom, bodyNode, dom, doms;
      messageBox._settings = {
        dialogMode: messageBox.dialogMode,
        className: messageBox.dialogMode ? "desktop" : "mobile layer",
        animation: messageBox.dialogMode ? "scale" : "slide up"
      };
      doms = {};
      dom = $.xCreate({
        tagName: "Div",
        "class": "ui " + messageBox._settings.className + " message-box transition hidden",
        contextKey: "messageBox",
        content: {
          "class": "content-container ",
          contextKey: "contentContainer",
          content: [
            {
              tagName: "div",
              "class": "header",
              content: [
                {
                  tagName: "div",
                  "class": "caption",
                  contextKey: "title"
                }, {
                  tagName: "div",
                  contextKey: "close",
                  "class": " close-btn",
                  click: messageBox._doHide,
                  content: {
                    tagName: "i",
                    "class": "close icon"
                  }
                }
              ]
            }, {
              tagName: "div",
              "class": "image content",
              contextKey: "content",
              content: [
                {
                  tagName: "div",
                  "class": "image",
                  content: {
                    tagName: "i",
                    "class": "announcement icon",
                    contextKey: "icon",
                    style: {
                      "font-size": "4rem"
                    }
                  }
                }, {
                  tagName: "div",
                  "class": "description",
                  contextKey: "description"
                }
              ]
            }
          ]
        }
      }, doms);
      actionsDom = $.xCreate({
        tagName: "div",
        "class": "actions " + (messageBox._settings.dialogMode ? "" : "ui buttons two fluid top attached"),
        contextKey: "actions",
        content: [
          {
            tagName: "div",
            contextKey: "no",
            content: cola.resource("cola.message.deny"),
            click: messageBox._doDeny,
            "class": "ui button"
          }, {
            tagName: "div",
            contextKey: "yes",
            click: messageBox._doApprove,
            "class": "ui positive right labeled icon button ",
            content: [
              {
                tagName: "i",
                "class": "checkmark icon"
              }, {
                tagName: "span",
                content: cola.resource("cola.message.approve"),
                contextKey: "yesCaption"
              }
            ]
          }
        ]
      }, doms);
      if (messageBox._settings.dialogMode) {
        doms.contentContainer.appendChild(actionsDom);
      } else {
        $(doms.content).before(actionsDom);
      }
      bodyNode = window.document.body;
      if (bodyNode) {
        bodyNode.appendChild(dom);
      } else {
        $(window).on("load", function() {
          return $(window.document.body).append(dom);
        });
      }
      messageBox._dom = dom;
      messageBox._doms = doms;
      return dom;
    };
    cola.alert = function(msg, options) {
      var key, settings, value;
      settings = {};
      if (options) {
        if (typeof options === "function") {
          settings.onHide = options;
        } else {
          for (key in options) {
            value = options[key];
            settings[key] = value;
          }
        }
      }
      settings.content = msg;
      settings.mode = "alert";
      messageBox.show(settings);
      return this;
    };
    cola.confirm = function(msg, options) {
      var key, settings, value;
      settings = {};
      settings.actions = "block";
      if (options) {
        if (typeof options === "function") {
          settings.onApprove = options;
        } else {
          for (key in options) {
            value = options[key];
            settings[key] = value;
          }
        }
      }
      settings.content = msg;
      settings.level = messageBox.level.QUESTION;
      if (settings.title == null) {
        settings.title = messageBox.settings.question.title;
      }
      if (settings.icon == null) {
        settings.icon = messageBox.settings.question.icon;
      }
      settings.mode = "confirm";
      messageBox.show(settings);
      return this;
    };
    if (cola.os.mobile) {
      messageBox.getDom();
    }
    return cola.MessageBox = messageBox;
  })();


  /*
  Reveal 组件
   */

  cola.Reveal = (function(superClass) {
    extend(Reveal, superClass);

    function Reveal() {
      return Reveal.__super__.constructor.apply(this, arguments);
    }

    Reveal.tagName = "c-reveal";

    Reveal.CLASS_NAME = "ui reveal";

    Reveal.attributes = {
      type: {
        refreshDom: true,
        defaultValue: "fade",
        "enum": ["fade", "move", "rotate"],
        setter: function(value) {
          var oldValue;
          oldValue = this["_type"];
          if (oldValue && this._dom && oldValue !== value) {
            this.get$Dom().removeClass(oldValue);
          }
          this["_type"] = value;
        }
      },
      direction: {
        refreshDom: true,
        "enum": ["left", "right", "up", "down"],
        defaultValue: "left",
        setter: function(value) {
          var oldValue;
          oldValue = this["_direction"];
          if (oldValue && this._dom && oldValue !== value) {
            this.get$Dom().removeClass(oldValue);
          }
          this["_direction"] = value;
        }
      },
      active: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      instant: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      disabled: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      visibleContent: {
        refreshDom: true,
        setter: function(value) {
          this._setContent(value, "visibleContent");
          return this;
        }
      },
      hiddenContent: {
        refreshDom: true,
        setter: function(value) {
          this._setContent(value, "hiddenContent");
          return this;
        }
      }
    };

    Reveal.prototype._initDom = function(dom) {
      var container, el, key, l, len1, len2, n, ref, ref1, ref2;
      Reveal.__super__._initDom.call(this, dom);
      ref = ["visibleContent", "hiddenContent"];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        container = ref[l];
        key = "_" + container;
        if ((ref1 = this[key]) != null ? ref1.length : void 0) {
          ref2 = this[key];
          for (n = 0, len2 = ref2.length; n < len2; n++) {
            el = ref2[n];
            this._render(el, container);
          }
        }
      }
    };

    Reveal.prototype._parseDom = function(dom) {
      var $child, child, results, widget, widget$Dom;
      if (!dom) {
        return;
      }
      if (this._doms == null) {
        this._doms = {};
      }
      child = dom.firstChild;
      results = [];
      while (child) {
        if (child.nodeType === 1) {
          widget = cola.widget(child);
          if (widget) {
            widget$Dom = widget.get$Dom();
            if (widget$Dom.has("visible content")) {
              this._visibleContent = widget;
            }
            if (widget$Dom.has("hidden content")) {
              this._hiddenContent = widget;
            }
          } else {
            $child = $(child);
            if ($child.has("visible content")) {
              this._doms.visibleContent = widget;
            }
            if ($child.has("hidden content")) {
              this._doms.hiddenContent = widget;
            }
          }
        }
        results.push(child = child.nextSibling);
      }
      return results;
    };

    Reveal.prototype._clearContent = function(target) {
      var el, l, len1, old;
      old = this["_" + target];
      if (old) {
        for (l = 0, len1 = old.length; l < len1; l++) {
          el = old[l];
          if (el instanceof cola.widget) {
            el.destroy();
          }
        }
        this["_" + target] = [];
      }
      if (this._doms == null) {
        this._doms = {};
      }
      if (this._doms[target]) {
        $fly(this._doms[target]).empty();
      }
    };

    Reveal.prototype._setContent = function(value, target) {
      var el, l, len1, result;
      this._clearContent(target);
      if (value instanceof Array) {
        for (l = 0, len1 = value.length; l < len1; l++) {
          el = value[l];
          result = cola.xRender(el, this._scope);
          if (result) {
            this._addContentElement(result, target);
          }
        }
      } else {
        result = cola.xRender(value, this._scope);
        if (result) {
          this._addContentElement(result, target);
        }
      }
    };

    Reveal.prototype._makeContentDom = function(target) {
      if (this._doms == null) {
        this._doms = {};
      }
      if (!this._doms[target]) {
        this._doms[target] = document.createElement("div");
        this._doms[target].className = (target === "visibleContent" ? "visible" : "hidden") + " content";
        this._dom.appendChild(this._doms[target]);
      }
      return this._doms[target];
    };

    Reveal.prototype._addContentElement = function(element, target) {
      var name, targetList;
      name = "_" + target;
      if (this[name] == null) {
        this[name] = [];
      }
      targetList = this[name];
      targetList.push(element);
      if (element && this._dom) {
        this._render(element, target);
      }
    };

    Reveal.prototype._render = function(node, target) {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      if (!this._doms[target]) {
        this._makeContentDom(target);
      }
      dom = node;
      if (node instanceof cola.Widget) {
        dom = node.getDom();
      }
      if (dom.parentNode !== this._doms[target]) {
        this._doms[target].appendChild(dom);
      }
    };

    Reveal.prototype._doRefreshDom = function() {
      var classNamePool, direction, type;
      if (!this._dom) {
        return;
      }
      Reveal.__super__._doRefreshDom.call(this);
      classNamePool = this._classNamePool;
      ["active", "instant", "disabled"].forEach((function(_this) {
        return function(property) {
          var value;
          value = _this.get(property);
          return classNamePool.toggle(property, !!value);
        };
      })(this));
      type = this.get("type");
      if (type) {
        classNamePool.add(type);
      }
      direction = this.get("direction");
      if (direction) {
        classNamePool.add(direction);
      }
    };

    Reveal.prototype._getContentContainer = function(target) {
      if (!this._dom) {
        return;
      }
      if (!this._doms[target]) {
        this._makeContentDom(target);
      }
      return this._doms[target];
    };

    Reveal.prototype.getVisibleContentContainer = function() {
      return this._getContentContainer("visible");
    };

    Reveal.prototype.getHiddenContentContainer = function() {
      return this._getContentContainer("hidden");
    };

    return Reveal;

  })(cola.Widget);

  cola.registerWidget(cola.Reveal);

  cola.Segment = (function(superClass) {
    extend(Segment, superClass);

    function Segment() {
      return Segment.__super__.constructor.apply(this, arguments);
    }

    Segment.tagName = "c-segment";

    Segment.CLASS_NAME = "segment";

    Segment.SEMANTIC_CLASS = ["left floated", "right floated", "top attached", "bottom attached", "left attached", "right attached", "very basic", "left aligned", "right aligned", "center aligned", "vertical segment", "horizontal segment"];

    Segment.attributes = {
      textAlign: {
        refreshDom: true,
        "enum": ["left", "right", "center"],
        setter: function(value) {
          var oldValue;
          oldValue = this["_textAlign"];
          if (oldValue && this._dom && oldValue !== value) {
            cola.util.removeClass(this._dom, oldValue + " aligned", true);
          }
          this["_textAlign"] = value;
        }
      },
      attached: {
        refreshDom: true,
        "enum": ["left", "right", "top", "bottom"],
        setter: function(value) {
          var oldValue;
          oldValue = this["_attached"];
          if (oldValue && this._dom && oldValue !== value) {
            $removeClass(this._dom, oldValue + " attached", true);
          }
          this["_attached"] = value;
        }
      },
      color: {
        refreshDom: true,
        "enum": ["black", "yellow", "green", "blue", "orange", "purple", "red", "pink", "teal"],
        setter: function(value) {
          var oldValue;
          oldValue = this["_color"];
          this["_color"] = value;
          if (oldValue && oldValue !== value && this._dom) {
            this.get$Dom().removeClass(oldValue);
          }
        }
      }
    };

    Segment.prototype._doRefreshDom = function() {
      var attached, classNamePool, color, textAlign;
      if (!this._dom) {
        return;
      }
      Segment.__super__._doRefreshDom.call(this);
      classNamePool = this._classNamePool;
      color = this.get("color");
      if (color) {
        classNamePool.add(color);
      }
      attached = this.get("attached");
      if (attached) {
        classNamePool.add(attached + " attached");
      }
      textAlign = this.get("textAlign");
      if (textAlign) {
        classNamePool.add(textAlign + " aligned");
      }
    };

    return Segment;

  })(cola.AbstractContainer);

  cola.registerWidget(cola.Segment);

  _removeTranslateStyle = function(element) {
    var l, len1, prefix, ref;
    ref = ['Moz', 'Webkit', 'O', 'ms'];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      prefix = ref[l];
      element.style[prefix + "Transform"] = "";
    }
    return element.style.transform = "";
  };

  cola.AbstractLayer = (function(superClass) {
    extend(AbstractLayer, superClass);

    function AbstractLayer() {
      return AbstractLayer.__super__.constructor.apply(this, arguments);
    }

    AbstractLayer.tagName = "c-layer";

    AbstractLayer.attributes = {
      duration: {
        defaultValue: 300
      },
      visible: {
        type: "boolean",
        readOnly: true,
        getter: function() {
          return this.isVisible();
        }
      },
      lazyRender: {
        type: "boolean"
      }
    };

    AbstractLayer.events = {
      show: null,
      hide: null,
      beforeShow: null,
      beforeHide: null
    };

    AbstractLayer.prototype._onShow = function() {};

    AbstractLayer.prototype._onHide = function() {};

    AbstractLayer.prototype._transition = function(options, callback) {
      if (this.fire("before" + (cola.util.capitalize(options.target)), this, {}) === false) {
        return false;
      }
      this._doTransition(options, callback);
      return this;
    };

    AbstractLayer.prototype._doTransition = function(options, callback) {};

    AbstractLayer.prototype.show = function(options, callback) {
      if (options == null) {
        options = {};
      }
      if (!this._dom || this.isVisible()) {
        return this;
      }
      if (this._lazyRender && !this._contentRendered) {
        this._contentRendered = true;
        cola.xRender(this._dom, this._scope);
      }
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      options.target = "show";
      this._transition(options, callback);
      return this;
    };

    AbstractLayer.prototype.hide = function(options, callback) {
      if (options == null) {
        options = {};
      }
      if (!this._dom || !this.isVisible()) {
        return this;
      }
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      options.target = "hide";
      this._transition(options, callback);
      return this;
    };

    AbstractLayer.prototype.toggle = function() {
      return this[this.isVisible() ? "hide" : "show"].apply(this, arguments);
    };

    AbstractLayer.prototype.isVisible = function() {
      return this.get$Dom().transition("stop all").transition("is visible");
    };

    return AbstractLayer;

  })(cola.AbstractContainer);

  cola.Layer = (function(superClass) {
    extend(Layer, superClass);

    function Layer() {
      return Layer.__super__.constructor.apply(this, arguments);
    }

    Layer.CLASS_NAME = "layer transition hidden";

    Layer.attributes = {
      animation: {
        defaultValue: "slide left",
        "enum": ["scale", "drop", "browse right", "browse", "slide left", "slide right", "slide up", "slide down", "fade left", "fade right", "fade up", "fade down", "fly left", "fly right", "fly up", "fly down", "swing left", "swing right", "swing up", "swing down", "horizontal flip", "vertical flip"]
      }
    };

    Layer.SLIDE_ANIMATIONS = ["slide left", "slide right", "slide up", "slide down"];

    Layer.prototype._transitionStart = function() {};

    Layer.prototype._doTransition = function(options, callback) {
      var $dom, animation, configs, duration, height, isHorizontal, isShow, layer, onComplete, width, x, y;
      layer = this;
      onComplete = function() {
        if (typeof callback === "function") {
          callback.call(layer);
        }
        if (options.target === "show") {
          layer._onShow();
        } else {
          layer._onHide();
        }
        layer.fire(options.target, layer, {});
        return null;
      };
      if (options.animation === "none") {
        this.get$Dom().transition(options.target);
        onComplete();
        return this;
      }
      animation = options.animation || this._animation || "slide left";
      duration = options.duration || this._duration || 300;
      if (this.constructor.SLIDE_ANIMATIONS.indexOf(animation) < 0) {
        this.get$Dom().transition({
          animation: animation,
          duration: duration,
          onComplete: onComplete,
          queue: true,
          onStart: (function(_this) {
            return function() {
              return _this._transitionStart();
            };
          })(this)
        });
      } else {
        $dom = this.get$Dom();
        width = $dom.width();
        height = $dom.height();
        isHorizontal = animation === "slide left" || animation === "slide right";
        if (animation === "slide left") {
          x = width;
          y = 0;
        } else if (animation === "slide right") {
          x = -width;
          y = 0;
        } else if (animation === "slide up") {
          x = 0;
          y = height;
        } else {
          x = 0;
          y = -height;
        }
        isShow = options.target === "show";
        if (isShow) {
          cola.Fx.translateElement(this._dom, x, y);
        }
        configs = {
          duration: duration,
          complete: (function(_this) {
            return function() {
              if (!isShow) {
                $dom.removeClass("visible").addClass("hidden");
              }
              _removeTranslateStyle(_this._dom);
              return onComplete();
            };
          })(this)
        };
        if (isHorizontal) {
          configs.x = isShow ? 0 : x;
          configs.y = 0;
        } else {
          configs.y = isShow ? 0 : y;
          configs.x = 0;
        }
        $dom.removeClass("hidden").addClass("visible").transit(configs);
        this._transitionStart();
      }
    };

    return Layer;

  })(cola.AbstractLayer);

  cola.registerWidget(cola.Layer);

  cola.Dialog = (function(superClass) {
    extend(Dialog, superClass);

    function Dialog() {
      return Dialog.__super__.constructor.apply(this, arguments);
    }

    Dialog.tagName = "c-dialog";

    Dialog.CLASS_NAME = "dialog transition v-box hidden";

    Dialog.attributes = {
      context: null,
      animation: {
        defaultValue: "scale",
        "enum": ["scale", "drop", "browse right", "browse", "slide left", "slide right", "slide up", "slide down", "fade left", "fade right", "fade up", "fade down", "fly left", "fly right", "fly up", "fly down", "swing left", "swing right", "swing up", "swing down", "horizontal flip", "vertical flip"]
      },
      header: {
        setter: function(value) {
          this._setContent(value, "header");
          return this;
        }
      },
      actions: {
        setter: function(value) {
          this._setContent(value, "actions");
          return this;
        }
      },
      modal: {
        type: "boolean",
        defaultValue: true
      },
      closeable: {
        type: "boolean",
        defaultValue: true
      },
      modalOpacity: {
        type: "number",
        defaultValue: 0.6
      },
      dimmerClose: {
        type: "boolean",
        defaultValue: false
      }
    };

    Dialog.prototype.getContentContainer = function() {
      if (!this._dom) {
        return null;
      }
      if (!this._doms.content) {
        this._makeContentDom("content");
      }
      return this._doms.content;
    };

    Dialog.prototype._initDom = function(dom) {
      var container, el, key, l, len1, len2, n, ref, ref1, ref2;
      Dialog.__super__._initDom.call(this, dom);
      ref = ["header", "actions"];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        container = ref[l];
        key = "_" + container;
        if ((ref1 = this[key]) != null ? ref1.length : void 0) {
          ref2 = this[key];
          for (n = 0, len2 = ref2.length; n < len2; n++) {
            el = ref2[n];
            this._render(el, container);
          }
        }
      }
    };

    Dialog.prototype._transitionStart = function() {
      var $dom, height, pHeight, pWidth, width;
      $dom = this.get$Dom();
      if (this._currentAnimation === "show") {
        width = $dom.width();
        height = $dom.height();
        pWidth = $(window).width();
        pHeight = $(window).height();
        if (height > pHeight) {
          height = pHeight;
        }
        if (width > pWidth) {
          width = pWidth;
        }
        return $dom.css({
          left: (pWidth - width) / 2,
          top: (pHeight - height) / 2,
          zIndex: cola.floatWidget.zIndex()
        });
      }
    };

    Dialog.prototype._createCloseButton = function() {
      var dom;
      dom = this._closeBtn = $.xCreate({
        tagName: "div",
        "class": "ui icon button close-btn",
        content: [
          {
            tagName: "i",
            "class": "close icon"
          }
        ],
        click: (function(_this) {
          return function() {
            return _this.hide();
          };
        })(this)
      });
      return dom;
    };

    Dialog.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Dialog.__super__._doRefreshDom.call(this);
      if (this.get("closeable")) {
        if (!this._closeBtn) {
          this._createCloseButton();
        }
        if (this._closeBtn.parentNode !== this._dom) {
          return this._dom.appendChild(this._closeBtn);
        }
      } else {
        return $(this._closeBtn).remove();
      }
    };

    Dialog.prototype._onShow = function() {
      var actionsDom, actionsHeight, headerHeight, height, minHeight;
      height = this._dom.offsetHeight;
      actionsDom = this._doms.actions;
      if (actionsDom) {
        actionsHeight = actionsDom.offsetHeight;
        headerHeight = 0;
        if (this._doms.header) {
          headerHeight = this._doms.header.offsetHeight;
        }
        minHeight = height - actionsHeight - headerHeight;
        $(this._doms.content).css("min-height", minHeight + "px");
      }
      return Dialog.__super__._onShow.call(this);
    };

    Dialog.prototype._transition = function(options, callback) {
      var isShow;
      if (this.fire("before" + (cola.util.capitalize(options.target)), this, {}) === false) {
        return false;
      }
      isShow = options.target === "show";
      if (isShow) {
        this._currentAnimation = "show";
      } else {
        this._currentAnimation = "hide";
      }
      if (this.get("modal")) {
        if (isShow) {
          this._showModalLayer();
        } else {
          this._hideModalLayer();
        }
      }
      options.animation = options.animation || this._animation || "scale";
      return this._doTransition(options, callback);
    };

    Dialog.prototype._makeContentDom = function(target) {
      var afterEl, dom, flex;
      if (this._doms == null) {
        this._doms = {};
      }
      dom = document.createElement("div");
      dom.className = target;
      if (target === "content") {
        if (this._doms["actions"]) {
          $(this._doms["actions"]).before(dom);
        } else {
          this._dom.appendChild(dom);
        }
      } else if (target === "header") {
        afterEl = this._doms["content"] || this._doms["actions"];
        if (afterEl) {
          $(afterEl).before(dom);
        } else {
          this._dom.appendChild(dom);
        }
      } else {
        this._dom.appendChild(dom);
      }
      flex = target === "content" ? "flex-box" : "box";
      $fly(dom).addClass(flex);
      this._doms[target] = dom;
      return dom;
    };

    Dialog.prototype._parseDom = function(dom) {
      var $child, _parseChild, child, className, l, len1, ref;
      if (this._doms == null) {
        this._doms = {};
      }
      _parseChild = (function(_this) {
        return function(node, target) {
          var childNode, widget;
          childNode = node.firstChild;
          while (childNode) {
            if (childNode.nodeType === 1) {
              widget = cola.widget(childNode);
              _this._addContentElement(widget || childNode, target);
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (child.nodeName === "I") {
            this._doms.icon = child;
            if (this._icon == null) {
              this._icon = child.className;
            }
          } else {
            $child = $(child);
            ref = ["header", "content", "actions"];
            for (l = 0, len1 = ref.length; l < len1; l++) {
              className = ref[l];
              if (!$child.hasClass(className)) {
                continue;
              }
              this._doms[className] = child;
              _parseChild(child, className);
              break;
            }
          }
        }
        child = child.nextSibling;
      }
    };

    Dialog.prototype._showModalLayer = function() {
      var _dimmerDom;
      if (this._doms == null) {
        this._doms = {};
      }
      _dimmerDom = this._doms.modalLayer;
      if (!_dimmerDom) {
        _dimmerDom = $.xCreate({
          tagName: "Div",
          "class": "ui dimmer",
          contextKey: "dimmer"
        });
        if (this._dimmerClose) {
          $(_dimmerDom).on("click", (function(_this) {
            return function() {
              return _this.hide();
            };
          })(this));
        }
        document.body.appendChild(_dimmerDom);
        this._doms.modalLayer = _dimmerDom;
      }
      $(_dimmerDom).css({
        opacity: this.get("modalOpacity"),
        zIndex: cola.floatWidget.zIndex()
      }).addClass("active");
    };

    Dialog.prototype._hideModalLayer = function() {
      var _dimmerDom;
      if (this._doms == null) {
        this._doms = {};
      }
      _dimmerDom = this._doms.modalLayer;
      return $(_dimmerDom).removeClass("active");
    };

    return Dialog;

  })(cola.Layer);

  cola.registerWidget(cola.Dialog);

  cola.Sidebar = (function(superClass) {
    extend(Sidebar, superClass);

    function Sidebar() {
      return Sidebar.__super__.constructor.apply(this, arguments);
    }

    Sidebar.tagName = "c-sidebar";

    Sidebar.CLASS_NAME = "ui sidebar";

    Sidebar.attributes = {
      direction: {
        defaultValue: "left",
        refreshDom: true,
        "enum": ["left", "right", "top", "bottom"]
      },
      size: {
        defaultValue: 200,
        refreshDom: true
      },
      modal: {
        type: "boolean",
        defaultValue: true
      },
      modalOpacity: {
        type: "number",
        defaultValue: 0.6
      },
      dimmerClose: {
        type: "boolean",
        defaultValue: true
      }
    };

    Sidebar.prototype._doTransition = function(options, callback) {
      var $dom, configs, direction, duration, height, isHorizontal, isShow, onComplete, sidebar, width, x, y;
      if (this.get("modal")) {
        if (options.target === "show") {
          this._showModalLayer();
        } else {
          this._hideModalLayer();
        }
      }
      sidebar = this;
      this.get$Dom().css({
        zIndex: cola.floatWidget.zIndex()
      });
      onComplete = function() {
        if (typeof callback === "function") {
          callback.call(sidebar);
        }
        if (options.target === "show") {
          sidebar._onShow();
        } else {
          sidebar._onHide();
        }
        sidebar.fire(options.target, sidebar, {});
        return null;
      };
      direction = this._direction;
      duration = options.duration || this._duration || 300;
      $dom = this.get$Dom();
      width = $dom.width();
      height = $dom.height() || $dom.outerHeight();
      isHorizontal = direction === "left" || direction === "right";
      if (direction === "left") {
        x = -width;
        y = 0;
      } else if (direction === "right") {
        x = width;
        y = 0;
      } else if (direction === "top") {
        x = 0;
        y = -height;
      } else {
        x = 0;
        y = height;
      }
      isShow = options.target === "show";
      if (isShow) {
        cola.Fx.translateElement(this._dom, x, y);
      }
      configs = {
        duration: duration,
        complete: (function(_this) {
          return function() {
            if (!isShow) {
              $dom.removeClass("visible").addClass("hidden");
            }
            _removeTranslateStyle(_this._dom);
            return onComplete();
          };
        })(this)
      };
      if (isHorizontal) {
        configs.x = isShow ? 0 : x;
        configs.y = 0;
      } else {
        configs.y = isShow ? 0 : y;
        configs.x = 0;
      }
      $dom.removeClass("hidden").addClass("visible").transit(configs);
    };

    Sidebar.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Sidebar.__super__._doRefreshDom.call(this);
      this._setSize();
      return this._classNamePool.add(this._direction || "left");
    };

    Sidebar.prototype._setSize = function() {
      var direction, size, style, unit;
      unit = cola.constants.WIDGET_DIMENSION_UNIT;
      size = this.get("size");
      if (isFinite(size)) {
        size = "" + (parseInt(size)) + unit;
      }
      direction = this._direction || "left";
      style = direction === "left" || direction === "right" ? "width" : "height";
      cola.util.style(this._dom, style, size, "important");
    };

    Sidebar.prototype._showModalLayer = function() {
      var _dimmerDom, container;
      if (this._doms == null) {
        this._doms = {};
      }
      _dimmerDom = this._doms.modalLayer;
      if (!_dimmerDom) {
        _dimmerDom = $.xCreate({
          tagName: "Div",
          "class": "ui dimmer",
          contextKey: "dimmer"
        });
        if (this._dimmerClose) {
          $(_dimmerDom).on("click", (function(_this) {
            return function() {
              return _this.hide();
            };
          })(this));
        }
        $(_dimmerDom).css("position", "fixed");
        container = this._context || this._dom.parentNode;
        container.appendChild(_dimmerDom);
        this._doms.modalLayer = _dimmerDom;
      }
      $(_dimmerDom).css({
        opacity: 0,
        zIndex: cola.floatWidget.zIndex()
      }).addClass("active").transit({
        opacity: this._modalOpacity
      });
    };

    Sidebar.prototype._hideModalLayer = function() {
      var _dimmerDom;
      if (this._doms == null) {
        this._doms = {};
      }
      _dimmerDom = this._doms.modalLayer;
      return $(_dimmerDom).transit({
        opacity: 0,
        complete: function() {
          return $(_dimmerDom).removeClass("active").css({
            zIndex: 0
          });
        }
      });
    };

    Sidebar.prototype.isVisible = function() {
      if (this._dom) {
        return this.get$Dom().hasClass("visible");
      } else {
        return false;
      }
    };

    return Sidebar;

  })(cola.AbstractLayer);

  cola.registerWidget(cola.Sidebar);

  cola.Tab = (function(superClass) {
    extend(Tab, superClass);

    function Tab() {
      return Tab.__super__.constructor.apply(this, arguments);
    }

    Tab.tagName = "c-tab";

    Tab.CLASS_NAME = "c-tab";

    Tab.attributes = {
      direction: {
        refreshDom: true,
        "enum": ["left", "right", "top", "bottom"],
        defaultValue: "top",
        setter: function(value) {
          var oldValue;
          oldValue = this._direction;
          if (oldValue && oldValue !== value && this._dom) {
            this.get$Dom().removeClass(oldValue + "-bar");
          }
          this._direction = value;
          return this;
        }
      },
      tabs: {
        setter: function(list) {
          var l, len1, tab;
          this.clear();
          for (l = 0, len1 = list.length; l < len1; l++) {
            tab = list[l];
            this.addTab(tab);
          }
        }
      },
      currentTab: {
        getter: function() {
          var index, tab;
          index = this._currentTab;
          tab = this.getTab(index);
          this._currentTab = tab;
          return tab;
        },
        setter: function(index) {
          this.setCurrentIndex(index);
          return this;
        }
      }
    };

    Tab.events = {
      beforeChange: null,
      change: null
    };

    Tab.prototype._tabContentRender = function(tab) {
      var container, contentDom, contentsContainer, tagName;
      contentsContainer = this.getContentsContainer();
      container = tab.get("contentContainer");
      if (container && container.parentNode === contentsContainer) {
        return;
      }
      tagName = contentsContainer.nodeName === "UL" ? "li" : "div";
      container = $.xCreate({
        tagName: tagName,
        "class": "item"
      });
      contentsContainer.appendChild(container);
      tab.set("contentContainer", container);
      contentDom = tab.getContentDom();
      if (contentDom) {
        return container.appendChild(contentDom);
      }
    };

    Tab.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Tab.__super__._doRefreshDom.call(this);
      this._classNamePool.remove("top-bar");
      this._classNamePool.add(this._direction + "-bar");
    };

    Tab.prototype.setCurrentTab = function(index) {
      var arg, container, newTab, oldTab;
      oldTab = this.get("currentTab");
      newTab = this.getTab(index);
      if (oldTab === newTab) {
        return true;
      }
      arg = {
        oldTab: oldTab,
        newTab: newTab
      };
      if (this.fire("beforeChange", this, arg) === false) {
        return false;
      }
      if (oldTab) {
        oldTab.get$Dom().removeClass("active");
        $(oldTab.get("contentContainer")).removeClass("active");
      }
      if (newTab) {
        newTab.get$Dom().addClass("active");
        container = newTab.get("contentContainer");
        if (!container) {
          this._tabContentRender(newTab);
          container = newTab.get("contentContainer");
        }
        $(container).addClass("active");
      }
      this._currentTab = newTab;
      this.fire("change", this, arg);
      return true;
    };

    Tab.prototype._initDom = function(dom) {
      var activeExclusive, l, len1, ref, tab;
      Tab.__super__._initDom.call(this, dom);
      activeExclusive = (function(_this) {
        return function(targetDom) {
          var tab;
          tab = cola.widget(targetDom);
          if (tab && tab instanceof cola.TabButton) {
            _this.setCurrentTab(tab);
          }
        };
      })(this);
      $(dom).delegate("> .tab-bar > .tabs > .tab-button", "click", function(event) {
        return activeExclusive(this, event);
      });
      if (!this._tabs) {
        return this;
      }
      ref = this._tabs;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        tab = ref[l];
        this._tabRender(tab);
      }
      this.setCurrentTab(this._currentTab || 0);
      return this;
    };

    Tab.prototype._parseTabBarDom = function(dom) {
      var child, parseTabs;
      if (this._doms == null) {
        this._doms = {};
      }
      parseTabs = (function(_this) {
        return function(node) {
          var childNode, name, tab;
          childNode = node.firstChild;
          while (childNode) {
            if (childNode.nodeType === 1) {
              tab = cola.widget(childNode);
              name = $(childNode).attr("name");
              if (!tab && name) {
                tab = new cola.TabButton({
                  dom: childNode
                });
              }
              if (tab && name) {
                tab.set("name", name);
              }
              if (tab && tab instanceof cola.TabButton) {
                _this.addTab(tab);
              }
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1 && !this._doms.tabs && cola.util.hasClass(child, "tabs")) {
          this._doms.tabs = child;
          parseTabs(child);
        }
        child = child.nextSibling;
      }
    };

    Tab.prototype._parseDom = function(dom) {
      var _contents, child, content, item, l, len1, name, parseContents, tab, tabs;
      child = dom.firstChild;
      if (this._doms == null) {
        this._doms = {};
      }
      _contents = {};
      parseContents = function(node) {
        var contentNode, name;
        contentNode = node.firstChild;
        while (contentNode) {
          if (contentNode.nodeType === 1) {
            name = $(contentNode).attr("name");
            _contents[name] = contentNode;
            $(contentNode).addClass("item");
          }
          contentNode = contentNode.nextSibling;
        }
      };
      while (child) {
        if (child.nodeType === 1) {
          if (!this._doms.contents && cola.util.hasClass(child, "contents")) {
            this._doms.contents = child;
            parseContents(child);
          } else if (!this._doms.tabs && cola.util.hasClass(child, "tab-bar")) {
            this._doms.tabBar = child;
            this._parseTabBarDom(child);
          }
        }
        child = child.nextSibling;
      }
      tabs = this._tabs || [];
      for (l = 0, len1 = tabs.length; l < len1; l++) {
        tab = tabs[l];
        name = tab.get("name");
        if (name && _contents[name]) {
          item = _contents[name];
          content = item.children[0];
          tab.set("content", _contents[name]);
          tab.set("contentContainer", item);
        }
      }
    };

    Tab.prototype.getTabBarDom = function() {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      if (!this._doms.tabBar) {
        dom = this._doms.tabBar = $.xCreate({
          tagName: "nav",
          "class": "tab-bar"
        });
        this._dom.appendChild(dom);
      }
      return this._doms.tabBar;
    };

    Tab.prototype.getTabsContainer = function() {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      if (!this._doms.tabs) {
        dom = this._doms.tabs = $.xCreate({
          tagName: "ul",
          "class": "tabs"
        });
        this.getTabBarDom().appendChild(dom);
      }
      return this._doms.tabs;
    };

    Tab.prototype.getContentsContainer = function() {
      var dom;
      if (!this._doms.contents) {
        dom = this._doms.contents = $.xCreate({
          tagName: "ul",
          "class": "contents"
        });
        this._dom.appendChild(dom);
      }
      return this._doms.contents;
    };

    Tab.prototype._tabRender = function(tab) {
      var container, dom;
      container = this.getTabsContainer();
      dom = tab.getDom();
      if (dom.parentNode !== container) {
        container.appendChild(dom);
      }
    };

    Tab.prototype.addTab = function(tab) {
      if (this._tabs == null) {
        this._tabs = [];
      }
      if (tab.constructor === Object.prototype.constructor) {
        tab = new cola.TabButton(tab);
      }
      if (this._tabs.indexOf(tab) > -1) {
        return this;
      }
      this._tabs.push(tab);
      tab.set("parent", this);
      if (this._dom) {
        this._tabRender(tab);
      }
      return this;
    };

    Tab.prototype.getTab = function(index) {
      var l, len1, tab, tabs;
      tabs = this._tabs || [];
      if (typeof index === "string") {
        for (l = 0, len1 = tabs.length; l < len1; l++) {
          tab = tabs[l];
          if (tab.get("name") === index) {
            return tab;
          }
        }
      } else if (typeof index === "number") {
        return tabs[index];
      } else if (index instanceof cola.TabButton) {
        return index;
      }
      return null;
    };

    Tab.prototype.removeTab = function(tab) {
      var contentContainer, index, newIndex, obj;
      index = -1;
      if (typeof tab === "number") {
        index = tab;
        obj = this._tabs[index];
      } else if (tab instanceof cola.TabButton) {
        index = this._tabs.indexOf(tab);
        obj = tab;
      } else if (typeof tab === "string") {
        obj = this.getTab(tab);
        index = this._tabs.indexOf(obj);
      }
      if (index > -1 && obj) {
        if (this.get("currentTab") === obj) {
          newIndex = index === (this._tabs.length - 1) ? index - 1 : index + 1;
          if (!this.setCurrentTab(newIndex)) {
            return false;
          }
        }
        this._tabs.splice(index, 1);
        contentContainer = obj.get("contentContainer");
        obj.remove();
        if ((contentContainer != null ? contentContainer.parentNode : void 0) === this._doms.contents) {
          $(contentContainer).remove();
        }
      }
      return true;
    };

    Tab.prototype.clear = function() {
      var l, len1, tab, tabs;
      tabs = this._tabs || [];
      if (tabs.length < 1) {
        return this;
      }
      for (l = 0, len1 = tabs.length; l < len1; l++) {
        tab = tabs[l];
        tab.destroy();
      }
      return this._tabs = [];
    };

    return Tab;

  })(cola.Widget);

  cola.registerWidget(cola.Tab);

  if (cola.tab == null) {
    cola.tab = {};
  }

  cola.tab.AbstractTabButton = (function(superClass) {
    extend(AbstractTabButton, superClass);

    function AbstractTabButton() {
      return AbstractTabButton.__super__.constructor.apply(this, arguments);
    }

    AbstractTabButton.attributes = {
      icon: {
        refreshDom: true,
        setter: function(value) {
          var oldValue, ref;
          oldValue = this["_icon"];
          this["_icon"] = value;
          if (oldValue && oldValue !== value && this._dom && ((ref = this._doms) != null ? ref.icon : void 0)) {
            $fly(this._doms.icon).removeClass(oldValue);
          }
        }
      },
      closeable: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      caption: {
        refreshDom: true
      },
      name: {
        refreshDom: true
      }
    };

    AbstractTabButton.prototype.getCaptionDom = function() {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      if (!this._doms.caption) {
        dom = this._doms.caption = document.createElement("div");
        dom.className = "caption";
        this._dom.appendChild(dom);
      }
      return this._doms.caption;
    };

    AbstractTabButton.prototype.getCloseDom = function() {
      var base, tabItem;
      if (this._doms == null) {
        this._doms = {};
      }
      tabItem = this;
      if ((base = this._doms)._closeBtn == null) {
        base._closeBtn = $.xCreate({
          tagName: "div",
          "class": "close-btn",
          content: {
            tagName: "i",
            "class": "close icon"
          },
          click: function() {
            tabItem.close();
            return false;
          }
        });
      }
      return this._doms._closeBtn;
    };

    AbstractTabButton.prototype._refreshIcon = function() {
      var base, captionDom, dom;
      if (!this._dom) {
        return;
      }
      if (this._icon) {
        captionDom = this.getCaptionDom();
        if ((base = this._doms).icon == null) {
          base.icon = document.createElement("i");
        }
        dom = this._doms.icon;
        $fly(dom).addClass(this._icon + " icon");
        if (dom.parentNode !== captionDom) {
          captionDom.appendChild(dom);
        }
      } else {
        if (this._doms.iconDom) {
          $fly(this._doms.iconDom).remove();
        }
      }
    };

    AbstractTabButton.prototype._refreshCaption = function() {
      var base, captionDom, span;
      if (!this._dom) {
        return;
      }
      if (this._caption) {
        captionDom = this.getCaptionDom();
        if ((base = this._doms).span == null) {
          base.span = document.createElement("span");
        }
        span = this._doms.span;
        $(span).text(this._caption);
        if (span.parentNode !== captionDom) {
          captionDom.appendChild(span);
        }
      } else if (this._doms.span) {
        $(this._doms.span).remove();
      }
    };

    AbstractTabButton.prototype._parseDom = function(dom) {
      var child, parseCaption, tabItem;
      child = dom.firstChild;
      tabItem = this;
      if (this._doms == null) {
        this._doms = {};
      }
      parseCaption = (function(_this) {
        return function(node) {
          var childNode;
          childNode = node.firstChild;
          while (childNode) {
            if (childNode.nodeType === 1) {
              if (childNode.nodeName === "SPAN") {
                _this._doms.span = childNode;
                if (_this._caption == null) {
                  _this._caption = cola.util.getTextChildData(childNode);
                }
              }
              if (childNode.nodeName === "I") {
                _this._doms.icon = childNode;
                if (_this._icon == null) {
                  _this._icon = childNode.className;
                }
              }
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      while (child) {
        if (child.nodeType === 1) {
          if (!this._doms.caption && cola.util.hasClass(child, "caption")) {
            this._doms.caption = child;
            parseCaption(child);
          } else if (!this._doms.closeBtn && cola.util.hasClass(child, "close-btn")) {
            this._doms._closeBtn = child;
            $(child).on("click", function() {
              tabItem.close();
              return false;
            });
          }
        }
        child = child.nextSibling;
      }
    };

    AbstractTabButton.prototype._doRefreshDom = function() {
      var closeDom;
      if (!this._dom) {
        return;
      }
      AbstractTabButton.__super__._doRefreshDom.call(this);
      this._refreshIcon();
      this._refreshCaption();
      if (!!this._closeable) {
        closeDom = this.getCloseDom();
        if (closeDom.parentNode !== this._dom) {
          this._dom.appendChild(closeDom);
        }
      } else if (this._doms && this._doms.closeDom) {
        $(this._doms.closeDom).remove();
      }
    };

    AbstractTabButton.prototype._createCaptionDom = function() {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      dom = $.xCreate({
        tagName: "div",
        "class": "caption",
        contextKey: "caption",
        content: [
          {
            tagName: "i",
            contextKey: "icon",
            "class": "icon"
          }, {
            tagName: "span",
            contextKey: "span",
            content: this._caption || ""
          }
        ]
      }, this._doms);
      return this._dom.appendChild(dom);
    };

    AbstractTabButton.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      AbstractTabButton.__super__.destroy.call(this);
      delete this._doms;
      return this;
    };

    return AbstractTabButton;

  })(cola.Widget);

  cola.TabButton = (function(superClass) {
    extend(TabButton, superClass);

    function TabButton() {
      return TabButton.__super__.constructor.apply(this, arguments);
    }

    TabButton.CLASS_NAME = "tab-button";

    TabButton.parentWidget = cola.Tab;

    TabButton.attributes = {
      content: {
        setter: function(value) {
          return this._content = cola.xRender(value, this._scope);
        }
      },
      contentContainer: null,
      parent: null
    };

    TabButton.events = {
      beforeClose: null,
      afterClose: null
    };

    TabButton.prototype.close = function() {
      var arg, ref;
      arg = {
        tab: this
      };
      this.fire("beforeClose", this, arg);
      if (arg.processDefault === false) {
        return this;
      }
      if ((ref = this._parent) != null) {
        ref.removeTab(this);
      }
      this.destroy();
      this.fire("afterClose", this, arg);
      return this;
    };

    TabButton.prototype.getContentDom = function() {
      return this._content;
    };

    TabButton.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      TabButton.__super__.destroy.call(this);
      delete this._content;
      delete this._contentContainer;
      delete this._parent;
      return this;
    };

    return TabButton;

  })(cola.tab.AbstractTabButton);

  cola.registerWidget(cola.TabButton);

  cola.Panel = (function(superClass) {
    extend(Panel, superClass);

    function Panel() {
      return Panel.__super__.constructor.apply(this, arguments);
    }

    Panel.CLASS_NAME = "panel";

    Panel.attributes = {
      collapsible: {
        type: "boolean",
        defaultValue: true
      },
      closable: {
        type: "boolean",
        defaultValue: false
      },
      caption: {
        refreshDom: true
      },
      icon: {
        refreshDom: true
      }
    };

    Panel.TEMPLATES = {
      "tools": {
        tagName: "div"
      }
    };

    Panel.events = {
      open: null,
      collapsedChange: null,
      close: null,
      beforeOpen: null,
      beforeCollapsedChange: null,
      beforeClose: null
    };

    Panel.prototype.collapsedChange = function() {
      var $dom, collapsed;
      $dom = this._$dom;
      collapsed = this.isCollapsed();
      if (this.fire("beforeCollapsedChange", this, {}) === false) {
        return this;
      }
      $dom.toggleClass("collapsed", !collapsed);
      setTimeout((function(_this) {
        return function() {
          return _this.fire("collapsedChange", _this, {});
        };
      })(this), 300);
    };

    Panel.prototype.isCollapsed = function() {
      var ref;
      return (ref = this._$dom) != null ? ref.hasClass("collapsed") : void 0;
    };

    Panel.prototype.isClosed = function() {
      var ref;
      return (ref = this._$dom) != null ? ref.hasClass("transition hidden") : void 0;
    };

    Panel.prototype.open = function() {
      if (!this.isClosed()) {
        return;
      }
      return this.toggle();
    };

    Panel.prototype.close = function() {
      if (this.isClosed()) {
        return;
      }
      return this.toggle();
    };

    Panel.prototype.toggle = function() {
      var beforeEvt, onEvt;
      beforeEvt = "beforeOpen";
      onEvt = "open";
      if (!this.isClosed) {
        beforeEvt = "beforeClose";
        onEvt = "close";
      }
      if (this.fire(beforeEvt, this, {}) === false) {
        return;
      }
      return this._$dom.transition({
        animation: 'scale',
        onComplete: (function(_this) {
          return function() {
            return _this.fire(onEvt, _this, {});
          };
        })(this)
      });
    };

    Panel.prototype.getContentContainer = function() {
      if (!this._dom) {
        return null;
      }
      if (!this._doms.content) {
        this._makeContentDom("content");
      }
      return this._doms.content;
    };

    Panel.prototype._initDom = function(dom) {
      var headerContent, l, len1, node, nodes, template, toolsDom;
      this._regDefaultTempaltes();
      Panel.__super__._initDom.call(this, dom);
      headerContent = $.xCreate({
        tagName: "div",
        "class": "content"
      });
      this._doms.icon = $.xCreate({
        tagName: "i",
        "class": "panel-icon"
      });
      headerContent.appendChild(this._doms.icon);
      this._doms.caption = $.xCreate({
        tagName: "span",
        "class": "caption"
      });
      headerContent.appendChild(this._doms.caption);
      template = this._getTemplate("tools");
      cola.xRender(template, this._scope);
      toolsDom = this._doms.tools = $.xCreate({
        "class": "tools"
      });
      toolsDom.appendChild(template);
      nodes = $.xCreate([
        {
          tagName: "i",
          click: (function(_this) {
            return function() {
              return _this.collapsedChange();
            };
          })(this),
          "class": "icon chevron down collapse-btn"
        }, {
          tagName: "i",
          click: (function(_this) {
            return function() {
              return _this.toggle();
            };
          })(this),
          "class": "icon close close-btn"
        }
      ]);
      for (l = 0, len1 = nodes.length; l < len1; l++) {
        node = nodes[l];
        toolsDom.appendChild(node);
      }
      headerContent.appendChild(toolsDom);
      this._render(headerContent, "header");
      if (!this._doms.content) {
        this._makeContentDom("content");
      }
    };

    Panel.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Panel.__super__._doRefreshDom.call(this);
      $fly(this._doms.caption).text(this._caption || "");
      if (this._icon) {
        $fly(this._doms.icon).show().removeClass(this._doms.icon._icon);
      } else {
        $fly(this._doms.icon).hide();
      }
      $fly(this._doms.icon).addClass("icon " + (this._icon || ""));
      this._doms.icon._icon = this._icon;
      $fly(this._doms.tools).find(".collapse-btn")[this._collapsible ? "show" : "hide"]();
      return $fly(this._doms.tools).find(".close-btn")[this._closable ? "show" : "hide"]();
    };

    Panel.prototype._makeContentDom = function(target) {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      dom = document.createElement("div");
      dom.className = target;
      if (target === "header") {
        $(this._dom).prepend(dom);
      } else {
        this._dom.appendChild(dom);
      }
      this._doms[target] = dom;
      return dom;
    };

    Panel.prototype._parseDom = function(dom) {
      var $child, _parseChild, child;
      if (this._doms == null) {
        this._doms = {};
      }
      _parseChild = (function(_this) {
        return function(node, target) {
          var childNode, widget;
          childNode = node.firstChild;
          while (childNode) {
            if (childNode.nodeType === 1) {
              widget = cola.widget(childNode);
              _this._addContentElement(widget || childNode, target);
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (child.nodeName === "TEMPLATE") {
            this._regTemplate(child);
          } else {
            $child = $(child);
            if (!$child.hasClass("content")) {
              child = child.nextSibling;
              continue;
            }
            this._doms["content"] = child;
            _parseChild(child, "content");
            break;
          }
        }
        child = child.nextSibling;
      }
    };

    return Panel;

  })(cola.AbstractContainer);

  cola.Element.mixin(cola.Panel, cola.TemplateSupport);

  cola.FieldSet = (function(superClass) {
    extend(FieldSet, superClass);

    function FieldSet() {
      return FieldSet.__super__.constructor.apply(this, arguments);
    }

    FieldSet.CLASS_NAME = "panel fieldset";

    return FieldSet;

  })(cola.Panel);

  cola.GroupBox = (function(superClass) {
    extend(GroupBox, superClass);

    function GroupBox() {
      return GroupBox.__super__.constructor.apply(this, arguments);
    }

    GroupBox.CLASS_NAME = "panel groupbox";

    return GroupBox;

  })(cola.Panel);

  cola.AbstractEditor = (function(superClass) {
    extend(AbstractEditor, superClass);

    function AbstractEditor() {
      return AbstractEditor.__super__.constructor.apply(this, arguments);
    }

    AbstractEditor.attributes = {
      value: {
        refreshDom: true,
        setter: function(value) {
          return this._setValue(value);
        }
      },
      bind: {
        refreshDom: true,
        setter: function(bindStr) {
          return this._bindSetter(bindStr);
        }
      },
      readOnly: {
        refreshDom: true,
        type: "boolean",
        defaultValue: false
      },
      state: {
        setter: function(state) {
          var dom, oldState;
          oldState = this._state;
          if (oldState !== state) {
            dom = this._dom;
            if (dom && oldState) {
              cola.util.removeClass(dom, oldState);
              if (this._fieldDom) {
                cola.util.removeClass(this._fieldDom, oldState);
              }
            }
            this._state = state;
            if (dom && state) {
              cola.util.addClass(dom, state);
              if (this._fieldDom) {
                cola.util.addClass(this._fieldDom, state);
              }
            }
          }
        }
      }
    };

    AbstractEditor.events = {
      beforePost: null,
      post: null,
      beforeChange: null,
      change: null
    };

    AbstractEditor.prototype._initDom = function(dom) {
      var fieldDom;
      if (this._state) {
        cola.util.addClass(dom, this._state);
      }
      fieldDom = dom.parentNode;
      if (fieldDom && !jQuery.find.matchesSelector(fieldDom, ".field")) {
        fieldDom = null;
      }
      this._fieldDom = fieldDom;
    };

    AbstractEditor.prototype._setValue = function(value) {
      var arg;
      if (this._value === value) {
        return false;
      }
      arg = {
        oldValue: this._value,
        value: value
      };
      if (this.fire("beforeChange", this, arg) === false) {
        return;
      }
      this._value = value;
      if (value !== this._modelValue) {
        this.post();
      }
      this.fire("change", this, arg);
      return true;
    };

    AbstractEditor.prototype.post = function() {
      if (this.fire("beforePost", this) === false) {
        return this;
      }
      this._post();
      this.fire("post", this);
      return this;
    };

    AbstractEditor.prototype._post = function() {
      this.writeBindingValue(this._value);
    };

    AbstractEditor.prototype._filterDataMessage = function(path, type, arg) {
      return (cola.constants.MESSAGE_REFRESH <= type && type <= cola.constants.MESSAGE_CURRENT_CHANGE) || type === cola.constants.MESSAGE_VALIDATION_STATE_CHANGE || this._watchingMoreMessage;
    };

    AbstractEditor.prototype._processDataMessage = function(path, type, arg) {
      var $formDom, form, keyMessage, value;
      if (type === cola.constants.MESSAGE_VALIDATION_STATE_CHANGE) {
        keyMessage = arg.entity.getKeyMessage(arg.property);
        this.set("state", keyMessage != null ? keyMessage.type : void 0);
        if (this._formDom === void 0) {
          if (this._fieldDom) {
            $formDom = $fly(this._fieldDom).closest(".ui.form");
          }
          this._formDom = ($formDom != null ? $formDom[0] : void 0) || null;
        }
        if (this._formDom) {
          form = cola.widget(this._formDom);
          if (form && form instanceof cola.Form) {
            return form.setFieldMessages(this, keyMessage);
          }
        }
      } else {
        value = this.readBindingValue();
        if (this._dataType) {
          value = this._dataType.parse(value);
        }
        this._modelValue = value;
        if (this._setValue(value)) {
          cola.util.delay(this, "refreshDom", 50, this._refreshDom);
        }
      }
    };

    return AbstractEditor;

  })(cola.Widget);

  cola.Element.mixin(cola.AbstractEditor, cola.DataWidgetMixin);

  cola.AbstractCheckbox = (function(superClass) {
    extend(AbstractCheckbox, superClass);

    function AbstractCheckbox() {
      return AbstractCheckbox.__super__.constructor.apply(this, arguments);
    }

    AbstractCheckbox.tagName = "c-checkbox";

    AbstractCheckbox.CLASS_NAME = "checkbox";

    AbstractCheckbox.INPUT_TYPE = "checkbox";

    AbstractCheckbox.attributes = {
      label: {
        refreshDom: true
      },
      name: {
        refreshDom: true
      },
      onValue: {
        defaultValue: true
      },
      offValue: {
        defaultValue: false
      },
      disabled: {
        refreshDom: true,
        type: "boolean",
        defaultValue: false
      },
      checked: {
        refreshDom: true,
        type: "boolean",
        defaultValue: false,
        getter: function() {
          return this._value === this._onValue;
        },
        setter: function(state) {
          var checked, value;
          checked = !!state;
          value = checked ? this.get("onValue") : this.get("offValue");
          this._setValue(value);
          return this;
        }
      },
      value: {
        defaultValue: false,
        refreshDom: true,
        setter: function(value) {
          return this._setValue(value);
        }
      }
    };

    AbstractCheckbox._modelValue = false;

    AbstractCheckbox.prototype._parseDom = function(dom) {
      var child, nameAttr;
      if (this._doms == null) {
        this._doms = {};
      }
      if (this._$dom == null) {
        this._$dom = $(dom);
      }
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (child.nodeName === "LABEL") {
            this._doms.label = child;
            if (this._label == null) {
              this._label = cola.util.getTextChildData(child);
            }
          } else if (child.nodeName === "INPUT") {
            nameAttr = child.getAttribute("name");
            if (nameAttr) {
              if (this._name == null) {
                this._name = nameAttr;
              }
            }
            this._doms.input = child;
          }
        }
        child = child.nextSibling;
      }
      if (!this._doms.label && !this._doms.input) {
        this._$dom.append($.xCreate([
          {
            tagName: "input",
            type: this.constructor.INPUT_TYPE,
            contextKey: "input",
            name: this._name || ""
          }, {
            tagName: "label",
            content: this._label || "",
            contextKey: "label"
          }
        ], this._doms));
      }
      if (!this._doms.label) {
        this._doms.label = $.xCreate({
          tagName: "label",
          content: this._label || ""
        });
        this._$dom.append(this._doms.label);
      }
      if (!this._doms.input) {
        this._doms.input = $.xCreate({
          tagName: "input",
          type: this.constructor.INPUT_TYPE,
          name: this._name || ""
        });
        $(this._doms.label).before(this._doms.input);
      }
      this._bindToSemantic();
    };

    AbstractCheckbox.prototype._createDom = function() {
      return $.xCreate({
        tagName: "DIV",
        "class": "ui " + this.constructor.CLASS_NAME,
        content: [
          {
            tagName: "input",
            type: this.constructor.INPUT_TYPE,
            contextKey: "input",
            name: this.get("name") || ""
          }, {
            tagName: "label",
            content: this._label || "",
            contextKey: "label"
          }
        ]
      }, this._doms);
    };

    AbstractCheckbox.prototype._bindToSemantic = function() {
      return this.get$Dom().checkbox({
        onChange: (function(_this) {
          return function() {
            return _this._setValue(_this._getValue());
          };
        })(this)
      });
    };

    AbstractCheckbox.prototype._setDom = function(dom, parseChild) {
      this._dom = dom;
      if (!parseChild) {
        this._bindToSemantic();
      }
      AbstractCheckbox.__super__._setDom.call(this, dom, parseChild);
    };

    AbstractCheckbox.prototype._refreshEditorDom = function() {
      return this.get$Dom().checkbox(this._value === this._onValue ? "check" : "uncheck");
    };

    AbstractCheckbox.prototype._doRefreshDom = function() {
      var $dom, label, readOnly;
      if (!this._dom) {
        return;
      }
      AbstractCheckbox.__super__._doRefreshDom.call(this);
      if (this._doms == null) {
        this._doms = {};
      }
      label = this.get("label") || "";
      $(this._doms.label).text(label);
      readOnly = this.get("readOnly");
      this._classNamePool.toggle("read-only", readOnly);
      $dom = this.get$Dom();
      $dom.checkbox(!!this._disabled ? "disable" : "enable");
      return this._refreshEditorDom();
    };

    AbstractCheckbox.prototype._getValue = function() {
      if (this.get$Dom().checkbox("is checked")) {
        return this.get("onValue");
      } else {
        return this.get("offValue");
      }
    };

    AbstractCheckbox.prototype.toggle = function() {
      var state;
      state = !!this.get("checked");
      this.set("checked", !state);
      return this;
    };

    return AbstractCheckbox;

  })(cola.AbstractEditor);

  cola.Checkbox = (function(superClass) {
    extend(Checkbox, superClass);

    function Checkbox() {
      return Checkbox.__super__.constructor.apply(this, arguments);
    }

    Checkbox.attributes = {
      indeterminateValue: null,
      triState: {
        type: "boolean",
        defaultValue: false
      }
    };

    Checkbox.prototype._getValue = function() {
      if (this._triState && !this.get$Dom().checkbox("is determinate")) {
        return this.get("indeterminateValue");
      }
      return Checkbox.__super__._getValue.call(this);
    };

    Checkbox.prototype._refreshEditorDom = function() {
      if (this._triState && this._value !== this._onValue && this._value !== this._offValue) {
        this.get$Dom().checkbox('set indeterminate');
        return;
      }
      return Checkbox.__super__._refreshEditorDom.call(this);
    };

    return Checkbox;

  })(cola.AbstractCheckbox);

  cola.registerWidget(cola.Checkbox);

  cola.Toggle = (function(superClass) {
    extend(Toggle, superClass);

    function Toggle() {
      return Toggle.__super__.constructor.apply(this, arguments);
    }

    Toggle.tagName = "c-toggle";

    Toggle.CLASS_NAME = "toggle checkbox";

    return Toggle;

  })(cola.AbstractCheckbox);

  cola.registerWidget(cola.Toggle);

  cola.Slider = (function(superClass) {
    extend(Slider, superClass);

    function Slider() {
      return Slider.__super__.constructor.apply(this, arguments);
    }

    Slider.CLASS_NAME = "slider checkbox";

    return Slider;

  })(cola.AbstractCheckbox);

  DEFAULT_DATE_DISPLAY_FORMAT = "yyyy-MM-dd";

  DEFAULT_DATE_INPUT_FORMAT = "yyyyMMdd";

  DEFAULT_TIME_DISPLAY_FORMAT = "HH:mm:ss";

  DEFAULT_TIME_INPUT_FORMAT = "HHmmss";

  isIE11 = /Trident\/7\./.test(navigator.userAgent);

  cola.AbstractInput = (function(superClass) {
    extend(AbstractInput, superClass);

    function AbstractInput() {
      return AbstractInput.__super__.constructor.apply(this, arguments);
    }

    AbstractInput.CLASS_NAME = "input";

    AbstractInput.SEMANTIC_CLASS = ["left floated", "right floated", "corner labeled", "right labeled", "left icon", "left action"];

    AbstractInput.attributes = {
      name: null,
      value: {
        setter: function(value) {
          if (this._dataType) {
            value = this._dataType.parse(value);
          }
          return this._setValue(value);
        }
      },
      dataType: {
        setter: function(dataType) {
          return cola.DataType.dataTypeSetter.call(this, dataType);
        }
      },
      size: {
        "enum": ["mini", "tiny", "small", "medium", "large", "big", "huge", "massive"],
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this["_size"];
          if (oldValue && oldValue !== value && this._dom) {
            this.get$Dom().removeClass(oldValue);
          }
          this["_size"] = value;
        }
      },
      placeholder: {
        refreshDom: true
      },
      icon: {
        refreshDom: true,
        setter: function(value) {
          var $iconDom, oldValue, ref;
          oldValue = this["_icon"];
          this["_icon"] = value;
          if (oldValue && oldValue !== value && this._dom && ((ref = this._doms) != null ? ref.iconDom : void 0)) {
            $iconDom = $(this._doms.iconDom);
            $iconDom.removeClass(oldValue);
          }
        }
      },
      iconPosition: {
        refreshDom: true,
        defaultValue: "right",
        "enum": ["left", "right"],
        setter: function(value) {
          var oldValue;
          oldValue = this["_iconPosition"];
          this["_iconPosition"] = value;
          if (oldValue && oldValue !== value && oldValue === "left" && this._dom) {
            $removeClass(this._dom, "left icon", true);
          }
        }
      },
      corner: {
        setter: function(value) {
          var oldValue;
          oldValue = this["_corner"];
          if (oldValue != null) {
            oldValue.destroy();
          }
          delete this["_corner"];
          if (value) {
            if (value instanceof cola.Corner) {
              this["_corner"] = value;
            } else if (value.$type === "Corner") {
              this["_corner"] = cola.widget(value);
            }
          }
        }
      },
      label: {
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this["_label"];
          if (oldValue != null) {
            oldValue.destroy();
          }
          delete this["_label"];
          if (value) {
            if (value instanceof cola.Label) {
              this["_label"] = value;
            } else if (value.$type) {
              this["_label"] = cola.widget(value);
            } else {
              delete this["_label"];
            }
          }
        }
      },
      labelPosition: {
        refreshDom: true,
        defaultValue: "left",
        "enum": ["left", "right"]
      },
      actionButton: {
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this["_actionButton"];
          if (oldValue != null) {
            oldValue.destroy();
          }
          delete this["_actionButton"];
          if (value) {
            if (value instanceof cola.Button) {
              this["_actionButton"] = value;
            } else if (value.$type === "Button") {
              this["_actionButton"] = cola.widget(value);
            }
          }
        }
      },
      buttonPosition: {
        refreshDom: true,
        defaultValue: "right",
        "enum": ["left", "right"]
      }
    };

    AbstractInput.prototype.destroy = function() {
      if (!this._destroyed) {
        AbstractInput.__super__.destroy.call(this);
        delete this._doms;
        delete this["_corner"];
        delete this["_actionButton"];
        delete this["_label"];
      }
    };

    AbstractInput.prototype._bindSetter = function(bindStr) {
      var dataType;
      AbstractInput.__super__._bindSetter.call(this, bindStr);
      dataType = this.getBindingDataType();
      if (dataType) {
        cola.DataType.dataTypeSetter.call(this, dataType);
      }
    };

    AbstractInput.prototype._parseDom = function(dom) {
      var $actionButtonDom, $labelDom, buttonIndex, child, childConfig, index, inputDom, inputIndex, l, labelIndex, len1, ref, widget;
      if (!dom) {
        return;
      }
      if (this._doms == null) {
        this._doms = {};
      }
      inputIndex = -1;
      buttonIndex = 0;
      labelIndex = 0;
      childConfig = {};
      ref = dom.childNodes;
      for (index = l = 0, len1 = ref.length; l < len1; index = ++l) {
        child = ref[index];
        if (child.nodeType !== 1) {
          continue;
        }
        widget = cola.widget(child);
        if (widget) {
          if (widget instanceof cola.Corner) {
            childConfig.corner = this._corner = widget;
          } else if (widget instanceof cola.Label) {
            labelIndex = index;
            childConfig.label = this._label = widget;
          } else if (widget instanceof cola.Button) {
            buttonIndex = index;
            childConfig.actionButton = this._actionButton = widget;
          }
        } else {
          if (child.nodeName === "I") {
            this._doms.iconDom = child;
            this._icon = child.className;
          } else if (this._isEditorDom(child)) {
            inputIndex = index;
            this._doms.input = child;
          }
        }
      }
      if (childConfig.label && inputIndex > -1 && labelIndex > inputIndex && !config.labelPosition) {
        this._labelPosition = "right";
      }
      if (childConfig.actionButton && inputIndex > -1 && buttonIndex < inputIndex && !config.buttonPosition) {
        this._buttonPosition = "left";
      }
      if (inputIndex === -1) {
        inputDom = this._doms.input = this._createEditorDom();
        if (childConfig.label) {
          $labelDom = childConfig.label.get$Dom();
          if (this._labelPosition === "right") {
            $labelDom.before(inputDom);
          } else {
            $labelDom.after(inputDom);
          }
        } else if (childConfig.actionButton) {
          $actionButtonDom = childConfig.actionButton.get$Dom();
          if (this._buttonPosition === "left") {
            $actionButtonDom.after(inputDom);
          } else {
            $actionButtonDom.before(inputDom);
          }
        } else if (childConfig.corner) {
          childConfig.corner.get$Dom().before(inputDom);
        } else {
          this.get$Dom().append(inputDom);
        }
      }
      return this;
    };

    AbstractInput.prototype._createEditorDom = function() {
      return $.xCreate({
        tagName: "input",
        type: "text"
      });
    };

    AbstractInput.prototype._isEditorDom = function(node) {
      return node.nodeName === "INPUT";
    };

    AbstractInput.prototype._createDom = function() {
      var className, dom, inputDom;
      className = this.constructor.CLASS_NAME;
      if (this._doms == null) {
        this._doms = {};
      }
      inputDom = this._doms.input = this._createEditorDom();
      dom = $.xCreate({
        tagName: "DIV",
        "class": "ui " + className
      }, this._doms);
      dom.appendChild(inputDom);
      return dom;
    };

    AbstractInput.prototype._refreshCorner = function() {
      var corner, cornerDom;
      corner = this.get("corner");
      if (!corner) {
        return;
      }
      cornerDom = corner.getDom();
      if (cornerDom.parentNode !== this._dom) {
        this._dom.appendChild(cornerDom);
      }
      this._classNamePool.remove("labeled");
      this._classNamePool.add("corner labeled");
    };

    AbstractInput.prototype._refreshLabel = function() {
      var label, labelDom, labelPosition, rightLabeled;
      if (!this._dom) {
        return;
      }
      label = this.get("label");
      labelPosition = this.get("labelPosition");
      this._classNamePool.remove("right labeled");
      this._classNamePool.remove("labeled");
      if (!label) {
        return;
      }
      labelDom = label.getDom();
      rightLabeled = labelPosition === "right";
      this._classNamePool.add(rightLabeled ? "right labeled" : "labeled");
      if (rightLabeled) {
        this._dom.appendChild(labelDom);
      } else {
        $(this._doms.input).before(labelDom);
      }
    };

    AbstractInput.prototype._refreshButton = function() {
      var actionButton, btnDom, buttonPosition, leftAction;
      actionButton = this.get("actionButton");
      buttonPosition = this.get("buttonPosition");
      this._classNamePool.remove("left action");
      this._classNamePool.remove("action");
      if (!actionButton) {
        return;
      }
      btnDom = actionButton.getDom();
      leftAction = buttonPosition === "left";
      this._classNamePool.add(leftAction ? "left action" : "action");
      if (leftAction) {
        $(this._doms.input).before(btnDom);
      } else {
        this._dom.appendChild(btnDom);
      }
    };

    AbstractInput.prototype._refreshIcon = function() {
      var base, classNamePool, icon, iconDom, iconPosition, leftIcon;
      icon = this.get("icon");
      iconPosition = this.get("iconPosition");
      classNamePool = this._classNamePool;
      classNamePool.remove("left icon");
      classNamePool.remove("icon");
      if (icon) {
        if ((base = this._doms).iconDom == null) {
          base.iconDom = document.createElement("i");
        }
        iconDom = this._doms.iconDom;
        $(iconDom).addClass(icon + " icon");
        leftIcon = iconPosition === "left";
        classNamePool.add(leftIcon ? "left icon" : "icon");
        if (leftIcon) {
          $(this._doms.input).before(iconDom);
        } else {
          this._dom.appendChild(iconDom);
        }
      } else {
        if (this._doms.iconDom) {
          $(this._doms.iconDom).remove();
        }
      }
    };

    AbstractInput.prototype._refreshInput = function() {
      var $inputDom, align, dataType, inputType, ref;
      $inputDom = $fly(this._doms.input);
      if (this._name) {
        $inputDom.attr("name", this._name);
      }
      $inputDom.attr("placeholder", this.get("placeholder"));
      $inputDom.prop("readOnly", this._finalReadOnly);
      if ((ref = this.get("actionButton")) != null) {
        ref.set("disabled", this._finalReadOnly);
      }
      dataType = this._dataType;
      if (dataType && !this._inputType) {
        inputType = "text";
        align = "left";
        if (dataType instanceof cola.NumberDataType) {
          inputType = "number";
          align = "right";
        }
        $inputDom.prop("type", inputType).css("text-align", align);
      }
      this._refreshInputValue(this._value);
    };

    AbstractInput.prototype._refreshInputValue = function(value) {
      $fly(this._doms.input).val(value != null ? value + "" || "" : void 0);
    };

    AbstractInput.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      AbstractInput.__super__._doRefreshDom.call(this);
      this._finalReadOnly = !!this.get("readOnly");
      this._refreshIcon();
      this._refreshButton();
      this._refreshCorner();
      this._refreshLabel();
      this._refreshInput();
    };

    AbstractInput.prototype.focus = function() {
      var ref;
      if ((ref = this._doms.input) != null) {
        ref.focus();
      }
    };

    return AbstractInput;

  })(cola.AbstractEditor);

  cola.Input = (function(superClass) {
    extend(Input, superClass);

    function Input() {
      return Input.__super__.constructor.apply(this, arguments);
    }

    Input.tagName = "c-input";

    Input.CLASS_NAME = "input";

    Input.attributes = {
      displayFormat: null,
      inputFormat: null,
      inputType: {
        defaultValue: "text"
      },
      postOnInput: {
        type: "boolean",
        defaultValue: false
      }
    };

    Input.events = {
      focus: null,
      blur: null,
      keyDown: null,
      keyPress: null
    };

    Input.prototype._createEditorDom = function() {
      var config;
      config = {
        tagName: "input",
        type: this._inputType || "text"
      };
      if (this._inputType === "number") {
        config.style = {
          "text-align": "right"
        };
      }
      return $.xCreate(config);
    };

    Input.prototype._isEditorDom = function(node) {
      return node.nodeName === "INPUT";
    };

    Input.prototype._initDom = function(dom) {
      var doPost;
      Input.__super__._initDom.call(this, dom);
      doPost = (function(_this) {
        return function() {
          var dataType, inputFormat, readOnly, value;
          readOnly = _this._readOnly;
          if (!readOnly) {
            value = $(_this._doms.input).val();
            dataType = _this._dataType;
            if (dataType) {
              if (_this._inputType === "text") {
                inputFormat = _this._inputFormat;
                if (dataType instanceof cola.DateDataType) {
                  if (inputFormat == null) {
                    inputFormat = DEFAULT_DATE_INPUT_FORMAT;
                  }
                  value = inputFormat + "||" + value;
                }
              }
              value = dataType.parse(value);
            }
            _this.set("value", value);
          }
        };
      })(this);
      $(this._doms.input).on("change", (function(_this) {
        return function() {
          doPost();
        };
      })(this)).on("focus", (function(_this) {
        return function() {
          _this._inputFocused = true;
          _this._refreshInputValue(_this._value);
          if (!_this._finalReadOnly) {
            _this.addClass("focused");
          }
          _this.fire("focus", _this);
        };
      })(this)).on("blur", (function(_this) {
        return function() {
          var entity, propertyDef, ref;
          _this._inputFocused = false;
          _this.removeClass("focused");
          _this._refreshInputValue(_this._value);
          _this.fire("blur", _this);
          if ((_this._value == null) || _this._value === "" && ((ref = _this._bindInfo) != null ? ref.isWriteable : void 0)) {
            propertyDef = _this.getBindingProperty();
            if ((propertyDef != null ? propertyDef._required : void 0) && propertyDef._validators) {
              entity = _this._scope.get(_this._bindInfo.entityPath);
              if (entity) {
                entity.validate(_this._bindInfo.property);
              }
            }
          }
        };
      })(this)).on("input", (function(_this) {
        return function() {
          if (_this._postOnInput) {
            doPost();
          }
        };
      })(this)).on("keydown", (function(_this) {
        return function(event) {
          var arg;
          arg = {
            keyCode: event.keyCode,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            altlKey: event.altlKey,
            event: event
          };
          return _this.fire("keyDown", _this, arg);
        };
      })(this)).on("keypress", (function(_this) {
        return function(event) {
          var arg;
          arg = {
            keyCode: event.keyCode,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            altlKey: event.altlKey,
            event: event
          };
          if (_this.fire("keyPress", _this, arg) === false) {
            return;
          }
          if (event.keyCode === 13 && isIE11) {
            return doPost();
          }
        };
      })(this));
    };

    Input.prototype._refreshInputValue = function(value) {
      var format, inputType;
      inputType = this._inputType;
      if (inputType === "text") {
        format = this._inputFocused ? this._inputFormat : this._displayFormat;
        if (typeof value === "number") {
          if (format) {
            value = formatNumber(format, value);
          }
        } else if (value instanceof Date) {
          if (!format) {
            format = this._inputFocused ? DEFAULT_DATE_INPUT_FORMAT : DEFAULT_DATE_DISPLAY_FORMAT;
          }
          value = (new XDate(value)).toString(format);
        }
      } else {
        if (value instanceof Date) {
          if (inputType === "date") {
            format = DEFAULT_DATE_DISPLAY_FORMAT;
          } else if (inputType === "time") {
            format = DEFAULT_TIME_DISPLAY_FORMAT;
          } else {
            format = ISO_FORMAT_STRING;
          }
          value = (new XDate(value)).toString(format);
        }
      }
      return Input.__super__._refreshInputValue.call(this, value);
    };

    return Input;

  })(cola.AbstractInput);

  cola.registerWidget(cola.Input);

  cola.Progress = (function(superClass) {
    extend(Progress, superClass);

    function Progress() {
      return Progress.__super__.constructor.apply(this, arguments);
    }

    Progress.tagName = "c-progress";

    Progress.CLASS_NAME = "progress";

    Progress.SEMANTIC_CLASS = ["left floated", "right floated"];

    Progress.attributes = {
      total: {
        type: "number",
        defaultValue: 0,
        setter: function(value) {
          this._total = value;
          this._setting("total", value);
        }
      },
      value: {
        type: "number",
        defaultValue: 0,
        setter: function(value) {
          this._value = value;
          this.progress(value);
        }
      },
      showProgress: {
        defaultValue: true,
        type: "boolean",
        refreshDom: true
      },
      progressFormat: {
        "enum": ["percent", "ratio"],
        defaultValue: "percent",
        setter: function(value) {
          this._progressFormat = value;
          if (this._dom) {
            this._setting("label", value);
          }
        }
      },
      ratioText: {
        defaultValue: "{percent}%",
        setter: function(value) {
          this._ratioText = value;
          if (this._dom) {
            this._settingText();
          }
        }
      },
      activeMessage: {
        refreshDom: true,
        setter: function(value) {
          this._activeMessage = value;
          if (this._dom) {
            this._settingText();
          }
        }
      },
      successMessage: {
        refreshDom: true,
        setter: function(value) {
          this._successMessage = value;
          if (this._dom) {
            this._settingText();
          }
        }
      },
      autoSuccess: {
        defaultValue: true,
        type: "boolean",
        setter: function(value) {
          this._autoSuccess = !!value;
          if (this._dom) {
            this._setting("autoSuccess", this._autoSuccess);
          }
        }
      },
      showActivity: {
        type: "boolean",
        defaultValue: true,
        setter: function(value) {
          this._showActivity = !!value;
          if (this._dom) {
            this._setting("showActivity", this._showActivity);
          }
        }
      },
      limitValues: {
        type: "boolean",
        defaultValue: true,
        setter: function(value) {
          this._limitValues = value;
          if (this._dom) {
            this._setting("limitValues", this._limitValues);
          }
        }
      },
      precision: {
        type: "number",
        refreshDom: true,
        defaultValue: 1
      }
    };

    Progress.events = {
      change: null,
      success: null,
      active: null,
      error: null,
      warning: null
    };

    Progress.prototype._initDom = function(dom) {
      if (this._doms == null) {
        this._doms = {};
      }
      return $(dom).empty().append($.xCreate([
        {
          tagName: "div",
          "class": "bar",
          content: {
            tagName: "div",
            "class": "progress",
            contextKey: "progress"
          },
          contextKey: "bar"
        }, {
          tagName: "div",
          "class": "label",
          contextKey: "label"
        }
      ], this._doms));
    };

    Progress.prototype._setting = function(name, value) {
      if (!this._dom) {
        return;
      }
      if (this._dom) {
        this.get$Dom().progress("setting", name, value);
      }
    };

    Progress.prototype._settingText = function() {
      this._setting("text", {
        active: this._activeMessage || "",
        success: this._successMessage || "",
        ratio: this._ratioText || "{percent}%"
      });
    };

    Progress.prototype._doRefreshDom = function() {
      var $dom;
      if (!this._dom) {
        return;
      }
      Progress.__super__._doRefreshDom.call(this);
      $dom = this.get$Dom();
      if (this._doms == null) {
        this._doms = {};
      }
      if (this._activeMessage || this._successMessage) {
        if (!this._doms.label.parentNode) {
          $dom.append(this._doms.label);
        }
      } else {
        if (this._doms.label.parentNode) {
          $(this._doms.label).remove();
        }
      }
      if (this._showProgress) {
        if (this._doms.progress.parentNode !== this._doms.bar) {
          this._doms.bar.appendChild(this._doms.progress);
        }
      } else {
        if (this._doms.progress.parentNode) {
          $(this._doms.progress).remove();
        }
      }
    };

    Progress.prototype._setDom = function(dom, parseChild) {
      var listenState;
      Progress.__super__._setDom.call(this, dom, parseChild);
      listenState = (function(_this) {
        return function(eventName, arg) {
          return _this.fire(eventName, _this, arg);
        };
      })(this);
      this.get$Dom().progress({
        total: this.get("total"),
        label: this._labelFormat,
        autoSuccess: this._autoSuccess,
        showActivity: this._showActivity,
        limitValues: this._limitValues,
        precision: this._precision,
        text: {
          active: this._activeMessage || "",
          success: this._successMessage || "",
          ratio: this._ratioText
        },
        onChange: function(percent, value, total) {
          var arg;
          arg = {
            percent: percent,
            value: value,
            total: total
          };
          return listenState("change", arg);
        },
        onSuccess: function(total) {
          var arg;
          arg = {
            total: total
          };
          return listenState("success", arg);
        },
        onActive: function(value, total) {
          var arg;
          arg = {
            value: value,
            total: total
          };
          return listenState("active", arg);
        },
        onWarning: function(value, total) {
          var arg;
          arg = {
            value: value,
            total: total
          };
          return listenState("warning", arg);
        },
        onError: function(value, total) {
          var arg;
          arg = {
            value: value,
            total: total
          };
          return listenState("error", arg);
        }
      });
      this.progress(this._value);
    };

    Progress.prototype.reset = function() {
      if (this._dom) {
        this.get$Dom().progress("reset");
      }
      return this;
    };

    Progress.prototype.success = function(message) {
      if (message == null) {
        message = "";
      }
      if (this._dom) {
        this.get$Dom().progress("set success", message);
      }
      return this;
    };

    Progress.prototype.warning = function(message) {
      if (this._dom) {
        this.get$Dom().progress("set warning", message);
      }
      return this;
    };

    Progress.prototype.error = function(message) {
      if (this._dom) {
        this.get$Dom().progress("set error", message);
      }
      return this;
    };

    Progress.prototype.progress = function(progress) {
      this._value = progress;
      if (this._dom) {
        this.get$Dom().progress("set progress", progress);
      }
      return this;
    };

    Progress.prototype.complete = function() {
      this._value = this._total;
      if (this._dom) {
        this.get$Dom().progress("complete");
      }
      return this;
    };

    Progress.prototype.destroy = function() {
      var ref;
      if (this._destroyed) {
        return;
      }
      if ((ref = this._$dom) != null) {
        ref.progress("destroy");
      }
      Progress.__super__.destroy.call(this);
      delete this._doms;
    };

    return Progress;

  })(cola.Widget);

  cola.registerWidget(cola.Progress);

  cola.RadioButton = (function(superClass) {
    extend(RadioButton, superClass);

    function RadioButton() {
      return RadioButton.__super__.constructor.apply(this, arguments);
    }

    RadioButton.tagName = "c-radio";

    RadioButton.CLASS_NAME = "checkbox";

    RadioButton.INPUT_TYPE = "radio";

    RadioButton.attributes = {
      type: {
        "enum": ["radio", "toggle", "slider"],
        defaultValue: "radio",
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this._type;
          this._type = value;
          if (oldValue && this._dom && oldValue !== value) {
            $fly(this._dom).removeClass(oldValue);
          }
          return this;
        }
      },
      label: {
        refreshDom: true
      },
      name: {
        refreshDom: true
      },
      disabled: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      checked: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      value: {
        defaultValue: true,
        refreshDom: true
      },
      readOnly: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      }
    };

    RadioButton._modelValue = false;

    RadioButton.prototype._parseDom = function(dom) {
      var child, nameAttr;
      if (this._doms == null) {
        this._doms = {};
      }
      this._$dom = $(dom);
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (child.nodeName === "LABEL") {
            this._doms.label = child;
            if (this._label == null) {
              this._label = cola.util.getTextChildData(child);
            }
          } else if (child.nodeName === "INPUT") {
            nameAttr = child.getAttribute("name");
            if (nameAttr) {
              if (this._name == null) {
                this._name = nameAttr;
              }
            }
            this._doms.input = child;
          }
        }
        child = child.nextSibling;
      }
      if (!this._doms.label && !this._doms.input) {
        this._$dom.append($.xCreate([
          {
            tagName: "input",
            type: this.constructor.INPUT_TYPE,
            contextKey: "input",
            name: this._name || ""
          }, {
            tagName: "label",
            content: this._label || "",
            contextKey: "label"
          }
        ], this._doms));
      }
      if (!this._doms.label) {
        this._doms.label = $.xCreate({
          tagName: "label",
          content: this._label || this._value || ""
        });
        this._$dom.append(this._doms.label);
      }
      if (!this._doms.input) {
        this._doms.input = $.xCreate({
          tagName: "input",
          type: this.constructor.INPUT_TYPE,
          name: this._name || ""
        });
        $(this._doms.label).before(this._doms.input);
      }
      this._bindToSemantic();
    };

    RadioButton.prototype._createDom = function() {
      return $.xCreate({
        tagName: "DIV",
        "class": "ui " + this.constructor.CLASS_NAME,
        content: [
          {
            tagName: "input",
            type: this.constructor.INPUT_TYPE,
            contextKey: "input",
            name: this._name || ""
          }, {
            tagName: "label",
            content: this._label || this._value || "",
            contextKey: "label"
          }
        ]
      }, this._doms);
    };

    RadioButton.prototype._bindToSemantic = function() {
      return this.get$Dom().checkbox({
        onChange: (function(_this) {
          return function() {
            return _this._changeState();
          };
        })(this)
      });
    };

    RadioButton.prototype._changeState = function() {
      var ref;
      this._checked = this.get$Dom().checkbox("is checked");
      if (this._checked) {
        return (ref = this._parent) != null ? ref.set("value", this._value) : void 0;
      }
    };

    RadioButton.prototype._setDom = function(dom, parseChild) {
      this._dom = dom;
      if (!parseChild) {
        this._bindToSemantic();
      }
      RadioButton.__super__._setDom.call(this, dom, parseChild);
    };

    RadioButton.prototype._refreshEditorDom = function() {
      var $dom;
      $dom = this.get$Dom();
      if (this._checked === $dom.checkbox("is checked")) {
        return;
      }
      return $dom.checkbox(this._checked ? "check" : "uncheck");
    };

    RadioButton.prototype._doRefreshDom = function() {
      var $dom, label, readOnly;
      if (!this._dom) {
        return;
      }
      RadioButton.__super__._doRefreshDom.call(this);
      if (this._doms == null) {
        this._doms = {};
      }
      label = this._label || this._value || "";
      $(this._doms.label).text(label);
      readOnly = this.get("readOnly");
      this._classNamePool.toggle("read-only", readOnly);
      this._classNamePool.add(this._type);
      $dom = this.get$Dom();
      $dom.checkbox(!!this._disabled ? "disable" : "enable");
      $(this._doms.input).attr("name", this._name).attr("value", this._value);
      return this._refreshEditorDom();
    };

    RadioButton.prototype.toggle = function() {
      var state;
      state = !!this.get("checked");
      this.set("checked", !state);
      return this;
    };

    RadioButton.prototype.remove = function() {
      RadioButton.__super__.remove.call(this);
      return delete this._parent;
    };

    RadioButton.prototype.destroy = function() {
      if (this._destroyed) {
        return this;
      }
      delete this._parent;
      RadioButton.__super__.destroy.call(this);
      return delete this._doms;
    };

    return RadioButton;

  })(cola.Widget);

  cola.registerWidget(cola.RadioButton);

  emptyRadioGroupItems = [];

  cola.RadioGroup = (function(superClass) {
    extend(RadioGroup, superClass);

    function RadioGroup() {
      return RadioGroup.__super__.constructor.apply(this, arguments);
    }

    RadioGroup.tagName = "c-radioGroup";

    RadioGroup.CLASS_NAME = "grouped";

    RadioGroup.attributes = {
      name: null,
      items: {
        setter: function(items) {
          var item, l, len1;
          this.clear();
          for (l = 0, len1 = items.length; l < len1; l++) {
            item = items[l];
            this._addItem(item);
          }
          return this;
        }
      },
      type: {
        "enum": ["radio", "toggle", "slider"],
        defaultValue: "radio",
        refreshDom: true,
        setter: function(value) {
          var item, l, len1, ref;
          this._type = value;
          if (this._items) {
            ref = this._items;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              item = ref[l];
              item.set("type", value);
            }
          }
          return this;
        }
      }
    };

    RadioGroup.prototype._doRefreshDom = function() {
      var item, l, len1, ref, value;
      if (!this._dom) {
        return;
      }
      RadioGroup.__super__._doRefreshDom.call(this);
      value = this._value;
      if (!this._items) {
        return;
      }
      ref = this._items;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        if (item.get("value") === value) {
          item.set("checked", true);
          break;
        }
      }
    };

    RadioGroup.prototype._initDom = function(dom) {
      var item, itemDom, l, len1, ref;
      RadioGroup.__super__._initDom.call(this, dom);
      if (!this._items) {
        return;
      }
      ref = this._items;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        itemDom = item.getDom();
        if (itemDom.parentNode === this._dom) {
          continue;
        }
        this._dom.appendChild(itemDom);
      }
    };

    RadioGroup.prototype._parseDom = function(dom) {
      var child, widget;
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          widget = cola.widget(child);
          if (widget && widget instanceof cola.RadioButton) {
            this._addItem(widget);
          }
        }
        child = child.nextSibling;
      }
    };

    RadioGroup.prototype._addItem = function(item) {
      var classType, radioBtn, radioDom;
      if (this._destroyed) {
        return this;
      }
      if (this._items == null) {
        this._items = [];
      }
      if (item instanceof cola.RadioButton) {
        radioBtn = item;
      } else if (item.constructor === Object.prototype.constructor) {
        radioBtn = new cola.RadioButton(item);
      } else {
        classType = cola.util.getType(item);
        if (classType === "number" || classType === "string") {
          radioBtn = new cola.RadioButton({
            value: item
          });
        }
      }
      if (!radioBtn) {
        return;
      }
      radioBtn.set({
        name: this._name,
        type: this._type
      });
      radioBtn._parent = this;
      this._items.push(radioBtn);
      if (this._dom) {
        radioDom = radioBtn.getDom();
        radioDom.parentNode !== this._dom;
        this._dom.appendChild(radioDom);
      }
      return this;
    };

    RadioGroup.prototype.addRadioButton = function(config) {
      this._addItem(config);
      return this;
    };

    RadioGroup.prototype.getRadioButton = function(index) {
      var item, l, len1, ref;
      if (!this._items) {
        return;
      }
      if (typeof index === "string") {
        ref = this._items;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          item = ref[l];
          if (item.get("value") === index) {
            return;
          }
        }
      } else {
        return this._items[index];
      }
      return null;
    };

    RadioGroup.prototype.removeRadioButton = function(index) {
      var radio;
      if (index instanceof cola.RadioButton) {
        radio = index;
      } else {
        radio = getRadioButton(index);
      }
      if (!radio) {
        return this;
      }
      index = this._items.indexOf(radio);
      this._items.splice(index, 1);
      radio.remove();
      return this;
    };

    RadioGroup.prototype.clear = function() {
      var item, l, len1, ref;
      if (!this._items) {
        return;
      }
      ref = this._items;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        item.destroy();
      }
      return this._items = [];
    };

    RadioGroup.prototype.destroy = function() {
      var item, l, len1, ref;
      if (this._destroyed) {
        return this;
      }
      if (this._items) {
        ref = this._items;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          item = ref[l];
          item.destroy();
        }
        delete this._items;
      }
      RadioGroup.__super__.destroy.call(this);
      return this;
    };

    return RadioGroup;

  })(cola.AbstractEditor);

  cola.registerWidget(cola.RadioGroup);

  cola.Rating = (function(superClass) {
    extend(Rating, superClass);

    function Rating() {
      return Rating.__super__.constructor.apply(this, arguments);
    }

    Rating.tagName = "c-rating";

    Rating.CLASS_NAME = "rating";

    Rating.attributes = {
      rating: {
        type: "number",
        defaultValue: 0,
        refreshDom: true
      },
      maxRating: {
        type: "number",
        refreshDom: true,
        defaultValue: 1,
        setter: function(value) {
          this._maxRating = value;
          return this._refreshRating = true;
        }
      },
      disabled: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      }
    };

    Rating.events = {
      rate: null
    };

    Rating.prototype._fireRate = function() {
      cola.util.cancelDelay(this, "_fireRate");
      return this.fire("rate", this, {
        rating: this._rating
      });
    };

    Rating.prototype._doRefreshRating = function() {
      var maxRating, rating;
      this._refreshRating = false;
      rating = this.get("rating");
      maxRating = this.get("maxRating");
      if (rating > maxRating) {
        this._rating = rating = maxRating;
      }
      this.get$Dom().empty().rating({
        initialRating: rating,
        maxRating: maxRating,
        onRate: (function(_this) {
          return function(value) {
            if (value !== _this._rating) {
              _this.set("rating", value);
              return cola.util.delay(_this, "_fireRate", 50, _this._fireRate);
            }
          };
        })(this)
      }).rating(this._disabled ? "disable" : "enable");
    };

    Rating.prototype._initDom = function(dom) {
      return this._doRefreshRating();
    };

    Rating.prototype._doRefreshDom = function() {
      var $dom;
      if (!this._dom) {
        return;
      }
      Rating.__super__._doRefreshDom.call(this);
      if (this._refreshRating) {
        this._doRefreshRating();
      } else {
        $dom = this.get$Dom();
        $dom.rating(this._disabled ? "disable" : "enable");
        if ($dom.rating("get rating") !== this._rating) {
          $dom.rating("set rating", this._rating);
        }
      }
    };

    Rating.prototype.clear = function() {
      this.set("rating", 0);
      return this;
    };

    return Rating;

  })(cola.Widget);

  cola.Element.mixin(cola.Rating, cola.DataWidgetMixin);

  cola.registerWidget(cola.Rating);

  cola.Select = (function(superClass) {
    extend(Select, superClass);

    function Select() {
      return Select.__super__.constructor.apply(this, arguments);
    }

    Select.tagName = "c-select";

    Select.CLASS_NAME = "input select";

    Select.attributes = {
      options: {
        setter: function(options) {
          var ref, select;
          if (!(options instanceof Array || options instanceof cola.EntityList)) {
            return;
          }
          this._options = options;
          select = (ref = this._doms) != null ? ref.input : void 0;
          if (select) {
            this._refreshSelectOptions(select);
          }
        }
      }
    };

    Select.prototype._createEditorDom = function() {
      return $.xCreate({
        tagName: "select",
        "class": "editor"
      });
    };

    Select.prototype._isEditorDom = function(node) {
      return node.nodeName === "SELECT";
    };

    Select.prototype._parseDom = function(dom) {
      var child, skipSetIcon;
      Select.__super__._parseDom.call(this, dom);
      if (!this._icon) {
        child = this._doms.input.nextSibling;
        while (child) {
          if (child.nodeType === 1 && child.nodeName !== "TEMPLATE") {
            skipSetIcon = true;
            break;
          }
          child = child.nextSibling;
        }
        if (!skipSetIcon) {
          this.set("icon", "dropdown");
        }
      }
    };

    Select.prototype._initDom = function(dom) {
      if (this._options) {
        this._refreshSelectOptions(this._doms.input);
      }
      $(this._doms.input).on("change", (function(_this) {
        return function() {
          var readOnly, value;
          readOnly = _this._readOnly;
          if (!readOnly) {
            value = $(_this._doms.input).val();
            _this.set("value", value);
          }
        };
      })(this));
    };

    Select.prototype._refreshSelectOptions = function(select) {
      var options;
      options = select.options;
      if (this._options instanceof cola.EntityList) {
        options.length = this._options.entityCount;
      } else {
        options.length = this._options.length;
      }
      cola.each(this._options, (function(_this) {
        return function(optionValue, i) {
          var $option, option, text, value;
          option = options[i];
          if (cola.util.isSimpleValue(optionValue)) {
            value = null;
            text = optionValue;
          } else if (optionValue instanceof cola.Entity) {
            value = optionValue.get("value") || optionValue.get("key") || "";
            text = optionValue.get("text") || optionValue.get("name");
          } else {
            value = optionValue.value || optionValue.key || "";
            text = optionValue.text || optionValue.name;
          }
          $option = $fly(option);
          if (value == null) {
            $option.removeAttr("value");
          } else {
            $option.attr("value", value);
            if (value === "" && !text) {
              text = _this._placeholder;
            }
          }
          $option.text(text || "");
        };
      })(this));
    };

    Select.prototype._refreshInputValue = function(value) {
      Select.__super__._refreshInputValue.call(this, value);
      cola.util.toggleClass(this._doms.input, "placeholder", (value == null) || value === "");
    };

    return Select;

  })(cola.AbstractInput);

  cola.registerWidget(cola.Select);

  dropdownDialogMargin = 0;

  cola.findDropDown = function(target) {
    var dropContainer;
    if (target instanceof cola.Widget) {
      target = target.getDom();
    }
    while (target) {
      if ($fly(target).hasClass("drop-container")) {
        dropContainer = cola.widget(target);
        return dropContainer != null ? dropContainer._dropdown : void 0;
      }
      target = target.parentNode;
    }
  };

  cola.AbstractDropdown = (function(superClass) {
    extend(AbstractDropdown, superClass);

    function AbstractDropdown() {
      return AbstractDropdown.__super__.constructor.apply(this, arguments);
    }

    AbstractDropdown.CLASS_NAME = "input drop";

    AbstractDropdown.attributes = {
      items: {
        expressionType: "repeat",
        setter: function(items) {
          this._items = items;
          if (this._itemsTimestamp !== (items != null ? items.timestamp : void 0)) {
            if (items) {
              this._itemsTimestamp = items.timestamp;
            }
            delete this._itemsIndex;
          }
        }
      },
      currentItem: {
        readOnly: true
      },
      valueProperty: null,
      textProperty: null,
      openOnActive: {
        type: "boolean",
        defaultValue: true
      },
      openMode: {
        "enum": ["auto", "drop", "dialog", "layer", "sidebar"],
        defaultValue: "auto"
      },
      opened: {
        readOnly: true
      },
      dropdownLayer: null,
      dropdownWidth: null,
      dropdownHeight: null
    };

    AbstractDropdown.events = {
      beforeOpen: null,
      open: null,
      close: null
    };

    AbstractDropdown.prototype._initDom = function(dom) {
      var valueContent;
      AbstractDropdown.__super__._initDom.call(this, dom);
      $fly(this._doms.input).xInsertAfter({
        tagName: "div",
        "class": "value-content",
        contextKey: "valueContent"
      }, this._doms);
      $fly(dom).delegate(">.icon", "click", (function(_this) {
        return function() {
          if (_this._opened) {
            _this.close();
          } else {
            _this.open();
          }
        };
      })(this));
      valueContent = this._doms.valueContent;
      $(this._doms.input).on("focus", function() {
        $fly(valueContent).addClass("placeholder");
      }).on("blur", function() {
        $fly(valueContent).removeClass("placeholder");
      });
    };

    AbstractDropdown.prototype._parseDom = function(dom) {
      var child, skipSetIcon;
      if (!dom) {
        return;
      }
      AbstractDropdown.__super__._parseDom.call(this, dom);
      this._parseTemplates();
      if (!this._icon) {
        child = this._doms.input.nextSibling;
        while (child) {
          if (child.nodeType === 1 && child.nodeName !== "TEMPLATE") {
            skipSetIcon = true;
            break;
          }
          child = child.nextSibling;
        }
        if (!skipSetIcon) {
          this.set("icon", "dropdown");
        }
      }
    };

    AbstractDropdown.prototype._createEditorDom = function() {
      return $.xCreate({
        tagName: "input",
        type: "text",
        click: (function(_this) {
          return function(evt) {
            var input;
            if (_this._openOnActive) {
              if (_this._opened) {
                input = evt.target;
                if (input.readOnly) {
                  _this.close();
                }
              } else {
                _this.open();
              }
            }
          };
        })(this),
        input: (function(_this) {
          return function(evt) {
            var $valueContent;
            $valueContent = $fly(_this._doms.valueContent);
            if (evt.target.value) {
              $valueContent.hide();
            } else {
              $valueContent.show();
            }
          };
        })(this)
      });
    };

    AbstractDropdown.prototype._isEditorDom = function(node) {
      return node.nodeName === "INPUT";
    };

    AbstractDropdown.prototype._isEditorReadOnly = function() {
      return cola.device.mobile;
    };

    AbstractDropdown.prototype._refreshInput = function() {
      var $inputDom, ref;
      $inputDom = $fly(this._doms.input);
      $inputDom.attr("placeholder", this.get("placeholder"));
      $inputDom.prop("readOnly", this._finalReadOnly || this._isEditorReadOnly());
      if ((ref = this.get("actionButton")) != null) {
        ref.set("disabled", this._finalReadOnly);
      }
      this._setValueContent();
    };

    AbstractDropdown.prototype._setValue = function(value) {
      var currentItem, index, valueProperty;
      if (!this._skipFindCurrentItem) {
        if (!this._itemsIndex) {
          if (this._items && value && this._valueProperty) {
            this._itemsIndex = index = {};
            valueProperty = this._valueProperty;
            cola.each(this._items, function(item) {
              var key;
              if (item instanceof cola.Entity) {
                key = item.get(valueProperty);
              } else {
                key = item[valueProperty];
              }
              index[key + ""] = item;
            });
            currentItem = index[value + ""];
          }
        } else {
          currentItem = this._itemsIndex[value + ""];
        }
        this._currentItem = currentItem;
      }
      return AbstractDropdown.__super__._setValue.call(this, value);
    };

    AbstractDropdown.prototype._setValueContent = function() {
      var alias, ctx, currentItemScope, elementAttrBinding, input, item, ref, valueContent;
      input = this._doms.input;
      input.value = "";
      item = this._currentItem;
      if ((item == null) && !this._textProperty) {
        item = this._value;
      }
      if (item) {
        input.placeholder = "";
        elementAttrBinding = (ref = this._elementAttrBindings) != null ? ref["items"] : void 0;
        alias = (elementAttrBinding != null ? elementAttrBinding.expression.alias : void 0) || "item";
        currentItemScope = this._currentItemScope;
        if (currentItemScope && currentItemScope.data.alias !== alias) {
          currentItemScope = null;
        }
        if (!currentItemScope) {
          this._currentItemScope = currentItemScope = new cola.ItemScope(this._scope, alias);
        }
        currentItemScope.data.setTargetData(item);
        valueContent = this._doms.valueContent;
        if (!valueContent._inited) {
          valueContent._inited = true;
          ctx = {
            defaultPath: alias
          };
          this._initValueContent(valueContent, ctx);
          cola.xRender(valueContent, currentItemScope, ctx);
        }
        $fly(valueContent).show();
      } else {
        input.placeholder = this._placeholder || "";
        $fly(this._doms.valueContent).hide();
      }
    };

    AbstractDropdown.prototype._initValueContent = function(valueContent, context) {
      var l, len1, property, t, template;
      property = this._textProperty || this._valueProperty;
      if (property) {
        context.defaultPath += "." + property;
      }
      template = this._getTemplate("value-content");
      if (template) {
        if (template instanceof Array) {
          for (l = 0, len1 = template.length; l < len1; l++) {
            t = template[l];
            valueContent.appendChild(t);
          }
        } else {
          valueContent.appendChild(template);
        }
      }
    };

    AbstractDropdown.prototype._getFinalOpenMode = function() {
      var openMode;
      openMode = this._openMode;
      if (!openMode || openMode === "auto") {
        if (cola.device.desktop) {
          openMode = "drop";
        } else if (cola.device.phone) {
          openMode = "layer";
        } else {
          openMode = "dialog";
        }
      }
      return openMode;
    };

    AbstractDropdown.prototype._getContainer = function() {
      var config, container, ctx, layer, openMode, titleContent;
      if (this._dropdownLayer) {
        layer = this._dropdownLayer;
        if (!(layer instanceof cola.Widget)) {
          layer = cola.widget(layer);
          if (layer instanceof cola.Widget) {
            this.set("dropdownLayer", layer);
          } else {
            layer = null;
          }
        }
        if (layer) {
          layer.on("beforeHide", (function(_this) {
            return function() {
              $fly(_this._dom).removeClass("opened");
            };
          })(this), true).on("hide", (function(_this) {
            return function() {
              _this._opened = false;
            };
          })(this), true);
        }
        return layer;
      } else {
        if (this._container) {
          return this._container;
        }
        this._finalOpenMode = openMode = this._getFinalOpenMode();
        config = {
          "class": "drop-container",
          dom: $.xCreate({
            tagName: "div",
            content: this._getDropdownContent()
          }),
          beforeHide: (function(_this) {
            return function() {
              $fly(_this._dom).removeClass("opened");
            };
          })(this),
          hide: (function(_this) {
            return function() {
              _this._opened = false;
            };
          })(this)
        };
        if (this._dropdownWidth) {
          config.width = this._dropdownWidth;
        }
        if (this._dropdownHeight) {
          config.height = this._dropdownHeight;
        }
        if (openMode === "drop") {
          config.duration = 200;
          config.dropdown = this;
          config.ui = config.ui + " " + this._ui;
          container = new DropBox(config);
        } else if (openMode === "layer") {
          if (openMode === "Sidebar") {
            config.animation = "slide up";
            config.height = "50%";
          }
          ctx = {};
          titleContent = cola.xRender({
            tagName: "div",
            "class": "box",
            content: {
              tagName: "div",
              "c-widget": {
                $type: "titleBar",
                items: [
                  {
                    icon: "chevron left",
                    click: (function(_this) {
                      return function() {
                        return _this.close();
                      };
                    })(this)
                  }
                ]
              }
            }
          }, this._scope, ctx);
          $fly(config.dom.firstChild.firstChild).before(titleContent);
          container = new cola.Layer(config);
        } else if (openMode === "sidebar") {
          config.direction = "bottom";
          config.size = document.body.clientHeight / 2;
          $fly(config.dom.firstChild.firstChild).before(titleContent);
          container = new cola.Sidebar(config);
        } else if (openMode === "dialog") {
          config.modalOpacity = 0.05;
          config.closeable = false;
          config.dimmerClose = true;
          container = new cola.Dialog(config);
        }
        this._container = container;
        container.appendTo(document.body);
        return container;
      }
    };

    AbstractDropdown.prototype.open = function(callback) {
      var $containerDom, $flexContent, clientHeight, container, containerHeight, doCallback, height;
      if (this.fire("beforeOpen", this) === false) {
        return;
      }
      doCallback = (function(_this) {
        return function() {
          _this.fire("open", _this);
          if (typeof callback === "function") {
            callback();
          }
        };
      })(this);
      container = this._getContainer();
      if (container) {
        container._dropdown = this;
        container.on("hide", function(self) {
          delete self._dropdown;
        });
        if (container instanceof DropBox) {
          container.show(this, doCallback);
        } else if (container instanceof cola.Layer) {
          container.show(doCallback);
        } else if (container instanceof cola.Sidebar) {
          container.show(doCallback);
        } else if (container instanceof cola.Dialog) {
          $flexContent = $(this._doms.flexContent);
          $flexContent.height("");
          $containerDom = container.get$Dom();
          $containerDom.removeClass("hidden");
          containerHeight = $containerDom.height();
          clientHeight = document.body.clientHeight;
          if (containerHeight > (clientHeight - dropdownDialogMargin * 2)) {
            height = $flexContent.height() - (containerHeight - (clientHeight - dropdownDialogMargin * 2));
            $containerDom.addClass("hidden");
            $flexContent.height(height);
          } else {
            $containerDom.addClass("hidden");
          }
          container.show(doCallback);
        }
        this._opened = true;
        $fly(this._dom).addClass("opened");
      }
    };

    AbstractDropdown.prototype.close = function(selectedData, callback) {
      var container;
      if (selectedData !== void 0) {
        this._selectData(selectedData);
      }
      container = this._getContainer();
      if (container) {
        container.hide(callback);
      }
    };

    AbstractDropdown.prototype._selectData = function(item) {
      var value;
      if (this._valueProperty && item) {
        if (item instanceof cola.Entity) {
          value = item.get(this._valueProperty);
        } else {
          value = item[this._valueProperty];
        }
      } else {
        value = item;
      }
      this._currentItem = item;
      this._skipFindCurrentItem = true;
      this.set("value", value);
      this._skipFindCurrentItem = false;
      this.refresh();
    };

    return AbstractDropdown;

  })(cola.AbstractInput);

  cola.Element.mixin(cola.AbstractDropdown, cola.TemplateSupport);

  DropBox = (function(superClass) {
    extend(DropBox, superClass);

    function DropBox() {
      return DropBox.__super__.constructor.apply(this, arguments);
    }

    DropBox.CLASS_NAME = "drop-box transition";

    DropBox.attributes = {
      dropdown: null
    };

    DropBox.prototype.show = function(options, callback) {
      var $dom, bottomSpace, boxHeight, boxWidth, clientHeight, clientWidth, direction, dropdownDom, height, left, rect, top, topSpace;
      $dom = this.get$Dom();
      dropdownDom = this._dropdown._doms.input;
      $dom.css("height", "").removeClass("hidden");
      boxWidth = $dom.width();
      boxHeight = $dom.height();
      $dom.addClass("hidden");
      rect = dropdownDom.getBoundingClientRect();
      clientWidth = document.body.offsetWidth;
      clientHeight = document.body.clientHeight;
      bottomSpace = clientHeight - rect.top - dropdownDom.clientHeight;
      if (bottomSpace >= boxHeight) {
        direction = "down";
      } else {
        topSpace = rect.top;
        if (topSpace > bottomSpace) {
          direction = "up";
          height = topSpace;
        } else {
          direction = "down";
          height = bottomSpace;
        }
      }
      if (direction === "down") {
        top = rect.top + dropdownDom.clientHeight;
      } else {
        top = rect.top - (height || boxHeight);
      }
      left = rect.left;
      if (boxWidth > dropdownDom.offsetWidth) {
        if (boxWidth + rect.left > clientWidth) {
          left = clientWidth - boxWidth;
          if (left < 0) {
            left = 0;
          }
        }
      }
      if (height) {
        $dom.css("height", height);
      }
      $dom.removeClass(direction === "down" ? "direction-up" : "direction-down").addClass("direction-" + direction).toggleClass("x-over", boxWidth > dropdownDom.offsetWidth).css("left", left).css("top", top).css("min-width", dropdownDom.offsetWidth).css("max-width", document.body.clientWidth);
      $dom.css({
        zIndex: cola.floatWidget.zIndex()
      });
      this._animation = "fade";
      DropBox.__super__.show.call(this, options, callback);
    };

    DropBox.prototype._onShow = function() {
      DropBox.__super__._onShow.call(this);
      this._bodyListener = (function(_this) {
        return function(evt) {
          var dropContainerDom, dropdownDom, inDropdown, target;
          target = evt.target;
          dropdownDom = _this._dropdown._dom;
          dropContainerDom = _this._dom;
          while (target) {
            if (target === dropdownDom || target === dropContainerDom) {
              inDropdown = true;
              break;
            }
            target = target.parentNode;
          }
          if (!inDropdown) {
            _this._dropdown.close();
          }
        };
      })(this);
      $fly(document.body).on("click", this._bodyListener);
    };

    DropBox.prototype.hide = function(options, callback) {
      $fly(document.body).off("click", this._bodyListener);
      DropBox.__super__.hide.call(this, options, callback);
    };

    return DropBox;

  })(cola.Layer);

  cola.Dropdown = (function(superClass) {
    extend(Dropdown, superClass);

    function Dropdown() {
      return Dropdown.__super__.constructor.apply(this, arguments);
    }

    Dropdown.tagName = "c-dropdown";

    Dropdown.attributes = {
      filterable: {
        readOnlyAfterCreate: true,
        defaultValue: true
      },
      filterValue: {
        readOnly: true
      },
      filterProperty: null,
      filterInterval: {
        defaultValue: 300
      }
    };

    Dropdown.events = {
      filterItem: null
    };

    Dropdown.TEMPLATES = {
      "default": {
        tagName: "li",
        "c-bind": "$default"
      },
      "list": {
        tagName: "div",
        contextKey: "flexContent",
        content: {
          tagName: "div",
          contextKey: "list",
          "c-widget": "listView",
          style: "height:100%;overflow:auto"
        }
      },
      "filterable-list": {
        tagName: "div",
        "class": "v-box",
        style: "height:100%",
        content: [
          {
            tagName: "div",
            "class": "box filter-container",
            content: {
              tagName: "div",
              contextKey: "filterInput",
              "c-widget": "input;icon:search;width:100%"
            }
          }, {
            tagName: "div",
            contextKey: "flexContent",
            "class": "flex-box list-container",
            style: "min-height:2em",
            content: {
              tagName: "div",
              contextKey: "list",
              "c-widget": "listView"
            }
          }
        ]
      }
    };

    Dropdown.prototype._initValueContent = function(valueContent, context) {
      var template;
      Dropdown.__super__._initValueContent.call(this, valueContent, context);
      if (!valueContent.firstChild) {
        template = this._getTemplate("default");
        if (template) {
          valueContent.appendChild(this._cloneTemplate(template));
        }
      }
    };

    Dropdown.prototype.open = function() {
      var inputDom, list;
      Dropdown.__super__.open.call(this);
      list = this._list;
      if (list && this._currentItem !== list.get("currentItem")) {
        list.set("currentItem", this._currentItem);
      }
      if (this._opened && this._filterable) {
        inputDom = this._doms.input;
        $fly(inputDom).on("input.filterItem", (function(_this) {
          return function() {
            return _this._onInput(inputDom.value);
          };
        })(this));
      }
    };

    Dropdown.prototype.close = function(selectedValue) {
      if (this._filterable) {
        $fly(this._doms.input).off("input.filterItem");
      }
      return Dropdown.__super__.close.call(this, selectedValue);
    };

    Dropdown.prototype._onInput = function(value) {
      cola.util.delay(this, "filterItems", 300, function() {
        this._list.set("filterCriteria", value);
      });
    };

    Dropdown.prototype._getDropdownContent = function() {
      var attrBinding, hasDefaultTemplate, inputDom, list, name, ref, templ, template, templateName;
      if (!this._dropdownContent) {
        if (this._filterable && this._finalOpenMode !== "drop") {
          templateName = "filterable-list";
        } else {
          templateName = "list";
        }
        template = this._getTemplate(templateName);
        this._dropdownContent = template = cola.xRender(template, this._scope);
        this._list = list = cola.widget(this._doms.list);
        if (this._templates) {
          ref = this._templates;
          for (name in ref) {
            templ = ref[name];
            if (["list", "filterable-list", "value-content"].indexOf(name) < 0) {
              if (name === "default") {
                hasDefaultTemplate = true;
              }
              list._regTemplate(name, templ);
            }
          }
        }
        if (!hasDefaultTemplate) {
          list._regTemplate("default", {
            tagName: "li",
            "c-bind": "$default"
          });
        }
        list.on("itemClick", (function(_this) {
          return function() {
            return _this.close(list.get("currentItem"));
          };
        })(this));
        if (this._doms.filterInput) {
          this._filterInput = cola.widget(this._doms.filterInput);
          inputDom = this._filterInput._doms.input;
          $fly(inputDom).on("input", (function(_this) {
            return function() {
              return _this._onInput(inputDom.value);
            };
          })(this));
        }
      }
      attrBinding = this._elementAttrBindings["items"];
      list = this._list;
      list._textProperty = this._textProperty || this._valueProperty;
      if (attrBinding) {
        list.set("bind", attrBinding.expression.raw);
      } else {
        list.set("items", this._items);
      }
      list.refresh();
      return template;
    };

    return Dropdown;

  })(cola.AbstractDropdown);

  cola.registerWidget(cola.Dropdown);

  cola.CustomDropdown = (function(superClass) {
    extend(CustomDropdown, superClass);

    function CustomDropdown() {
      return CustomDropdown.__super__.constructor.apply(this, arguments);
    }

    CustomDropdown.tagName = "c-customDropdown";

    CustomDropdown.attributes = {
      content: null
    };

    CustomDropdown.TEMPLATES = {
      "default": {
        tagName: "div",
        content: "<Undefined>"
      },
      "value-content": {
        tagName: "div",
        "c-bind": "$default"
      }
    };

    CustomDropdown.prototype._isEditorReadOnly = function() {
      return true;
    };

    CustomDropdown.prototype._getDropdownContent = function() {
      var dropdownContent;
      if (!this._dropdownContent) {
        if (this._content) {
          dropdownContent = this._content;
        } else {
          dropdownContent = this._getTemplate();
        }
        this._dropdownContent = cola.xRender(dropdownContent, this._scope);
      }
      return this._dropdownContent;
    };

    return CustomDropdown;

  })(cola.AbstractDropdown);

  cola.registerWidget(cola.CustomDropdown);

  cola.DateGrid = (function(superClass) {
    extend(DateGrid, superClass);

    function DateGrid() {
      return DateGrid.__super__.constructor.apply(this, arguments);
    }

    DateGrid.CLASS_NAME = "calendar";

    DateGrid.attributes = {
      columnCount: {
        type: "number",
        defaultValue: 7
      },
      rowCount: {
        type: "number",
        defaultValue: 6
      },
      cellClassName: null,
      selectedCellClassName: "",
      rowClassName: null,
      autoSelect: {
        defaultValue: true
      },
      tableClassName: {
        defaultValue: "ui date-table"
      }
    };

    DateGrid.events = {
      cellClick: null,
      refreshCellDom: null
    };

    DateGrid.prototype._initDom = function(dom) {
      var allWeeks, columnCount, headerDom, i, j, picker, rowCount, table, td, tr, weeks;
      picker = this;
      columnCount = this._columnCount;
      rowCount = this._rowCount;
      if (this._doms == null) {
        this._doms = {};
      }
      allWeeks = cola.resource("cola.date.dayNamesShort");
      weeks = allWeeks.split(",");
      headerDom = $.xCreate({
        tagName: "div",
        content: [
          {
            tagName: "div",
            "class": "header",
            contextKey: "header",
            content: [
              {
                tagName: "div",
                "class": "month",
                content: [
                  {
                    tagName: "span",
                    "class": "button prev",
                    contextKey: "prevMonthButton",
                    click: function() {
                      return picker.prevMonth();
                    }
                  }, {
                    tagName: "span",
                    "class": "button next",
                    contextKey: "nextMonthButton",
                    click: function() {
                      return picker.nextMonth();
                    }
                  }, {
                    tagName: "div",
                    "class": "label",
                    contextKey: "monthLabel"
                  }
                ]
              }, {
                tagName: "div",
                "class": "year",
                content: [
                  {
                    tagName: "span",
                    "class": "button prev",
                    contextKey: "prevYearButton",
                    click: function() {
                      return picker.prevYear();
                    }
                  }, {
                    tagName: "span",
                    "class": "button next",
                    contextKey: "nextYearButton",
                    click: function() {
                      return picker.nextYear();
                    }
                  }, {
                    tagName: "div",
                    "class": "label",
                    contextKey: "yearLabel"
                  }
                ]
              }
            ]
          }, {
            tagName: "table",
            cellPadding: 0,
            cellSpacing: 0,
            border: 0,
            "class": "date-header",
            contextKey: "dateHeader",
            content: [
              {
                tagName: "tr",
                "class": "header",
                content: [
                  {
                    tagName: "td",
                    content: weeks[0]
                  }, {
                    tagName: "td",
                    content: weeks[1]
                  }, {
                    tagName: "td",
                    content: weeks[2]
                  }, {
                    tagName: "td",
                    content: weeks[3]
                  }, {
                    tagName: "td",
                    content: weeks[4]
                  }, {
                    tagName: "td",
                    content: weeks[5]
                  }, {
                    tagName: "td",
                    content: weeks[6]
                  }
                ]
              }
            ]
          }
        ]
      }, this._doms);
      table = $.xCreate({
        tagName: "table",
        cellSpacing: 0,
        "class": (picker._className || "") + " " + (picker._tableClassName || ""),
        content: {
          tagName: "tbody",
          contextKey: "body"
        }
      }, this._doms);
      i = 0;
      while (i < rowCount) {
        tr = document.createElement("tr");
        j = 0;
        while (j < columnCount) {
          td = document.createElement("td");
          if (this._cellClassName) {
            td.className = this._cellClassName;
          }
          this.doRenderCell(td, i, j);
          tr.appendChild(td);
          j++;
        }
        if (this._rowClassName) {
          tr.className = this._rowClassName;
        }
        this._doms.body.appendChild(tr);
        i++;
      }
      $fly(table).on("click", function(event) {
        var position;
        position = cola.calendar.getCellPosition(event);
        if (position && position.element) {
          if (position.row >= picker._rowCount) {
            return;
          }
          if (picker._autoSelect) {
            picker.setSelectionCell(position.row, position.column);
          }
          return picker.fire("cellClick", picker, position);
        }
      });
      dom.appendChild(headerDom);
      this._doms.tableWrapper = $.xCreate({
        tagName: "div",
        "class": "date-table-wrapper"
      });
      this._doms.tableWrapper.appendChild(table);
      dom.appendChild(this._doms.tableWrapper);
      return dom;
    };

    DateGrid.prototype.doFireRefreshEvent = function(eventArg) {
      this.fire("refreshCellDom", this, eventArg);
      return this;
    };

    DateGrid.prototype.refreshHeader = function() {
      var monthLabel, yearLabel;
      if (this._doms) {
        monthLabel = this._doms.monthLabel;
        yearLabel = this._doms.yearLabel;
        $fly(yearLabel).text(this._year || "");
        return $fly(monthLabel).text(this._month + 1 || "");
      }
    };

    DateGrid.prototype.refreshGrid = function() {
      var cell, columnCount, dom, eventArg, i, j, lastSelectedCell, picker, rowCount, rows;
      picker = this;
      dom = this._doms.body;
      columnCount = this._columnCount;
      rowCount = this._rowCount;
      lastSelectedCell = this._lastSelectedCell;
      if (lastSelectedCell) {
        $fly(lastSelectedCell).removeClass(this._selectedCellClassName || "selected");
        this._lastSelectedCell = null;
      }
      i = 0;
      while (i < rowCount) {
        rows = dom.rows[i];
        j = 0;
        while (j < columnCount) {
          cell = rows.cells[j];
          if (picker._cellClassName) {
            cell.className = picker._cellClassName;
          }
          eventArg = {
            cell: cell,
            row: i,
            column: j
          };
          this.doFireRefreshEvent(eventArg);
          if (eventArg.processDefault !== false) {
            this.doRefreshCell(cell, i, j);
          }
          j++;
        }
        i++;
      }
      return this;
    };

    DateGrid.prototype._doRefreshDom = function() {
      DateGrid.__super__._doRefreshDom.call(this);
      if (!this._dom) {
        return;
      }
      this.refreshGrid();
      return this.refreshHeader();
    };

    DateGrid.prototype.setSelectionCell = function(row, column) {
      var cell, lastSelectedCell, picker, tbody;
      picker = this;
      lastSelectedCell = this._lastSelectedCell;
      if (!this._dom) {
        this._selectionPosition = {
          row: row,
          column: column
        };
        return this;
      }
      if (lastSelectedCell) {
        $fly(lastSelectedCell).removeClass(this._selectedCellClassName || "selected");
        this._lastSelectedCell = null;
      }
      tbody = picker._doms.body;
      if (tbody.rows[row]) {
        cell = tbody.rows[row].cells[column];
      }
      if (!cell) {
        return this;
      }
      $fly(cell).addClass(this._selectedCellClassName || "selected");
      this._lastSelectedCell = cell;
      return this;
    };

    DateGrid.prototype.getYMForState = function(cellState) {
      var month, year;
      month = this._month;
      year = this._year;
      if (cellState.type === "prev-month") {
        year = month === 0 ? year - 1 : year;
        month = month === 0 ? 11 : month - 1;
      } else if (cellState.type === "next-month") {
        year = month === 11 ? year + 1 : year;
        month = month === 11 ? 0 : month + 1;
      }
      return {
        year: year,
        month: month
      };
    };

    DateGrid.prototype.doFireRefreshEvent = function(eventArg) {
      var cellState, column, row, ym;
      row = eventArg.row;
      column = eventArg.column;
      if (this._state && this._year && this._month) {
        cellState = this._state[row * 7 + column];
        ym = this.getYMForState(cellState);
        eventArg.date = new Date(ym.year, ym.month, cellState.text);
      }
      this.fire("refreshCellDom", this, eventArg);
      return this;
    };

    DateGrid.prototype.doRenderCell = function(cell, row, column) {
      var label;
      label = document.createElement("div");
      label.className = "label";
      cell.appendChild(label);
    };

    DateGrid.prototype.getDateCellDom = function(date) {
      var value;
      value = new XDate(date).toString("yyyy-M-d");
      return $(this._dom).find("td[cell-date='" + value + "']")[0];
    };

    DateGrid.prototype.setCurrentDate = function(date) {
      var month, year;
      month = date.getMonth();
      year = date.getFullYear();
      this.setState(year, month);
      return this.selectCell(this.getDateCellDom(date));
    };

    DateGrid.prototype.selectCell = function(cell) {
      var lastSelectedCell;
      lastSelectedCell = this._lastSelectedCell;
      if (!this._dom) {
        return this;
      }
      if (lastSelectedCell) {
        $fly(lastSelectedCell).removeClass(this._selectedCellClassName || "selected");
        this._lastSelectedCell = null;
      }
      if (!cell) {
        return this;
      }
      $fly(cell).addClass(this._selectedCellClassName || "selected");
      return this._lastSelectedCell = cell;
    };

    DateGrid.prototype.doRefreshCell = function(cell, row, column) {
      var cellState, state, ym;
      state = this._state;
      if (!state) {
        return;
      }
      cellState = state[row * 7 + column];
      $fly(cell).removeClass("prev-month next-month").addClass(cellState.type).find(".label").html(cellState.text);
      ym = this.getYMForState(cellState);
      return $fly(cell).attr("cell-date", ym.year + "-" + (ym.month + 1) + "-" + cellState.text);
    };

    DateGrid.prototype.setState = function(year, month) {
      var oldMonth, oldYear;
      oldYear = this._year;
      oldMonth = this._month;
      if (oldYear !== year || oldMonth !== month) {
        this._year = year;
        this._month = month;
        this._state = cola.getDateTableState(new Date(year, month, 1));
        if (this._dom) {
          this.refreshGrid();
          this.refreshHeader();
        }
      }
      return this.onCalDateChange();
    };

    DateGrid.prototype.prevMonth = function() {
      var month, newMonth, newYear, year;
      year = this._year;
      month = this._month;
      if (year !== void 0 && month !== void 0) {
        newYear = month === 0 ? year - 1 : year;
        newMonth = month === 0 ? 11 : month - 1;
        this.setState(newYear, newMonth);
      }
      return this;
    };

    DateGrid.prototype.nextMonth = function() {
      var month, newMonth, newYear, year;
      year = this._year;
      month = this._month;
      if (year !== void 0 && month !== void 0) {
        newYear = month === 11 ? year + 1 : year;
        newMonth = month === 11 ? 0 : month + 1;
        this.setState(newYear, newMonth);
      }
      return this;
    };

    DateGrid.prototype.prevYear = function() {
      var month, year;
      year = this._year;
      month = this._month;
      if (year !== void 0 && month !== void 0) {
        this.setState(year - 1, month);
      }
      return this;
    };

    DateGrid.prototype.setYear = function(newYear) {
      var month, year;
      year = this._year;
      month = this._month;
      if (year !== void 0 && month !== void 0) {
        return this.setState(newYear, month);
      }
    };

    DateGrid.prototype.nextYear = function() {
      var month, year;
      year = this._year;
      month = this._month;
      if (year !== void 0 && month !== void 0) {
        this.setState(year + 1, month);
      }
      return this;
    };

    DateGrid.prototype.onCalDateChange = function() {
      if (!this._dom) {
        return this;
      }
      return this;
    };

    return DateGrid;

  })(cola.RenderableElement);

  DEFAULT_DATE_DISPLAY_FORMAT = "yyyy-MM-dd";

  DEFAULT_DATE_INPUT_FORMAT = "yyyyMMdd";

  DEFAULT_TIME_DISPLAY_FORMAT = "HH:mm:ss";

  DEFAULT_TIME_INPUT_FORMAT = "HHmmss";

  cola.DatePicker = (function(superClass) {
    extend(DatePicker, superClass);

    function DatePicker() {
      return DatePicker.__super__.constructor.apply(this, arguments);
    }

    DatePicker.attributes = {
      displayFormat: {
        defaultValue: DEFAULT_DATE_DISPLAY_FORMAT
      },
      inputFormat: {
        defaultValue: DEFAULT_DATE_DISPLAY_FORMAT
      },
      icon: {
        defaultValue: "calendar"
      },
      content: {
        $type: "calender"
      },
      inputType: {
        defaultValue: "date"
      }
    };

    DatePicker.events = {
      focus: null,
      blur: null,
      keyDown: null,
      keyPress: null
    };

    DatePicker.prototype._initDom = function(dom) {
      var doPost;
      DatePicker.__super__._initDom.call(this, dom);
      doPost = (function(_this) {
        return function() {
          var inputFormat, readOnly, value, xDate;
          readOnly = _this._readOnly;
          if (!readOnly) {
            value = $(_this._doms.input).val();
            inputFormat = _this._inputFormat || _this._displayFormat || DEFAULT_DATE_DISPLAY_FORMAT;
            if (inputFormat) {
              value = inputFormat + "||" + value;
              xDate = new XDate(value);
              value = xDate.toDate();
              _this.set("value", value);
            }
          }
        };
      })(this);
      $(this._doms.input).on("change", (function(_this) {
        return function() {
          doPost();
        };
      })(this)).on("focus", (function(_this) {
        return function() {
          _this._inputFocused = true;
          _this._refreshInputValue(_this._value);
          if (!_this._finalReadOnly) {
            _this.addClass("focused");
          }
          _this.fire("focus", _this);
        };
      })(this)).on("blur", (function(_this) {
        return function() {
          var entity, propertyDef, ref;
          _this._inputFocused = false;
          _this.removeClass("focused");
          _this._refreshInputValue(_this._value);
          _this.fire("blur", _this);
          if ((_this._value == null) || _this._value === "" && ((ref = _this._bindInfo) != null ? ref.isWriteable : void 0)) {
            propertyDef = _this.getBindingProperty();
            if ((propertyDef != null ? propertyDef._required : void 0) && propertyDef._validators) {
              entity = _this._scope.get(_this._bindInfo.entityPath);
              if (entity) {
                entity.validate(_this._bindInfo.property);
              }
            }
          }
        };
      })(this)).on("keydown", (function(_this) {
        return function(event) {
          var arg;
          arg = {
            keyCode: event.keyCode,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            altlKey: event.altlKey,
            event: event
          };
          return _this.fire("keyDown", _this, arg);
        };
      })(this)).on("keypress", (function(_this) {
        return function(event) {
          var arg;
          arg = {
            keyCode: event.keyCode,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            altlKey: event.altlKey,
            event: event
          };
          if (_this.fire("keyPress", _this, arg) === false) {
            return;
          }
          if (event.keyCode === 13 && isIE11) {
            return doPost();
          }
        };
      })(this));
    };

    DatePicker.prototype._refreshInputValue = function(value) {
      var format, inputType;
      inputType = this._inputType;
      if (value instanceof Date) {
        if (value.toDateString() === "Invalid Date") {
          value = "";
        } else {
          if (inputType === "date") {
            format = DEFAULT_DATE_DISPLAY_FORMAT;
          } else if (inputType === "time") {
            format = DEFAULT_TIME_DISPLAY_FORMAT;
          }
          value = (new XDate(value)).toString(format);
        }
      }
      return DatePicker.__super__._refreshInputValue.call(this, value);
    };

    DatePicker.prototype._refreshInput = function() {
      var $inputDom, ref;
      $inputDom = $fly(this._doms.input);
      if (this._name) {
        $inputDom.attr("name", this._name);
      }
      $inputDom.attr("placeholder", this.get("placeholder"));
      $inputDom.prop("readOnly", this._finalReadOnly);
      if ((ref = this.get("actionButton")) != null) {
        ref.set("disabled", this._finalReadOnly);
      }
      $inputDom.prop("type", "text").css("text-align", "left");
      this._refreshInputValue(this._value);
    };

    DatePicker.prototype.open = function() {
      var value;
      DatePicker.__super__.open.call(this);
      value = this.get("value");
      if (!value) {
        value = new Date();
      } else {
        if (!(value instanceof Date)) {
          value = Date.parse(value);
        }
      }
      if (value.toDateString() === "Invalid Date") {
        value = new Date();
      }
      return this._dataGrid.setCurrentDate(value);
    };

    DatePicker.prototype._getDropdownContent = function() {
      var dateGrid, datePicker;
      datePicker = this;
      if (!this._dropdownContent) {
        this._dataGrid = dateGrid = new cola.DateGrid({
          cellClick: (function(_this) {
            return function(self, arg) {
              var d, value;
              value = $fly(arg.element).attr("cell-date");
              d = Date.parse(value);
              return datePicker.close(new Date(d));
            };
          })(this)
        });
        this._dropdownContent = dateGrid.getDom();
      }
      return this._dropdownContent;
    };

    return DatePicker;

  })(cola.CustomDropdown);

  oldErrorTemplate = $.fn.form.settings.templates.error;

  $.fn.form.settings.templates.error = function(errors) {
    var ref;
    if (errors.length === 1 && ((ref = errors[0]) != null ? ref.form : void 0) instanceof cola.Form) {
      errors = errors[0].form._errors;
    }
    return oldErrorTemplate.call(this, errors);
  };

  cola.Form = (function(superClass) {
    extend(Form, superClass);

    Form.tagName = "c-form";

    Form.CLASS_NAME = "form";

    Form.attributes = {
      bind: {
        setter: function(bindStr) {
          return this._bindSetter(bindStr);
        }
      },
      state: {
        setter: function(state) {
          var STATES, classPool, cls, p;
          if (this._state === state) {
            return;
          }
          this._state = state;
          if (this._dom) {
            STATES = this.constructor.STATES;
            classPool = new cola.ClassNamePool(this._dom.className);
            for (p in STATES) {
              cls = STATES[p];
              classPool.remove(cls);
            }
            if (state) {
              classPool.add(STATES[state]);
            }
            this._dom.className = classPool.join();
          }
        }
      }
    };

    Form.STATES = {
      "error": "error",
      "warning": "warning",
      "info": "success"
    };

    function Form(config) {
      this._messageHolder = new cola.Entity.MessageHolder();
      this._errors = [];
      Form.__super__.constructor.call(this, config);
    }

    Form.prototype._initDom = function(dom) {
      var $dom;
      $dom = $(dom);
      if (this._state) {
        $dom.addClass(this._state);
      }
      this._inline = $dom.find(".ui.message").length === 0;
      cola.ready((function(_this) {
        return function() {
          $dom.xAppend({
            tagName: "input",
            type: "hidden",
            "data-validate": "__mockField"
          }).form({
            on: "_disabled",
            revalidate: false,
            inline: _this._inline,
            fields: {
              __mockField: {
                identifier: "__mockField",
                rules: [
                  {
                    type: "empty",
                    prompt: {
                      form: _this,
                      search: function() {
                        return -1;
                      },
                      replace: function() {
                        return this;
                      }
                    }
                  }
                ]
              }
            }
          });
        };
      })(this));
    };

    Form.prototype._filterDataMessage = function(path, type, arg) {
      return type === cola.constants.MESSAGE_REFRESH || type === cola.constants.MESSAGE_CURRENT_CHANGE || type === cola.constants.MESSAGE_VALIDATION_STATE_CHANGE;
    };

    Form.prototype._processDataMessage = function(path, type, arg) {
      var entity;
      entity = this._bindInfo.expression.evaluate(this._scope, "never");
      if (entity && entity instanceof cola.Entity) {
        this._resetEntityMessages();
      } else {
        entity = null;
      }
      this._entity = entity;
      this._refreshState();
    };

    Form.prototype._getEntity = function() {
      if (this._entity) {
        return this._entity;
      }
      return this._scope.get();
    };

    Form.prototype._refreshState = function() {
      var errors, keyMessage, l, len1, m, messages, state, type;
      if (!this._$dom) {
        return;
      }
      state = null;
      keyMessage = this._messageHolder.getKeyMessage();
      type = keyMessage != null ? keyMessage.type : void 0;
      if (type === "error" && !this._inline) {
        errors = this._errors;
        errors.length = 0;
        messages = this._messageHolder.findMessages(null, type);
        if (messages) {
          for (l = 0, len1 = messages.length; l < len1; l++) {
            m = messages[l];
            if (m.text) {
              errors.push(m.text);
            }
          }
        }
        if (errors.length > 0) {
          this._$dom.form("add errors", errors);
          state = type;
        } else {
          this._$dom.find(".error.message").empty();
        }
      }
      this._$dom.form("set value", "__mockField", type === "error" ? "" : "mockValue");
      this.set("state", state);
    };

    Form.prototype._resetEntityMessages = function() {
      var entity, l, len1, message, messageHolder, messages;
      if (!this._$dom) {
        return;
      }
      messageHolder = this._messageHolder;
      messageHolder.clear("fields");
      entity = this._getEntity();
      if (entity) {
        messages = entity.findMessages();
        if (messages) {
          for (l = 0, len1 = messages.length; l < len1; l++) {
            message = messages[l];
            messageHolder.add("fields", message);
          }
        }
      }
    };

    Form.prototype.setMessages = function(messages) {
      var l, len1, message, messageHolder;
      messageHolder = this._messageHolder;
      messageHolder.clear();
      if (messages) {
        for (l = 0, len1 = messages.length; l < len1; l++) {
          message = messages[l];
          messageHolder.add("$", message);
        }
      }
      this._refreshState();
    };

    Form.prototype.setFieldMessages = function(editor, message) {
      var editorDom;
      if (this._inline) {
        editorDom = editor._$dom.find("input, textarea, select")[0];
        if (editorDom) {
          editorDom.id || (editorDom.id = cola.uniqueId());
          if ((message != null ? message.type : void 0) === "error" && message.text) {
            this._$dom.form("add prompt", editorDom.id, message.text);
          } else {
            this._$dom.form("remove prompt", editorDom.id);
          }
        }
      } else {
        this._resetEntityMessages();
        this._refreshState();
      }
    };

    return Form;

  })(cola.Widget);

  cola.Element.mixin(cola.Form, cola.DataWidgetMixin);

  cola.registerWidget(cola.Form);

  cola.AbstractItemGroup = (function(superClass) {
    extend(AbstractItemGroup, superClass);

    AbstractItemGroup.attributes = {
      items: {
        setter: function(value) {
          var item, l, len1;
          this.clearItems();
          for (l = 0, len1 = value.length; l < len1; l++) {
            item = value[l];
            this.addItem(item);
          }
          return this;
        }
      },
      currentIndex: {
        type: "boolean",
        defaultValue: -1,
        setter: function(value) {
          this.setCurrentIndex(value);
          return this;
        }
      }
    };

    function AbstractItemGroup(config) {
      this._items = [];
      AbstractItemGroup.__super__.constructor.call(this, config);
    }

    AbstractItemGroup.prototype.getContentContainer = function() {
      return this.getDom();
    };

    AbstractItemGroup.prototype.getItems = function() {
      return this._items;
    };

    AbstractItemGroup.prototype.getItemDom = function(item) {
      var itemConfig, itemDom;
      itemConfig = item;
      if (typeof item === "number") {
        itemConfig = this._items[item];
      }
      if (itemConfig instanceof cola.Widget) {
        itemDom = itemConfig.getDom();
      } else if (itemConfig.nodeType === 1) {
        itemDom = itemConfig;
      }
      return itemDom;
    };

    AbstractItemGroup.prototype._addItemToDom = function(item) {
      var container, itemDom;
      container = this.getContentContainer();
      itemDom = this.getItemDom(item);
      if (itemDom.parentNode !== container) {
        container.appendChild(itemDom);
      }
    };

    AbstractItemGroup.prototype._itemsRender = function() {
      var item, l, len1, ref;
      if (!this._items) {
        return;
      }
      ref = this._items;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        this._addItemToDom(item);
      }
    };

    AbstractItemGroup.prototype.setCurrentIndex = function(index) {
      var newItemDom, oldItemDom;
      if (this._currentIndex == null) {
        this._currentIndex = -1;
      }
      if (this._currentIndex === index) {
        return this;
      }
      if (this._currentIndex > -1) {
        oldItemDom = this.getItemDom(this._currentIndex);
        if (oldItemDom) {
          $(oldItemDom).removeClass("active");
        }
      }
      if (index > -1) {
        newItemDom = this.getItemDom(index);
        if (newItemDom) {
          $(newItemDom).addClass("active");
        }
      }
      this._currentIndex = index;
      return this;
    };

    AbstractItemGroup.prototype._doOnItemsChange = function() {
      return cola.util.delay(this, "_refreshItems", 50, this.refreshItems);
    };

    AbstractItemGroup.prototype.refreshItems = function() {
      cola.util.cancelDelay(this, "_refreshItems");
      return this;
    };

    AbstractItemGroup.prototype.addItem = function(config) {
      var active, item;
      item = cola.xRender(config, this._scope);
      if (!item) {
        return this;
      }
      active = cola.util.hasClass(item, "active");
      this._items.push(item);
      this._addItemToDom(item);
      if (active) {
        this.setCurrentIndex(this._items.indexOf(item));
      }
      this._doOnItemsChange();
      return item;
    };

    AbstractItemGroup.prototype.clearItems = function() {
      var item, l, len1, ref;
      if (this._items.length === 0) {
        return this;
      }
      ref = this._items;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        if (item instanceof cola.Widget) {
          item.destroy();
        } else {
          $(item).remove();
        }
      }
      this._items = [];
      this._doOnItemsChange();
      return this;
    };

    AbstractItemGroup.prototype.removeItem = function(item) {
      var index, itemObj;
      if (typeof item === "number") {
        itemObj = this._items[item];
        index = item;
      } else {
        itemObj = item;
        index = this._items.indexOf(item);
      }
      this._items.splice(index, 1);
      if (itemObj instanceof cola.Widget) {
        itemObj.destroy();
      } else {
        $(itemObj).remove();
      }
      this._doOnItemsChange();
      return itemObj;
    };

    AbstractItemGroup.prototype.destroy = function() {
      cola.util.cancelDelay(this, "_refreshItems");
      this.clearItems();
      delete this._items;
      return AbstractItemGroup.__super__.destroy.call(this);
    };

    return AbstractItemGroup;

  })(cola.Widget);

  _getEntityId = cola.Entity._getEntityId;

  cola.ItemsView = (function(superClass) {
    extend(ItemsView, superClass);

    function ItemsView() {
      return ItemsView.__super__.constructor.apply(this, arguments);
    }

    ItemsView.attributes = {
      allowNoCurrent: {
        type: "boolean",
        defaultValue: true
      },
      currentItem: {
        getter: function() {
          var item;
          if (this._currentItemDom) {
            item = cola.util.userData(this._currentItemDom, "item");
          }
          return item;
        },
        setter: function(currentItem) {
          var currentItemDom;
          if (currentItem) {
            currentItemDom = this._itemDomMap[_getEntityId(currentItem)];
          }
          this._setCurrentItemDom(currentItemDom);
        }
      },
      highlightCurrentItem: {
        type: "boolean"
      }
    };

    ItemsView.events = {
      getItemTemplate: null,
      renderItem: null,
      itemClick: null,
      itemDoubleClick: null,
      itemPress: null
    };

    ItemsView.prototype._doSet = function(attr, attrConfig, value) {
      if (attrConfig != null ? attrConfig.refreshItems : void 0) {
        attrConfig.refreshDom = true;
        this._refreshItemsScheduled = true;
      }
      return ItemsView.__super__._doSet.call(this, attr, attrConfig, value);
    };

    ItemsView.prototype._createDom = function() {
      var dom;
      if (this._doms == null) {
        this._doms = {};
      }
      dom = $.xCreate({
        tagName: "div",
        content: {
          tagName: "ul",
          contextKey: "itemsWrapper"
        }
      }, this._doms);
      return dom;
    };

    ItemsView.prototype._parseDom = function(dom) {
      var child, itemsWrapper, next, nodeName;
      if (!dom) {
        return;
      }
      if (this._doms == null) {
        this._doms = {};
      }
      child = dom.firstChild;
      while (child) {
        next = child.nextSibling;
        nodeName = child.nodeName;
        if (!itemsWrapper && nodeName === "UL") {
          itemsWrapper = child;
        } else if (nodeName === "TEMPLATE") {
          this._regTemplate(child);
        } else {
          dom.removeChild(child);
        }
        child = next;
      }
      if (!itemsWrapper) {
        itemsWrapper = document.createElement("ul");
        dom.appendChild(itemsWrapper);
      }
      this._doms.itemsWrapper = itemsWrapper;
    };

    ItemsView.prototype._initDom = function(dom) {
      var $itemsWrapper;
      this._regDefaultTempaltes();
      if (this._templateContext == null) {
        this._templateContext = {};
      }
      $itemsWrapper = $fly(this._doms.itemsWrapper);
      $itemsWrapper.addClass("items").delegate(".item", "click", (function(_this) {
        return function(evt) {
          return _this._onItemClick(evt);
        };
      })(this)).delegate(".item", "dblclick", (function(_this) {
        return function(evt) {
          return _this._onItemDoubleClick(evt);
        };
      })(this));
      if (this._onItemsWrapperScroll) {
        $itemsWrapper.on("scroll", (function(_this) {
          return function(evt) {
            _this._onItemsWrapperScroll(evt);
            return true;
          };
        })(this));
      }
      this._$dom = $(dom);
    };

    ItemsView.prototype.getItems = function() {
      return this._realItems;
    };

    ItemsView.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      ItemsView.__super__._doRefreshDom.call(this);
      if (this._refreshItemsScheduled) {
        delete this._refreshItemsScheduled;
        this._refreshItems();
      }
    };

    ItemsView.prototype._getItemType = function(item) {
      var ref, type;
      type = this.fire("getItemTemplate", this, {
        item: item
      });
      if (type) {
        return type;
      }
      if (item != null ? item.isDataWrapper : void 0) {
        return ((ref = item._data) != null ? ref._itemType : void 0) || "default";
      } else {
        return item._itemType || "default";
      }
    };

    ItemsView.prototype._onItemsRefresh = function() {
      return this._refreshItems();
    };

    ItemsView.prototype._onItemInsert = function(arg) {
      var insertMode, item, itemDom, itemType, itemsWrapper, refDom, refEntityId;
      if (this._realItems === this._realOriginItems) {
        this._refreshEmptyItemDom();
        item = arg.entity;
        itemType = this._getItemType(item);
        itemsWrapper = this._doms.itemsWrapper;
        insertMode = arg.insertMode;
        if (!insertMode || insertMode === "end") {
          itemDom = this._createNewItem(itemType, item);
          this._refreshItemDom(itemDom, item);
          $fly(itemsWrapper).append(itemDom);
        } else if (insertMode === "begin") {
          itemDom = this._createNewItem(itemType, item);
          this._refreshItemDom(itemDom, item);
          $fly(itemsWrapper.firstChild).before(itemDom);
        } else if (this._itemDomMap) {
          refEntityId = _getEntityId(arg.refEntity);
          if (refEntityId) {
            refDom = this._itemDomMap[refEntityId] != null;
            if (refDom) {
              itemDom = this._createNewItem(itemType, item);
              this._refreshItemDom(itemDom, item);
              if (insertMode === "before") {
                $fly(refDom).before(itemDom);
              } else {
                $fly(refDom).after(itemDom);
              }
            }
          }
        }
      } else {
        this._refreshItems();
      }
    };

    ItemsView.prototype._onItemRemove = function(arg) {
      var itemDom, itemId;
      itemId = _getEntityId(arg.entity);
      if (itemId) {
        arg.itemsScope.unregItemScope(itemId);
        itemDom = this._itemDomMap[itemId];
        delete this._itemDomMap[itemId];
        if (itemDom) {
          $fly(itemDom).remove();
          if (itemDom === this._currentItemDom) {
            this._currentItemDom = null;
          }
        }
      }
      this._refreshEmptyItemDom();
    };

    ItemsView.prototype._showLoadingTip = function() {
      var $itemsWrapper, $loaderContainer;
      $loaderContainer = this._$loaderContainer;
      if (!$loaderContainer) {
        $itemsWrapper = $fly(this._doms.itemsWrapper);
        $itemsWrapper.xAppend({
          "class": "loader-container protected",
          content: {
            "class": "ui loader"
          }
        });
        this._$loaderContainer = $loaderContainer = $itemsWrapper.find(">.loader-container");
      } else {
        $loaderContainer.remove();
        $loaderContainer.appendTo(this._doms.itemsWrapper);
      }
      $loaderContainer.addClass("active");
    };

    ItemsView.prototype._hideLoadingTip = function() {
      var ref;
      if ((ref = this._$loaderContainer) != null) {
        ref.removeClass("active");
      }
    };

    ItemsView.prototype._onItemsLoadingStart = function(arg) {
      this._showLoadingTip();
    };

    ItemsView.prototype._onItemsLoadingEnd = function(arg) {
      this._hideLoadingTip();
    };

    ItemsView.prototype._setCurrentItemDom = function(currentItemDom) {
      if (this._currentItemDom) {
        $fly(this._currentItemDom).removeClass(cola.constants.COLLECTION_CURRENT_CLASS);
      }
      this._currentItemDom = currentItemDom;
      if (currentItemDom && this._highlightCurrentItem) {
        $fly(currentItemDom).addClass(cola.constants.COLLECTION_CURRENT_CLASS);
      }
    };

    ItemsView.prototype._onCurrentItemChange = function(arg) {
      var currentItemDom, itemId;
      if (arg.current && this._itemDomMap) {
        itemId = _getEntityId(arg.current);
        if (itemId) {
          currentItemDom = this._itemDomMap[itemId];
          if (!currentItemDom) {
            this._refreshItems();
            return;
          }
        }
      }
      this._setCurrentItemDom(currentItemDom);
    };

    ItemsView.prototype._refreshItems = function() {
      if (!this._dom) {
        this._refreshItemsScheduled = true;
        return;
      }
      return this._doRefreshItems(this._doms.itemsWrapper);
    };

    ItemsView.prototype._doRefreshItems = function(itemsWrapper) {
      var currentItem, currentPageNo, documentFragment, itemDom, items, lastItem, nextItemDom, ref, ret;
      if (this._itemDomMap == null) {
        this._itemDomMap = {};
      }
      ret = this._getItems();
      items = ret.items;
      this._realOriginItems = ret.originItems;
      if (this._convertItems && items) {
        items = this._convertItems(items);
      }
      this._realItems = items;
      if (items) {
        documentFragment = null;
        nextItemDom = itemsWrapper.firstChild;
        currentItem = items.current;
        if (this._currentItemDom) {
          if (!currentItem) {
            currentItem = cola.util.userData(this._currentItemDom, "item");
          }
          $fly(this._currentItemDom).removeClass(cola.constants.COLLECTION_CURRENT_CLASS);
          delete this._currentItemDom;
        }
        this._currentItem = currentItem;
        this._itemsScope.resetItemScopeMap();
        if (typeof this._refreshEmptyItemDom === "function") {
          this._refreshEmptyItemDom();
        }
        lastItem = null;
        cola.each(items, (function(_this) {
          return function(item) {
            var _nextItemDom, itemDom, itemType;
            lastItem = item;
            itemType = _this._getItemType(item);
            if (nextItemDom) {
              while (nextItemDom) {
                if (nextItemDom._itemType === itemType) {
                  break;
                } else {
                  _nextItemDom = nextItemDom.nextSibling;
                  if (!cola.util.hasClass(nextItemDom, "protected")) {
                    itemsWrapper.removeChild(nextItemDom);
                  }
                  nextItemDom = _nextItemDom;
                }
              }
              itemDom = nextItemDom;
              if (nextItemDom) {
                nextItemDom = nextItemDom.nextSibling;
              }
            } else {
              itemDom = null;
            }
            if (itemDom) {
              _this._refreshItemDom(itemDom, item);
            } else {
              itemDom = _this._createNewItem(itemType, item);
              _this._refreshItemDom(itemDom, item);
              if (documentFragment == null) {
                documentFragment = document.createDocumentFragment();
              }
              documentFragment.appendChild(itemDom);
            }
          };
        })(this), {
          currentPage: this._currentPageOnly
        });
        if (nextItemDom) {
          itemDom = nextItemDom;
          while (itemDom) {
            nextItemDom = itemDom.nextSibling;
            if (!cola.util.hasClass(itemDom, "protected")) {
              itemsWrapper.removeChild(itemDom);
              if (itemDom._itemId) {
                delete this._itemDomMap[itemDom._itemId];
              }
            }
            itemDom = nextItemDom;
          }
        }
        delete this._currentItem;
        if (this._currentItemDom && this._highlightCurrentItem) {
          $fly(this._currentItemDom).addClass(cola.constants.COLLECTION_CURRENT_CLASS);
        }
        if (documentFragment) {
          itemsWrapper.appendChild(documentFragment);
        }
        if (!this._currentPageOnly && this._autoLoadPage && (items === this._realOriginItems || !this._realOriginItems) && items instanceof cola.EntityList && items.pageSize > 0) {
          currentPageNo = lastItem != null ? (ref = lastItem._page) != null ? ref.pageNo : void 0 : void 0;
          if (currentPageNo && (currentPageNo < items.pageCount || !items.pageCountDetermined)) {
            if (!this._loadingNextPage && itemsWrapper.scrollHeight === itemsWrapper.clientHeight && (itemsWrapper.scrollTop = 0)) {
              this._showLoadingTip();
              items.loadPage(currentPageNo + 1, (function(_this) {
                return function() {
                  _this._hideLoadingTip();
                };
              })(this));
            } else {
              if (typeof this._appendTailDom === "function") {
                this._appendTailDom(itemsWrapper);
              }
            }
          }
        }
      }
    };

    ItemsView.prototype._refreshItemDom = function(itemDom, item, parentScope) {
      var alias, itemId, itemScope, oldScope, originItem;
      if (parentScope == null) {
        parentScope = this._itemsScope;
      }
      if (item === this._currentItem) {
        this._currentItemDom = itemDom;
      } else if (!this._currentItemDom && !this._allowNoCurrent) {
        this._currentItemDom = itemDom;
      }
      if (item != null ? item.isDataWrapper : void 0) {
        originItem = item;
        item = item._data;
      } else {
        originItem = item;
      }
      if (typeof item === "object") {
        itemId = _getEntityId(item);
      }
      alias = item._alias;
      if (!alias) {
        alias = originItem != null ? originItem._alias : void 0;
        if (alias == null) {
          alias = this._alias;
        }
      }
      this._templateContext.defaultPath = (typeof this._getDefaultBindPath === "function" ? this._getDefaultBindPath(originItem) : void 0) || alias;
      itemScope = cola.util.userData(itemDom, "scope");
      oldScope = cola.currentScope;
      try {
        if (!itemScope) {
          itemScope = new cola.ItemScope(parentScope, alias);
          cola.currentScope = itemScope;
          itemScope.data.setTargetData(item, true);
          cola.util.userData(itemDom, "scope", itemScope);
          cola.util.userData(itemDom, "item", originItem);
          if (typeof this._doRefreshItemDom === "function") {
            this._doRefreshItemDom(itemDom, item, itemScope);
          }
          cola.xRender(itemDom, itemScope, this._templateContext);
        } else {
          cola.currentScope = itemScope;
          if (itemScope.data.getTargetData() !== item) {
            if (itemDom._itemId) {
              delete this._itemDomMap[itemDom._itemId];
            }
            if (itemScope.data.alias !== alias) {
              throw new cola.Exception("Repeat alias mismatch. Expect \"" + itemScope.alias + "\" but \"" + alias + "\".");
            }
            cola.util.userData(itemDom, "item", originItem);
            itemScope.data.setTargetData(item);
          }
          if (typeof this._doRefreshItemDom === "function") {
            this._doRefreshItemDom(itemDom, item, itemScope);
          }
        }
        if (itemId) {
          parentScope.regItemScope(itemId, itemScope);
        }
        if (this.getListeners("renderItem")) {
          this.fire("renderItem", this, {
            item: originItem,
            dom: itemDom,
            scope: itemScope
          });
        }
      } finally {
        cola.currentScope = oldScope;
      }
      if (itemId) {
        itemDom._itemId = itemId;
        this._itemDomMap[itemId] = itemDom;
      }
      return itemScope;
    };

    ItemsView.prototype.refreshItem = function(item) {
      var itemDom, itemId;
      itemId = _getEntityId(item);
      itemDom = this._itemDomMap[itemId];
      if (itemDom) {
        if (typeof this._doRefreshItemDom === "function") {
          this._doRefreshItemDom(itemDom, item, this._itemsScope);
        }
      }
    };

    ItemsView.prototype._onItemRefresh = function(arg) {
      var item;
      item = arg.entity;
      if (typeof item === "object") {
        this.refreshItem(item);
      }
    };

    ItemsView.prototype._findItemDom = function(target) {
      var itemDom;
      while (target) {
        if (target._itemType) {
          itemDom = target;
          break;
        }
        target = target.parentNode;
      }
      return itemDom;
    };

    ItemsView.prototype._onItemClick = function(evt) {
      var item, itemDom;
      itemDom = evt.currentTarget;
      if (!itemDom) {
        return;
      }
      item = cola.util.userData(itemDom, "item");
      if (itemDom._itemType === "default") {
        if (item) {
          if (this._changeCurrentItem && item._parent instanceof cola.EntityList) {
            item._parent.setCurrent(item);
          } else {
            this._setCurrentItemDom(itemDom);
          }
        }
      }
      this.fire("itemClick", this, {
        event: evt,
        item: item,
        dom: itemDom
      });
    };

    ItemsView.prototype._onItemDoubleClick = function(evt) {
      var item, itemDom;
      itemDom = evt.currentTarget;
      if (!itemDom) {
        return;
      }
      item = cola.util.userData(itemDom, "item");
      this.fire("itemDoubleClick", this, {
        event: evt,
        item: item,
        dom: itemDom
      });
    };

    ItemsView.prototype._bindEvent = function(eventName) {
      if (eventName === "itemPress") {
        this._on("press", (function(_this) {
          return function(self, arg) {
            var itemDom;
            itemDom = _this._findItemDom(arg.event.target);
            if (itemDom) {
              arg.itemDom = itemDom;
              arg.item = cola.util.userData(itemDom, "item");
              _this.fire("itemPress", list, arg);
            }
          };
        })(this));
      } else {
        return ItemsView.__super__._bindEvent.call(this, eventName);
      }
    };

    return ItemsView;

  })(cola.Widget);

  cola.Element.mixin(cola.ItemsView, cola.TemplateSupport);

  cola.Element.mixin(cola.ItemsView, cola.DataItemsWidgetMixin);

  if (cola.breadcrumb == null) {
    cola.breadcrumb = {};
  }

  cola.breadcrumb.Section = (function(superClass) {
    extend(Section, superClass);

    function Section() {
      return Section.__super__.constructor.apply(this, arguments);
    }

    Section.CLASS_NAME = "section";

    Section.tagName = "a";

    Section.attributes = {
      text: {
        refreshDom: true
      },
      active: {
        type: "boolean",
        refreshDom: true,
        defaultValue: false
      },
      href: {
        refreshDom: true
      },
      target: {
        refreshDom: true
      }
    };

    Section.prototype._parseDom = function(dom) {
      var href, target, text;
      if (!this._text) {
        text = cola.util.getTextChildData(dom);
        if (text) {
          this._text = text;
        }
      }
      if (!this._href) {
        href = dom.getAttribute("href");
        if (href) {
          this._href = href;
        }
      }
      if (!this._target) {
        target = dom.getAttribute("target");
        if (target) {
          this._target = target;
        }
      }
    };

    Section.prototype._doRefreshDom = function() {
      var $dom, text;
      if (!this._dom) {
        return;
      }
      Section.__super__._doRefreshDom.call(this);
      text = this.get("text");
      this.get$Dom().text(text || "");
      this._classNamePool.toggle("active", this._active);
      $dom = this.get$Dom();
      if (this._href) {
        $dom.attr("href", this._href);
      } else {
        $dom.removeAttr("href");
      }
      $dom.attr("target", this._target || "");
    };

    return Section;

  })(cola.Widget);

  cola.Breadcrumb = (function(superClass) {
    extend(Breadcrumb, superClass);

    function Breadcrumb() {
      return Breadcrumb.__super__.constructor.apply(this, arguments);
    }

    Breadcrumb.tagName = "c-breadcrumb";

    Breadcrumb.CHILDREN_TYPE_NAMESPACE = "breadcrumb";

    Breadcrumb.CLASS_NAME = "breadcrumb";

    Breadcrumb.attributes = {
      divider: {
        "enum": ["chevron", "slash"],
        defaultValue: "chevron"
      },
      size: {
        "enum": ["mini", "tiny", "small", "medium", "large", "big", "huge", "massive"],
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this["_size"];
          if (oldValue && oldValue !== value && this._dom) {
            this.get$Dom().removeClass(oldValue);
          }
          this["_size"] = value;
          return this;
        }
      },
      sections: {
        refreshDom: true,
        setter: function(value) {
          var l, len1, section;
          this.clear();
          for (l = 0, len1 = value.length; l < len1; l++) {
            section = value[l];
            this.addSection(section);
          }
          return this;
        }
      },
      currentIndex: {
        type: "number",
        setter: function(value) {
          this._currentIndex = value;
          return this.setCurrent(value);
        },
        getter: function() {
          if (this._current && this._sections) {
            return this._sections.indexOf(this._current);
          } else {
            return -1;
          }
        }
      }
    };

    Breadcrumb.events = {
      sectionClick: null,
      change: null
    };

    Breadcrumb.prototype._initDom = function(dom) {
      var active, activeSection, l, len1, ref, ref1, section;
      Breadcrumb.__super__._initDom.call(this, dom);
      if ((ref = this._sections) != null ? ref.length : void 0) {
        ref1 = this._sections;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          section = ref1[l];
          this._rendSection(section);
          if (section.get("active")) {
            active = section;
          }
        }
        if (active) {
          this._doChange(active);
        }
      }
      activeSection = (function(_this) {
        return function(targetDom) {
          _this.fire("sectionClick", _this, {
            sectionDom: targetDom
          });
          return _this._doChange(targetDom);
        };
      })(this);
      return this.get$Dom().delegate(">.section", "click", function(event) {
        return activeSection(this, event);
      });
    };

    Breadcrumb.prototype._parseDom = function(dom) {
      var child, section, sectionConfig;
      if (!dom) {
        return;
      }
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          section = cola.widget(child);
          if (!section && cola.util.hasClass(child, "section")) {
            sectionConfig = {
              dom: child
            };
            if (cola.util.hasClass(child, "active")) {
              sectionConfig.active = true;
            }
            section = new cola.breadcrumb.Section(sectionConfig);
          }
          if (section instanceof cola.breadcrumb.Section) {
            this.addSection(section);
          }
        }
        child = child.nextSibling;
      }
    };

    Breadcrumb.prototype._doRefreshDom = function() {
      var size;
      if (!this._dom) {
        return;
      }
      Breadcrumb.__super__._doRefreshDom.call(this);
      size = this.get("size");
      if (size) {
        this._classNamePool.add(size);
      }
    };

    Breadcrumb.prototype._makeDivider = function() {
      var divider;
      divider = this.get("divider");
      if (divider === "chevron") {
        return $.xCreate({
          tagName: "i",
          "class": "right chevron icon divider"
        });
      } else {
        return $.xCreate({
          tagName: "div",
          "class": "divider",
          content: "/"
        });
      }
    };

    Breadcrumb.prototype._rendSection = function(section) {
      var divider, index, prev, sectionDom;
      index = this._sections.indexOf(section);
      if (this._dividers == null) {
        this._dividers = [];
      }
      sectionDom = section.getDom();
      if (sectionDom.parentNode !== this._dom) {
        if (this._dividers.length < index) {
          divider = this._makeDivider();
          this._dividers.push(divider);
          this._dom.appendChild(divider);
        }
        this._dom.appendChild(section.getDom());
      } else if (index > 0) {
        prev = sectionDom.previousElementSibling;
        if (prev && !cola.util.hasClass(prev, "divider")) {
          divider = this._makeDivider();
          this._dividers.push(divider);
          section.get$Dom().before(divider);
        }
      }
    };

    Breadcrumb.prototype._doChange = function(section) {
      var l, len1, ref, s, targetDom, targetSection;
      if (section.nodeType === 1) {
        targetDom = section;
      } else if (section instanceof cola.breadcrumb.Section) {
        targetDom = section.getDom();
      } else {
        return;
      }
      $(">.section.active", this._dom).each(function(index, itemDom) {
        if (itemDom !== targetDom) {
          section = cola.widget(itemDom);
          if (section) {
            section.set("active", false);
          } else {
            $fly(itemDom).removeClass("active");
          }
        }
      });
      targetSection = cola.widget(targetDom);
      ref = this._sections;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        s = ref[l];
        if (s !== targetSection) {
          s.set("active", false);
        }
      }
      this._current = targetSection;
      if (targetSection) {
        targetSection.set("active", true);
      } else {
        $fly(targetDom).addClass("active");
      }
      if (this._rendered) {
        this.fire("change", this, {
          currentDom: targetDom
        });
      }
    };

    Breadcrumb.prototype.addSection = function(config) {
      var active, section;
      if (this._destroyed) {
        return this;
      }
      if (this._sections == null) {
        this._sections = [];
      }
      if (config instanceof cola.breadcrumb.Section) {
        section = config;
      } else if (typeof config === "string") {
        section = new cola.breadcrumb.Section({
          text: config
        });
      } else if (config.constructor === Object.prototype.constructor) {
        section = new cola.breadcrumb.Section(config);
      }
      if (section) {
        this._sections.push(section);
        if (this._dom) {
          this._rendSection(section);
        }
        active = section.get("active");
        if (active) {
          this._doChange(section);
        }
      }
      return this;
    };

    Breadcrumb.prototype.removeSection = function(section) {
      if (!this._sections) {
        return this;
      }
      if (typeof section === "number") {
        section = this._sections[section];
      }
      if (section) {
        this._doRemove(section);
      }
      return this;
    };

    Breadcrumb.prototype._doRemove = function(section) {
      var dIndex, divider, index;
      index = this._sections.indexOf(section);
      if (index > -1) {
        this._sections.splice(index, 1);
        step.remove();
        if (index > 0 && this._dividers) {
          dIndex = index - 1;
          divider = this._dividers[dIndex];
          $(divider).remove();
          this._dividers.splice(dIndex, 1);
        }
      }
    };

    Breadcrumb.prototype.clear = function() {
      if (!this._sections) {
        return this;
      }
      if (this._dom) {
        this.get$Dom().empty();
      }
      if (this._sections.length) {
        this._sections = [];
      }
      return this;
    };

    Breadcrumb.prototype.getSection = function(index) {
      var el, l, len1, section, sections;
      sections = this._sections || [];
      if (typeof index === "number") {
        section = sections[index];
      } else if (typeof index === "string") {
        for (l = 0, len1 = sections.length; l < len1; l++) {
          el = sections[l];
          if (index === el.get("text")) {
            section = el;
            break;
          }
        }
      }
      return section;
    };

    Breadcrumb.prototype.setCurrent = function(section) {
      var currentSection;
      if (section instanceof cola.breadcrumb.Section) {
        currentSection = section;
      } else {
        currentSection = this.getSection(section);
      }
      if (currentSection) {
        this._doChange(currentSection);
      }
      return this;
    };

    Breadcrumb.prototype.getCurrent = function() {
      return this._current;
    };

    Breadcrumb.prototype.getCurrentIndex = function() {
      if (this._cuurent) {
        return this._sections.indexOf(this._current);
      }
    };

    Breadcrumb.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      Breadcrumb.__super__.destroy.call(this);
      delete this._current;
      delete this._sections;
      delete this._dividers;
    };

    return Breadcrumb;

  })(cola.Widget);

  cola.registerWidget(cola.Breadcrumb);

  cola.registerType("breadcrumb", "_default", cola.breadcrumb.Section);

  cola.registerType("breadcrumb", "section", cola.breadcrumb.Section);

  cola.registerTypeResolver("breadcrumb", function(config) {
    return cola.resolveType("widget", config);
  });

  cola.CardBook = (function(superClass) {
    extend(CardBook, superClass);

    function CardBook() {
      return CardBook.__super__.constructor.apply(this, arguments);
    }

    CardBook.tagName = "c-cardBook";

    CardBook.CLASS_NAME = "card-book";

    CardBook.events = {
      beforeChange: null,
      change: null
    };

    CardBook.prototype._parseDom = function(dom) {
      var child;
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (cola.util.hasClass(child, "item")) {
            if (child.nodeType === 1) {
              this.addItem(child);
            }
          }
        }
        child = child.nextSibling;
      }
      return null;
    };

    CardBook.prototype._initDom = function(dom) {
      CardBook.__super__._initDom.call(this, dom);
      if (this._items) {
        this._itemsRender();
      }
    };

    CardBook.prototype.setCurrentIndex = function(index) {
      var arg, newItem, newItemDom, oldItem, oldItemDom;
      if (this._currentIndex == null) {
        this._currentIndex = -1;
      }
      if (this._currentIndex === index) {
        return this;
      }
      arg = {};
      if (this._currentIndex > -1) {
        oldItem = this._items[this._currentIndex];
        oldItemDom = this.getItemDom(this._currentIndex);
      }
      if (index > -1) {
        newItem = this._items[index];
        newItemDom = this.getItemDom(index);
      }
      arg = {
        oldItem: oldItem,
        newItem: newItem
      };
      if (this.fire("beforeChange", this, arg) === false) {
        return this;
      }
      if (oldItemDom) {
        $(oldItemDom).removeClass("active");
      }
      if (newItemDom) {
        $(newItemDom).addClass("active");
      }
      this._currentIndex = index;
      this.fire("change", this, arg);
      return this;
    };

    return CardBook;

  })(cola.AbstractItemGroup);

  cola.registerWidget(cola.CardBook);

  cola.Carousel = (function(superClass) {
    extend(Carousel, superClass);

    function Carousel() {
      return Carousel.__super__.constructor.apply(this, arguments);
    }

    Carousel.tagName = "c-carousel";

    Carousel.CLASS_NAME = "carousel";

    Carousel.attributes = {
      bind: {
        readonlyAfterCreate: true,
        setter: function(bindStr) {
          return this._bindSetter(bindStr);
        }
      },
      orientation: {
        defaultValue: "horizontal",
        "enum": ["horizontal", "vertical"]
      },
      controls: {
        defaultValue: true
      },
      pause: {
        defaultValue: 3000
      }
    };

    Carousel.events = {
      change: null
    };

    Carousel.prototype.getContentContainer = function() {
      if (!this._doms.wrap) {
        this._createItemsWrap(dom);
      }
      return this._doms.wrap;
    };

    Carousel.prototype._parseDom = function(dom) {
      var child, doms, parseItem;
      parseItem = (function(_this) {
        return function(node) {
          var childNode;
          childNode = node.firstChild;
          while (childNode) {
            if (childNode.nodeType === 1) {
              if (!_this._items) {
                _this._items = [];
              }
              _this.addItem(childNode);
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      doms = this._doms;
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (cola.util.hasClass(child, "items-wrap")) {
            doms.wrap = child;
            parseItem(child);
          } else if (!doms.indicators && cola.util.hasClass(child, "indicators")) {
            doms.indicators = child;
          } else if (child.nodeName === "TEMPLATE") {
            this._regTemplate(child);
          }
        }
        child = child.nextSibling;
      }
      if (!doms.indicators) {
        this._createIndicatorContainer(dom);
      }
      if (!doms.wrap) {
        this._createItemsWrap(dom);
      }
    };

    Carousel.prototype._createIndicatorContainer = function(dom) {
      var carousel;
      if (this._doms == null) {
        this._doms = {};
      }
      this._doms.indicators = $.xCreate({
        tagName: "div",
        "class": "indicators indicators-" + this._orientation,
        contextKey: "indicators"
      });
      carousel = this;
      dom.appendChild(this._doms.indicators);
      $(this._doms.indicators).delegate(">span", "click", function() {
        return carousel.goTo($fly(this).index());
      });
      return null;
    };

    Carousel.prototype._createItemsWrap = function(dom) {
      if (this._doms == null) {
        this._doms = {};
      }
      this._doms.wrap = $.xCreate({
        tagName: "div",
        "class": "items-wrap",
        contextKey: "wrap"
      });
      dom.appendChild(this._doms.wrap);
      return null;
    };

    Carousel.prototype._initDom = function(dom) {
      var carousel, template;
      if (!this._doms.indicators) {
        this._createIndicatorContainer(dom);
      }
      if (!this._doms.wrap) {
        this._createItemsWrap(dom);
      }
      template = this._getTemplate();
      if (template) {
        if (this._bind) {
          $fly(template).attr("c-repeat", this._bind);
        }
        this._doms.wrap.appendChild(template);
        cola.xRender(template, this._scope);
      }
      if (this._getDataItems().items) {
        this._itemsRender();
        this.refreshIndicators();
      }
      this.setCurrentIndex(0);
      carousel = this;
      setTimeout(function() {
        return carousel._scroller = new Swipe(carousel._dom, {
          vertical: carousel._orientation === "vertical",
          disableScroll: false,
          continuous: true,
          callback: function(pos) {
            carousel.setCurrentIndex(pos);
          }
        });
      }, 0);
      if (cola.device.desktop && this._controls) {
        dom.appendChild($.xCreate({
          tagName: "div",
          "class": "controls",
          content: [
            {
              tagName: "A",
              "class": "prev",
              click: (function(_this) {
                return function() {
                  _this.replay();
                  return carousel.previous();
                };
              })(this)
            }, {
              tagName: "A",
              "class": "next",
              click: (function(_this) {
                return function() {
                  _this.replay();
                  return carousel.next();
                };
              })(this)
            }
          ]
        }));
      }
    };

    Carousel.prototype._getDataItems = function() {
      if (this._items) {
        return {
          items: this._items
        };
      } else {
        return Carousel.__super__._getDataItems.call(this);
      }
    };

    Carousel.prototype.setCurrentIndex = function(index) {
      var activeSpan, e, pos;
      this.fire("change", this, {
        index: index
      });
      this._currentIndex = index;
      if (this._dom) {
        if (this._doms.indicators) {
          try {
            $(".active", this._doms.indicators).removeClass("active");
            activeSpan = this._doms.indicators.children[index];
            if (activeSpan != null) {
              activeSpan.className = "active";
            }
          } catch (_error) {
            e = _error;
          }
        }
        if (this._scroller) {
          pos = this._scroller.getPos();
          if (pos !== index) {
            this._scroller.slide(index);
          }
        }
      }
      return this;
    };

    Carousel.prototype.refreshIndicators = function() {
      var currentIndex, i, indicatorCount, items, itemsCount, ref, span;
      items = this._getDataItems().items;
      if (items) {
        itemsCount = items instanceof cola.EntityList ? items.entityCount : items.length;
      } else {
        itemsCount = 0;
      }
      if (!((ref = this._doms) != null ? ref.indicators : void 0)) {
        return;
      }
      indicatorCount = this._doms.indicators.children.length;
      if (indicatorCount < itemsCount) {
        i = indicatorCount;
        while (i < itemsCount) {
          span = document.createElement("span");
          this._doms.indicators.appendChild(span);
          i++;
        }
      } else if (indicatorCount > itemsCount) {
        i = itemsCount;
        while (i < indicatorCount) {
          $(this._doms.indicators.firstChild).remove();
          i++;
        }
      }
      if (this._currentIndex == null) {
        this._currentIndex = -1;
      }
      currentIndex = this._currentIndex;
      $("span", this._doms.indicators).removeClass("active");
      if (currentIndex !== -1) {
        jQuery("span:nth-child(" + (currentIndex + 1) + ")", this._doms.indicators).addClass("indicator-active");
      }
      return this;
    };

    Carousel.prototype.next = function() {
      var items, pos;
      items = this._getDataItems().items;
      if (items && this._scroller) {
        pos = this._scroller.getPos();
        if (pos === (items.length - 1)) {
          this.goTo(0);
        } else {
          this._scroller.next();
        }
      }
      return this;
    };

    Carousel.prototype.previous = function() {
      var items, pos;
      items = this._getDataItems().items;
      if (items && this._scroller) {
        pos = this._scroller.getPos();
        if (pos === 0) {
          this.goTo(_items.length - 1);
        } else {
          this._scroller.prev();
        }
      }
      return this;
    };

    Carousel.prototype.refreshItems = function() {
      var ref;
      Carousel.__super__.refreshItems.call(this);
      if ((ref = this._scroller) != null) {
        ref.refresh();
      }
      this.refreshIndicators();
      this.setCurrentIndex(0);
      return this;
    };

    Carousel.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Carousel.__super__._doRefreshDom.call(this);
      this._classNamePool.add("carousel-" + this._orientation);
      this.refreshIndicators();
    };

    Carousel.prototype._onItemsRefresh = function(arg) {
      return this._itemDomsChanged();
    };

    Carousel.prototype._onItemInsert = function(arg) {
      return this._itemDomsChanged();
    };

    Carousel.prototype._onItemRemove = function(arg) {
      return this._itemDomsChanged();
    };

    Carousel.prototype._itemDomsChanged = function() {
      setTimeout((function(_this) {
        return function() {
          _this._parseDom(_this._dom);
        };
      })(this), 0);
    };

    Carousel.prototype.play = function(pause) {
      var carousel;
      if (this._interval) {
        clearInterval(this._interval);
      }
      carousel = this;
      if (pause) {
        this._pause = pause;
      }
      this._interval = setInterval(function() {
        return carousel.next();
      }, this._pause);
      return this;
    };

    Carousel.prototype.replay = function() {
      if (this._interval) {
        return this.play();
      }
    };

    Carousel.prototype.pause = function() {
      if (this._interval) {
        clearInterval(this._interval);
      }
      return this;
    };

    Carousel.prototype.goTo = function(index) {
      if (index == null) {
        index = 0;
      }
      this.replay();
      return this.setCurrentIndex(index);
    };

    return Carousel;

  })(cola.AbstractItemGroup);

  cola.Element.mixin(cola.Carousel, cola.TemplateSupport);

  cola.Element.mixin(cola.Carousel, cola.DataItemsWidgetMixin);

  cola.registerWidget(cola.Carousel);

  cola.Menu = (function(superClass) {
    extend(Menu, superClass);

    function Menu() {
      return Menu.__super__.constructor.apply(this, arguments);
    }

    Menu.tagName = "c-menu";

    Menu.CLASS_NAME = "ui menu";

    Menu.CHILDREN_TYPE_NAMESPACE = "menu";

    Menu.SEMANTIC_CLASS = ["top fixed", "right fixed", "bottom fixed", "left fixed"];

    Menu.attributes = {
      items: {
        setter: function(value) {
          var item, l, len1, results;
          if (this["_items"]) {
            this.clearItems();
          }
          if (value) {
            results = [];
            for (l = 0, len1 = value.length; l < len1; l++) {
              item = value[l];
              results.push(this.addItem(item));
            }
            return results;
          }
        }
      },
      showActivity: {
        type: "boolean",
        defaultValue: false
      },
      rightItems: {
        setter: function(value) {
          var item, l, len1, results;
          if (this["_rightItems"]) {
            this.clearRightItems();
          }
          if (value) {
            results = [];
            for (l = 0, len1 = value.length; l < len1; l++) {
              item = value[l];
              results.push(this.addRightItem(item));
            }
            return results;
          }
        }
      },
      centered: {
        type: "boolean",
        defaultValue: false
      }
    };

    Menu.events = {
      itemClick: null
    };

    Menu.prototype._parseItems = function(node) {
      var childNode, menuItem, parseRightMenu, results;
      parseRightMenu = (function(_this) {
        return function(node) {
          var childNode, menuItem;
          childNode = node.firstChild;
          if (_this._rightItems == null) {
            _this._rightItems = [];
          }
          while (childNode) {
            if (childNode.nodeType === 1) {
              menuItem = cola.widget(childNode);
              if (menuItem) {
                _this.addRightItem(menuItem);
              } else if (cola.util.hasClass(childNode, "item")) {
                menuItem = new cola.menu.MenuItem({
                  dom: childNode
                });
                _this.addRightItem(menuItem);
              }
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      childNode = node.firstChild;
      results = [];
      while (childNode) {
        if (childNode.nodeType === 1) {
          menuItem = cola.widget(childNode);
          if (menuItem) {
            this.addItem(menuItem);
          } else if (!this._rightMenuDom && cola.util.hasClass(childNode, "right menu")) {
            this._rightMenuDom = childNode;
            parseRightMenu(childNode);
          } else if (cola.util.hasClass(childNode, "item")) {
            menuItem = new cola.menu.MenuItem({
              dom: childNode
            });
            this.addItem(menuItem);
          }
        }
        results.push(childNode = childNode.nextSibling);
      }
      return results;
    };

    Menu.prototype._parseDom = function(dom) {
      var container;
      if (this._items == null) {
        this._items = [];
      }
      container = $(dom).find(">.container");
      if (container.length) {
        this._centered = true;
        this._containerDom = container[0];
        this._parseItems(this._containerDom);
      } else {
        this._parseItems(dom);
      }
    };

    Menu.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      Menu.__super__._doRefreshDom.call(this);
      $(this._containerDom).toggleClass("ui container", !!this._centered);
      if (this._isSubMemu) {
        this._classNamePool.remove("ui");
      }
    };

    Menu.prototype._initDom = function(dom) {
      var container, item, itemDom, l, len1, len2, menu, menuItems, n, rItemDom, rightMenuItems;
      menuItems = this._items;
      rightMenuItems = this._rightItems;
      menu = this;
      if (menuItems) {
        container = this._getItemsContainer();
        for (l = 0, len1 = menuItems.length; l < len1; l++) {
          item = menuItems[l];
          itemDom = item.getDom();
          if (itemDom.parentNode !== container) {
            container.appendChild(itemDom);
          }
        }
      }
      if (rightMenuItems) {
        if (!this._rightMenuDom) {
          this._rightMenuDom = this._createRightMenu();
          dom.appendChild(this._rightMenuDom);
        }
        for (n = 0, len2 = rightMenuItems.length; n < len2; n++) {
          item = rightMenuItems[n];
          rItemDom = item.getDom();
          if (rItemDom.parentNode !== this._rightMenuDom) {
            this._rightMenuDom.appendChild(rItemDom);
          }
        }
      }
      $(dom).prepend($.xCreate({
        tagName: "div",
        "class": "left-items"
      })).hover(function() {
        return menu._bindToSemantic();
      }).delegate(">.item,.right.menu>.item", "click", function() {
        return menu._setActive(this);
      });
      setTimeout(function() {
        menu._bindToSemantic();
      }, 300);
    };

    Menu.prototype._bindToSemantic = function() {
      var $dom;
      if (this._parent instanceof cola.menu.MenuItem) {
        return;
      }
      $dom = this.get$Dom();
      $dom.find(">.dropdown.item,.right.menu>.dropdown.item").each((function(_this) {
        return function(index, item) {
          var $item;
          $item = $(item);
          if ($item.hasClass("c-dropdown")) {
            return;
          }
          $item.addClass("c-dropdown");
          $item.find(".dropdown.item").addClass("c-dropdown");
          return $item.dropdown({
            on: "hover"
          });
        };
      })(this));
    };

    Menu.prototype._setDom = function(dom, parseChild) {
      Menu.__super__._setDom.call(this, dom, parseChild);
      if (this._activeItem) {
        this._setActive(this._activeItem.getDom());
      }
    };

    Menu.prototype.setActiveItem = function(item) {
      if (!item.get("active")) {
        item.set("active", true);
      }
      this._activeItem = item;
      if (this._rendered) {
        this._setActive(item.getDom());
      }
    };

    Menu.prototype.getActiveItem = function() {
      return this._activeItem;
    };

    Menu.prototype._setActive = function(itemDom) {
      if (this._parent && this._parent instanceof cola.menu.DropdownMenuItem) {
        return;
      }
      if (!this._showActivity) {
        return;
      }
      $(">a.item:not(.dropdown),.right.menu>a.item:not(.dropdown)", this._dom).each(function() {
        if (itemDom === this) {
          $fly(this).addClass("active");
        } else {
          $fly(this).removeClass("active").find(".item").removeClass("active");
        }
      });
      if ($fly(itemDom).hasClass("dropdown")) {
        return;
      }
      if ($(">.menu", itemDom).length && !this._isSubMemu) {
        $fly(itemDom).removeClass("active");
      }
    };

    Menu.prototype._getItemsContainer = function() {
      if (this._centered) {
        if (!this._containerDom) {
          this._containerDom = $.xCreate({
            tagName: "div",
            "class": "container"
          });
          this._dom.appendChild(this._containerDom);
        }
      }
      return this._containerDom || this._dom;
    };

    Menu.prototype.getParent = function() {
      return this._parent;
    };

    Menu.prototype.onItemClick = function(event, item) {
      var arg, parentMenu;
      parentMenu = this.getParent();
      arg = {
        item: item,
        event: event
      };
      this.fire("itemClick", this, arg);
      if (!parentMenu) {
        return;
      }
      if (parentMenu instanceof cola.menu.AbstractMenuItem || parentMenu instanceof cola.Menu || parentMenu instanceof cola.Button) {
        parentMenu.onItemClick(event, item);
      }
    };

    Menu.prototype._createItem = function(config, floatRight) {
      var menuItem;
      menuItem = null;
      if (config.constructor === Object.prototype.constructor) {
        if (config.$type) {
          if (config.$type === "dropdown") {
            menuItem = new cola.menu.DropdownMenuItem(config);
          } else if (config.$type === "headerItem") {
            menuItem = new cola.menu.HeaderMenuItem(config);
          } else {
            menuItem = new cola.menu.ControlMenuItem({
              control: config
            });
          }
        } else {
          menuItem = new cola.menu.MenuItem(config);
        }
      } else if (config instanceof cola.menu.AbstractMenuItem) {
        menuItem = config;
      }
      return menuItem;
    };

    Menu.prototype.addItem = function(config) {
      var active, container, itemDom, menuItem;
      menuItem = this._createItem(config);
      if (!menuItem) {
        return;
      }
      menuItem._parent = this;
      if (this._items == null) {
        this._items = [];
      }
      this._items.push(menuItem);
      active = menuItem.get("active");
      if (active) {
        this._activeItem = menuItem;
      }
      if (this._dom) {
        container = this._getItemsContainer();
        itemDom = menuItem.getDom();
        if (itemDom.parentNode !== container) {
          if (this._rightMenuDom) {
            $(this._rightMenuDom).before(itemDom);
          } else {
            container.appendChild(itemDom);
          }
        }
      }
      return itemDom;
    };

    Menu.prototype.addRightItem = function(config) {
      var active, container, itemDom, menuItem;
      menuItem = this._createItem(config, true);
      if (!menuItem) {
        return this;
      }
      menuItem._parent = this;
      if (this._rightItems == null) {
        this._rightItems = [];
      }
      this._rightItems.push(menuItem);
      active = menuItem.get("active");
      if (active) {
        this._activeItem = menuItem;
      }
      if (this._dom) {
        container = this._getItemsContainer();
        itemDom = menuItem.getDom();
        if (!this._rightMenuDom) {
          this._rightMenuDom = this._createRightMenu();
          container.appendChild(this._rightMenuDom);
        }
        if (itemDom.parentNode !== this._rightMenuDom) {
          this._rightMenuDom.appendChild(itemDom);
        }
      }
      return itemDom;
    };

    Menu.prototype.clearItems = function() {
      var item, l, len1, menuItems;
      menuItems = this._items;
      if (menuItems != null ? menuItems.length : void 0) {
        for (l = 0, len1 = menuItems.length; l < len1; l++) {
          item = menuItems[l];
          item.destroy();
        }
        this._items = [];
      }
      return this;
    };

    Menu.prototype.clearRightItems = function() {
      var item, l, len1, menuItems;
      menuItems = this._rightItems;
      if (menuItems != null ? menuItems.length : void 0) {
        for (l = 0, len1 = menuItems.length; l < len1; l++) {
          item = menuItems[l];
          item.destroy();
        }
        this._rightItems = [];
      }
      return this;
    };

    Menu.prototype._doRemove = function(array, item) {
      var index;
      index = array.indexOf(item);
      if (index > -1) {
        array.splice(index, 1);
        item.destroy();
      }
    };

    Menu.prototype.removeItem = function(item) {
      var menuItems;
      menuItems = this._items;
      if (!menuItems) {
        return this;
      }
      if (typeof item === "number") {
        item = menuItems[item];
      }
      if (item) {
        this._doRemove(menuItems, item);
      }
      return this;
    };

    Menu.prototype.removeRightItem = function(item) {
      var menuItems;
      menuItems = this._rightItems;
      if (!menuItems) {
        return this;
      }
      if (typeof item === "number") {
        item = menuItems[item];
      }
      if (item) {
        this._doRemove(menuItems, item);
      }
      return this;
    };

    Menu.prototype.getItem = function(index) {
      var ref;
      return (ref = this._items) != null ? ref[index] : void 0;
    };

    Menu.prototype.getRightItem = function(index) {
      var ref;
      return (ref = this._rightItems) != null ? ref[index] : void 0;
    };

    Menu.prototype._createRightMenu = function() {
      return $.xCreate({
        tagName: "DIV",
        "class": "right menu"
      });
    };

    Menu.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      Menu.__super__.destroy.call(this);
      delete this._activeItem;
      this.clearRightItems();
      this.clearItems();
      delete this._containerDom;
      return this;
    };

    return Menu;

  })(cola.Widget);

  cola.registerWidget(cola.Menu);

  if (cola.menu == null) {
    cola.menu = {};
  }

  cola.menu.AbstractMenuItem = (function(superClass) {
    extend(AbstractMenuItem, superClass);

    function AbstractMenuItem() {
      return AbstractMenuItem.__super__.constructor.apply(this, arguments);
    }

    AbstractMenuItem.attributes = {
      parent: null,
      active: {
        type: "boolean",
        defaultValue: false,
        setter: function(value) {
          var oldValue;
          oldValue = this._active;
          this._active = value;
          if (oldValue !== value && value) {
            return this.onActive(this);
          }
        },
        getter: function() {
          if (!this._active && this._rendered) {
            this._active = this.get$Dom().hasClass("active");
          }
          return this._active;
        }
      }
    };

    AbstractMenuItem.prototype.onItemClick = function(event, item) {
      var parentMenu;
      parentMenu = this._parent;
      if (parentMenu instanceof cola.Menu) {
        parentMenu.onItemClick(event, item);
      }
    };

    AbstractMenuItem.prototype.onActive = function(item) {
      var parentMenu;
      parentMenu = this._parent;
      if (parentMenu instanceof cola.Menu) {
        return parentMenu.setActiveItem(item);
      }
    };

    AbstractMenuItem.prototype.getParent = function() {
      return this._parent;
    };

    AbstractMenuItem.prototype.hasSubMenu = function() {
      return !!this._subMenu;
    };

    AbstractMenuItem.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      AbstractMenuItem.__super__.destroy.call(this);
      return delete this._parent;
    };

    return AbstractMenuItem;

  })(cola.AbstractContainer);

  cola.menu.MenuItem = (function(superClass) {
    extend(MenuItem, superClass);

    function MenuItem() {
      return MenuItem.__super__.constructor.apply(this, arguments);
    }

    MenuItem.tagName = "a";

    MenuItem.parentWidget = cola.Menu;

    MenuItem.CLASS_NAME = "item";

    MenuItem.attributes = {
      caption: {
        refreshDom: true
      },
      icon: {
        refreshDom: true
      },
      href: {
        refreshDom: true
      },
      target: {
        refreshDom: true
      },
      items: {
        setter: function(value) {
          return this._resetSubMenu(value);
        },
        getter: function() {
          var ref;
          return (ref = this._subMenu) != null ? ref.get("items") : void 0;
        }
      }
    };

    MenuItem.prototype._parseDom = function(dom) {
      var child, subMenu;
      child = dom.firstChild;
      if (this._doms == null) {
        this._doms = {};
      }
      while (child) {
        if (child.nodeType === 1) {
          subMenu = cola.widget(child);
          if (subMenu instanceof cola.Menu) {
            this._subMenu = subMenu;
            subMenu._isSubMemu = true;
          } else if (child.nodeName === "I") {
            this._doms.iconDom = child;
            if (this._icon == null) {
              this._icon = child.className;
            }
          } else if (cola.util.hasClass(child, "caption")) {
            this._doms.captionDom = child;
          }
        }
        child = child.nextSibling;
      }
      if (!this._doms.captionDom) {
        this._doms.captionDom = $.xCreate({
          tagName: "span",
          content: this._caption || ""
        });
        if (this._doms.iconDom) {
          $fly(this._doms.iconDom).after(this._doms.captionDom);
        } else {
          $fly(dom).prepend(this._doms.captionDom);
        }
      }
    };

    MenuItem.prototype._initDom = function(dom) {
      var subMenuDom;
      MenuItem.__super__._initDom.call(this, dom);
      if (this._$dom == null) {
        this._$dom = $(dom);
      }
      this._$dom.click((function(_this) {
        return function(event) {
          if (_this._subMenu) {
            return;
          }
          return _this.onItemClick(event, _this);
        };
      })(this));
      if (this._subMenu) {
        subMenuDom = this._subMenu.getDom();
        if (subMenuDom.parentNode !== dom) {
          dom.appendChild(subMenuDom);
        }
      }
    };

    MenuItem.prototype._setDom = function(dom, parseChild) {
      var href, target;
      if (parseChild) {
        if (!this._href) {
          href = dom.getAttribute("href");
          if (href) {
            this._href = href;
          }
        }
        if (!this._target) {
          target = dom.getAttribute("target");
          if (target) {
            this._target = target;
          }
        }
      }
      return MenuItem.__super__._setDom.call(this, dom, parseChild);
    };

    MenuItem.prototype._createDom = function() {
      var caption, icon;
      icon = this.get("icon") || "";
      caption = this.get("caption") || "";
      return $.xCreate({
        tagName: "A",
        "class": this.constructor.CLASS_NAME,
        content: [
          {
            tagName: "span",
            content: caption,
            contextKey: "captionDom"
          }
        ]
      }, this._doms);
    };

    MenuItem.prototype._refreshIcon = function() {
      var $dom;
      $dom = this.get$Dom();
      if (this._icon && !this._caption) {
        this._classNamePool.add("icon");
      }
      if (this._icon) {
        if (!this._doms.iconDom) {
          this._doms.iconDom = $.xCreate({
            tagName: "i",
            "class": "icon"
          });
        }
        if (this._doms.iconDom.parentNode !== this._dom) {
          $dom.prepend(this._doms.iconDom);
        }
        return $fly(this._doms.iconDom).addClass(this._icon);
      } else {
        return $fly(this._doms.iconDom).remove();
      }
    };

    MenuItem.prototype._doRefreshDom = function() {
      var $dom, subMenuDom;
      if (!this._dom) {
        return;
      }
      MenuItem.__super__._doRefreshDom.call(this);
      $dom = this.get$Dom();
      $dom.find(">.ui.menu").removeClass("ui");
      this._refreshIcon();
      $fly(this._doms.captionDom).text(this._caption || "");
      if (this._subMenu) {
        subMenuDom = this._subMenu.getDom();
        if (subMenuDom.parentNode !== this._dom) {
          this._dom.appendChild(subMenuDom);
        }
      }
      if (this._href) {
        $dom.attr("href", this._href);
      } else {
        $dom.removeAttr("href");
      }
      $dom.attr("target", this._target || "");
    };

    MenuItem.prototype._resetSubMenu = function(config) {
      var ref;
      if ((ref = this._subMenu) != null) {
        ref.destroy();
      }
      if (config) {
        this._subMenu = new cola.Menu({
          items: config
        });
        this._subMenu._parent = this;
        return this._subMenu._isSubMemu = true;
      } else {
        return delete this._subMenu;
      }
    };

    MenuItem.prototype.destroy = function() {
      var ref;
      if (this._destroyed) {
        return;
      }
      if ((ref = this._subMenu) != null) {
        ref.destroy();
      }
      return MenuItem.__super__.destroy.call(this);
    };

    return MenuItem;

  })(cola.menu.AbstractMenuItem);

  cola.registerWidget(cola.menu.MenuItem);

  cola.menu.DropdownMenuItem = (function(superClass) {
    extend(DropdownMenuItem, superClass);

    function DropdownMenuItem() {
      return DropdownMenuItem.__super__.constructor.apply(this, arguments);
    }

    DropdownMenuItem.tagName = "c-dropdownItem";

    DropdownMenuItem.parentWidget = cola.Menu;

    DropdownMenuItem.CLASS_NAME = "dropdown item";

    DropdownMenuItem.attributes = {
      icon: {
        refreshDom: true,
        defaultValue: "dropdown"
      }
    };

    DropdownMenuItem.prototype._createDom = function() {
      var caption;
      caption = this.get("caption") || "";
      return $.xCreate({
        tagName: "DIV",
        "class": this.constructor.CLASS_NAME,
        content: [
          {
            tagName: "span",
            content: caption,
            contextKey: "captionDom"
          }, {
            tagName: "i",
            "class": "dropdown icon",
            contextKey: "iconDom"
          }
        ]
      }, this._doms);
    };

    DropdownMenuItem.prototype._refreshIcon = function() {
      if (!this._doms.iconDom) {
        this._doms.iconDom = document.createElement("i");
        this._dom.appendChild(this._doms.iconDom);
      }
      return this._doms.iconDom.className = (this._icon || "dropdown") + " icon";
    };

    return DropdownMenuItem;

  })(cola.menu.MenuItem);

  cola.registerWidget(cola.menu.DropdownMenuItem);

  cola.menu.ControlMenuItem = (function(superClass) {
    extend(ControlMenuItem, superClass);

    function ControlMenuItem() {
      return ControlMenuItem.__super__.constructor.apply(this, arguments);
    }

    ControlMenuItem.tagName = "c-controlItem";

    ControlMenuItem.parentWidget = cola.Menu;

    ControlMenuItem.CLASS_NAME = "item";

    ControlMenuItem.attributes = {
      control: {
        setter: function(value) {
          var control;
          $fly(this._control).remove();
          control = cola.xRender(value);
          this._control = control;
          if (control && this._dom) {
            this._dom.appendChild(control);
          }
          return this;
        }
      }
    };

    ControlMenuItem.prototype._parseDom = function(dom) {
      var child, widget;
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          widget = cola.widget(child);
          if (widget) {
            this._control = widget;
            break;
          }
        }
        child = child.nextSibling;
      }
    };

    ControlMenuItem.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      ControlMenuItem.__super__._doRefreshDom.call(this);
      return this._classNamePool.remove("ui");
    };

    ControlMenuItem.prototype._setDom = function(dom, parseChild) {
      var control;
      ControlMenuItem.__super__._setDom.call(this, dom, parseChild);
      control = this._control;
      if (!control) {
        return;
      }
      if (control instanceof cola.RenderableElement) {
        dom.appendChild(control.getDom());
      } else if (control.nodeType === 1) {
        dom.appendChild(control);
      }
    };

    return ControlMenuItem;

  })(cola.menu.AbstractMenuItem);

  cola.registerWidget(cola.menu.ControlMenuItem);

  cola.menu.HeaderMenuItem = (function(superClass) {
    extend(HeaderMenuItem, superClass);

    function HeaderMenuItem() {
      return HeaderMenuItem.__super__.constructor.apply(this, arguments);
    }

    HeaderMenuItem.tagName = "c-headerItem";

    HeaderMenuItem.parentWidget = cola.Menu;

    HeaderMenuItem.CLASS_NAME = "header item";

    HeaderMenuItem.attributes = {
      text: null
    };

    HeaderMenuItem.prototype._setDom = function(dom, parseChild) {
      HeaderMenuItem.__super__._setDom.call(this, dom, parseChild);
      if (this._text) {
        this.get$Dom(this._text);
      }
    };

    HeaderMenuItem.prototype._doRefreshDom = function() {
      var text;
      if (!this._dom) {
        return;
      }
      HeaderMenuItem.__super__._doRefreshDom.call(this);
      this._classNamePool.remove("ui");
      text = this.get("text") || "";
      this.get$Dom().text(text);
    };

    return HeaderMenuItem;

  })(cola.menu.AbstractMenuItem);

  cola.registerWidget(cola.menu.HeaderMenuItem);

  cola.TitleBar = (function(superClass) {
    extend(TitleBar, superClass);

    function TitleBar() {
      return TitleBar.__super__.constructor.apply(this, arguments);
    }

    TitleBar.tagName = "c-titleBar";

    TitleBar.CLASS_NAME = "menu title-bar";

    TitleBar.CHILDREN_TYPE_NAMESPACE = "menu";

    TitleBar.attributes = {
      title: {
        refreshDom: true
      }
    };

    TitleBar.prototype._parseDom = function(dom) {
      var child, firstChild;
      child = dom.firstChild;
      if (this._doms == null) {
        this._doms = {};
      }
      while (child) {
        if (child.nodeType === 1) {
          if (!this._doms.title && cola.util.hasClass(child, "title")) {
            this._doms.title = child;
            if (this._title == null) {
              this._title = cola.util.getTextChildData(child);
            }
            break;
          }
        }
        child = child.nextSibling;
      }
      TitleBar.__super__._parseDom.call(this, dom);
      firstChild = dom.children[0];
      if (this._doms.title && firstChild !== this._doms.title) {
        $(this._doms.title).remove();
        $(firstChild).before(this._doms.title);
      }
    };

    TitleBar.prototype._doRefreshDom = function() {
      if (!this._dom) {
        return;
      }
      TitleBar.__super__._doRefreshDom.call(this);
      if (this._doms == null) {
        this._doms = {};
      }
      if (this._title) {
        if (!this._doms.title) {
          this._doms.title = $.xCreate({
            tagName: "div",
            "class": "title"
          });
          this.get$Dom().prepend(this._doms.title);
        }
        $(this._doms.title).text(this._title);
      } else {
        $(this._doms.title).empty();
      }
      return null;
    };

    return TitleBar;

  })(cola.Menu);

  cola.registerWidget(cola.TitleBar);

  cola.registerType("menu", "_default", cola.menu.MenuItem);

  cola.registerType("menu", "item", cola.menu.MenuItem);

  cola.registerType("menu", "dropdownItem", cola.menu.DropdownMenuItem);

  cola.registerType("menu", "controlItem", cola.menu.ControlMenuItem);

  cola.registerType("menu", "headerItem", cola.menu.HeaderMenuItem);

  cola.registerTypeResolver("menu", function(config) {
    return cola.resolveType("widget", config);
  });

  cola.ButtonMenu = (function(superClass) {
    extend(ButtonMenu, superClass);

    function ButtonMenu() {
      return ButtonMenu.__super__.constructor.apply(this, arguments);
    }

    ButtonMenu.prototype.onItemClick = function(event, item) {
      var ref;
      if ((ref = this._parent) != null) {
        ref.onItemClick(event, item);
      }
      return null;
    };

    ButtonMenu.prototype._toDropDown = function(item) {
      if (!(this._parent instanceof cola.MenuButton)) {
        ButtonMenu.__super__._toDropDown.call(this, item);
      }
      return null;
    };

    return ButtonMenu;

  })(cola.Menu);

  cola.MenuButton = (function(superClass) {
    extend(MenuButton, superClass);

    function MenuButton() {
      return MenuButton.__super__.constructor.apply(this, arguments);
    }

    MenuButton.tagName = "c-menuButton";

    MenuButton.CLASS_NAME = "dropdown button";

    MenuButton.attributes = {
      menuItems: {
        setter: function(value) {
          return this._resetMenu(value);
        },
        getter: function() {
          var ref;
          return (ref = this._menu) != null ? ref.get("items") : void 0;
        }
      }
    };

    MenuButton.events = {
      menuItemClick: null
    };

    MenuButton.prototype._setDom = function(dom, parseChild) {
      var menuDom;
      MenuButton.__super__._setDom.call(this, dom, parseChild);
      if (this._menu) {
        menuDom = this._menu.getDom();
        if (menuDom.parentNode !== this._dom) {
          this._dom.appendChild(menuDom);
        }
      }
      this.get$Dom().dropdown();
    };

    MenuButton.prototype._parseDom = function(dom) {
      var child, menu;
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          menu = cola.widget(child);
          if (menu && menu instanceof cola.Menu) {
            this._menu = menu;
            menu._parent = this;
            break;
          }
        }
        child = child.nextSibling;
      }
    };

    MenuButton.prototype.onItemClick = function(event, item) {
      this.fire("menuItemClick", this, {
        item: item,
        event: event
      });
    };

    MenuButton.prototype._resetMenu = function(menuItems) {
      var ref;
      if ((ref = this._menu) != null) {
        ref.destroy();
      }
      this._menu = new cola.ButtonMenu({
        items: menuItems
      });
      this._menu._parent = this;
      if (this._dom) {
        this.get$Dom().append(this._menu.getDom());
      }
    };

    MenuButton.prototype.destroy = function() {
      var ref;
      if (this._destroyed) {
        return;
      }
      if ((ref = this._menu) != null) {
        ref.destroy();
      }
      delete this._menu;
      MenuButton.__super__.destroy.call(this);
    };

    MenuButton.prototype.addMenuItem = function(config) {
      var ref;
      if ((ref = this._menu) != null) {
        ref.addItem(config);
      }
      return this;
    };

    MenuButton.prototype.clearMenuItems = function() {
      var ref;
      if ((ref = this._menu) != null) {
        ref.clearItems();
      }
      return this;
    };

    MenuButton.prototype.removeMenuItem = function(item) {
      var ref;
      if ((ref = this._menu) != null) {
        ref.removeItem(item);
      }
      return this;
    };

    MenuButton.prototype.getMenuItem = function(index) {
      var ref;
      return (ref = this._menu) != null ? ref.getItem(index) : void 0;
    };

    return MenuButton;

  })(cola.Button);

  cola.registerWidget(cola.MenuButton);

  cola.registerType("menuButton", "_default", cola.ButtonMenu);

  cola.registerType("menuButton", "menu", cola.ButtonMenu);

  cola.registerTypeResolver("menuButton", function(config) {
    return cola.resolveType("widget", config);
  });

  cola.Shape = (function(superClass) {
    extend(Shape, superClass);

    function Shape() {
      return Shape.__super__.constructor.apply(this, arguments);
    }

    Shape.tagName = "c-shape";

    Shape.CLASS_NAME = "shape";

    Shape.attributes = {
      bind: {
        readonlyAfterCreate: true,
        setter: function(bindStr) {
          return this._bindSetter(bindStr);
        }
      }
    };

    Shape.events = {
      beforeChange: null,
      afterChange: null
    };

    Shape.directions = ["up", "down", "left", "right", "over", "back"];

    Shape.prototype.getContentContainer = function() {
      if (!this._doms.wrap) {
        this._createItemsWrap(dom);
      }
      return this._doms.wrap;
    };

    Shape.prototype._createItemsWrap = function(dom) {
      if (this._doms == null) {
        this._doms = {};
      }
      this._doms.wrap = $.xCreate({
        tagName: "div",
        "class": "sides"
      });
      dom.appendChild(this._doms.wrap);
      return null;
    };

    Shape.prototype.setCurrentIndex = function(index) {
      var currentDom, oldIndex, sides, targetDom;
      this._currentIndex = index;
      if (!this._dom) {
        return;
      }
      currentDom = this._current;
      if (this._doms) {
        sides = $(this._doms.wrap).find(".side");
        if (currentDom) {
          oldIndex = sides.index(currentDom);
          console.log(oldIndex);
          if (index === oldIndex) {
            return;
          }
        }
        sides.removeClass("active");
        targetDom = sides.eq(index).addClass("active");
      }
      return this;
    };

    Shape.prototype._parseDom = function(dom) {
      var child, doms, parseItem;
      parseItem = (function(_this) {
        return function(node) {
          var childNode;
          _this._items = [];
          childNode = node.firstChild;
          while (childNode) {
            if (childNode.nodeType === 1) {
              _this.addItem(childNode);
            }
            $fly(childNode).addClass("side");
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      if (this._doms == null) {
        this._doms = {};
      }
      doms = this._doms;
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (cola.util.hasClass(child, "sides")) {
            doms.wrap = child;
            parseItem(child);
          } else if (child.nodeName === "TEMPLATE") {
            this._regTemplate(child);
          }
        }
        child = child.nextSibling;
      }
    };

    Shape.prototype._initDom = function(dom) {
      var shape, template;
      if (!this._doms.wrap) {
        this._createItemsWrap(dom);
      }
      template = this._getTemplate();
      if (template) {
        if (this._bind) {
          $fly(template).attr("c-repeat", this._bind);
        }
        this._doms.wrap.appendChild(template);
        cola.xRender(template, this._scope);
      }
      if (this._items) {
        this._itemsRender();
      }
      shape = this;
      setTimeout(function() {
        return $(dom).shape({
          beforeChange: function() {
            shape.fire("beforeChange", shape, {
              current: shape._current
            });
          },
          onChange: function(activeDom) {
            shape._current = activeDom;
            shape.fire("afterChange", shape, {
              current: activeDom
            });
          }
        });
      }, 0);
      this.setCurrentIndex(0);
    };

    Shape.prototype.flip = function(direction) {
      var $dom;
      if (direction == null) {
        direction = "right";
      }
      if (this.constructor.directions.indexOf(direction) >= 0) {
        $dom = this.get$Dom();
        if (!$dom.shape("is animating")) {
          $dom.shape("flip " + direction);
        }
      }
      return this;
    };

    Shape.prototype.setNextSide = function(selector) {
      if (!this._dom) {
        return;
      }
      this.get$Dom().shape("set next side", selector);
      return this;
    };

    return Shape;

  })(cola.AbstractItemGroup);

  cola.Element.mixin(cola.Shape, cola.TemplateSupport);

  cola.Element.mixin(cola.Shape, cola.DataItemsWidgetMixin);

  cola.registerWidget(cola.Shape);

  cola.Steps = (function(superClass) {
    extend(Steps, superClass);

    function Steps() {
      return Steps.__super__.constructor.apply(this, arguments);
    }

    Steps.tagName = "c-steps";

    Steps.CHILDREN_TYPE_NAMESPACE = "steps";

    Steps.CLASS_NAME = "steps";

    Steps.SEMANTIC_CLASS = ["tablet stackable", "left floated", "right floated"];

    Steps.attributes = {
      size: {
        "enum": ["mini", "tiny", "small", "medium", "large", "big", "huge", "massive"],
        refreshDom: true,
        setter: function(value) {
          var oldValue;
          oldValue = this["_size"];
          if (oldValue && oldValue !== value && this._dom) {
            this.get$Dom().removeClass(oldValue);
          }
          this["_size"] = value;
        }
      },
      steps: {
        refreshDom: true,
        setter: function(value) {
          var l, len1, step;
          this.clear();
          for (l = 0, len1 = value.length; l < len1; l++) {
            step = value[l];
            if (step instanceof cola.steps.Step) {
              this.addStep(step);
            } else if (step.constructor === Object.prototype.constructor) {
              this.addStep(new cola.steps.Step(step));
            }
          }
        }
      },
      currentIndex: {
        type: "number",
        setter: function(value) {
          this["_currentIndex"] = value;
          return this.setCurrent(value);
        },
        getter: function() {
          if (this._current && this._steps) {
            return this._steps.indexOf(this._current);
          } else {
            return -1;
          }
        }
      },
      autoComplete: {
        type: "boolean",
        defaultValue: true
      }
    };

    Steps.events = {
      beforeChange: null,
      change: null,
      complete: null
    };

    Steps.prototype._doRefreshDom = function() {
      var size;
      if (!this._dom) {
        return;
      }
      Steps.__super__._doRefreshDom.call(this);
      size = this.get("size");
      if (size) {
        return this._classNamePool.add(size);
      }
    };

    Steps.prototype._doRemove = function(step) {
      var index;
      index = this._steps.indexOf(step);
      if (index > -1) {
        this._steps.splice(index, 1);
        step.remove();
      }
    };

    Steps.prototype._setDom = function(dom, parseChild) {
      var l, len1, ref, ref1, step, stepDom;
      Steps.__super__._setDom.call(this, dom, parseChild);
      if (!((ref = this._steps) != null ? ref.length : void 0)) {
        return;
      }
      ref1 = this._steps;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        step = ref1[l];
        stepDom = step.getDom();
        if (stepDom.parentNode !== this._dom) {
          step.appendTo(this._dom);
        }
      }
    };

    Steps.prototype._parseDom = function(dom) {
      var child, step;
      if (!dom) {
        return;
      }
      if (this._steps == null) {
        this._steps = [];
      }
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          step = cola.widget(child);
          if (step && step instanceof cola.steps.Step) {
            this.addStep(step);
          }
        }
        child = child.nextSibling;
      }
    };

    Steps.prototype._doChange = function(index) {
      var arg, newCurrent, oldCurrent;
      oldCurrent = this._current;
      if (index > -1 && index < this._steps.length) {
        newCurrent = this._steps[index];
      }
      if (oldCurrent === newCurrent) {
        return;
      }
      arg = {
        oldCurrent: oldCurrent,
        newCurrent: newCurrent
      };
      if (this.fire("beforeChange", this, arg) === false) {
        if (newCurrent) {
          newCurrent.set("states", "");
        }
        return;
      }
      this._current = newCurrent;
      if (oldCurrent) {
        oldCurrent.set("states", "");
      }
      if (newCurrent) {
        newCurrent.set("states", "active");
      }
      if (index >= this._steps.length) {
        this.fire("complete", this, {});
      }
      this.fire("change", this, arg);
      this._doComplete(index);
    };

    Steps.prototype.getStep = function(index) {
      var ref;
      return (ref = this._steps) != null ? ref[index] : void 0;
    };

    Steps.prototype.setCurrent = function(step) {
      var currentIndex, el, index, l, len1, ref;
      currentIndex = step;
      if (typeof step === "string") {
        ref = this._steps;
        for (index = l = 0, len1 = ref.length; l < len1; index = ++l) {
          el = ref[index];
          if (step === el.get("content")) {
            currentIndex = index;
            break;
          }
        }
      } else if (step instanceof cola.steps.Step) {
        currentIndex = this._steps.indexOf(step);
      }
      this._doChange(currentIndex);
      return this;
    };

    Steps.prototype._doComplete = function(index) {
      var completeIndex, dIndex, results;
      if (this._autoComplete) {
        completeIndex = index - 1;
        while (completeIndex > -1) {
          this._steps[completeIndex].set("states", "completed");
          completeIndex--;
        }
        dIndex = index + 1;
        results = [];
        while (dIndex < this._steps.length) {
          this._steps[dIndex].set("states", "");
          results.push(dIndex++);
        }
        return results;
      }
    };

    Steps.prototype.getCurrent = function() {
      return this._current;
    };

    Steps.prototype.add = function() {
      var arg, l, len1, step;
      for (l = 0, len1 = arguments.length; l < len1; l++) {
        arg = arguments[l];
        step = arg;
        if (step instanceof cola.steps.Step) {
          this.addStep(step);
        } else if (step.constructor === Object.prototype.constructor) {
          this.addStep(new cola.steps.Step(step));
        }
      }
      return this;
    };

    Steps.prototype.addStep = function(step) {
      var states, stepDom;
      if (this._destroyed) {
        return this;
      }
      if (this._steps == null) {
        this._steps = [];
      }
      if (step.constructor === Object.prototype.constructor) {
        step = new cola.steps.Step(step);
      }
      if (!(step instanceof cola.steps.Step)) {
        return this;
      }
      if (this._steps.indexOf(step) > -1) {
        return this;
      }
      this._steps.push(step);
      if (this._dom) {
        stepDom = step.getDom();
        if (stepDom.parentNode !== this._dom) {
          step.appendTo(this._dom);
        }
      }
      states = step.get("states");
      if (states === "active") {
        this._doChange(this._steps.length - 1);
      }
      return this;
    };

    Steps.prototype.removeStep = function(step) {
      if (!this._steps) {
        return this;
      }
      if (typeof step === "number") {
        step = this._steps[step];
      }
      if (step) {
        this._doRemove(step);
      }
      return this;
    };

    Steps.prototype.clear = function() {
      if (!this._steps) {
        return this;
      }
      if (this._dom) {
        this.get$Dom().empty();
      }
      if (this._steps.length) {
        this._steps = [];
      }
      return this;
    };

    Steps.prototype.next = function() {
      var currentIndex;
      currentIndex = this.get("currentIndex");
      this.setCurrent(++currentIndex);
      return this;
    };

    Steps.prototype.complete = function() {
      return this.setCurrent(this._steps.length);
    };

    Steps.prototype.previous = function() {
      var currentIndex;
      currentIndex = this.get("currentIndex");
      this.setCurrent(--currentIndex);
      return this;
    };

    Steps.prototype.goTo = function(index) {
      this.setCurrent(index);
      return this;
    };

    Steps.prototype.getStepIndex = function(step) {
      var ref;
      return (ref = this._steps) != null ? ref.indexOf(step) : void 0;
    };

    return Steps;

  })(cola.Widget);

  cola.registerWidget(cola.Steps);

  if (cola.steps == null) {
    cola.steps = {};
  }

  cola.steps.Step = (function(superClass) {
    extend(Step, superClass);

    function Step() {
      return Step.__super__.constructor.apply(this, arguments);
    }

    Step.tagName = "div";

    Step.parentWidget = cola.Steps;

    Step.CLASS_NAME = "step";

    Step.attributes = {
      icon: {
        refreshDom: true
      },
      content: {
        refreshDom: true
      },
      states: {
        refreshDom: true,
        "enum": ["completed", "active", ""],
        defaultValue: "",
        setter: function(value) {
          var oldValue;
          oldValue = this._states;
          this._states = value;
          if (this._dom && value !== oldValue && oldValue) {
            $fly(this._dom).removeClass(oldValue);
          }
          return this;
        }
      },
      disabled: {
        type: "boolean",
        defaultValue: false
      }
    };

    Step.prototype._parseDom = function(dom) {
      var $cc, $child, cc, child, l, len1, parseContent, parseDescription, parseTitle, ref;
      if (this._doms == null) {
        this._doms = {};
      }
      parseTitle = (function(_this) {
        return function(node) {
          var content, title;
          _this._doms.title = node;
          title = cola.util.getTextChildData(node);
          content = _this._content || {};
          if (!content.title && title) {
            if (_this._content == null) {
              _this._content = {};
            }
            _this._doms.titleDom = node;
            _this._content.title = title;
          }
        };
      })(this);
      parseDescription = (function(_this) {
        return function(node) {
          var content, description;
          _this._doms.description = node;
          description = cola.util.getTextChildData(node);
          content = _this._content || {};
          if (description && !content.description) {
            if (_this._content == null) {
              _this._content = {};
            }
            _this._doms.descriptionDom = node;
            _this._content.description = description;
          }
        };
      })(this);
      parseContent = (function(_this) {
        return function(node) {
          var content;
          content = cola.util.getTextChildData(node);
          if (!_this._content && content) {
            _this._content = content;
          }
        };
      })(this);
      child = dom.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          if (child.nodeName === "I") {
            this._doms.iconDom = child;
            if (!this._icon) {
              this._icon = child.className;
            }
          } else {
            $child = $(child);
            if ($child.hasClass("content")) {
              this._doms.contentDom = child;
              ref = child.childNodes;
              for (l = 0, len1 = ref.length; l < len1; l++) {
                cc = ref[l];
                if (child.nodeType !== 1) {
                  continue;
                }
                $cc = $(cc);
                if ($cc.hasClass("title")) {
                  parseTitle(cc);
                }
                if ($cc.hasClass("description")) {
                  parseDescription(cc);
                }
              }
              if (!this._content) {
                parseContent(child);
              }
            } else if ($child.hasClass("title")) {
              parseTitle(child);
            } else if ($child.hasClass("description")) {
              parseDescription(child);
            }
          }
        }
        child = child.nextSibling;
      }
      parseContent(dom);
    };

    Step.prototype._doRefreshDom = function() {
      var $contentDom, $dom, base, base1, base2, base3, classNamePool, content, icon;
      if (!this._dom) {
        return;
      }
      Step.__super__._doRefreshDom.call(this);
      if (this._doms == null) {
        this._doms = {};
      }
      content = this.get("content");
      $dom = this.get$Dom();
      $dom.empty();
      icon = this.get("icon");
      if (icon) {
        if ((base = this._doms).iconDom == null) {
          base.iconDom = document.createElement("i");
        }
        this._doms.iconDom.className = icon + " icon";
        $dom.append(this._doms.iconDom);
      } else {
        $fly(this._doms.iconDom).remove();
      }
      if (content) {
        if ((base1 = this._doms).contentDom == null) {
          base1.contentDom = document.createElement("div");
        }
        $contentDom = $(this._doms.contentDom);
        $contentDom.addClass("content").empty();
        if (typeof content === "string") {
          $contentDom.text(content);
        } else {
          if (content.title) {
            if ((base2 = this._doms).titleDom == null) {
              base2.titleDom = document.createElement("div");
            }
            $fly(this._doms.titleDom).addClass("title").text(content.title);
            $contentDom.append(this._doms.titleDom);
          }
          if (content.description) {
            if ((base3 = this._doms).descriptionDom == null) {
              base3.descriptionDom = document.createElement("div");
            }
            $fly(this._doms.descriptionDom).addClass("description").text(content.description);
            $contentDom.append(this._doms.descriptionDom);
          }
        }
        $dom.append($contentDom);
      }
      classNamePool = this._classNamePool;
      if (this._states) {
        classNamePool.add(this._states);
      }
      return classNamePool.toggle("disabled", this._disabled);
    };

    Step.prototype.destroy = function() {
      if (this._destroyed) {
        return;
      }
      Step.__super__.destroy.call(this);
      return delete this._doms;
    };

    return Step;

  })(cola.Widget);

  cola.registerWidget(cola.steps.Step);

  cola.registerType("steps", "_default", cola.steps.Step);

  cola.registerType("steps", "Step", cola.steps.Step);

  cola.registerTypeResolver("steps", function(config) {
    return cola.resolveType("widget", config);
  });

  cola.Stack = (function(superClass) {
    extend(Stack, superClass);

    function Stack() {
      return Stack.__super__.constructor.apply(this, arguments);
    }

    Stack.tagName = "c-stack";

    Stack.CLASS_NAME = "stack";

    Stack.events = {
      change: null,
      beforeChange: null
    };

    Stack.duration = 200;

    Stack.prototype._initDom = function(dom) {
      var itemsWrap, width;
      if (this._doms == null) {
        this._doms = {};
      }
      itemsWrap = this.getItemsWrap();
      if (!this._doms.prevItem) {
        this._doms.prevItem = $.xCreate({
          "class": "prev item"
        });
        $fly(itemsWrap).prepend(this._doms.prevItem);
      }
      if (!this._doms.currentItem) {
        this._doms.currentItem = $.xCreate({
          "class": "current item"
        });
        $fly(this._doms.prevItem).after(this._doms.currentItem);
      }
      if (!this._doms.nextItem) {
        this._doms.nextItem = $.xCreate({
          "class": "next item"
        });
        $fly(this._doms.currentItem).after(this._doms.nextItem);
      }
      this._prevItem = this._doms.prevItem;
      this._currentItem = this._doms.currentItem;
      this._nextItem = this._doms.nextItem;
      width = this._currentItem.clientWidth;
      $fly(this._currentItem).css({
        display: "block"
      });
      this._bindTouch();
      $fly(this._currentItem).css("transform", "translate(-" + width + "px,0)");
    };

    Stack.prototype._parseDom = function(dom) {
      var child, doms, parseItem, results;
      parseItem = (function(_this) {
        return function(node) {
          var childNode;
          _this._items = [];
          childNode = node.firstChild;
          while (childNode) {
            if (childNode.nodeType === 1) {
              if ($fly(childNode).hasClass("prev")) {
                _this._doms.prevItem = childNode;
              } else if ($fly(childNode).hasClass("current")) {
                _this._doms.currentItem = childNode;
              } else if ($fly(childNode).hasClass("next")) {
                _this._doms.nextItem = childNode;
              }
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      doms = this._doms;
      child = dom.firstChild;
      results = [];
      while (child) {
        if (child.nodeType === 1) {
          if (cola.util.hasClass(child, "items-wrap")) {
            doms.wrap = child;
            parseItem(child);
          }
        }
        results.push(child = child.nextSibling);
      }
      return results;
    };

    Stack.prototype.getItemContainer = function(key) {
      return this["_" + key + "Item"];
    };

    Stack.prototype.getItemsWrap = function() {
      var wrap;
      if (!this._doms.itemsWrap) {
        wrap = $.xCreate({
          "class": "items-wrap"
        });
        this._doms.itemsWrap = wrap;
        this._dom.appendChild(wrap);
      }
      return this._doms.itemsWrap;
    };

    Stack.prototype._setDom = function(dom, parseChild) {
      return Stack.__super__._setDom.call(this, dom, parseChild);
    };

    Stack.prototype._bindTouch = function() {
      var stack;
      stack = this;
      $(this._dom).on("touchstart", function(evt) {
        stack._onTouchStart(evt);
      }).on("touchmove", function(evt) {
        stack._onTouchMove(evt);
      });
      return $(window.document.body).on("touchend", function(evt) {
        stack._onTouchEnd(evt);
      });
    };

    Stack.prototype._getTouchPoint = function(evt) {
      var touches;
      touches = evt.originalEvent.touches;
      if (!touches.length) {
        touches = evt.originalEvent.changedTouches;
      }
      return touches[0];
    };

    Stack.prototype._onTouchStart = function(evt) {
      var touch;
      this._touchStart = true;
      touch = evt.originalEvent.touches[0];
      this._touchStartX = touch.pageX;
      this._touchStartY = touch.pageY;
      this._moveTotal = 0;
      this._touchTimestamp = new Date();
      evt.stopImmediatePropagation();
      return this;
    };

    Stack.prototype._onTouchMove = function(evt) {
      var direction, distanceX, distanceY, factor, timestamp, touchPoint, width;
      if (!this._touchStart) {
        return;
      }
      touchPoint = this._getTouchPoint(evt);
      this._touchLastX = touchPoint.pageX;
      this._touchLastY = touchPoint.pageY;
      distanceX = this._touchLastX - this._touchStartX;
      distanceY = this._touchLastY - this._touchStartY;
      timestamp = new Date();
      this._touchMoveSpeed = distanceX / (timestamp - this._touchLastTimstamp);
      this._touchLastTimstamp = timestamp;
      if (distanceX < 0) {
        direction = "left";
        factor = 1;
      } else {
        direction = "right";
        factor = -1;
      }
      this._touchDirection = direction;
      this._factor = factor;
      width = this._currentItem.clientWidth;
      this._distanceX = Math.abs(distanceX);
      this._moveTotal = (this._moveTotal || 0) + Math.abs(distanceX);
      if (this._moveTotal < 8) {
        return;
      }
      $fly(this._currentItem).css("transform", "translate(" + distanceX + "px,0)");
      if (direction === "left") {
        $fly(this._prevItem).css("display", "none");
        $fly(this._nextItem).css({
          transform: "translate(" + (width + distanceX) + "px,0)",
          display: "block"
        });
      } else {
        $fly(this._nextItem).css("display", "none");
        $fly(this._prevItem).css({
          transform: "translate(" + (factor * width + distanceX) + "px,0)",
          display: "block"
        });
      }
      evt.stopImmediatePropagation();
      return false;
    };

    Stack.prototype._onTouchEnd = function(evt) {
      var arg, duration, restore, width;
      if (!this._touchStart) {
        return;
      }
      duration = this.constructor.duration;
      width = this._currentItem.clientWidth;
      this._touchStart = false;
      restore = (function(_this) {
        return function() {
          $(_this._currentItem).transit({
            x: 0,
            duration: duration
          });
          if (_this._touchDirection === "left") {
            $(_this._nextItem).transit({
              x: width,
              duration: duration
            });
          } else {
            $(_this._prevItem).transit({
              x: -1 * width,
              duration: duration
            });
          }
        };
      })(this);
      if (this._moveTotal < 8) {
        restore();
        return;
      }
      arg = {
        current: this._currentItem,
        prev: this._prevItem,
        next: this._nextItem,
        action: "over"
      };
      if (this._distanceX > width / 3) {
        if (this._touchDirection === "left") {
          if (this.fire("beforeChange", this, arg) === false) {
            restore();
            return;
          }
          $(this._currentItem).transit({
            x: -1 * width,
            duration: duration
          });
          $(this._nextItem).transit({
            x: 0,
            duration: duration
          });
          this._doNext();
        } else {
          arg.action = "back";
          if (this.fire("beforeChange", this, arg) === false) {
            restore();
            return;
          }
          $(this._currentItem).transit({
            x: width,
            duration: duration
          });
          $(this._prevItem).transit({
            x: 0,
            duration: duration
          });
          this._doPrev();
        }
      } else {
        restore();
      }
    };

    Stack.prototype.next = function() {
      var arg, duration, stack, width;
      if (this._animating) {
        return;
      }
      arg = {
        current: this._currentItem,
        prev: this._prevItem,
        next: this._nextItem,
        action: "over"
      };
      if (this.fire("beforeChange", this, arg) === false) {
        return;
      }
      this._animating = true;
      width = this._currentItem.clientWidth;
      stack = this;
      duration = this.constructor.duration;
      $fly(this._nextItem).css({
        transform: "translate(" + width + "px,0)",
        display: "block"
      });
      $(this._currentItem).transit({
        x: -1 * width,
        duration: duration * 2,
        complete: function() {
          stack._animating = false;
          $(stack._currentItem).css("display", "none");
          return stack._doNext();
        }
      });
      $(this._nextItem).transit({
        x: 0,
        duration: duration * 2
      });
      return this;
    };

    Stack.prototype.prev = function() {
      var arg, duration, stack, width;
      if (this._animating) {
        return;
      }
      arg = {
        current: this._currentItem,
        prev: this._prevItem,
        next: this._nextItem,
        action: "back"
      };
      if (this.fire("beforeChange", this, arg) === false) {
        return;
      }
      this._animating = true;
      width = this._currentItem.clientWidth;
      stack = this;
      duration = this.constructor.duration;
      $fly(this._prevItem).css({
        transform: "translate(-" + width + "px,0)",
        display: "block"
      });
      $(this._currentItem).transit({
        x: width,
        duration: duration * 2,
        complete: function() {
          $(stack._currentItem).css("display", "none");
          stack._animating = false;
          return stack._doPrev();
        }
      });
      $(this._prevItem).transit({
        x: 0,
        duration: duration * 2
      });
      return this;
    };

    Stack.prototype._doNext = function() {
      var currentItem, nextItem, prevItem;
      prevItem = this._prevItem;
      currentItem = this._currentItem;
      nextItem = this._nextItem;
      this._prevItem = currentItem;
      this._nextItem = prevItem;
      this._currentItem = nextItem;
      this.fire("change", this, {
        current: this._currentItem,
        prev: this._prevItem,
        next: this._nextItem,
        action: "over"
      });
      return null;
    };

    Stack.prototype._doPrev = function() {
      var currentItem, nextItem, prevItem;
      prevItem = this._prevItem;
      currentItem = this._currentItem;
      nextItem = this._nextItem;
      this._prevItem = nextItem;
      this._nextItem = currentItem;
      this._currentItem = prevItem;
      this.fire("change", this, {
        current: this._currentItem,
        prev: this._prevItem,
        next: this._nextItem,
        action: "back"
      });
      return null;
    };

    return Stack;

  })(cola.Widget);

  cola.registerWidget(cola.Stack);

  cola.AbstractList = (function(superClass) {
    extend(AbstractList, superClass);

    function AbstractList() {
      return AbstractList.__super__.constructor.apply(this, arguments);
    }

    AbstractList.attributes = {
      currentPageOnly: {
        type: "boolean"
      },
      autoLoadPage: {
        type: "boolean"
      },
      changeCurrentItem: {
        type: "boolean"
      },
      pullDown: {
        readOnlyAfterCreate: true
      },
      pullUp: {
        readOnlyAfterCreate: true
      },
      filterCriteria: {
        refreshItems: true
      }
    };

    AbstractList.events = {
      pullStart: null,
      pullStep: null,
      pullComplete: null,
      pullCancel: null,
      filterItem: {
        singleListener: true
      }
    };

    AbstractList.prototype.destroy = function() {
      AbstractList.__super__.destroy.call(this);
      delete this._emptyItemDom;
    };

    AbstractList.prototype._appendTailDom = function(itemsWrapper) {
      $fly(itemsWrapper).xAppend({
        "class": "tail-padding",
        content: {
          "class": "ui loader"
        }
      });
    };

    AbstractList.prototype._onItemsWrapperScroll = function() {
      var itemsWrapper, realItems;
      realItems = this._realItems;
      if (!this._currentPageOnly && this._autoLoadPage && !this._loadingNextPage && (realItems === this._realOriginItems || !this._realOriginItems)) {
        if (realItems instanceof cola.EntityList && realItems.pageSize > 0 && (realItems.pageNo < realItems.pageCount || !realItems.pageCountDetermined)) {
          itemsWrapper = this._doms.itemsWrapper;
          if (itemsWrapper.scrollTop + itemsWrapper.clientHeight === itemsWrapper.scrollHeight) {
            this._loadingNextPage = true;
            $fly(itemsWrapper).find(">.tail-padding >.ui.loader").addClass("active");
            realItems.loadPage(realItems.pageNo + 1, (function(_this) {
              return function() {
                _this._loadingNextPage = false;
                $fly(itemsWrapper).find(">.tail-padding >.ui.loader").removeClass("active");
              };
            })(this));
          }
        }
      }
    };

    AbstractList.prototype._convertItems = function(items) {
      var arg;
      if (this.getListeners("filterItem")) {
        arg = {
          filterCriteria: this._filterCriteria
        };
        items = cola._filterCollection(items, (function(_this) {
          return function(item) {
            arg.item = item;
            return _this.fire("filterItem", _this, arg);
          };
        })(this));
      } else if (this._filterCriteria) {
        items = cola._filterCollection(items, this._filterCriteria);
      }
      return items;
    };

    AbstractList.prototype._refreshEmptyItemDom = function() {
      var emptyItemDom, items, itemsWrapper;
      emptyItemDom = this._emptyItemDom = this._getTemplate("empty-item");
      if (emptyItemDom) {
        items = this._realItems;
        if (items instanceof cola.EntityList && items.entityCount === 0 || items instanceof Array && items.length === 0) {
          $fly(emptyItemDom).show();
          itemsWrapper = this._doms.itemsWrapper;
          if (emptyItemDom.parentNode !== itemsWrapper) {
            $fly(emptyItemDom).addClass("protected");
            cola.xRender(emptyItemDom, this._scope);
            itemsWrapper.appendChild(emptyItemDom);
          }
        } else {
          $fly(emptyItemDom).hide();
        }
      }
    };

    AbstractList.prototype._doRefreshItems = function(itemsWrapper) {
      var hasPullAction, pullDownPane, pullUpPane;
      AbstractList.__super__._doRefreshItems.call(this, itemsWrapper);
      if (this._pullAction === void 0) {
        this._pullAction = null;
        if (this._pullDown) {
          hasPullAction = true;
          pullDownPane = this._getTemplate("pull-down-pane");
          if (pullDownPane == null) {
            pullDownPane = $.xCreate({
              tagName: "div"
            });
          }
          this._doms.pullDownPane = pullDownPane;
        }
        if (this._pullUp) {
          hasPullAction = true;
          pullUpPane = this._getTemplate("pull-up-pane");
          if (pullUpPane == null) {
            pullUpPane = $.xCreate({
              tagName: "div"
            });
          }
          this._doms.pullUpPane = pullUpPane;
        }
        if (hasPullAction) {
          cola.util.delay(this, "createPullAction", 200, this._createPullAction);
        }
      }
    };

    AbstractList.prototype._createPullAction = function() {
      this._pullAction = new cola.PullAction(this._doms.itemsWrapper, {
        pullDownPane: this._doms.pullDownPane,
        pullUpPane: this._doms.pullUpPane,
        pullStart: (function(_this) {
          return function(evt, pullPane, pullState) {
            var collection;
            if (_this.getListeners("pullStart")) {
              return _this.fire("pullStart", _this, {
                event: evt,
                pullPane: pullPane,
                direction: pullState
              });
            } else if (pullState === "up" && !_this.getListeners("pullComplete")) {
              collection = _this._realItems;
              if (collection instanceof cola.EntityList) {
                return collection.pageNo < collection.pageCount;
              }
            }
          };
        })(this),
        pullStep: (function(_this) {
          return function(evt, pullPane, pullState, distance, theshold) {
            return _this.fire("pullStep", _this, {
              event: evt,
              pullPane: pullPane,
              direction: pullState,
              distance: distance,
              theshold: theshold
            });
          };
        })(this),
        pullComplete: (function(_this) {
          return function(evt, pullPane, pullState, done) {
            var collection;
            if (_this.fire("pullComplete", _this, {
              event: evt,
              pullPane: pullPane,
              direction: pullState,
              done: done
            }) === false) {
              return;
            }
            if (pullState === "down") {
              collection = _this._realOriginItems || _this._realItems;
              if (collection instanceof cola.EntityList) {
                collection.flush(done);
              } else {
                done();
              }
            } else if (pullState === "up") {
              collection = _this._realItems;
              if (collection instanceof cola.EntityList) {
                collection.nextPage(done);
              } else {
                done();
              }
            }
          };
        })(this),
        pullCancel: (function(_this) {
          return function(evt, pullPane, pullState) {
            return _this.fire("pullCancel", _this, {
              event: evt,
              pullPane: pullPane,
              direction: pullState
            });
          };
        })(this)
      });
    };

    return AbstractList;

  })(cola.ItemsView);

  SAFE_PULL_EFFECT = cola.os.android && !cola.browser.chrome;

  cola.PullAction = (function() {
    function PullAction(content1, options) {
      var k, pullDownPane, pullUpPane, v;
      this.content = content1;
      this.contentWrapper = this.content.parentNode;
      this.options = {
        resistance: 2.5,
        startTheshold: 10,
        pullTheshold: 0.4
      };
      for (k in options) {
        v = options[k];
        this.options[k] = v;
      }
      pullDownPane = this.options.pullDownPane;
      if (pullDownPane && typeof pullDownPane === "string") {
        pullDownPane = document.body.querySelector(pullDownPane);
      }
      if (pullDownPane) {
        this.pullDownPane = pullDownPane;
        if (this.content.previousSibling !== pullDownPane) {
          $fly(this.content).before(pullDownPane);
        }
        $fly(pullDownPane).addClass("pull-down-pane");
        this.pullDownDistance = pullDownPane.offsetHeight;
        this.contentWrapper.scrollTop = this.pullDownDistance;
      }
      pullUpPane = this.options.pullUpPane;
      if (pullUpPane && typeof pullUpPane === "string") {
        pullUpPane = document.body.querySelector(pullUpPane);
      }
      if (pullUpPane) {
        this.pullUpPane = pullUpPane;
        if (this.content.nextSibling !== pullUpPane) {
          $fly(this.content).after(pullUpPane);
        }
        $fly(pullUpPane).addClass("pull-up-pane");
        this.pullUpDistance = pullUpPane.offsetHeight;
      }
      $(this.content).on("touchstart", (function(_this) {
        return function(evt) {
          return _this._onTouchStart(evt);
        };
      })(this)).on("touchmove", (function(_this) {
        return function(evt) {
          return _this._onTouchMove(evt);
        };
      })(this)).on("touchend", (function(_this) {
        return function(evt) {
          return _this._onTouchEnd(evt);
        };
      })(this));
    }

    PullAction.prototype._getTouchPoint = function(evt) {
      var touches;
      touches = evt.originalEvent.touches;
      if (!touches.length) {
        touches = evt.originalEvent.changedTouches;
      }
      return touches[0];
    };

    PullAction.prototype._onTouchStart = function(evt) {
      var touchPoint;
      if (this._disabled) {
        this.pullState = null;
        this._watchingTouchMove = false;
      } else {
        this._scrollTop = this.content.scrollTop;
        if (this.options.pullDownPane && this._scrollTop <= 0) {
          this.pullState = "pre-down";
          this._watchingTouchMove = true;
        } else if (this.options.pullUpPane && (this._scrollTop + this.content.clientHeight) >= this.content.scrollHeight) {
          this.pullState = "pre-up";
          this._watchingTouchMove = true;
        } else {
          this.pullState = null;
          this._watchingTouchMove = false;
        }
      }
      this.pullReached = false;
      this._panStarted = 0;
      if (this._watchingTouchMove) {
        touchPoint = this._getTouchPoint(evt);
        this._touchStartX = touchPoint.pageX;
        this._touchStartY = touchPoint.pageY;
        if (cola.os.ios) {
          if (this._scrollTop < 0 || (this._scrollTop + this.content.clientHeight) > this.content.scrollHeight) {
            return false;
          }
        }
      }
    };

    PullAction.prototype._onTouchMove = function(evt) {
      var base, distanceX, distanceY, pullPane, retValue, startTheshold, touchPoint;
      if (!this._watchingTouchMove) {
        return;
      }
      touchPoint = this._getTouchPoint(evt);
      distanceX = touchPoint.pageX - this._touchStartX;
      distanceY = touchPoint.pageY - this._touchStartY;
      if (!this._panStarted) {
        if (Math.abs(distanceX) < 20 && (distanceY > 0 && this.pullState === "pre-down" || distanceY < 0 && this.pullState === "pre-up")) {
          startTheshold = this.options.startTheshold;
          if (distanceY > startTheshold && this.pullState === "pre-down") {
            this.pullState = "down";
          } else {
            distanceY < -startTheshold && (this.pullState === "pre-up" ? this.pullState = "up" : void 0);
          }
          if (this.pullState === "down" || this.pullState === "up") {
            this._panStarted = new Date();
            pullPane = this.pullState === "down" ? this.options.pullDownPane : this.options.pullUpPane;
            if ((typeof (base = this.options).pullStart === "function" ? base.pullStart(evt, pullPane, this.pullState) : void 0) === false) {
              this.pullState = null;
              this._watchingTouchMove = false;
              return;
            }
          }
          retValue = false;
        }
      }
      if (this._panStarted) {
        this._onPanMove(evt, Math.abs(distanceY));
      }
      if (retValue === false || this._panStarted) {
        evt.stopImmediatePropagation();
        return false;
      } else {

      }
    };

    PullAction.prototype._onPanMove = function(evt, distance) {
      var base, maxDistance, pullPane, pullTheshold, reached;
      distance = distance / this.options.resistance;
      this._distance = distance;
      if (this.pullState === "down") {
        maxDistance = this.pullDownDistance;
        pullTheshold = maxDistance * this.options.pullTheshold;
        reached = distance > pullTheshold;
        if (distance > maxDistance) {
          distance = maxDistance;
        }
        pullPane = this.options.pullDownPane;
        this.contentWrapper.scrollTop = maxDistance - distance;
      } else if (this.pullState === "up") {
        maxDistance = this.pullUpDistance;
        pullTheshold = maxDistance * this.options.pullTheshold;
        reached = distance > pullTheshold;
        if (distance > maxDistance) {
          distance = maxDistance;
        }
        pullPane = this.options.pullUpPane;
        this.contentWrapper.scrollTop = this.options.pullUpPane.offsetTop - this.contentWrapper.clientHeight + distance;
      }
      if (pullPane) {
        this.pullReached = reached;
        $fly(pullPane).toggleClass("reached", reached);
        if (typeof (base = this.options).pullStep === "function") {
          base.pullStep(evt, pullPane, this.pullState, distance, pullTheshold);
        }
      }
    };

    PullAction.prototype._onTouchEnd = function(evt) {
      var base, pullAction, pullPane, pullState, scrollTop;
      if (!this._panStarted) {
        return;
      }
      pullState = this.pullState;
      if (pullState === "down") {
        pullPane = this.options.pullDownPane;
      } else if (pullState === "up") {
        pullPane = this.options.pullUpPane;
      }
      if (!pullPane) {
        return;
      }
      this._disabled = true;
      $fly(pullPane).removeClass("reached");
      if (this.pullReached) {
        if (this.pullState === "down") {
          scrollTop = this.pullDownDistance * (1 - this.options.pullTheshold);
        } else {
          scrollTop = (this.options.pullUpPane.offsetTop - this.contentWrapper.clientHeight) + this.pullUpDistance * (1 - this.options.pullTheshold);
        }
        if (SAFE_PULL_EFFECT) {
          this.contentWrapper.scrollTop = scrollTop;
        } else {
          $fly(this.contentWrapper).animate({
            scrollTop: scrollTop
          }, {
            duration: 200
          });
        }
        $fly(pullPane).addClass("executing");
        pullAction = this;
        this._executePullAction(evt, pullState, function() {
          pullAction._hidePullPane(pullState);
        });
      } else {
        if (typeof (base = this.options).pullCancel === "function") {
          base.pullCancel(evt, pullPane, pullState);
        }
        this._hidePullPane(pullState);
      }
    };

    PullAction.prototype._executePullAction = function(evt, pullState, done) {
      var pullPane;
      if (this.options.pullComplete) {
        pullPane = this.pullState === "down" ? this.options.pullDownPane : this.options.pullUpPane;
        this.options.pullComplete(evt, pullPane, pullState, done);
      } else {
        done();
      }
    };

    PullAction.prototype._hidePullPane = function(pullState) {
      var contentWrapperStyle, pullAction, pullPane;
      if (pullState === "down") {
        pullPane = this.options.pullDownPane;
      } else if (pullState === "up") {
        pullPane = this.options.pullUpPane;
      }
      if (SAFE_PULL_EFFECT) {
        this.contentWrapper.scrollTop = this.pullDownDistance;
        this._disabled = false;
        $fly(pullPane).removeClass("executing");
      } else {
        pullAction = this;
        $(this.contentWrapper).animate({
          scrollTop: this.pullDownDistance
        }, {
          duration: 200,
          complete: function() {
            pullAction._disabled = false;
            $fly(pullPane).removeClass("executing");
          }
        });
      }
      if (cola.os.android && cola.browser.qqbrowser) {
        contentWrapperStyle = this.contentWrapper.style;
        if (contentWrapperStyle.marginTop) {
          contentWrapperStyle.marginTop = "";
        } else {
          contentWrapperStyle.marginTop = "0.001px";
        }
      }
    };

    return PullAction;

  })();

  SAFE_SLIDE_EFFECT = cola.os.android && !cola.browser.chrome;

  SLIDE_ANIMATION_SPEED = 200;

  LIST_SIZE_PREFIXS = ["small", "medium", "large", "xlarge", "xxlarge"];

  _createGroupArray = function() {
    var groups;
    groups = [];
    groups._grouped = true;
    return groups;
  };

  cola.ListView = (function(superClass) {
    extend(ListView, superClass);

    function ListView() {
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.tagName = "c-listView";

    ListView.CLASS_NAME = "items-view list-view";

    ListView.prototype._columnsChanged = true;

    ListView.attributes = {
      items: {
        expressionType: "repeat",
        refreshItems: true,
        setter: function(items) {
          if (this._items === items) {
            return;
          }
          this._set("bind", void 0);
          this._items = items;
        },
        getter: function() {
          return this._realItems || this._items;
        }
      },
      bind: {
        refreshItems: true,
        setter: function(bindStr) {
          this._set("items", void 0);
          return this._bindSetter(bindStr);
        }
      },
      textProperty: {
        refreshItems: true
      },
      columns: {
        refreshItems: true,
        defaultValue: "row",
        setter: function(columns) {
          this._columns = columns;
          this._columnsChanged = true;
        }
      },
      itemWidth: null,
      itemHeight: null,
      group: {
        refreshItems: true
      },
      groupCollapsible: {
        type: "boolean",
        defaultValue: true
      },
      indexBar: {
        refreshItems: true
      },
      itemSlide: {
        "enum": ["none", "left", "right", "both"],
        defaultValue: "none",
        setter: function(value) {
          var left, right;
          this._itemSlide = value;
          if (value) {
            if (value === "left") {
              left = true;
            } else if (value === "right") {
              right = true;
            } else {
              left = true;
              right = true;
            }
            this._leftItemSlide = left;
            return this._rightItemSlide = right;
          }
        }
      }
    };

    ListView.events = {
      getGroupString: null,
      itemSlideStart: null,
      itemSlideStep: null,
      itemSlideComplete: null,
      itemSlideCancel: null,
      itemSlidePaneInit: null,
      itemSlidePaneShow: null,
      itemSlidePaneHide: null
    };

    ListView.TEMPLATES = {
      "default": {
        tagName: "li",
        "c-bind": "$default"
      },
      "group": {
        tagName: "ul",
        content: {
          tagName: "ul"
        }
      },
      "group-header": {
        tagName: "li",
        "c-bind": "group.name"
      }
    };

    ListView.prototype.destroy = function() {
      ListView.__super__.destroy.call(this);
      delete this._topGroupDom;
      if (this._indexBarRelocateTimer) {
        clearInterval(this._indexBarRelocateTimer);
      }
      delete this._itemSlidePane;
      delete this._slideItemDom;
    };

    ListView.prototype._initDom = function(dom) {
      ListView.__super__._initDom.call(this, dom);
      $fly(this._doms.itemsWrapper).delegate(".group-header", "click", (function(_this) {
        return function(evt) {
          return _this._onGroupHeaderClick(evt);
        };
      })(this));
      cola.util.delay(this, "initItemSlide", 200, this._initItemSlide);
    };

    ListView.prototype._getItems = function() {
      if (this._items) {
        return {
          items: this._items
        };
      } else {
        return ListView.__super__._getItems.call(this);
      }
    };

    ListView.prototype._groupItems = function(items) {
      var currentGroup, groups, hasGetGroupStringEvent, list;
      groups = _createGroupArray();
      currentGroup = null;
      hasGetGroupStringEvent = this.getListeners("getGroupString");
      list = this;
      cola.each(items, function(item) {
        var eventArg, groupProp, groupString;
        if (hasGetGroupStringEvent) {
          eventArg = {
            item: item,
            result: null
          };
          list.fire("getGroupString", list, eventArg);
          groupString = eventArg.result;
        } else {
          groupString = null;
          groupProp = list.group;
          if (groupProp && typeof groupProp === "string") {
            if (item instanceof cola.Entity) {
              groupString = item.get(groupProp);
            } else if (typeof item === "object") {
              groupString = item != null ? item[groupProp] : void 0;
            } else if (item) {
              groupString = item + "";
            }
          }
        }
        if (groupString === (currentGroup != null ? currentGroup.name : void 0)) {
          currentGroup.items.push(item);
        } else {
          if (currentGroup) {
            groups.push(currentGroup);
          }
          currentGroup = {
            _itemType: "group",
            _alias: "group",
            name: groupString || "#",
            items: [item]
          };
        }
      });
      if (currentGroup) {
        groups.push(currentGroup);
      }
      return groups;
    };

    ListView.prototype._convertItems = function(items) {
      items = ListView.__super__._convertItems.call(this, items);
      if (this._group && items) {
        items = this._groupItems(items);
      }
      return items;
    };

    ListView.prototype._doRefreshDom = function(dom) {
      var classNames, column, columns, i, itemsWrapper, l, len1;
      if (!this._dom) {
        return;
      }
      if (this._columnsChanged) {
        delete this._columnsChanged;
        classNames = ["items"];
        columns = this._columns || "row";
        columns = columns.split(" ");
        i = 0;
        for (l = 0, len1 = columns.length; l < len1; l++) {
          column = columns[l];
          if (column === "") {
            continue;
          }
          if (column === "row") {
            classNames.push(LIST_SIZE_PREFIXS[i] + "-row-list");
          } else {
            classNames.push(LIST_SIZE_PREFIXS[i] + "-block-grid-" + column);
          }
          i++;
          if (i >= LIST_SIZE_PREFIXS.length) {
            break;
          }
        }
        itemsWrapper = this._doms.itemsWrapper;
        if (this._group) {
          this._columnsClassNames = classNames;
          itemsWrapper.className = "items";
        } else {
          itemsWrapper.className = classNames.join(" ");
        }
      }
      ListView.__super__._doRefreshDom.call(this, dom);
      this._classNamePool.toggle("has-index-bar", !!this._indexBar);
    };

    ListView.prototype._refreshItems = function() {
      var dom, itemsWrapper, ref;
      ListView.__super__._refreshItems.call(this);
      if (this._dom) {
        if (!this._group) {
          if ((ref = this._doms.floatGroupHeaderWrapper) != null) {
            ref.style.display = "none";
          }
        }
        if (this._indexBar && this._group && this._realItems) {
          this._refreshIndexBar();
        } else if (this._doms.indexBar) {
          $fly(this._doms.indexBar).hide();
        }
        if (!cola.os.mobile && !this._indexBarRelocateTimer) {
          itemsWrapper = this._doms.itemsWrapper;
          dom = this._dom;
          this._indexBarRelocateTimer = setInterval(function() {
            $fly(dom).toggleClass("v-scroll", itemsWrapper.scrollHeight > itemsWrapper.clientHeight);
          }, 500);
        }
      }
    };

    ListView.prototype._getDefaultBindPath = function(item) {
      if (this._textProperty) {
        return (item._alias || this._alias) + "." + this._textProperty;
      }
    };

    ListView.prototype._createNewItem = function(itemType, item) {
      var $itemDom, itemDom, klass, template;
      template = this._getTemplate(itemType);
      if (template) {
        itemDom = this._cloneTemplate(template);
      } else {
        itemDom = document.createElement("li");
        itemDom.setAttribute("c-bind", "$default");
      }
      if (itemType === "group") {
        klass = "list group";
      } else if (itemType === "group-header") {
        klass = "list group-header";
        if (this._groupCollapsible) {
          klass += " collapsible";
        }
      } else {
        klass = "list item " + itemType;
      }
      itemDom._itemType = itemType;
      $itemDom = $fly(itemDom);
      $itemDom.addClass(klass);
      if (this._itemWidth) {
        $itemDom.width(this._itemWidth);
      }
      if (this._itemHeight) {
        $itemDom.height(this._itemHeight);
      }
      return itemDom;
    };

    ListView.prototype._refreshItemDom = function(itemDom, item, parentScope) {
      if (itemDom._itemType === "group") {
        return this._refreshGroupDom(itemDom, item, parentScope);
      } else {
        return ListView.__super__._refreshItemDom.call(this, itemDom, item, parentScope);
      }
    };

    ListView.prototype._refreshGroupDom = function(groupDom, group, parentScope) {
      var currentItemDom, documentFragment, groupHeaderDom, groupId, groupScope, item, itemDom, itemType, itemsWrapper, l, len1, nextItemDom, oldGroup, ref;
      if (parentScope == null) {
        parentScope = this._itemsScope;
      }
      groupId = cola.Entity._getEntityId(group);
      groupScope = cola.util.userData(groupDom, "scope");
      if (!groupScope) {
        groupDom._itemScope = groupScope = new cola.ItemScope(parentScope, group._alias);
        parentScope.regItemScope(groupId, groupScope);
        groupScope.data.setTargetData(group, true);
        cola.util.userData(groupDom, "scope", groupScope);
        cola.util.userData(groupDom, "item", group);
      } else {
        oldGroup = cola.util.userData(groupDom, "item");
        if (oldGroup !== groupScope.data.getTargetData()) {
          if (groupDom._itemId) {
            delete groupDom._itemId;
          }
          groupScope.data.setTargetData(group);
          cola.util.userData(groupDom, "item", group);
        }
      }
      if (groupId) {
        groupDom._itemId = groupId;
        this._itemDomMap[groupId] = groupDom;
      } else {
        delete groupDom._itemId;
      }
      if (!groupDom._headerCreated) {
        groupDom._headerCreated = true;
        itemsWrapper = groupDom.firstChild;
        groupHeaderDom = this._createNewItem("group-header", group);
        this._templateContext.defaultPath = group._alias;
        cola.xRender(groupHeaderDom, groupScope, this._templateContext);
        groupDom.insertBefore(groupHeaderDom, itemsWrapper);
        cola.util.userData(groupHeaderDom, "item", group);
      } else {
        itemsWrapper = groupDom.lastChild;
      }
      documentFragment = null;
      currentItemDom = itemsWrapper.firstChild;
      ref = group.items;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        itemType = this._getItemType(item);
        itemDom = null;
        if (currentItemDom) {
          while (currentItemDom) {
            if (currentItemDom._itemType === itemType) {
              break;
            } else {
              nextItemDom = currentItemDom.nextSibling;
              groupDom.removeChild(currentItemDom);
              currentItemDom = nextItemDom;
            }
          }
          if (currentItemDom) {
            itemDom = currentItemDom;
            currentItemDom = currentItemDom.nextSibling;
          }
        }
        if (itemDom) {
          this._refreshItemDom(itemDom, item);
        } else {
          itemDom = this._createNewItem(itemType, item);
          this._refreshItemDom(itemDom, item);
          if (documentFragment == null) {
            documentFragment = document.createDocumentFragment();
          }
          documentFragment.appendChild(itemDom);
        }
      }
      if (currentItemDom) {
        itemDom = currentItemDom;
        while (itemDom) {
          nextItemDom = itemDom.nextSibling;
          itemsWrapper.removeChild(itemDom);
          if (itemDom._itemId) {
            delete this._itemDomMap[itemDom._itemId];
          }
          itemDom = nextItemDom;
        }
      }
      if (this._columnsClassNames) {
        itemsWrapper.className = this._columnsClassNames.join(" ");
      } else {
        itemsWrapper.className = "items";
      }
      if (documentFragment) {
        itemsWrapper.appendChild(documentFragment);
      }
    };

    ListView.prototype._onItemInsert = function(arg) {
      if (this._group) {
        this._refreshItems();
      } else {
        ListView.__super__._onItemInsert.call(this, arg);
      }
    };

    ListView.prototype._onItemRemove = function(arg) {
      if (this._group) {
        this._refreshItems();
      } else {
        ListView.__super__._onItemRemove.call(this, arg);
      }
    };

    ListView.prototype._onItemsWrapperScroll = function() {
      var floatGroupHeader, gap, group, nextOffsetTop, offset, ref, ref1, ref2, scrollTop, topGroupDom;
      ListView.__super__._onItemsWrapperScroll.call(this);
      if (!this._group) {
        return;
      }
      scrollTop = this._doms.itemsWrapper.scrollTop;
      if (scrollTop <= 0) {
        if ((ref = this._doms.floatGroupHeaderWrapper) != null) {
          ref.style.display = "none";
        }
        return;
      }
      topGroupDom = this._findTopGroupDom(scrollTop);
      if (topGroupDom) {
        if (topGroupDom.offsetTop === scrollTop) {
          if ((ref1 = this._doms.floatGroupHeaderWrapper) != null) {
            ref1.style.display = "none";
          }
          return;
        }
        group = cola.util.userData(topGroupDom, "item");
        floatGroupHeader = this._getFloatGroupHeader(group);
        gap = 1;
        nextOffsetTop = (ref2 = topGroupDom.nextSibling) != null ? ref2.offsetTop : void 0;
        if (nextOffsetTop > 0 && nextOffsetTop - scrollTop - gap < this._floatGroupHeaderHeight) {
          offset = this._floatGroupHeaderHeight - (nextOffsetTop - scrollTop - gap);
          floatGroupHeader.style.top = (this._floatGroupHeaderDefaultTop - offset) + "px";
          this._floatGroupHeaderMoved = true;
        } else if (this._floatGroupHeaderMoved) {
          floatGroupHeader.style.top = this._floatGroupHeaderDefaultTop + "px";
          delete this._floatGroupHeaderMoved;
        }
      }
    };

    ListView.prototype._getFloatGroupHeader = function(group) {
      var floatGroupHeader, floatGroupHeaderWrapper, groupScope, ref;
      floatGroupHeaderWrapper = this._doms.floatGroupHeaderWrapper;
      if (!floatGroupHeaderWrapper) {
        groupScope = new cola.ItemScope(this._itemsScope, group._alias);
        groupScope.data.setTargetData(group, true);
        floatGroupHeader = this._createNewItem("group-header", group);
        cola.util.userData(floatGroupHeader, "scope", groupScope);
        this._templateContext.defaultPath = group._alias;
        cola.xRender(floatGroupHeader, groupScope);
        floatGroupHeaderWrapper = $.xCreate({
          tagName: "ul",
          "class": "items float-group-header",
          content: floatGroupHeader
        });
        this._dom.appendChild(floatGroupHeaderWrapper);
        this._doms.floatGroupHeaderWrapper = floatGroupHeaderWrapper;
        this._floatGroupHeaderDefaultTop = ((ref = this._doms.pullDownPane) != null ? ref.offsetHeight : void 0) || 0;
        this._floatGroupHeaderHeight = floatGroupHeaderWrapper.offsetHeight;
        floatGroupHeaderWrapper.style.top = this._floatGroupHeaderDefaultTop + "px";
      } else {
        floatGroupHeader = floatGroupHeaderWrapper.firstChild;
        groupScope = cola.util.userData(floatGroupHeader, "scope");
        groupScope.data.setTargetData(group);
        if (floatGroupHeaderWrapper.style.display === "none") {
          floatGroupHeaderWrapper.style.display = "";
        }
      }
      return floatGroupHeaderWrapper;
    };

    ListView.prototype._findTopGroupDom = function(scrollTop) {
      var currentGroupDom, currentGroupDomTop, groupDom, groupDomOffsetTop, groups;
      groups = this._realItems;
      if (!(groups != null ? groups.length : void 0)) {
        return;
      }
      currentGroupDom = this._topGroupDom || this._doms.itemsWrapper.firstChild;
      currentGroupDomTop = currentGroupDom.offsetTop;
      if (currentGroupDomTop <= scrollTop) {
        groupDom = currentGroupDom.nextSibling;
        while (groupDom) {
          groupDomOffsetTop = groupDom.offsetTop;
          if (groupDomOffsetTop > scrollTop) {
            groupDom = groupDom.previousSibling;
            if (this._topGroupDom !== groupDom) {
              this._topGroupDom = groupDom;
            }
            break;
          }
          groupDom = groupDom.nextSibling;
        }
      } else {
        groupDom = currentGroupDom.previousSibling;
        while (groupDom) {
          groupDomOffsetTop = groupDom.offsetTop;
          if (groupDomOffsetTop <= scrollTop) {
            this._topGroupDom = groupDom;
            break;
          }
          groupDom = groupDom.previousSibling;
        }
      }
      return groupDom;
    };

    ListView.prototype._onGroupHeaderClick = function(evt) {
      var groupDom, item, itemDom;
      itemDom = evt.currentTarget;
      item = cola.util.userData(itemDom, "item");
      groupDom = itemDom.parentNode;
      if (!item._collapsed) {
        item._collapsed = true;
        $fly(itemDom).addClass("collapsed");
        $fly(groupDom).css("overflow", "hidden").animate({
          height: itemDom.offsetHeight
        }, {
          duration: 150,
          easing: "swing"
        });
      } else {
        item._collapsed = false;
        $fly(itemDom).removeClass("collapsed");
        $fly(groupDom).animate({
          height: groupDom.scrollHeight
        }, {
          duration: 150,
          easing: "swing",
          complete: function() {
            groupDom.style.height = "";
            groupDom.style.overflow = "";
          }
        });
      }
      return false;
    };

    ListView.prototype._createPullAction = function() {
      var indexBar;
      ListView.__super__._createPullAction.call(this);
      if (this._doms.indexBar) {
        indexBar = this._doms.indexBar;
        if (this._pullAction.pullDownDistance && $fly(indexBar).css("position") === "absolute") {
          indexBar.style.marginTop = this._pullAction.pullDownDistance + "px";
          indexBar.style.marginBottom = -this._pullAction.pullDownDistance + "px";
        }
      }
    };

    ListView.prototype._refreshIndexBar = function() {
      var clearCurrent, currentItemDom, documentFragment, goIndex, group, groups, i, indexBar, itemDom, l, len1, list, nextDom;
      list = this;
      indexBar = this._doms.indexBar;
      if (!indexBar) {
        goIndex = function(target, animate) {
          var currentIndexDom, group, groupDom, groupId, indexDom, itemsWrapper, timestamp;
          indexDom = target;
          while (indexDom && indexDom !== indexBar) {
            if (indexDom._groupIndex >= 0) {
              break;
            }
            indexDom = indexDom.parentNode;
          }
          if ((indexDom != null ? indexDom._groupIndex : void 0) >= 0) {
            timestamp = new Date();
            if (!list._currentIndex || list._currentIndex !== indexDom._groupIndex && timestamp - list._currentIndexTimestamp > 100) {
              list._currentIndex = indexDom._groupIndex;
              list._currentIndexTimestamp = timestamp;
              currentIndexDom = indexBar.querySelector(".current");
              if (currentIndexDom) {
                $fly(currentIndexDom).removeClass("current");
              }
              $fly(indexDom).addClass("current");
              group = list._realItems[indexDom._groupIndex];
              groupId = cola.Entity._getEntityId(group);
              if (groupId) {
                groupDom = list._itemDomMap[groupId];
                if (groupDom) {
                  itemsWrapper = list._doms.itemsWrapper;
                  if (animate) {
                    $(itemsWrapper).animate({
                      scrollTop: groupDom.offsetTop
                    }, {
                      duration: 150,
                      easing: "swing",
                      queue: true
                    });
                  } else {
                    itemsWrapper.scrollTop = groupDom.offsetTop;
                  }
                }
              }
            }
          }
        };
        clearCurrent = function() {
          setTimeout(function() {
            var currentIndexDom;
            currentIndexDom = indexBar.querySelector(".current");
            if (currentIndexDom) {
              $fly(currentIndexDom).removeClass("current");
            }
          }, 300);
        };
        this._doms.indexBar = indexBar = $.xCreate({
          tagName: "div",
          "class": "index-bar",
          mousedown: function(evt) {
            return goIndex(evt.target, true);
          },
          mouseup: clearCurrent,
          touchstart: function(evt) {
            return goIndex(evt.target, true);
          },
          touchmove: function(evt) {
            var target, touch;
            touch = evt.originalEvent.touches[0];
            target = document.elementFromPoint(touch.pageX, touch.pageY);
            goIndex(target, true);
            return false;
          },
          touchend: clearCurrent
        });
        this._dom.appendChild(indexBar);
      } else {
        $fly(indexBar).show();
      }
      documentFragment = null;
      currentItemDom = indexBar.firstChild;
      groups = this._realItems;
      for (i = l = 0, len1 = groups.length; l < len1; i = ++l) {
        group = groups[i];
        if (currentItemDom) {
          itemDom = currentItemDom;
          currentItemDom = currentItemDom.nextSibling;
        } else {
          itemDom = $.xCreate({
            tagName: "div",
            "class": "index",
            content: "^span"
          });
          if (documentFragment == null) {
            documentFragment = document.createDocumentFragment();
          }
          documentFragment.appendChild(itemDom);
        }
        $fly(itemDom.firstChild).text(group.name);
        itemDom._groupIndex = i;
      }
      if (documentFragment) {
        indexBar.appendChild(documentFragment);
      } else {
        while (currentItemDom) {
          nextDom = currentItemDom.nextSibling;
          indexBar.removeChild(currentItemDom);
          currentItemDom = nextDom;
        }
      }
    };

    ListView.prototype._initItemSlide = function() {
      var itemScope, itemsWrapper, leftSlidePaneTemplate, rightSlidePaneTemplate;
      leftSlidePaneTemplate = this._getTemplate("slide-left-pane");
      rightSlidePaneTemplate = this._getTemplate("slide-right-pane");
      if (!(leftSlidePaneTemplate || rightSlidePaneTemplate)) {
        return;
      }
      itemsWrapper = this._doms.itemsWrapper;
      if (this._itemSlide && this._itemSlide !== "none") {
        $fly(itemsWrapper).on("touchstart", (function(_this) {
          return function(evt) {
            return _this._onItemsWrapperTouchStart(evt);
          };
        })(this)).on("touchmove", (function(_this) {
          return function(evt) {
            return _this._onItemsWrapperTouchMove(evt);
          };
        })(this)).on("touchend", (function(_this) {
          return function(evt) {
            return _this._onItemsWrapperTouchEnd(evt);
          };
        })(this));
      }
      itemScope = new cola.ItemScope(this._itemsScope, this._alias);
      this._templateContext.defaultPath = this._alias;
      if (leftSlidePaneTemplate) {
        $fly(leftSlidePaneTemplate).addClass("item-slide-pane protected").css("left", "100%").click((function(_this) {
          return function() {
            if (_this._itemSlideState === "waiting") {
              _this.hideItemSlidePane();
            }
          };
        })(this));
        cola.xRender(leftSlidePaneTemplate, itemScope, this._templateContext);
        cola.util.userData(leftSlidePaneTemplate, "scope", itemScope);
        itemsWrapper.appendChild(leftSlidePaneTemplate);
      }
      if (rightSlidePaneTemplate) {
        $fly(rightSlidePaneTemplate).addClass("item-slide-pane protected").css("right", "100%").click((function(_this) {
          return function() {
            if (_this._itemSlideState === "waiting") {
              _this.hideItemSlidePane();
            }
          };
        })(this));
        cola.xRender(rightSlidePaneTemplate, itemScope, this._templateContext);
        cola.util.userData(rightSlidePaneTemplate, "scope", itemScope);
        itemsWrapper.appendChild(rightSlidePaneTemplate);
      }
    };

    ListView.prototype._getTouchPoint = function(evt) {
      var touches;
      touches = evt.originalEvent.touches;
      if (!touches.length) {
        touches = evt.originalEvent.changedTouches;
      }
      return touches[0];
    };

    ListView.prototype._onItemsWrapperTouchStart = function(evt) {
      var arg, item, itemDom, touch;
      this._start = new Date;
      if (!(this._itemSlide && (!this._itemSlideState || this._itemSlideState === "closed" || this._itemSlideState === "ignore"))) {
        return;
      }
      itemDom = this._findItemDom(evt.target);
      if (itemDom) {
        if (itemDom.offsetWidth < this._doms.itemsWrapper.clientWidth * 0.6) {
          return;
        }
        item = cola.util.userData(itemDom, "item");
      }
      if (!item) {
        return;
      }
      if (this.getListeners("itemSlideStart")) {
        arg = {
          event: evt,
          item: item
        };
        if (this.fire("itemSlideStart", this, arg) === false) {
          return;
        }
      } else {
        if (this._getItemType(item) === "group") {
          return;
        }
      }
      this._slideItemDom = itemDom;
      this._itemSlideState = null;
      touch = evt.originalEvent.touches[0];
      this._touchStartX = touch.pageX;
      this._touchStartY = touch.pageY;
      this._touchTimestamp = new Date();
    };

    ListView.prototype._initItemSlidePane = function(itemDom, direction) {
      var indexBar, item, itemScope, oldSlidePane, slidePane;
      item = cola.util.userData(itemDom, "item");
      if (direction !== this._itemSlideDirection) {
        oldSlidePane = this._itemSlidePane;
        if (oldSlidePane) {
          $fly(oldSlidePane).hide();
          if (!SAFE_SLIDE_EFFECT) {
            $fly(oldSlidePane).css("transform", "");
          }
        }
        this._itemSlideDirection = direction;
        this._itemSlidePane = slidePane = this._getTemplate("slide-" + direction + "-pane");
        if (slidePane) {
          itemScope = cola.util.userData(slidePane, "scope");
          itemScope.data.setTargetData(item);
          if (this.getListeners("itemSlidePaneInit")) {
            this.fire("itemSlidePaneInit", this, {
              item: item,
              direction: direction,
              slidePane: slidePane
            });
          }
          if (direction === "left" && this._maxDistanceAdjust === void 0 && this._indexBar) {
            indexBar = this._doms.indexBar;
            if (indexBar) {
              this._maxDistanceAdjust = indexBar.offsetWidth + parseInt($fly(indexBar).css("right"));
            } else {
              this._maxDistanceAdjust = 0;
            }
          }
          $fly(slidePane).css({
            height: itemDom.offsetHeight,
            top: itemDom.offsetTop,
            "pointer-events": "none"
          }).show();
          this._maxSlideDistance = slidePane.offsetWidth;
          if (direction === "left") {
            this._maxSlideDistance += this._maxDistanceAdjust || 0;
          }
        } else {
          this._maxSlideDistance = itemDom.offsetWidth;
        }
      } else {
        slidePane = this._itemSlidePane;
      }
      return slidePane;
    };

    ListView.prototype._onItemsWrapperTouchMove = function(evt) {
      var direction, distanceX, distanceY, factor, item, itemDom, slideDom, slidePane, timestamp, touchPoint, translate;
      if (!this._itemSlide) {
        return;
      }
      if (this._itemSlideState === "prevent") {
        evt.stopImmediatePropagation();
        return false;
      }
      if (!(!this._itemSlideState || this._itemSlideState === "slide")) {
        return;
      }
      touchPoint = this._getTouchPoint(evt);
      this._touchLastX = touchPoint.pageX;
      this._touchLastY = touchPoint.pageY;
      distanceX = this._touchLastX - this._touchStartX;
      distanceY = this._touchLastY - this._touchStartY;
      timestamp = new Date();
      itemDom = this._slideItemDom;
      if (!this._itemSlideState) {
        if (Math.abs(distanceX) > 5 && Math.abs(distanceX) > Math.abs(distanceY)) {
          this._itemSlideState = "slide";
          this._itemSlideDirection = null;
          if (cola.browser.chrome) {
            itemDom.style.opacity = 0.999;
          }
        } else {
          this._itemSlideState = "ignore";
          return;
        }
      }
      this._touchMoveSpeed = distanceX / (timestamp - this._touchLastTimstamp);
      this._touchLastTimstamp = timestamp;
      if (distanceX > 0) {
        direction = "right";
        factor = 1;
      } else {
        direction = "left";
        factor = -1;
      }
      if (itemDom.firstChild && itemDom.firstChild === itemDom.lastChild) {
        slideDom = itemDom.firstChild;
      } else {
        slideDom = itemDom;
      }
      slidePane = this._initItemSlidePane(itemDom, direction);
      if (slidePane) {
        if (Math.abs(distanceX) <= this._maxSlideDistance) {
          this._currentSlideDistance = distanceX;
        } else {
          this._currentSlideDistance = this._maxSlideDistance * factor;
        }
        if (!SAFE_SLIDE_EFFECT) {
          translate = "translate(" + this._currentSlideDistance + "px,0)";
          $fly(slideDom).css("transform", translate);
          $fly(slidePane).css("transform", translate);
        }
        if (this.getListeners("itemSlideStep")) {
          item = cola.util.userData(itemDom, "item");
          this.fire("itemSlideStep", this, {
            event: evt,
            item: item,
            direction: direction,
            distance: distanceX,
            speed: this._touchMoveSpeed
          });
        }
      }
      evt.stopImmediatePropagation();
      return false;
    };

    ListView.prototype._onItemsWrapperTouchEnd = function(evt) {
      var currentDistance, direction, itemDom, maxDistance, openAnimate, opened, slideDom, slidePane;
      if (this._itemSlideState !== "slide") {
        return;
      }
      currentDistance = this._currentSlideDistance;
      if (currentDistance === 0) {
        return;
      }
      itemDom = this._slideItemDom;
      maxDistance = this._maxSlideDistance;
      opened = false;
      if (Math.abs(currentDistance) === maxDistance) {
        opened = true;
      } else if (Math.abs(currentDistance) / maxDistance > 0.5) {
        opened = true;
        openAnimate = true;
      } else if (Math.abs(this._touchMoveSpeed) > 5) {
        opened = true;
        openAnimate = true;
      }
      if (cola.browser.chrome) {
        itemDom.style.opacity = "";
      }
      direction = this._itemSlideDirection;
      if (opened) {
        this.fire("itemSlideComplete", this, {
          event: evt,
          item: cola.util.userData(itemDom, "item"),
          direction: direction,
          distance: this._currentSlideDistance,
          speed: this._touchMoveSpeed
        });
      } else {
        this.fire("itemSlideCancel", this, {
          direction: direction,
          event: evt,
          item: cola.util.userData(itemDom, "item")
        });
      }
      if (itemDom.firstChild && itemDom.firstChild === itemDom.lastChild) {
        slideDom = itemDom.firstChild;
      } else {
        slideDom = itemDom;
      }
      if (direction === "left") {
        if (!SAFE_SLIDE_EFFECT) {
          $(slideDom).transit({
            x: 0,
            duration: SLIDE_ANIMATION_SPEED * 2
          });
        }
      } else {
        $(slideDom).transit({
          x: maxDistance,
          duration: SLIDE_ANIMATION_SPEED
        });
      }
      if (opened) {
        slidePane = this._itemSlidePane;
        if (slidePane) {
          this._showItemSlidePane(itemDom, direction, slidePane, openAnimate);
        } else {
          this._itemSlideState = "closed";
        }
      } else {
        this._hideItemSlidePane(false);
      }
    };

    ListView.prototype._showItemSlidePane = function(itemDom, direction, slidePane, openAnimate) {
      var $slidePane, factor;
      $fly(this._doms.itemsWrapper).dimmer({
        opacity: 0.0001,
        duration: 0,
        closable: false
      }).dimmer("show").find(">.ui.dimmer").on("touchstart.hide", (function(_this) {
        return function() {
          if (_this._itemSlideState === "waiting") {
            _this.hideItemSlidePane();
          }
        };
      })(this));
      $slidePane = $(slidePane);
      if (openAnimate || SAFE_SLIDE_EFFECT) {
        factor = direction === "left" ? -1 : 1;
        $slidePane.show().transit({
          x: this._maxSlideDistance * factor,
          duration: SLIDE_ANIMATION_SPEED,
          complete: (function(_this) {
            return function() {
              $slidePane.css("pointer-events", "");
              _this._onItemSlidePaneShow(direction, slidePane, itemDom);
            };
          })(this)
        });
      } else {
        $slidePane.css("pointer-events", "");
        this._onItemSlidePaneShow(direction, slidePane, itemDom);
      }
    };

    ListView.prototype._hideItemSlidePane = function(opened, animation) {
      var direction, itemDom, slideDom, slidePane;
      this._itemSlideState = "closing";
      itemDom = this._slideItemDom;
      slidePane = this._itemSlidePane;
      direction = this._itemSlideDirection;
      if (direction === "right") {
        if (itemDom.firstChild && itemDom.firstChild === itemDom.lastChild) {
          slideDom = itemDom.firstChild;
        } else {
          slideDom = itemDom;
        }
        $(slideDom).transit({
          x: 0,
          duration: SLIDE_ANIMATION_SPEED
        });
      }
      $fly(this._doms.itemsWrapper).dimmer("hide");
      if (slidePane) {
        $(slidePane).transit({
          x: 0,
          duration: animation ? SLIDE_ANIMATION_SPEED : 0,
          complete: (function(_this) {
            return function() {
              $fly(slidePane).hide();
              delete _this._itemSlidePane;
              _this._onItemSlidePaneHide(opened, direction, slidePane, itemDom);
            };
          })(this)
        });
      } else {
        this._onItemSlidePaneHide(opened, direction, slidePane, itemDom);
      }
    };

    ListView.prototype._onItemSlidePaneShow = function(direction, slidePane, itemDom) {
      this._itemSlideState = "waiting";
      this.fire("itemSlidePaneShow", this, {
        item: cola.util.userData(itemDom, "item"),
        direction: direction,
        slidePane: slidePane
      });
    };

    ListView.prototype._onItemSlidePaneHide = function(opened, direction, slidePane, itemDom) {
      this._itemSlideDirection = null;
      this._itemSlideState = "closed";
      this._slideItemDom = null;
      if (opened) {
        this.fire("itemSlidePaneHide", this, {
          item: cola.util.userData(itemDom, "item"),
          direction: direction,
          slidePane: slidePane
        });
      }
    };

    ListView.prototype.showItemSlidePane = function(item, direction) {
      var entityId, itemDom, slidePane;
      entityId = cola.Entity._getEntityId(item);
      itemDom = this._itemDomMap[entityId];
      slidePane = this._initItemSlidePane(itemDom, direction);
      if (slidePane) {
        this._slideItemDom = itemDom;
        this._showItemSlidePane(itemDom, direction, slidePane, true);
      }
    };

    ListView.prototype.hideItemSlidePane = function(animation) {
      this._hideItemSlidePane(true, animation);
    };

    return ListView;

  })(cola.AbstractList);

  cola.registerWidget(cola.ListView);

  _getEntityId = cola.Entity._getEntityId;

  cola.CascadeBind = (function(superClass) {
    extend(CascadeBind, superClass);

    CascadeBind.attributes = {
      expression: {
        setter: function(expression) {
          expression = cola._compileExpression(expression, "repeat");
          if (expression) {
            if (!expression.repeat) {
              throw new cola.Exception("\"" + bindStr + "\" is not a repeat expression.");
            }
          } else {
            delete this._alias;
          }
          this._expression = expression;
        }
      },
      recursive: null,
      child: {
        setter: function(child) {
          if (child && !(child instanceof cola.CascadeBind)) {
            child = new this.constructor(this._widget, child);
          }
          this._child = child;
        }
      },
      hasChildProperty: null
    };

    function CascadeBind(widget, config) {
      this._widget = widget;
      CascadeBind.__super__.constructor.call(this, config);
    }

    CascadeBind.prototype._wrapChildItems = function(parentNode, recursiveItems, originRecursiveItems, childItems, originChildItems) {
      var args, id, itemsScope, node, nodeCache, nodeMap, nodeType, nodes;
      nodes = [];
      nodeType = this.constructor.NODE_TYPE;
      nodeCache = parentNode._nodeMap;
      nodeMap = {};
      if (recursiveItems) {
        cola.each(recursiveItems, (function(_this) {
          return function(item) {
            var id, node;
            if (nodeCache) {
              id = _getEntityId(item);
              if (id) {
                node = nodeCache[id];
                if ((node != null ? node._bind : void 0) === _this) {
                  delete nodeCache[id];
                } else {
                  node = null;
                }
              }
            }
            if (node == null) {
              node = new nodeType(_this, item);
            }
            node._parent = parentNode;
            nodeMap[node._id] = node;
            nodes.push(node);
          };
        })(this));
      }
      if (childItems) {
        cola.each(childItems, (function(_this) {
          return function(item) {
            var id, node;
            if (nodeCache) {
              id = _getEntityId(item);
              if (id) {
                node = nodeCache[id];
                if ((node != null ? node._bind : void 0) === _this) {
                  delete nodeCache[id];
                } else {
                  node = null;
                }
              }
            }
            if (node == null) {
              node = new nodeType(_this._child, item);
            }
            node._parent = parentNode;
            node._scope = parentNode._scope;
            nodes.push(node);
          };
        })(this));
      }
      for (id in nodeCache) {
        node = nodeCache[id];
        node.destroy();
      }
      parentNode._nodeMap = nodeMap;
      parentNode._children = nodes;
      delete parentNode._hasChild;
      itemsScope = parentNode._itemsScope;
      if (itemsScope) {
        args = [nodes];
        if (recursiveItems) {
          args.push(originRecursiveItems || recursiveItems);
        }
        if (childItems) {
          args.push(originChildItems || childItems);
        }
        itemsScope._setItems.apply(itemsScope, args);
      }
    };

    CascadeBind.prototype.retrieveChildNodes = function(parentNode, callback, dataCtx) {
      var base, childItems, childLoader, funcs, hasChild, isRoot, items, originChildItems, originRecursiveItems, recursiveItems, recursiveLoader, ref, ref1;
      isRoot = !parentNode._parent;
      hasChild = false;
      funcs = [];
      if (this._recursive || isRoot) {
        if (dataCtx == null) {
          dataCtx = {};
        }
        items = this._expression.evaluate(parentNode._scope, "async", dataCtx);
        if (items === void 0 && dataCtx.unloaded) {
          recursiveLoader = (ref = dataCtx.providerInvokers) != null ? ref[0] : void 0;
          if (recursiveLoader) {
            funcs.push(function(callback) {
              return recursiveLoader.invokeAsync(callback);
            });
          }
        } else {
          recursiveItems = items;
          originRecursiveItems = dataCtx.originData;
          if (recursiveItems) {
            if (recursiveItems instanceof cola.EntityList) {
              hasChild = recursiveItems.entityCount > 0;
            } else {
              hasChild = recursiveItems.length > 0;
            }
          }
        }
      }
      if (this._child && !isRoot) {
        if (dataCtx == null) {
          dataCtx = {};
        }
        items = this._child._expression.evaluate(parentNode._scope, "async", dataCtx);
        if (items === void 0 && dataCtx.unloaded) {
          childLoader = (ref1 = dataCtx.providerInvokers) != null ? ref1[0] : void 0;
          if (childLoader) {
            funcs.push(function(callback) {
              return childLoader.invokeAsync(callback);
            });
          }
        } else {
          childItems = items;
          originChildItems = dataCtx.originData;
          hasChild = true;
        }
      }
      if (funcs.length && callback) {
        cola.util.waitForAll(funcs, {
          scope: this,
          complete: function(success, result) {
            var base;
            if (success) {
              hasChild = false;
              if (this._recursive || isRoot) {
                dataCtx = {};
                recursiveItems = this._expression.evaluate(parentNode._scope, "never", dataCtx);
                originRecursiveItems = dataCtx.originData;
                if (recursiveItems) {
                  if (recursiveItems instanceof cola.EntityList) {
                    hasChild = recursiveItems.entityCount > 0;
                  } else {
                    hasChild = recursiveItems.length > 0;
                  }
                }
              }
              if (this._child && !isRoot) {
                hasChild = true;
                dataCtx = {};
                childItems = this._child._expression.evaluate(parentNode._scope, "never", dataCtx);
                originChildItems = dataCtx.originData;
              }
              if (hasChild) {
                this._wrapChildItems(parentNode, recursiveItems, originRecursiveItems, childItems, originChildItems);
              } else {
                parentNode._hasChild = false;
              }
              if (typeof (base = parentNode._itemsScope).onItemsRefresh === "function") {
                base.onItemsRefresh();
              }
              cola.callback(callback, true);
            } else {
              cola.callback(callback, false, result);
            }
          }
        });
      } else {
        if (hasChild) {
          this._wrapChildItems(parentNode, recursiveItems, originRecursiveItems, childItems, originChildItems);
        } else {
          parentNode._hasChild = false;
        }
        if (typeof (base = parentNode._itemsScope).onItemsRefresh === "function") {
          base.onItemsRefresh();
        }
        if (callback) {
          cola.callback(callback, true);
        }
      }
    };

    CascadeBind.prototype.hasChildItems = function(parentScope) {
      var dataCtx, hasChild, items;
      if (this._recursive) {
        dataCtx = {};
        items = this._expression.evaluate(parentScope, "never", dataCtx);
        if (!dataCtx.unloaded) {
          if (items) {
            if (items instanceof cola.EntityList) {
              hasChild = items.entityCount > 0;
            } else {
              hasChild = items.length > 0;
            }
            if (hasChild) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
      if (this._child) {
        dataCtx = {};
        items = this._child._expression.evaluate(parentScope, "never", dataCtx);
        if (!dataCtx.unloaded) {
          if (items) {
            if (items instanceof cola.EntityList) {
              hasChild = items.entityCount > 0;
            } else {
              hasChild = items.length > 0;
            }
            if (hasChild) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
      return false;
    };

    return CascadeBind;

  })(cola.Element);

  cola.Node = (function(superClass) {
    extend(Node, superClass);

    Node.prototype.isDataWrapper = true;

    Node.attributes = {
      bind: {
        readOnly: true
      },
      alias: null,
      data: null,
      hasChild: {
        getter: function() {
          var bind, dataCtx, items, prop, ref;
          if (((ref = this._children) != null ? ref.length : void 0) > 0) {
            return true;
          }
          if (this._hasChild != null) {
            return this._hasChild;
          }
          bind = this._bind;
          prop = bind._hasChildProperty;
          if (prop && this._data) {
            if (this._data instanceof cola.Entity) {
              return this._data.get(prop, "never");
            } else {
              return this._data[prop];
            }
          }
          if (this._scope) {
            if (bind._recursive) {
              dataCtx = {};
              items = bind._expression.evaluate(this._scope, "never", dataCtx);
              if (dataCtx.unloaded) {
                return;
              }
              if (!items) {
                return false;
              }
            }
            if (bind._child) {
              dataCtx = {};
              items = bind._child._expression.evaluate(this._scope, "never", dataCtx);
              if (dataCtx.unloaded) {
                return;
              }
              if (!items) {
                return false;
              }
            }
          }
        }
      },
      parent: {
        readOnly: true
      },
      children: {
        readOnly: true
      }
    };

    function Node(bind, data) {
      var ref, ref1;
      Node.__super__.constructor.call(this);
      this._bind = bind;
      this._alias = (ref = bind._expression) != null ? ref.alias : void 0;
      this._widget = bind._widget;
      this._data = data;
      if (typeof data === "object") {
        this._id = cola.Entity._getEntityId(data);
      } else {
        this._id = cola.uniqueId();
      }
      if ((ref1 = this._widget) != null) {
        if (typeof ref1._onNodeAttach === "function") {
          ref1._onNodeAttach(this);
        }
      }
    }

    Node.prototype.destroy = function() {
      var child, l, len1, ref, ref1;
      if (this._children) {
        ref = this._children;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          child = ref[l];
          child.destroy();
        }
      }
      if ((ref1 = this._widget) != null) {
        if (typeof ref1._onNodeDetach === "function") {
          ref1._onNodeDetach(this);
        }
      }
    };

    Node.prototype.remove = function() {
      var i, parent;
      if (this._parent) {
        parent = this._parent;
        i = parent._children.indexOf(this);
        if (i > -1) {
          parent._children.splice(i, 1);
        }
        delete parent._nodeMap[this._id];
      }
      this.destroy();
    };

    return Node;

  })(cola.Element);

  cola.TreeSupportMixin = {
    constructor: function() {
      return this._nodeMap = {};
    },
    _onNodeAttach: function(node) {
      this._nodeMap[node._id] = node;
    },
    _onNodeDetach: function(node) {
      delete this._nodeMap[node._id];
    }
  };

  cola.NestedListNode = (function(superClass) {
    extend(NestedListNode, superClass);

    function NestedListNode() {
      return NestedListNode.__super__.constructor.apply(this, arguments);
    }

    NestedListNode.attributes = {
      title: {
        readOnly: true,
        getter: function() {
          var prop, title;
          prop = this._bind._titleProperty;
          if (prop) {
            if (this._data instanceof cola.Entity) {
              title = this._data.get(prop);
            } else {
              title = this._data[prop];
            }
          }
          return title || "#Unknown";
        }
      }
    };

    return NestedListNode;

  })(cola.Node);

  cola.NestedListBind = (function(superClass) {
    extend(NestedListBind, superClass);

    function NestedListBind() {
      return NestedListBind.__super__.constructor.apply(this, arguments);
    }

    NestedListBind.NODE_TYPE = cola.NestedListNode;

    NestedListBind.attributes = {
      titleProperty: null
    };

    return NestedListBind;

  })(cola.CascadeBind);

  cola.NestedList = (function(superClass) {
    extend(NestedList, superClass);

    function NestedList() {
      return NestedList.__super__.constructor.apply(this, arguments);
    }

    NestedList.tagName = "c-nestedList";

    NestedList.CLASS_NAME = "nested-list";

    NestedList.attributes = {
      bind: {
        setter: function(bind) {
          if (bind && !(bind instanceof cola.NestedListBind)) {
            bind = new cola.NestedListBind(this, bind);
          }
          this._bind = bind;
          if (this._rootNode) {
            this._rootNode.set("bind", bind);
          }
        }
      },
      autoSplit: {
        type: "boolean",
        defaultValue: true
      },
      navBarWidth: {
        defaultValue: "280px"
      },
      showTitleBar: {
        type: "boolean",
        defaultValue: true
      },
      title: null,
      layerIndex: {
        readOnly: true,
        getter: function() {
          return this._layerIndex;
        }
      },
      splited: {
        readOnly: true,
        getter: function() {
          return this._autoSplit && this._largeScreen;
        }
      }
    };

    NestedList.events = {
      getItemTemplate: null,
      itemClick: null,
      renderItem: null,
      initLayer: null,
      topLayerChange: null
    };

    NestedList.prototype._initDom = function(dom) {
      var itemsScope, layer, nestedList;
      if (this._autoSplit) {
        if (cola.device.pad) {
          this._largeScreen = true;
        } else if (cola.device.desktop) {
          this._largeScreen = document.body.clientWidth > 480;
        }
      }
      if (this._doms == null) {
        this._doms = {};
      }
      layer = this._createLayer(0);
      this._layers = [layer];
      this._layerIndex = 0;
      this._initLayer(layer, null, 0);
      if (this._autoSplit && this._largeScreen) {
        $fly(dom).xAppend([
          {
            tagName: "div",
            "class": "nav",
            style: {
              width: this._navBarWidth,
              height: "100%",
              float: "left",
              overflow: "hidden"
            },
            content: layer.container
          }, {
            tagName: "div",
            "class": "detail",
            style: {
              marginLeft: this._navBarWidth,
              height: "100%",
              position: "relative",
              overflow: "hidden"
            },
            contextKey: "detailContainer"
          }
        ], this._doms);
      } else {
        this._doms.detailContainer = dom;
        layer.container.appendTo(dom);
      }
      itemsScope = layer.list._itemsScope;
      this._rootNode = new cola.NestedListNode(this._bind);
      this._rootNode._scope = this._scope;
      this._rootNode._itemsScope = itemsScope;
      if (this._bind) {
        this._itemsRetrieved = true;
        nestedList = this;
        this._bind.retrieveChildNodes(nestedList._rootNode, function() {
          var children, firstNode;
          if (nestedList._autoSplit && nestedList._largeScreen) {
            children = nestedList._rootNode._children;
            firstNode = children != null ? children[0] : void 0;
            if (firstNode != null ? firstNode._scope : void 0) {
              nestedList._showLayer(1, children != null ? children[0] : void 0);
            }
          }
        });
        itemsScope._retrieveItems = function(dataCtx) {
          return nestedList._bind.retrieveChildNodes(nestedList._rootNode, null, dataCtx);
        };
      }
      this.fire("topLayerChange", this, {
        index: 0
      });
    };

    NestedList.prototype._parseDom = function(dom) {
      var child;
      if (!dom) {
        return;
      }
      child = dom.firstChild;
      while (child) {
        if (child.nodeName === "TEMPLATE") {
          this._regTemplate(child);
        }
        child = child.nextSibling;
      }
    };

    NestedList.prototype._createLayer = function(index) {
      var container, ctx, highlightCurrentItem, hjson, layer, list, listConfig, menuItemsConfig, name, oldRefreshItemDom, ref, template, useLayer;
      highlightCurrentItem = this._autoSplit && this._largeScreen && index === 0;
      useLayer = index > (this._autoSplit && this._largeScreen ? 1 : 0);
      hjson = {
        tagName: "div",
        style: {
          height: "100%"
        },
        contextKey: "container",
        "c-widget": useLayer ? "layer" : "widget",
        content: {
          tagName: "div",
          "class": "v-box",
          style: {
            height: "100%"
          }
        }
      };
      listConfig = {
        $type: "listView",
        "class": this._ui,
        highlightCurrentitem: true,
        allowNoCurrent: !highlightCurrentItem,
        highlightCurrentItem: highlightCurrentItem,
        height: "100%",
        userData: index,
        getItemTemplate: (function(_this) {
          return function(self, arg) {
            return _this._onGetItemTemplate(self, arg);
          };
        })(this),
        renderItem: (function(_this) {
          return function(self, arg) {
            return _this._onRenderItem(self, arg);
          };
        })(this),
        itemClick: (function(_this) {
          return function(self, arg) {
            return _this._onItemClick(self, arg);
          };
        })(this)
      };
      if (this._showTitleBar) {
        if (useLayer) {
          menuItemsConfig = [
            {
              icon: "chevron left",
              click: (function(_this) {
                return function() {
                  return _this.back();
                };
              })(this)
            }
          ];
        } else {
          menuItemsConfig = void 0;
        }
        hjson.content.content = [
          {
            tagName: "div",
            "class": "box title-box",
            content: {
              tagName: "div",
              contextKey: "titleBar",
              "c-widget": {
                $type: "titleBar",
                "class": this._ui,
                items: menuItemsConfig
              }
            }
          }, {
            tagName: "div",
            "class": "flex-box list-box",
            content: {
              tagName: "div",
              contextKey: "list",
              "c-widget": listConfig
            }
          }
        ];
      } else {
        hjson.content.content = {
          tagName: "div",
          contextKey: "list",
          "c-widget": listConfig
        };
      }
      ctx = {};
      new cola.xRender(hjson, this._scope, ctx);
      list = cola.widget(ctx.list);
      oldRefreshItemDom = list._refreshItemDom;
      list._refreshItemDom = function(itemDom, node, parentScope) {
        var itemScope;
        itemScope = oldRefreshItemDom.apply(this, arguments);
        node._scope = itemScope;
        return itemScope;
      };
      if (ctx.container) {
        container = cola.widget(ctx.container);
      } else {
        container = list;
      }
      if (this._templates) {
        ref = this._templates;
        for (name in ref) {
          template = ref[name];
          list._templates[name] = template;
        }
      }
      layer = {
        itemsScope: list._itemsScope,
        titleBar: cola.widget(ctx.titleBar),
        list: list,
        container: container
      };
      return layer;
    };

    NestedList.prototype._initLayer = function(layer, parentNode, index) {
      var ref;
      if ((ref = layer.titleBar) != null) {
        ref.set("title", parentNode ? parentNode.get("title") : this._title);
      }
      this.fire("initLayer", this, {
        parentNode: parentNode,
        parentItem: parentNode != null ? parentNode._data : void 0,
        index: index,
        list: layer.list,
        titleBar: layer.titleBar
      });
    };

    NestedList.prototype._getLayerInfo = function(layer) {
      var ref, ref1;
      return {
        index: layer.index,
        parentNode: layer.parentNode,
        parentItem: (ref = layer.parentNode) != null ? ref._data : void 0,
        title: (ref1 = layer.parentNode) != null ? ref1.get("title") : void 0,
        titleBar: layer.titleBar,
        list: layer.list,
        nodes: layer.list.get("items")
      };
    };

    NestedList.prototype._showLayer = function(index, parentNode, callback) {
      var i, itemsScope, layer, list;
      if (index <= this._layerIndex) {
        i = index;
        while (i <= this._layerIndex) {
          this._hideLayer(i === this._layerIndex);
        }
        this._layerIndex = index - 1;
      }
      if (index >= this._layers.length) {
        layer = this._createLayer(index);
        this._layers.push(layer);
        layer.container.appendTo(this._doms.detailContainer);
      } else {
        layer = this._layers[index];
      }
      list = layer.list;
      itemsScope = list._itemsScope;
      itemsScope.setParent(parentNode._scope);
      parentNode._itemsScope = itemsScope;
      parentNode._bind.retrieveChildNodes(parentNode, (function(_this) {
        return function() {
          if (parentNode._children) {
            _this._initLayer(layer, parentNode, index);
            if (layer.container instanceof cola.Layer) {
              layer.container.show();
            }
            _this._layerIndex = index;
            layer.parentNode = parentNode;
            _this.fire("topLayerChange", _this, _this._getLayerInfo(layer));
          }
          if (typeof callback === "function") {
            callback(typeof wrapper !== "undefined" && wrapper !== null);
          }
        };
      })(this));
      itemsScope._retrieveItems = function(dataCtx) {
        return parentNode._bind.retrieveChildNodes(parentNode, null, dataCtx);
      };
    };

    NestedList.prototype._hideLayer = function(animation) {
      var layer, options, previousLayer, ref;
      layer = this._layers[this._layerIndex];
      delete layer.list._itemsScope._retrieveItems;
      options = {};
      if (!animation) {
        options.animation = "none";
      }
      if (layer.container instanceof cola.Layer) {
        layer.container.hide(options, function() {
          var ref;
          if ((ref = layer.titleBar) != null) {
            ref.set("rightItems", null);
          }
        });
      } else {
        if ((ref = layer.titleBar) != null) {
          ref.set("rightItems", null);
        }
      }
      delete layer.parentNode;
      this._layerIndex--;
      previousLayer = this._layers[this._layerIndex];
      this.fire("topLayerChange", this, this._getLayerInfo(previousLayer));
    };

    NestedList.prototype.back = function() {
      if (this._layerIndex > (this._autoSplit && this._largeScreen ? 1 : 0)) {
        this._hideLayer(true);
        return true;
      } else {
        return false;
      }
    };

    NestedList.prototype._onGetItemTemplate = function(self, arg) {
      var node;
      node = arg.item;
      return this.fire("getItemTemplate", this, {
        item: node._data
      });
    };

    NestedList.prototype._onItemClick = function(self, arg) {
      var node, retValue;
      node = arg.item;
      retValue = this.fire("itemClick", this, {
        node: node,
        item: node._data,
        bind: node._bind
      });
      if (retValue !== false) {
        this._showLayer(self.get("userData") + 1, arg.item, (function(_this) {
          return function(hasChild) {
            if (!hasChild) {
              _this.fire("leafItemClick", _this, {
                node: node,
                item: node._data
              });
            }
          };
        })(this));
      }
    };

    NestedList.prototype._onRenderItem = function(self, arg) {
      var hasChild, node;
      node = arg.item;
      hasChild = node.get("hasChild");
      if ((hasChild == null) && node._scope) {
        hasChild = node._bind.hasChildItems(node._scope);
      }
      $fly(arg.dom).toggleClass("has-child", !!hasChild);
      if (this.getListeners("renderItem")) {
        this.fire("renderItem", this, {
          node: node,
          item: node._data,
          dom: arg.dom
        });
      }
    };

    NestedList.prototype.getLayer = function(index) {
      var layer;
      layer = this._layers[index];
      if (layer) {
        return this._getLayerInfo(layer);
      } else {
        return null;
      }
    };

    NestedList.prototype.getTopLayer = function() {
      return this.getLayer(this._layerIndex);
    };

    return NestedList;

  })(cola.Widget);

  cola.Element.mixin(cola.NestedList, cola.TemplateSupport);

  cola.registerWidget(cola.NestedList);

  cola.TreeNode = (function(superClass) {
    extend(TreeNode, superClass);

    function TreeNode() {
      return TreeNode.__super__.constructor.apply(this, arguments);
    }

    TreeNode.attributes = {
      expanded: {
        getter: function() {
          var prop;
          if (this._expanded != null) {
            return this._expanded;
          }
          prop = this._bind._expandedProperty;
          if (prop && this._data) {
            if (this._data instanceof cola.Entity) {
              return this._data.get(prop, "never");
            } else {
              return this._data[prop];
            }
          }
        },
        setter: function(expanded) {
          this._expanded = expanded;
          if (expanded) {
            this._widget.expand(this);
          } else {
            this._widget.collapse(this);
          }
        }
      },
      hasExpanded: null,
      checked: {
        getter: function() {
          var prop;
          prop = this._bind._checkedProperty;
          if (prop && this._data) {
            if (this._data instanceof cola.Entity) {
              return this._data.get(prop, "never");
            } else {
              return this._data[prop];
            }
          }
        },
        setter: function(checked) {
          var prop;
          prop = this._bind._checkedProperty;
          if (prop && this._data) {
            if (this._data instanceof cola.Entity) {
              this._data.set(prop, checked);
            } else {
              this._data[prop] = checked;
            }
          }
        }
      }
    };

    return TreeNode;

  })(cola.Node);

  cola.TreeNodeBind = (function(superClass) {
    extend(TreeNodeBind, superClass);

    function TreeNodeBind() {
      return TreeNodeBind.__super__.constructor.apply(this, arguments);
    }

    TreeNodeBind.NODE_TYPE = cola.TreeNode;

    TreeNodeBind.attributes = {
      textProperty: null,
      expandedProperty: null,
      checkedProperty: null,
      autoCheckChildren: {
        defaultValue: true
      }
    };

    return TreeNodeBind;

  })(cola.CascadeBind);

  cola.Tree = (function(superClass) {
    extend(Tree, superClass);

    function Tree() {
      return Tree.__super__.constructor.apply(this, arguments);
    }

    Tree.tagName = "c-tree";

    Tree.CLASS_NAME = "items-view tree";

    Tree.attributes = {
      bind: {
        refreshItems: true,
        setter: function(bind) {
          if (bind && !(bind instanceof cola.TreeNodeBind)) {
            bind = new cola.TreeNodeBind(this, bind);
          }
          this._bind = bind;
          if (bind) {
            this._itemsScope.setExpression(bind._expression);
          }
        }
      },
      currentNode: {
        readOnly: true
      },
      currentItemAlias: {
        setter: function(alias) {
          var ref;
          if (this._currentItemAlias) {
            this._scope.set(this._currentItemAlias, null);
          }
          this._currentItemAlias = alias;
          if (alias) {
            this._scope.set(alias, (ref = this._currentNode) != null ? ref._data : void 0);
          }
        }
      },
      autoCollapse: null,
      autoExpand: null
    };

    Tree.events = {
      beforeCurrentNodeChange: null,
      currentNodeChange: null
    };

    Tree.TEMPLATES = {
      "default": {
        tagName: "ul",
        content: {
          tagName: "div",
          "class": "tree node",
          content: [
            {
              tagName: "div",
              "class": "expand-button"
            }
          ]
        }
      },
      "checkable": {
        tagName: "ul",
        content: {
          tagName: "div",
          "class": "tree node",
          content: [
            {
              tagName: "div",
              "class": "expand-button"
            }, {
              tagName: "div",
              "c-widget": {
                $type: "checkbox",
                "class": "node-checkbox",
                triState: true
              }
            }
          ]
        }
      },
      "node": {
        tagName: "span",
        "c-bind": "$default"
      }
    };

    Tree.prototype._initDom = function(dom) {
      var itemsScope;
      Tree.__super__._initDom.call(this, dom);
      $fly(this._doms.itemsWrapper).delegate(".expand-button", "click", (function(_this) {
        return function(evt) {
          return _this._expandButtonClick(evt);
        };
      })(this)).delegate(".tree.item", "click", (function(_this) {
        return function(evt) {
          var itemDom, node;
          if (_this._autoExpand) {
            itemDom = _this._findItemDom(evt.currentTarget);
            if (!itemDom) {
              return;
            }
            node = cola.util.userData(itemDom, "item");
            if (!node) {
              return;
            }
            if (node.get("expanded")) {
              _this.collapse(node);
            } else if (node.get("hasChild") !== false) {
              _this.expand(node);
            }
            return false;
          }
        };
      })(this));
      itemsScope = this._itemsScope;
      this._rootNode = new cola.TreeNode(this._bind);
      this._rootNode._scope = this._scope;
      this._rootNode._itemsScope = itemsScope;
      if (this._bind) {
        this._itemsRetrieved = true;
        this._bind.retrieveChildNodes(this._rootNode);
        itemsScope._retrieveItems = (function(_this) {
          return function(dataCtx) {
            return _this._bind.retrieveChildNodes(_this._rootNode, null, dataCtx);
          };
        })(this);
      }
    };

    Tree.prototype._setCurrentNode = function(node) {
      var eventArg, itemDom;
      if (this._currentNode === node) {
        return;
      }
      eventArg = {
        oldCurrent: this._currentNode,
        newCurrent: node
      };
      if (this.fire("beforeCurrentNodeChange", this, eventArg) === false) {
        return;
      }
      if (this._currentNode) {
        itemDom = this._itemDomMap[this._currentNode._id];
        if (itemDom) {
          $fly(itemDom).removeClass("current");
        }
      }
      this._currentNode = node;
      if (node) {
        itemDom = this._itemDomMap[node._id];
        if (itemDom && this._highlightCurrentItem) {
          $fly(itemDom).addClass("current");
        }
      }
      this.fire("currentNodeChange", this, eventArg);
    };

    Tree.prototype._getItemType = function(node) {
      var itemType, ref;
      if (node != null ? node.isDataWrapper : void 0) {
        itemType = (ref = node._data) != null ? ref._itemType : void 0;
      } else {
        itemType = node._itemType;
      }
      if (!itemType && node._bind._checkedProperty) {
        itemType = "checkable";
      }
      return itemType || "default";
    };

    Tree.prototype._createNewItem = function(itemType, node) {
      var contentDom, itemDom, nodeDom, template;
      template = this._getTemplate(itemType);
      itemDom = this._cloneTemplate(template);
      $fly(itemDom).addClass("tree item " + itemType);
      itemDom._itemType = itemType;
      nodeDom = itemDom.firstChild;
      if (nodeDom && cola.util.hasClass(nodeDom, "node")) {
        template = this._getTemplate("node-" + itemType, "node");
        if (template) {
          contentDom = this._cloneTemplate(template);
          $fly(contentDom).addClass("node-content");
          nodeDom.appendChild(contentDom);
        }
      }
      if (!this._currentNode) {
        this._setCurrentNode(node);
      }
      return itemDom;
    };

    Tree.prototype._getDefaultBindPath = function(node) {
      var textProperty;
      textProperty = node._bind._textProperty;
      if (textProperty) {
        return node._alias + "." + textProperty;
      }
    };

    Tree.prototype._refreshItemDom = function(itemDom, node, parentScope) {
      var checkbox, checkboxDom, nodeDom, nodeScope, tree;
      nodeScope = Tree.__super__._refreshItemDom.call(this, itemDom, node, parentScope);
      node._scope = nodeScope;
      if (!itemDom._binded) {
        itemDom._binded = true;
        if (itemDom._itemType === "checkable") {
          checkboxDom = itemDom.querySelector(".node-checkbox");
          if (checkboxDom) {
            tree = this;
            checkbox = cola.widget(checkboxDom);
            checkbox.set({
              bind: nodeScope.data.alias + "." + node._bind._checkedProperty,
              click: function() {
                return tree._onCheckboxClick(node);
              }
            });
          }
        }
      }
      if (node.get("expanded")) {
        if (node._hasExpanded) {
          this._refreshChildNodes(itemDom, node);
        } else {
          this.expand(node);
        }
      } else {
        nodeDom = itemDom.firstChild;
        $fly(nodeDom).toggleClass("leaf", node.get("hasChild") === false);
      }
      if (node === this._currentNode && this._highlightCurrentItem) {
        $fly(itemDom).addClass("current");
      }
      return nodeScope;
    };

    Tree.prototype._refreshChildNodes = function(parentItemDom, parentNode, hidden) {
      var currentItemDom, documentFragment, itemDom, itemType, itemsScope, l, len1, nextItemDom, node, nodesWrapper, ref;
      nodesWrapper = parentItemDom.lastChild;
      if (!$fly(nodesWrapper).hasClass("child-nodes")) {
        nodesWrapper = $.xCreate({
          tagName: "ul",
          "class": "child-nodes",
          style: {
            display: hidden ? "hidden" : "",
            padding: 0,
            margin: 0,
            overflow: "hidden"
          }
        });
        parentItemDom.appendChild(nodesWrapper);
      }
      itemsScope = parentNode._itemsScope;
      itemsScope.resetItemScopeMap();
      documentFragment = null;
      currentItemDom = nodesWrapper.firstChild;
      if (parentNode._children) {
        ref = parentNode._children;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          node = ref[l];
          itemType = this._getItemType(node);
          if (currentItemDom) {
            while (currentItemDom) {
              if (currentItemDom._itemType === itemType) {
                break;
              } else {
                nextItemDom = currentItemDom.nextSibling;
                nodesWrapper.removeChild(currentItemDom);
                currentItemDom = nextItemDom;
              }
            }
            itemDom = currentItemDom;
            if (currentItemDom) {
              currentItemDom = currentItemDom.nextSibling;
            }
          } else {
            itemDom = null;
          }
          if (itemDom) {
            this._refreshItemDom(itemDom, node, itemsScope);
          } else {
            itemDom = this._createNewItem(itemType, node);
            this._refreshItemDom(itemDom, node, itemsScope);
            if (documentFragment == null) {
              documentFragment = document.createDocumentFragment();
            }
            documentFragment.appendChild(itemDom);
          }
        }
      }
      if (currentItemDom) {
        itemDom = currentItemDom;
        while (itemDom) {
          nextItemDom = itemDom.nextSibling;
          if ($fly(itemDom).hasClass("item")) {
            nodesWrapper.removeChild(itemDom);
          }
          itemDom = nextItemDom;
        }
      }
      if (documentFragment) {
        nodesWrapper.appendChild(documentFragment);
      }
    };

    Tree.prototype._onItemClick = function(evt) {
      var itemDom, node;
      itemDom = evt.currentTarget;
      if (!itemDom) {
        return;
      }
      node = cola.util.userData(itemDom, "item");
      this._setCurrentNode(node);
      return Tree.__super__._onItemClick.call(this, evt);
    };

    Tree.prototype._expandButtonClick = function(evt) {
      var buttonDom, itemDom, node;
      buttonDom = evt.currentTarget;
      if (!buttonDom) {
        return;
      }
      itemDom = this._findItemDom(buttonDom);
      if (!itemDom) {
        return;
      }
      node = cola.util.userData(itemDom, "item");
      if (!node) {
        return;
      }
      node.set("expanded", !node.get("expanded"));
      evt.stopPropagation();
      return false;
    };

    Tree.prototype.expand = function(node) {
      var itemDom, itemsScope, nodeDom, tree;
      itemDom = this._itemDomMap[node._id];
      if (!itemDom) {
        return;
      }
      tree = this;
      itemsScope = node._itemsScope;
      if (!itemsScope) {
        node._itemsScope = itemsScope = new cola.ItemsScope(node._scope);
        itemsScope.alias = node._alias;
        itemsScope._retrieveItems = function(dataCtx) {
          return node._bind.retrieveChildNodes(node, null, dataCtx);
        };
        itemsScope.onItemsRefresh = function() {
          itemDom = tree._itemDomMap[node._id];
          if (itemDom) {
            tree._refreshChildNodes(itemDom, node);
          }
        };
        itemsScope.onItemInsert = function() {
          return this.onItemsRefresh();
        };
        itemsScope.onItemRemove = function(arg) {
          return tree._onItemRemove(arg);
        };
      }
      nodeDom = itemDom.firstChild;
      $fly(nodeDom).addClass("expanding");
      node._bind.retrieveChildNodes(node, function() {
        var $nodesWrapper, brotherNode, l, len1, ref, ref1;
        $fly(nodeDom).removeClass("expanding");
        if (node._children) {
          tree._refreshChildNodes(itemDom, node, true);
          $fly(nodeDom).addClass("expanded");
          $nodesWrapper = $fly(itemDom.lastChild);
          if ($nodesWrapper.hasClass("child-nodes")) {
            $nodesWrapper.slideDown(150);
          }
        } else {
          $fly(nodeDom).addClass("leaf");
        }
        node._expanded = true;
        node._hasExpanded = true;
        if (tree._autoCollapse && ((ref = node._parent) != null ? ref._children : void 0)) {
          ref1 = node._parent._children;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            brotherNode = ref1[l];
            if (brotherNode !== node && brotherNode.get("expanded")) {
              tree.collapse(brotherNode);
            }
          }
        }
      });
    };

    Tree.prototype.collapse = function(node) {
      var $nodesWrapper, itemDom, parent;
      itemDom = this._itemDomMap[node._id];
      if (!itemDom) {
        return;
      }
      if (this._currentNode) {
        parent = this._currentNode._parent;
        while (parent) {
          if (parent === node) {
            this._setCurrentNode(node);
            break;
          }
          parent = parent._parent;
        }
      }
      $fly(itemDom.firstChild).removeClass("expanded");
      $nodesWrapper = $fly(itemDom.lastChild);
      if ($nodesWrapper.hasClass("child-nodes")) {
        $nodesWrapper.slideUp(150);
      }
      node._expanded = false;
    };

    Tree.prototype._onItemRemove = function(arg) {
      var children, i, newCurrentNode, node, nodeId;
      nodeId = _getEntityId(arg.entity);
      node = this._nodeMap[nodeId];
      if (node) {
        if (this._currentNode === node) {
          children = node._parent._children;
          i = children.indexOf(node);
          if (i < children.length - 1) {
            newCurrentNode = children[i + 1];
          } else if (i > 0) {
            newCurrentNode = children[i - 1];
          } else if (node._parent !== this._rootNode) {
            newCurrentNode = node._parent;
          }
          if (newCurrentNode) {
            this._setCurrentNode(newCurrentNode);
          }
        }
        node.remove();
      }
      Tree.__super__._onItemRemove.call(this, arg);
    };

    Tree.prototype._onItemInsert = function() {
      this._refreshItems();
    };

    Tree.prototype._onCurrentItemChange = null;

    Tree.prototype._resetNodeAutoCheckedState = function(node) {
      var c, checkableCount, checkedCount, child, halfCheck, l, len1, ref;
      if (node._bind._checkedProperty && node._bind._autoCheckChildren) {
        if (!this._autoChecking) {
          this._autoCheckingParent = true;
        }
        if (this._autoCheckingParent) {
          this._autoCheckingChildren = false;
          checkedCount = 0;
          checkableCount = 0;
          halfCheck = false;
          ref = node._children;
          for (l = 0, len1 = ref.length; l < len1; l++) {
            child = ref[l];
            if (child._bind._checkedProperty) {
              checkableCount++;
              c = child.get("checked");
              if (c === true) {
                checkedCount++;
              } else if (c === null) {
                halfCheck = true;
              }
            }
          }
          if (checkableCount) {
            this._autoChecking = true;
            c = void 0;
            if (!halfCheck) {
              if (checkedCount === 0) {
                c = false;
              } else if (checkedCount === checkableCount) {
                c = true;
              }
            }
            node.set("checked", c);
            this._nodeCheckedChanged(node, false, true);
            this._autoChecking = false;
          }
        }
      }
    };

    Tree.prototype._nodeCheckedChanged = function(node, processChildren, processParent) {
      var checked, child, l, len1, oldChecked, ref;
      if (processChildren && node._children && node._bind._autoCheckChildren) {
        if (!this._autoChecking) {
          this._autoCheckingChildren = true;
        }
        if (this._autoCheckingChildren) {
          this._autoCheckingParent = false;
          this._autoChecking = true;
          checked = node.get("checked");
          ref = node._children;
          for (l = 0, len1 = ref.length; l < len1; l++) {
            child = ref[l];
            if (child._bind._checkedProperty) {
              oldChecked = child.get("checked");
              if (oldChecked !== checked) {
                child.set("checked", checked);
                this._nodeCheckedChanged(child, true, false);
              }
            }
          }
          this._autoChecking = false;
        }
      }
      if (processParent && node._parent) {
        this._resetNodeAutoCheckedState(node._parent);
      }
    };

    Tree.prototype._onCheckboxClick = function(node) {
      this._nodeCheckedChanged(node, true, true);
    };

    Tree.prototype.getCheckedNodes = function() {
      var child, l, len1, nodes, ref;
      nodes = [];
      ({
        collectCheckNodes: function(node) {
          var child, l, len1, ref;
          if (node._bind._checkedProperty && node.get("checked")) {
            nodes.push(node);
          }
          if (node._children) {
            ref = node._children;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              child = ref[l];
              collectCheckNodes(child);
            }
          }
        }
      });
      if (this._rootNode) {
        ref = this._rootNode._children;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          child = ref[l];
          collectCheckNodes(child);
        }
      }
      return nodes;
    };

    return Tree;

  })(cola.AbstractList);

  cola.Element.mixin(cola.Tree, cola.TreeSupportMixin);

  cola.registerWidget(cola.Tree);

  cola.registerTypeResolver("table.column", function(config) {
    var type;
    if (!(config && config.$type)) {
      return;
    }
    type = config.$type.toLowerCase();
    if (type === "select") {
      return cola.TableSelectColumn;
    }
  });

  cola.registerTypeResolver("table.column", function(config) {
    var ref;
    if ((ref = config.columns) != null ? ref.length : void 0) {
      return cola.TableGroupColumn;
    }
    return cola.TableDataColumn;
  });

  cola.TableColumn = (function(superClass) {
    extend(TableColumn, superClass);

    TableColumn.attributes = {
      name: {
        reaonlyAfterCreate: true
      },
      caption: null,
      visible: {
        type: "boolean",
        defaultValue: true
      },
      headerTemplate: null
    };

    TableColumn.events = {
      renderHeader: null
    };

    function TableColumn(config) {
      TableColumn.__super__.constructor.call(this, config);
      if (!this._name) {
        this._name = cola.uniqueId();
      }
    }

    TableColumn.prototype._setTable = function(table) {
      if (this._table) {
        this._table._unregColumn(this);
      }
      this._table = table;
      if (table) {
        table._regColumn(this);
      }
    };

    return TableColumn;

  })(cola.Element);

  cola.TableGroupColumn = (function(superClass) {
    extend(TableGroupColumn, superClass);

    function TableGroupColumn() {
      return TableGroupColumn.__super__.constructor.apply(this, arguments);
    }

    TableGroupColumn.attributes = {
      columns: {
        setter: function(columnConfigs) {
          _columnsSetter.call(this, this._table, columnConfigs);
        }
      }
    };

    TableGroupColumn.prototype._setTable = function(table) {
      var column, l, len1, ref;
      TableGroupColumn.__super__._setTable.call(this, table);
      if (this._columns) {
        ref = this._columns;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          column = ref[l];
          column._setTable(table);
        }
      }
    };

    return TableGroupColumn;

  })(cola.TableColumn);

  cola.TableContentColumn = (function(superClass) {
    extend(TableContentColumn, superClass);

    function TableContentColumn() {
      return TableContentColumn.__super__.constructor.apply(this, arguments);
    }

    TableContentColumn.attributes = {
      width: {
        defaultValue: 80
      },
      align: {
        "enum": ["left", "center", "right"]
      },
      valign: {
        "enum": ["top", "center", "bottom"]
      },
      footerTemplate: null
    };

    TableContentColumn.events = {
      renderCell: null,
      renderFooter: null
    };

    return TableContentColumn;

  })(cola.TableColumn);

  cola.TableDataColumn = (function(superClass) {
    extend(TableDataColumn, superClass);

    function TableDataColumn() {
      return TableDataColumn.__super__.constructor.apply(this, arguments);
    }

    TableDataColumn.attributes = {
      dataType: {
        readOnlyAfterCreate: true,
        setter: cola.DataType.dataTypeSetter
      },
      property: null,
      bind: null,
      template: null
    };

    return TableDataColumn;

  })(cola.TableContentColumn);

  cola.TableSelectColumn = (function(superClass) {
    extend(TableSelectColumn, superClass);

    function TableSelectColumn() {
      return TableSelectColumn.__super__.constructor.apply(this, arguments);
    }

    TableSelectColumn.attributes = {
      width: {
        defaultValue: "42px"
      },
      align: {
        defaultValue: "center"
      }
    };

    TableSelectColumn.prototype.renderHeader = function(dom, item) {
      var checkbox;
      if (!dom.firstChild) {
        this._headerCheckbox = checkbox = new cola.Checkbox({
          "class": "in-cell",
          triState: true,
          click: (function(_this) {
            return function(self) {
              _this.selectAll(self.get("checked"));
            };
          })(this)
        });
        checkbox.appendTo(dom);
      }
    };

    TableSelectColumn.prototype.renderCell = function(dom, item) {
      var checkbox;
      if (!dom.firstChild) {
        checkbox = new cola.Checkbox({
          "class": "in-cell",
          bind: this._table._alias + "." + this._table._selectedProperty,
          change: (function(_this) {
            return function() {
              if (!_this._ignoreCheckedChange) {
                _this.refreshHeaderCheckbox();
              }
            };
          })(this)
        });
        checkbox.appendTo(dom);
      }
    };

    TableSelectColumn.prototype.refreshHeaderCheckbox = function() {
      if (!this._headerCheckbox) {
        return;
      }
      cola.util.delay(this, "refreshHeaderCheckbox", 50, function() {
        var i, selected, selectedProperty, table;
        table = this._table;
        selectedProperty = table._selectedProperty;
        if (table._realItems) {
          i = 0;
          selected = void 0;
          cola.each(this._table._realItems, function(item) {
            var itemType, s;
            itemType = table._getItemType(item);
            if (itemType === "default") {
              i++;
              if (item instanceof cola.Entity) {
                s = item.get(selectedProperty);
              } else {
                s = item[selectedProperty];
              }
              if (i === 1) {
                selected = s;
              } else if (selected !== s) {
                selected = void 0;
                return false;
              }
            }
          });
          this._headerCheckbox.set("value", selected);
        }
      });
    };

    TableSelectColumn.prototype.selectAll = function(selected) {
      var selectedProperty, table;
      table = this._table;
      selectedProperty = table._selectedProperty;
      if (table._realItems) {
        this._ignoreCheckedChange = true;
        cola.each(this._table._realItems, function(item) {
          var itemType;
          itemType = table._getItemType(item);
          if (itemType === "default") {
            if (item instanceof cola.Entity) {
              item.set(selectedProperty, selected);
            } else {
              item[selectedProperty];
              table.refreshItem(item);
            }
          }
        });
        setTimeout((function(_this) {
          return function() {
            _this._ignoreCheckedChange = false;
          };
        })(this), 100);
      }
    };

    return TableSelectColumn;

  })(cola.TableContentColumn);

  _columnsSetter = function(table, columnConfigs) {
    var column, columnConfig, columns, l, len1, len2, n, ref;
    if (table != null ? table._columns : void 0) {
      ref = table._columns;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        column = ref[l];
        column._setTable(null);
      }
    }
    columns = [];
    if (columnConfigs) {
      for (n = 0, len2 = columnConfigs.length; n < len2; n++) {
        columnConfig = columnConfigs[n];
        if (!columnConfig) {
          continue;
        }
        if (columnConfig instanceof cola.TableColumn) {
          column = columnConfig;
        } else {
          column = cola.create("table.column", columnConfig, cola.TableColumn);
        }
        column._setTable(table);
        columns.push(column);
      }
    }
    this._columns = columns;
  };

  cola.AbstractTable = (function(superClass) {
    extend(AbstractTable, superClass);

    AbstractTable.attributes = {
      items: {
        refreshItems: true,
        setter: function(items) {
          if (this._items === items) {
            return;
          }
          this._set("bind", void 0);
          this._items = items;
        }
      },
      bind: {
        setter: function(bindStr) {
          this._set("items", void 0);
          this._bindSetter(bindStr);
        }
      },
      columns: {
        setter: function(columnConfigs) {
          _columnsSetter.call(this, this, columnConfigs);
          this._collectionColumnsInfo();
        }
      },
      dataType: {
        setter: cola.DataType.dataTypeSetter
      },
      showHeader: {
        type: "boolean",
        defaultValue: true
      },
      showFooter: {
        type: "boolean"
      },
      columnStrecthable: {
        type: "boolean",
        defaultValue: true
      },
      selectedProperty: {
        defaultValue: "selected"
      }
    };

    AbstractTable.events = {
      renderRow: null,
      renderCell: null,
      renderHeaderCell: null,
      renderFooterCell: null
    };

    AbstractTable.TEMPLATES = {
      "default": {
        tagName: "tr"
      },
      "checkbox-column": {
        tagName: "div",
        "c-widget": "checkbox;class:in-cell;bind:$default"
      },
      "input-column": {
        tagName: "div",
        "c-widget": "input;class:in-cell;bind:$default",
        style: {
          width: "100%"
        }
      },
      "group-header": {
        tagName: "tr",
        content: {
          tagName: "td",
          colSpan: 100
        }
      }
    };

    function AbstractTable(config) {
      this._columnMap = {};
      AbstractTable.__super__.constructor.call(this, config);
    }

    AbstractTable.prototype._getItems = function() {
      if (this._items) {
        return {
          items: this._items
        };
      } else {
        return AbstractTable.__super__._getItems.call(this);
      }
    };

    AbstractTable.prototype._regColumn = function(column) {
      if (column._name) {
        this._columnMap[column._name] = column;
      }
    };

    AbstractTable.prototype._unregColumn = function(column) {
      if (column._name) {
        delete this._columnMap[column._name];
      }
    };

    AbstractTable.prototype.getColumn = function(name) {
      return this._columnMap[name];
    };

    AbstractTable.prototype._collectionColumnsInfo = function() {
      var col, collectColumnInfo, columnsInfo, expression, l, len1, ref;
      collectColumnInfo = function(column, context, deepth) {
        var bind, col, cols, info, l, len1, ref, width, widthType;
        info = {
          level: deepth,
          column: column
        };
        if (column instanceof cola.TableGroupColumn) {
          if (column._columns) {
            info.columns = cols = [];
            ref = column._columns;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              col = ref[l];
              if (!col._visible) {
                continue;
              }
              if (context.rows.length === deepth) {
                context.rows[deepth] = [];
              }
              cols.push(collectColumnInfo(col, context, deepth + 1));
            }
            if (cols.length) {
              if (context.rows.length === deepth) {
                context.rows[deepth] = [];
              }
              context.rows[deepth].push(info);
            }
          }
        } else {
          if (column._bind) {
            bind = column._bind;
            if (bind.charCodeAt(0) === 46) {
              if (!column._property) {
                column._property = bind.substring(1);
              }
            } else {
              info.expression = cola._compileExpression(bind);
            }
          }
          if (column._width) {
            width = column._width;
            if (typeof width === "string") {
              if (width.indexOf("px") > 0) {
                widthType = "px";
              } else if (width.indexOf("%") > 0) {
                widthType = "percent";
              }
            }
            info.widthType = widthType;
            info.width = parseInt(width, 10);
            if (!widthType && info.width) {
              context.totalWidth += info.width;
            }
          }
          info.index = context.dataColumns.length;
          context.dataColumns.push(info);
          if (column instanceof cola.TableSelectColumn) {
            if (context.selectColumns == null) {
              context.selectColumns = [];
            }
            context.selectColumns.push(info);
          }
          if (context.rows.length === deepth) {
            context.rows[deepth] = [];
          }
          context.rows[deepth].push(info);
        }
        return info;
      };
      this._columnsInfo = columnsInfo = {
        totalWidth: 0,
        rows: [[]],
        dataColumns: [],
        alias: "item"
      };
      if (this._columns) {
        expression = this._itemsScope.expression;
        if (expression) {
          columnsInfo.alias = expression.alias;
        }
        ref = this._columns;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          col = ref[l];
          if (!col._visible) {
            continue;
          }
          collectColumnInfo(col, columnsInfo, 0);
        }
      }
    };

    AbstractTable.prototype._getBindDataType = function() {
      if (this._dataType) {
        return this._dataType;
      }
      return this._dataType = AbstractTable.__super__._getBindDataType.call(this);
    };

    AbstractTable.prototype._createDom = function() {
      var dom;
      dom = document.createElement("div");
      if (this._doms == null) {
        this._doms = {};
      }
      this._createInnerDom(dom);
      return dom;
    };

    AbstractTable.prototype._createInnerDom = function(dom) {
      $fly(dom).xAppend({
        tagName: "div",
        "class": "table-wrapper",
        contextKey: "itemsWrapper",
        content: {
          tagName: "table",
          contextKey: "table",
          content: [
            {
              tagName: "colgroup",
              contextKey: "colgroup",
              span: 100
            }, {
              tagName: "tbody",
              "class": "items",
              contextKey: "tbody"
            }
          ]
        }
      }, this._doms);
    };

    AbstractTable.prototype._parseDom = function(dom) {
      var child, next, nodeName;
      if (!dom) {
        return;
      }
      if (this._doms == null) {
        this._doms = {};
      }
      child = dom.firstChild;
      while (child) {
        next = child.nextSibling;
        nodeName = child.nodeName.toLowerCase();
        if (nodeName === "template") {
          this._regTemplate(child);
        } else {
          dom.removeChild(child);
        }
        child = next;
      }
      this._createInnerDom(dom);
    };

    AbstractTable.prototype._createNewItem = function(itemType, item) {
      var itemDom, template;
      template = this._getTemplate(itemType);
      itemDom = this._cloneTemplate(template);
      $fly(itemDom).addClass("table item " + itemType);
      itemDom._itemType = itemType;
      return itemDom;
    };

    return AbstractTable;

  })(cola.AbstractList);

  cola.Table = (function(superClass) {
    extend(Table, superClass);

    function Table() {
      return Table.__super__.constructor.apply(this, arguments);
    }

    Table.tagName = "c-table";

    Table.CLASS_NAME = "items-view widget-table";

    Table.prototype._initDom = function(dom) {
      Table.__super__._initDom.call(this, dom);
      $fly(window).resize((function(_this) {
        return function() {
          var fixedFooter, fixedHeader;
          if (_this._fixedHeaderVisible) {
            fixedHeader = _this._getFixedHeader();
            $fly(fixedHeader).width(_this._doms.itemsWrapper.clientWidth);
          }
          if (_this._fixedFooterVisible) {
            fixedFooter = _this._getFixedFooter();
            $fly(fixedFooter).width(_this._doms.itemsWrapper.clientWidth);
          }
        };
      })(this));
    };

    Table.prototype._doRefreshItems = function() {
      var col, colInfo, colgroup, column, columnConfigs, i, l, len1, len2, n, nextCol, propertyDef, ref, ref1, tbody, tfoot, thead;
      if (!this._columnsInfo) {
        return;
      }
      if (!this._columnsInfo.dataColumns.length && this._dataType && this._dataType instanceof cola.EntityDataType) {
        columnConfigs = [];
        ref = this._dataType.getProperties().elements;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          propertyDef = ref[l];
          columnConfigs.push({
            bind: propertyDef._property
          });
        }
        this.set("columns", columnConfigs);
      }
      colgroup = this._doms.colgroup;
      nextCol = colgroup.firstChild;
      ref1 = this._columnsInfo.dataColumns;
      for (i = n = 0, len2 = ref1.length; n < len2; i = ++n) {
        colInfo = ref1[i];
        col = nextCol;
        if (!col) {
          col = document.createElement("col");
          colgroup.appendChild(col);
        } else {
          nextCol = col.nextSibling;
        }
        if (colInfo.widthType === "precent") {
          col.width = colInfo.width + "%";
        } else if (colInfo.widthType) {
          col.width = colInfo.width + colInfo.widthType;
        } else if (colInfo.width) {
          col.width = (colInfo.width * 100 / this._columnsInfo.totalWidth) + "%";
        } else {
          col.width = "";
        }
        column = colInfo.column;
        col.valign = column._valign || "";
      }
      col = nextCol;
      while (col) {
        nextCol = col.nextSibling;
        colgroup.removeChild(col);
        col = nextCol;
      }
      tbody = this._doms.tbody;
      if (this._showHeader) {
        thead = this._doms.thead;
        if (!thead) {
          $fly(tbody).xInsertBefore({
            tagName: "thead",
            contextKey: "thead"
          }, this._doms);
          thead = this._doms.thead;
        }
        this._refreshHeader(thead);
      }
      Table.__super__._doRefreshItems.call(this, tbody);
      if (this._showFooter) {
        tfoot = this._doms.tfoot;
        if (!tfoot) {
          $fly(tbody).xInsertAfter({
            tagName: "tfoot",
            contextKey: "tfoot"
          }, this._doms);
          tfoot = this._doms.tfoot;
        }
        this._refreshFooter(tfoot);
        if (!this._fixedFooterVisible) {
          this._showFooterTimer = setInterval((function(_this) {
            return function() {
              var itemsWrapper;
              itemsWrapper = _this._doms.itemsWrapper;
              if (itemsWrapper.scrollHeight) {
                _this._refreshFixedFooter(300);
              }
            };
          })(this), 300);
        }
      }
    };

    Table.prototype._onItemInsert = function(arg) {
      Table.__super__._onItemInsert.call(this, arg);
      if (this._columnsInfo.selectColumns) {
        cola.util.delay(this, "refreshHeaderCheckbox", 100, (function(_this) {
          return function() {
            var colInfo, l, len1, ref;
            ref = _this._columnsInfo.selectColumns;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              colInfo = ref[l];
              colInfo.column.refreshHeaderCheckbox();
            }
          };
        })(this));
      }
    };

    Table.prototype._onItemRemove = function(arg) {
      Table.__super__._onItemRemove.call(this, arg);
      if (this._showFooter) {
        this._refreshFixedFooter();
      }
      if (this._columnsInfo.selectColumns) {
        cola.util.delay(this, "refreshHeaderCheckbox", 100, (function(_this) {
          return function() {
            var colInfo, l, len1, ref;
            ref = _this._columnsInfo.selectColumns;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              colInfo = ref[l];
              colInfo.column.refreshHeaderCheckbox();
            }
          };
        })(this));
      }
    };

    Table.prototype._refreshHeader = function(thead) {
      var cell, colInfo, column, contentWrapper, fragment, i, isNew, j, l, len, len1, row, rowInfo, rowInfos;
      fragment = null;
      rowInfos = this._columnsInfo.rows;
      i = 0;
      len = rowInfos.length;
      while (i < len) {
        row = thead.rows[i];
        if (!row) {
          row = $.xCreate({
            tagName: "tr"
          });
          if (fragment == null) {
            fragment = document.createDocumentFragment();
          }
          fragment.appendChild(row);
        }
        rowInfo = rowInfos[i];
        for (j = l = 0, len1 = rowInfo.length; l < len1; j = ++l) {
          colInfo = rowInfo[j];
          column = colInfo.column;
          cell = row.cells[j];
          while (cell && cell._name !== column._name) {
            row.removeChild(cell);
            cell = row.cells[j];
          }
          if (!cell) {
            isNew = true;
            cell = $.xCreate({
              tagName: "th",
              content: {
                tagName: "div"
              }
            });
            cell._name = column._name;
            row.appendChild(cell);
          }
          cell._index = colInfo.index;
          if (colInfo.columns) {
            cell.rowSpan = 1;
            cell.colSpan = colInfo.columns.length;
          } else {
            cell.rowSpan = len - i;
            cell.colSpan = 1;
          }
          contentWrapper = cell.firstChild;
          this._refreshHeaderCell(contentWrapper, colInfo, isNew);
        }
        while (row.lastChild && row.lastChild !== cell) {
          row.removeChild(row.lastChild);
        }
        cola.xRender(row, this._scope);
        i++;
      }
      if (fragment) {
        thead.appendChild(fragment);
      }
      while (thead.lastChild && thead.lastChild !== row) {
        thead.removeChild(thead.lastChild);
      }
    };

    Table.prototype._refreshHeaderCell = function(dom, columnInfo, isNew) {
      var caption, column, dataType, propertyDef, template, templateName;
      column = columnInfo.column;
      dom.style.textAlign = column._align || "left";
      if (column.renderHeader) {
        if (column.renderHeader(dom) !== true) {
          return;
        }
      }
      if (column.getListeners("renderHeader")) {
        if (column.fire("renderHeader", column, {
          dom: dom
        }) === false) {
          return;
        }
      }
      if (this.getListeners("renderHeaderCell")) {
        if (this.fire("renderHeaderCell", this, {
          column: column,
          dom: dom
        }) === false) {
          return;
        }
      }
      if (isNew) {
        template = column._realHeaderTemplate;
        if (template === void 0) {
          templateName = column._headerTemplate;
          if (templateName) {
            template = this._getTemplate(templateName);
          }
          column._realHeaderTemplate = template || null;
        }
        if (template) {
          template = this._cloneTemplate(template);
          dom.appendChild(template);
        }
      }
      if (column._realHeaderTemplate) {
        return;
      }
      dataType = this._getBindDataType();
      if (dataType && column._property) {
        propertyDef = dataType.getProperty(column._property);
      }
      caption = column._caption || (propertyDef != null ? propertyDef._caption : void 0);
      if (!caption) {
        caption = column._name;
        if ((caption != null ? caption.charCodeAt(0) : void 0) === 95) {
          caption = column._bind;
        }
      }
      dom.innerText = caption || "";
    };

    Table.prototype._refreshFooter = function(tfoot) {
      var cell, colInfo, colInfos, column, contentWrapper, i, isNew, l, len1, row;
      colInfos = this._columnsInfo.dataColumns;
      row = tfoot.rows[0];
      if (!row) {
        row = document.createElement("tr");
      }
      for (i = l = 0, len1 = colInfos.length; l < len1; i = ++l) {
        colInfo = colInfos[i];
        column = colInfo.column;
        cell = row.cells[i];
        while (cell && cell._name !== column._name) {
          row.removeChild(cell);
          cell = row.cells[i];
        }
        if (!cell) {
          isNew = true;
          cell = $.xCreate({
            tagName: "td",
            content: {
              tagName: "div"
            }
          });
          cell._name = column._name;
          row.appendChild(cell);
        }
        contentWrapper = cell.firstChild;
        this._refreshFooterCell(contentWrapper, colInfo, isNew);
      }
      while (row.lastChild !== cell) {
        row.removeChild(row.lastChild);
      }
      cola.xRender(row, this._scope);
      if (tfoot.rows.length < 1) {
        tfoot.appendChild(row);
      }
    };

    Table.prototype._refreshFooterCell = function(dom, columnInfo, isNew) {
      var column, template, templateName;
      column = columnInfo.column;
      dom.style.textAlign = column._align || "left";
      if (column.renderFooter) {
        if (column.renderFooter(dom) !== true) {
          return;
        }
      }
      if (column.getListeners("renderFooter")) {
        if (column.fire("renderFooter", column, {
          dom: dom
        }) === false) {
          return;
        }
      }
      if (this.getListeners("renderFooterCell")) {
        if (this.fire("renderFooterCell", this, {
          column: column,
          dom: dom
        }) === false) {
          return;
        }
      }
      if (isNew) {
        template = column._realFooterTemplate;
        if (template === void 0) {
          templateName = column._footerTemplate;
          if (templateName) {
            template = this._getTemplate(templateName);
          }
          column._realFooterTemplate = template || null;
        }
        if (template) {
          template = this._cloneTemplate(template);
          dom.appendChild(template);
        }
      }
      if (column._realFooterTemplate) {
        return;
      }
      dom.innerHTML = "&nbsp;";
    };

    Table.prototype._doRefreshItemDom = function(itemDom, item, itemScope) {
      var cell, colInfo, colInfos, column, contentWrapper, i, isNew, itemType, l, len1;
      itemType = itemDom._itemType;
      if (this.getListeners("renderRow")) {
        if (this.fire("renderRow", this, {
          item: item,
          dom: itemDom,
          scope: itemScope
        }) === false) {
          return;
        }
      }
      if (itemType === "default") {
        colInfos = this._columnsInfo.dataColumns;
        for (i = l = 0, len1 = colInfos.length; l < len1; i = ++l) {
          colInfo = colInfos[i];
          column = colInfo.column;
          cell = itemDom.cells[i];
          while (cell && cell._name !== column._name) {
            itemDom.removeChild(cell);
            cell = itemDom.cells[i];
          }
          if (!cell) {
            isNew = true;
            cell = $.xCreate({
              tagName: "td",
              content: {
                tagName: "div"
              }
            });
            cell._name = column._name;
            itemDom.appendChild(cell);
          }
          contentWrapper = cell.firstChild;
          this._refreshCell(contentWrapper, item, colInfo, itemScope, isNew);
        }
        while (itemDom.lastChild && itemDom.lastChild !== cell) {
          itemDom.removeChild(itemDom.lastChild);
        }
      }
    };

    Table.prototype._refreshCell = function(dom, item, columnInfo, itemScope, isNew) {
      var $dom, column, context, defaultDateFormat, template, templateName, value;
      column = columnInfo.column;
      dom.style.textAlign = column._align || "";
      if (column.renderCell) {
        if (column.renderCell(dom, item, itemScope) !== true) {
          return;
        }
      }
      if (column.getListeners("renderCell")) {
        if (column.fire("renderCell", column, {
          item: item,
          dom: dom,
          scope: itemScope
        }) === false) {
          return;
        }
      }
      if (this.getListeners("renderCell")) {
        if (this.fire("renderCell", this, {
          item: item,
          column: colInfo.column,
          dom: dom,
          scope: itemScope
        }) === false) {
          return;
        }
      }
      if (isNew) {
        template = column._realTemplate;
        if (template === void 0) {
          templateName = column._template;
          if (templateName) {
            template = this._getTemplate(templateName);
          }
          column._realTemplate = template || null;
        }
        if (template) {
          template = this._cloneTemplate(template);
          dom.appendChild(template);
          if (column._property) {
            if (column._format) {
              context = {
                defaultPath: "format(" + this._alias + "." + column._property + "," + column._format + ")"
              };
            } else {
              context = {
                defaultPath: this._alias + "." + column._property
              };
            }
          }
          cola.xRender(dom, itemScope, context);
        }
      }
      if (column._realTemplate) {
        return;
      }
      $dom = $fly(dom);
      if (columnInfo.expression) {
        $dom.attr("c-bind", columnInfo.expression.raw);
      } else {
        value = item.get(column._property);
        if (column._format) {
          value = cola.defaultAction.format(value, column._format);
        } else {
          if (value instanceof Date) {
            defaultDateFormat = cola.setting("defaultDateFormat");
            if (defaultDateFormat) {
              value = cola.defaultAction.formatDate(value, defaultDateFormat);
            }
          }
        }
        if (value === void 0 || value === null) {
          value = "";
        }
        $dom.text(value);
      }
    };

    Table.prototype._refreshFakeRow = function(row) {
      var cell, colInfo, i, l, len1, nextCell, ref;
      nextCell = row.firstChild;
      ref = this._columnsInfo.dataColumns;
      for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
        colInfo = ref[i];
        cell = nextCell;
        if (!cell) {
          cell = $.xCreate({
            tagName: "td"
          });
          row.appendChild(cell);
        } else {
          nextCell = nextCell.nextSibling;
        }
      }
      while (nextCell) {
        cell = nextCell;
        nextCell = nextCell.nextSibling;
        row.removeChild(cell);
      }
    };

    Table.prototype._getFixedHeader = function(create) {
      var fakeThead, fixedHeaderWrapper;
      fixedHeaderWrapper = this._doms.fixedHeaderWrapper;
      if (!fixedHeaderWrapper && create) {
        fixedHeaderWrapper = $.xCreate({
          tagName: "div",
          contextKey: "fixedHeaderWrapper",
          "class": "fixed-header table-wrapper",
          content: {
            tagName: "table",
            contextKey: "fixedHeaderTable"
          }
        }, this._doms);
        this._dom.appendChild(fixedHeaderWrapper);
        this._doms.fakeThead = fakeThead = $.xCreate({
          tagName: "thead",
          content: {
            tagName: "tr"
          }
        });
        this._refreshFakeRow(fakeThead.firstChild);
        $fly(this._doms.tbody).before(fakeThead);
      }
      return fixedHeaderWrapper;
    };

    Table.prototype._getFixedFooter = function(create) {
      var fakeTfoot, fixedFooterWrapper;
      fixedFooterWrapper = this._doms.fixedFooterWrapper;
      if (!fixedFooterWrapper && create) {
        fixedFooterWrapper = $.xCreate({
          tagName: "div",
          contextKey: "fixedFooterWrapper",
          "class": "fixed-footer table-wrapper",
          content: {
            tagName: "table",
            contextKey: "fixedFooterTable"
          }
        }, this._doms);
        this._dom.appendChild(fixedFooterWrapper, this._doms);
        this._doms.fakeTfoot = fakeTfoot = $.xCreate({
          tagName: "tfoot",
          content: {
            tagName: "tr"
          }
        });
        this._refreshFakeRow(fakeTfoot.firstChild);
        $fly(this._doms.tbody).after(fakeTfoot);
      }
      return fixedFooterWrapper;
    };

    Table.prototype._refreshFixedColgroup = function(colgroup, fixedColgroup) {
      var col, fixedCol, nextCol, nextFixedCol;
      nextCol = colgroup.firstChild;
      nextFixedCol = fixedColgroup.firstChild;
      while (nextCol) {
        col = nextCol;
        nextCol = nextCol.nextSibling;
        fixedCol = nextFixedCol;
        if (!fixedCol) {
          fixedCol = document.createElement("col");
        } else {
          nextFixedCol = nextFixedCol.nextSibling;
        }
        fixedCol.width = col.width;
        fixedCol.valign = col.valign;
      }
      while (nextFixedCol) {
        fixedCol = nextFixedCol;
        nextFixedCol = nextFixedCol.nextSibling;
        fixedColgroup.removeChild(fixedCol);
      }
    };

    Table.prototype._setFixedHeaderSize = function() {
      var colgroup, fixedHeaderColgroup;
      colgroup = this._doms.colgroup;
      fixedHeaderColgroup = this._doms.fixedHeaderColgroup;
      if (!fixedHeaderColgroup) {
        this._doms.fixedHeaderColgroup = fixedHeaderColgroup = colgroup.cloneNode(true);
        this._doms.fixedHeaderTable.appendChild(fixedHeaderColgroup);
      } else {
        this._refreshFixedColgroup(colgroup, fixedHeaderColgroup);
      }
      $fly(this._doms.fakeThead.firstChild).height(this._doms.thead.offsetHeight);
    };

    Table.prototype._setFixedFooterSize = function() {
      var colgroup, fixedFooterColgroup;
      colgroup = this._doms.colgroup;
      fixedFooterColgroup = this._doms.fixedFooterColgroup;
      if (!fixedFooterColgroup) {
        this._doms.fixedFooterColgroup = fixedFooterColgroup = colgroup.cloneNode(true);
        this._doms.fixedFooterTable.appendChild(fixedFooterColgroup);
      } else {
        this._refreshFixedColgroup(colgroup, fixedFooterColgroup);
      }
      $fly(this._doms.fakeTfoot.firstChild).height(this._doms.tfoot.offsetHeight);
    };

    Table.prototype._refreshFixedHeader = function() {
      var fixedHeader, itemsWrapper, scrollTop, showFixedHeader;
      itemsWrapper = this._doms.itemsWrapper;
      scrollTop = itemsWrapper.scrollTop;
      showFixedHeader = scrollTop > 0;
      if (showFixedHeader === this._fixedHeaderVisible) {
        return;
      }
      this._fixedHeaderVisible = showFixedHeader;
      if (showFixedHeader) {
        fixedHeader = this._getFixedHeader(true);
        this._setFixedHeaderSize();
        $fly(this._doms.tbody).before(this._doms.fakeThead);
        this._doms.fixedHeaderTable.appendChild(this._doms.thead);
        $fly(fixedHeader).width(itemsWrapper.clientWidth).show();
      } else {
        fixedHeader = this._getFixedHeader();
        if (fixedHeader) {
          $fly(fixedHeader).hide();
          this._doms.fixedHeaderTable.appendChild(this._doms.fakeThead);
          $fly(this._doms.tbody).before(this._doms.thead);
        }
      }
    };

    Table.prototype._refreshFixedFooter = function(duration) {
      var $fixedFooter, fixedFooter, itemsWrapper, maxScrollTop, scrollTop, showFixedFooter;
      if (this._showFooterTimer) {
        clearInterval(this._showFooterTimer);
        delete this._showFooterTimer;
      }
      itemsWrapper = this._doms.itemsWrapper;
      scrollTop = itemsWrapper.scrollTop;
      maxScrollTop = itemsWrapper.scrollHeight - itemsWrapper.clientHeight;
      showFixedFooter = scrollTop < maxScrollTop;
      if (showFixedFooter === this._fixedFooterVisible) {
        return;
      }
      this._fixedFooterVisible = showFixedFooter;
      if (showFixedFooter) {
        fixedFooter = this._getFixedFooter(true);
        this._setFixedFooterSize();
        $fly(this._doms.tbody).after(this._doms.fakeTfoot);
        this._doms.fixedFooterTable.appendChild(this._doms.tfoot);
        $fixedFooter = $fly(fixedFooter).width(itemsWrapper.clientWidth);
        if (duration) {
          $fixedFooter.fadeIn(duration);
        } else {
          $fixedFooter.show();
        }
      } else {
        fixedFooter = this._getFixedFooter();
        if (fixedFooter) {
          $fly(fixedFooter).hide();
          this._doms.fixedFooterTable.appendChild(this._doms.fakeTfoot);
          $fly(this._doms.tbody).after(this._doms.tfoot);
        }
      }
    };

    Table.prototype._onItemsWrapperScroll = function() {
      if (this._showHeader) {
        this._refreshFixedHeader();
      }
      if (this._showFooter) {
        this._refreshFixedFooter();
      }
    };

    return Table;

  })(cola.AbstractTable);

  cola.registerWidget(cola.Table);

  _pagesItems = ["firstPage", "prevPage", "info", "nextPage", "lastPage"];

  _pageCodeMap = {
    "|<": "firstPage",
    "<": "prevPage",
    ">": "nextPage",
    ">|": "lastPage"
  };

  cola.Pager = (function(superClass) {
    extend(Pager, superClass);

    Pager.tagName = "c-pager";

    Pager.attributes = {
      bind: {
        setter: function(bindStr) {
          return this._bindSetter(bindStr);
        }
      }
    };

    Pager.prototype._getBindItems = function() {
      var ref;
      return (ref = this._getItems()) != null ? ref.items : void 0;
    };

    function Pager(config) {
      var _getPageCount, pager;
      this._pagerItemMap = {};
      pager = this;
      _getPageCount = function() {
        var data;
        data = pager._getBindItems();
        return parseInt((data.totalEntityCount + data.pageSize - 1) / data.pageSize);
      };
      this._pagerItemConfig = {
        firstPage: {
          icon: "large angle double left",
          click: function() {
            var ref;
            return (ref = pager._getBindItems()) != null ? ref.firstPage() : void 0;
          }
        },
        prevPage: {
          icon: "large angle left",
          click: function() {
            var data;
            data = pager._getBindItems();
            return data != null ? data.previousPage() : void 0;
          }
        },
        goto: {
          $type: "input",
          "class": "goto",
          inputType: "number",
          keyDown: function(self, arg) {
            var k;
            k = arg.keyCode;
            if (k === 190) {
              return event.preventDefault();
            }
          },
          change: function(self, arg) {
            var button, data, pageCount, pageNo, value;
            value = arg.value;
            if (value) {
              value = parseInt(value);
            }
            if (value === this._targetPageNo) {
              return;
            }
            data = pager._getBindItems();
            if (data) {
              pageNo = data.pageNo;
              pageCount = _getPageCount();
              if (value > pageCount || value < 1) {
                if (value > pageCount) {
                  value = pageCount;
                }
                if (value < 1) {
                  value = 1;
                }
                setTimeout(function() {
                  return self.get$Dom().find("input").val(value);
                }, 10);
              }
              button = self.get("actionButton");
              setTimeout(function() {
                return button.set("disabled", value === pageNo);
              }, 100);
              return pager._targetPageNo = value;
            }
          },
          actionButton: {
            $type: "Button",
            caption: "Go",
            click: function() {
              var data;
              if (pager._targetPageNo) {
                data = pager._getBindItems();
                return data != null ? data.gotoPage(pager._targetPageNo) : void 0;
              }
            }
          }
        },
        nextPage: {
          icon: "large angle right",
          click: function() {
            var data;
            data = pager._getBindItems();
            return data != null ? data.nextPage() : void 0;
          }
        },
        lastPage: {
          icon: "large angle double right",
          click: function() {
            var data;
            data = pager._getBindItems();
            return data != null ? data.lastPage() : void 0;
          }
        }
      };
      Pager.__super__.constructor.call(this, config);
    }

    Pager.prototype._parseDom = function(dom) {
      Pager.__super__._parseDom.call(this, dom);
      if (this._items) {
        if (this._items.length === 0) {
          return this.addItem("pages");
        }
      } else {
        this._items = [];
        return this.addItem("pages");
      }
    };

    Pager.prototype._parsePageItem = function(childNode, right) {
      var beforeChild, itemConfig, itemDom, l, len1, menuItem, pageCode, pageItem, pageItemKey, propName, results;
      pageCode = $fly(childNode).attr("page-code");
      if (!pageCode) {
        return;
      }
      if (pageCode === "pages") {
        results = [];
        for (l = 0, len1 = _pagesItems.length; l < len1; l++) {
          pageItemKey = _pagesItems[l];
          pageItem = this._pagerItemConfig[pageItemKey];
          if (pageItemKey === "firstPage") {
            pageItem.dom = childNode;
            menuItem = new cola.menu.MenuItem(pageItem);
            if (right) {
              this.addRightItem(menuItem);
            } else {
              this.addItem(menuItem);
            }
            beforeChild = childNode;
          } else {
            if (pageItemKey === "info") {
              menuItem = new cola.menu.MenuItem();
            } else {
              menuItem = new cola.menu.MenuItem(pageItem);
            }
            itemDom = menuItem.getDom();
            $fly(beforeChild).after(itemDom);
            itemDom._eachIgnore = true;
            if (right) {
              this.addRightItem(menuItem);
            } else {
              this.addItem(menuItem);
            }
            beforeChild = itemDom;
          }
          results.push(this._pagerItemMap[pageItemKey] = menuItem);
        }
        return results;
      } else {
        propName = _pageCodeMap[pageCode];
        if (propName) {
          itemConfig = this._pagerItemConfig[propName];
          itemConfig.dom = childNode;
          if (cola.util.hasContent(childNode)) {
            delete itemConfig["icon"];
          }
          menuItem = new cola.menu.MenuItem(itemConfig);
          if (right) {
            this.addRightItem(menuItem);
          } else {
            this.addItem(menuItem);
          }
        } else if (pageCode === "goto") {
          propName = "goto";
          itemConfig = {
            dom: childNode,
            control: this._pagerItemConfig[pageCode]
          };
          menuItem = new cola.menu.ControlMenuItem(itemConfig);
          if (right) {
            this.addRightItem(menuItem);
          } else {
            this.addItem(menuItem);
          }
        } else if (pageCode === "info") {
          propName = "info";
          itemConfig = {
            dom: childNode
          };
          menuItem = new cola.menu.MenuItem(itemConfig);
          if (right) {
            this.addRightItem(menuItem);
          } else {
            this.addItem(menuItem);
          }
        }
        return this._pagerItemMap[propName] = menuItem;
      }
    };

    Pager.prototype._parseItems = function(node) {
      var childNode, menuItem, pageCode, parseRightMenu, results;
      parseRightMenu = (function(_this) {
        return function(node) {
          var childNode, menuItem, pageCode;
          childNode = node.firstChild;
          if (_this._rightItems == null) {
            _this._rightItems = [];
          }
          while (childNode) {
            if (childNode.nodeType === 1) {
              menuItem = cola.widget(childNode);
              if (menuItem) {
                _this.addRightItem(menuItem);
              } else if (cola.util.hasClass(childNode, "item")) {
                pageCode = $fly(childNode).attr("page-code");
                if (pageCode) {
                  _this._parsePageItem(childNode, true);
                } else {
                  menuItem = new cola.menu.MenuItem({
                    dom: childNode
                  });
                  _this.addRightItem(menuItem);
                }
              }
            }
            childNode = childNode.nextSibling;
          }
        };
      })(this);
      childNode = node.firstChild;
      results = [];
      while (childNode) {
        if (childNode._eachIgnore) {
          childNode = childNode.nextSibling;
          continue;
        }
        if (childNode.nodeType === 1) {
          menuItem = cola.widget(childNode);
          if (menuItem) {
            this.addItem(menuItem);
          } else if (!this._rightMenuDom && cola.util.hasClass(childNode, "right menu")) {
            this._rightMenuDom = childNode;
            parseRightMenu(childNode);
          } else if (cola.util.hasClass(childNode, "item")) {
            pageCode = $fly(childNode).attr("page-code");
            if (pageCode) {
              this._parsePageItem(childNode);
            } else {
              menuItem = new cola.menu.MenuItem({
                dom: childNode
              });
              this.addItem(menuItem);
            }
          }
        }
        results.push(childNode = childNode.nextSibling);
      }
      return results;
    };

    Pager.prototype._createItem = function(config, floatRight) {
      var itemConfig, l, len1, menuItem, pageItem, pageItemKey, propName;
      if (typeof config === "string") {
        if (config === "pages") {
          for (l = 0, len1 = _pagesItems.length; l < len1; l++) {
            pageItemKey = _pagesItems[l];
            pageItem = this._pagerItemConfig[pageItemKey];
            if (pageItemKey === "info") {
              menuItem = new cola.menu.ControlMenuItem();
            } else {
              menuItem = new cola.menu.MenuItem(pageItem);
            }
            if (floatRight) {
              this.addRightItem(menuItem);
            } else {
              this.addItem(menuItem);
            }
            this._pagerItemMap[pageItemKey] = menuItem;
          }
        } else {
          propName = _pageCodeMap[config];
          if (propName) {
            itemConfig = this._pagerItemConfig[propName];
            menuItem = new cola.menu.MenuItem(itemConfig);
          } else if (config === "goto") {
            propName = config;
            itemConfig = {
              control: this._pagerItemConfig[config]
            };
            menuItem = new cola.menu.ControlMenuItem(itemConfig);
          } else if (config === "info") {
            propName = config;
            menuItem = new cola.menu.MenuItem();
          }
          if (floatRight) {
            this.addRightItem(menuItem);
          } else {
            this.addItem(menuItem);
          }
          this._pagerItemMap[propName] = menuItem;
        }
        return;
      }
      menuItem = null;
      if (config.constructor === Object.prototype.constructor) {
        if (config.$type) {
          if (config.$type === "dropdown") {
            menuItem = new cola.menu.DropdownMenuItem(config);
          } else if (config.$type === "headerItem") {
            menuItem = new cola.menu.HeaderMenuItem(config);
          } else {
            menuItem = new cola.menu.ControlMenuItem({
              control: config
            });
          }
        } else {
          menuItem = new cola.menu.MenuItem(config);
        }
      } else if (config instanceof cola.menu.AbstractMenuItem) {
        menuItem = config;
      }
      return menuItem;
    };

    Pager.prototype._initDom = function(dom) {
      Pager.__super__._initDom.call(this, dom);
      return this.pagerItemsRefresh();
    };

    Pager.prototype.pagerItemsRefresh = function() {
      var data, gotoInput, hasNext, hasPrev, infoItem, infoItemDom, pageCount, pageNo, pager, ref, ref1, ref2, ref3, ref4, ref5;
      pager = this;
      data = pager._getBindItems();
      hasPrev = false;
      hasNext = false;
      pageNo = 0;
      pageCount = 0;
      if (data) {
        pageCount = parseInt((data.totalEntityCount + data.pageSize - 1) / data.pageSize);
        hasPrev = data.pageNo > 1;
        hasNext = pageCount > data.pageNo;
        pageNo = data.pageNo;
        pageCount = data.pageCount;
      }
      this._pageNo = pageNo;
      if ((ref = pager._pagerItemMap["firstPage"]) != null) {
        ref.get$Dom().toggleClass("disabled", !hasPrev);
      }
      if ((ref1 = pager._pagerItemMap["prevPage"]) != null) {
        ref1.get$Dom().toggleClass("disabled", !hasPrev);
      }
      if ((ref2 = pager._pagerItemMap["nextPage"]) != null) {
        ref2.get$Dom().toggleClass("disabled", !hasNext);
      }
      if ((ref3 = pager._pagerItemMap["lastPage"]) != null) {
        ref3.get$Dom().toggleClass("disabled", !hasNext);
      }
      infoItem = pager._pagerItemMap["info"];
      if (infoItem) {
        infoItemDom = infoItem.nodeType === 1 ? infoItem : infoItem.getDom();
        $(infoItemDom).text("第" + pageNo + "页/共" + pageCount + "页");
      }
      gotoInput = (ref4 = pager._pagerItemMap["goto"]) != null ? ref4.get("control") : void 0;
      if (gotoInput) {
        return (ref5 = cola.widget(gotoInput)) != null ? ref5.set("value", pageNo) : void 0;
      }
    };

    Pager.prototype._onItemsRefresh = function() {
      return this.pagerItemsRefresh();
    };

    Pager.prototype._onItemRefresh = function(arg) {};

    Pager.prototype._onItemInsert = function(arg) {};

    Pager.prototype._onItemRemove = function(arg) {};

    Pager.prototype._onItemsLoadingStart = function(arg) {};

    Pager.prototype._onItemsLoadingEnd = function(arg) {};

    Pager.prototype._onCurrentItemChange = function(arg) {};

    return Pager;

  })(cola.Menu);

  cola.Element.mixin(cola.Pager, cola.DataItemsWidgetMixin);

  cola.registerWidget(cola.Pager);

  cola.TimeLine = (function(superClass) {
    extend(TimeLine, superClass);

    function TimeLine() {
      return TimeLine.__super__.constructor.apply(this, arguments);
    }

    TimeLine.tagName = "c-timeLine";

    TimeLine.CLASS_NAME = "time-line";

    TimeLine.attributes = {
      bind: {
        refreshItems: true,
        setter: function(bindStr) {
          return this._bindSetter(bindStr);
        }
      }
    };

    TimeLine.TEMPLATES = {
      "default": {
        tagName: "li"
      },
      "content": {
        tagName: "div",
        "c-bind": "$default.content"
      },
      "icon": {
        tagName: "i",
        "c-class": "'icon '+$default.icon"
      },
      "label": {
        tagName: "div",
        "c-bind": "$default.label"
      }
    };

    TimeLine.prototype._createNewItem = function(itemType, item) {
      var container, contentDom, itemDom, l, len1, name, ref, template;
      template = this._getTemplate(itemType);
      itemDom = this._cloneTemplate(template);
      $fly(itemDom).addClass("item " + itemType);
      itemDom._itemType = itemType;
      ref = ["content", "icon", "label"];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        name = ref[l];
        template = this._getTemplate(name);
        contentDom = this._cloneTemplate(template, true);
        container = $.xCreate({
          tagName: "div",
          "class": name
        });
        container.appendChild(contentDom);
        itemDom.appendChild(container);
      }
      if (!this._currentItem) {
        this._setCurrentNode(item);
      }
      return itemDom;
    };

    return TimeLine;

  })(cola.AbstractList);

  cola.registerWidget(cola.TimeLine);

}).call(this);
